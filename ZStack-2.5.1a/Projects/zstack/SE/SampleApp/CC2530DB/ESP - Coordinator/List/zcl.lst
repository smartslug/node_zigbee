###############################################################################
#                                                                             #
# IAR C/C++ Compiler V8.10.3.10338/W32 for 8051         05/Aug/2016  10:44:39 #
# Copyright 2004-2011 IAR Systems AB.                                         #
#                                                                             #
#    Core               =  plain                                              #
#    Code model         =  banked                                             #
#    Data model         =  large                                              #
#    Calling convention =  xdata reentrant                                    #
#    Constant location  =  data_rom                                           #
#    Dptr setup         =  1,16                                               #
#    Source file        =  G:\»ªÖÚÎÞÏß\12.´®¿ÚÍ¸´«Ö®ÎÞÏßQQ\ZStack-2.5.1a\Comp #
#                          onents\stack\zcl\zcl.c                             #
#    Command line       =  -f G:\»ªÖÚÎÞÏß\12.´®¿ÚÍ¸´«Ö®ÎÞÏßQQ\ZStack-2.5.1a\P #
#                          rojects\zstack\SE\SampleApp\CC2530DB\..\..\..\Tool #
#                          s\CC2530DB\f8wCoord.cfg (-DCPU32MHZ                #
#                          -DROOT=__near_func -DMAC_CFG_APP_PENDING_QUEUE=TRU #
#                          E -DMAC_CFG_TX_DATA_MAX=5 -DMAC_CFG_TX_MAX=8       #
#                          -DMAC_CFG_RX_MAX=5 -DZDO_COORDINATOR -DRTR_NWK)    #
#                          -f G:\»ªÖÚÎÞÏß\12.´®¿ÚÍ¸´«Ö®ÎÞÏßQQ\ZStack-2.5.1a\P #
#                          rojects\zstack\SE\SampleApp\CC2530DB\..\..\..\Tool #
#                          s\CC2530DB\f8wConfig.cfg (-DZIGBEEPRO -DSECURE=0   #
#                          -DZG_SECURE_DYNAMIC=0 -DREFLECTOR                  #
#                          -DDEFAULT_CHANLIST=0x02000000                      #
#                          -DZDAPP_CONFIG_PAN_ID=0x1688                       #
#                          -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MA #
#                          SK=0x007F -DBEACON_REQUEST_DELAY=100               #
#                          -DBEACON_REQ_DELAY_MASK=0x00FF                     #
#                          -DLINK_STATUS_JITTER_MASK=0x007F                   #
#                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_PO #
#                          LLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7             #
#                          -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3    #
#                          -DNWK_MAX_DATA_RETRIES=2                           #
#                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9         #
#                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40           #
#                          -DNWK_MAX_BINDING_ENTRIES=4                        #
#                          -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01,  #
#                          0x03, 0x05, 0x07, 0x09, 0x0B, 0x0D, 0x0F, 0x00,    #
#                          0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C, 0x0D}"         #
#                          -DMAC_MAX_FRAME_SIZE=116                           #
#                          -DZDNWKMGR_MIN_TRANSMISSIONS=20 "-DCONST=const     #
#                          __code" -DGENERIC=__generic                        #
#                          -DRFD_RCVC_ALWAYS_ON=FALSE -DPOLL_RATE=1000        #
#                          -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100    #
#                          -DREJOIN_POLL_RATE=440) -f                         #
#                          G:\»ªÖÚÎÞÏß\12.´®¿ÚÍ¸´«Ö®ÎÞÏßQQ\ZStack-2.5.1a\Proj #
#                          ects\zstack\SE\SampleApp\CC2530DB\..\..\..\Tools\C #
#                          C2530DB\f8wZCL.cfg (-DZCL_READ -DZCL_WRITE         #
#                          -DZCL_BASIC -DZCL_IDENTIFY -DZCL_ON_OFF            #
#                          -DZCL_KEY_ESTABLISH -DZCL_KEY_ESTABLISHMENT_KEY_GE #
#                          NERATE_TIMEOUT=4 -DZCL_KEY_ESTABLISHMENT_MAC_GENER #
#                          ATE_TIMEOUT=10 -DZCL_KEY_ESTABLISHMENT_EKEY_GENERA #
#                          TE_TIMEOUT=10 -DZCL_LOAD_CONTROL                   #
#                          -DZCL_SIMPLE_METERING -DZCL_PRICING -DZCL_MESSAGE  #
#                          -DZCL_TUNNELING -DZCL_TOU) -DZCL_DEVICE_MGMT       #
#                          G:\»ªÖÚÎÞÏß\12.´®¿ÚÍ¸´«Ö®ÎÞÏßQQ\ZStack-2.5.1a\Comp #
#                          onents\stack\zcl\zcl.c -D TC_LINKKEY_JOIN -D       #
#                          ZTOOL_P1 -D MT_TASK -D MT_APP_FUNC -D MT_SYS_FUNC  #
#                          -D LCD_SUPPORTED -D INT_HEAP_LEN=2450 -D NV_INIT   #
#                          -D xNV_RESTORE -D ZCL_REPORT -D INTER_PAN -D       #
#                          ZDSECMGR_TC_DEVICE_MAX=16 -D TEST_CERT_DATA -lC    #
#                          "G:\»ªÖÚÎÞÏß\12.´®¿ÚÍ¸´«Ö®ÎÞÏßQQ\ZStack-2.5.1a\Pro #
#                          jects\zstack\SE\SampleApp\CC2530DB\ESP -           #
#                          Coordinator\List\" -lA "G:\»ªÖÚÎÞÏß\12.´®¿ÚÍ¸´«Ö®Î #
#                          ÞÏßQQ\ZStack-2.5.1a\Projects\zstack\SE\SampleApp\C #
#                          C2530DB\ESP - Coordinator\List\" --diag_suppress   #
#                          Pe001,Pa010 -o "G:\»ªÖÚÎÞÏß\12.´®¿ÚÍ¸´«Ö®ÎÞÏßQQ\ZS #
#                          tack-2.5.1a\Projects\zstack\SE\SampleApp\CC2530DB\ #
#                          ESP - Coordinator\Obj\" -e --no_code_motion        #
#                          --debug --core=plain --dptr=16,1                   #
#                          --data_model=large --code_model=banked             #
#                          --calling_convention=xdata_reentrant               #
#                          --place_constants=data_rom --nr_virtual_regs 16    #
#                          -I G:\»ªÖÚÎÞÏß\12.´®¿ÚÍ¸´«Ö®ÎÞÏßQQ\ZStack-2.5.1a\P #
#                          rojects\zstack\SE\SampleApp\CC2530DB\ -I           #
#                          G:\»ªÖÚÎÞÏß\12.´®¿ÚÍ¸´«Ö®ÎÞÏßQQ\ZStack-2.5.1a\Proj #
#                          ects\zstack\SE\SampleApp\CC2530DB\..\Source\ -I    #
#                          G:\»ªÖÚÎÞÏß\12.´®¿ÚÍ¸´«Ö®ÎÞÏßQQ\ZStack-2.5.1a\Proj #
#                          ects\zstack\SE\SampleApp\CC2530DB\..\..\Source\    #
#                          -I G:\»ªÖÚÎÞÏß\12.´®¿ÚÍ¸´«Ö®ÎÞÏßQQ\ZStack-2.5.1a\P #
#                          rojects\zstack\SE\SampleApp\CC2530DB\..\..\..\ZMai #
#                          n\TI2530DB\ -I G:\»ªÖÚÎÞÏß\12.´®¿ÚÍ¸´«Ö®ÎÞÏßQQ\ZSt #
#                          ack-2.5.1a\Projects\zstack\SE\SampleApp\CC2530DB\. #
#                          .\..\..\..\..\Components\hal\include\ -I           #
#                          G:\»ªÖÚÎÞÏß\12.´®¿ÚÍ¸´«Ö®ÎÞÏßQQ\ZStack-2.5.1a\Proj #
#                          ects\zstack\SE\SampleApp\CC2530DB\..\..\..\..\..\C #
#                          omponents\hal\target\CC2530EB\ -I                  #
#                          G:\»ªÖÚÎÞÏß\12.´®¿ÚÍ¸´«Ö®ÎÞÏßQQ\ZStack-2.5.1a\Proj #
#                          ects\zstack\SE\SampleApp\CC2530DB\..\..\..\..\..\C #
#                          omponents\mac\include\ -I                          #
#                          G:\»ªÖÚÎÞÏß\12.´®¿ÚÍ¸´«Ö®ÎÞÏßQQ\ZStack-2.5.1a\Proj #
#                          ects\zstack\SE\SampleApp\CC2530DB\..\..\..\..\..\C #
#                          omponents\mac\high_level\ -I                       #
#                          G:\»ªÖÚÎÞÏß\12.´®¿ÚÍ¸´«Ö®ÎÞÏßQQ\ZStack-2.5.1a\Proj #
#                          ects\zstack\SE\SampleApp\CC2530DB\..\..\..\..\..\C #
#                          omponents\mac\low_level\srf04\ -I                  #
#                          G:\»ªÖÚÎÞÏß\12.´®¿ÚÍ¸´«Ö®ÎÞÏßQQ\ZStack-2.5.1a\Proj #
#                          ects\zstack\SE\SampleApp\CC2530DB\..\..\..\..\..\C #
#                          omponents\mac\low_level\srf04\single_chip\ -I      #
#                          G:\»ªÖÚÎÞÏß\12.´®¿ÚÍ¸´«Ö®ÎÞÏßQQ\ZStack-2.5.1a\Proj #
#                          ects\zstack\SE\SampleApp\CC2530DB\..\..\..\..\..\C #
#                          omponents\mt\ -I G:\»ªÖÚÎÞÏß\12.´®¿ÚÍ¸´«Ö®ÎÞÏßQQ\Z #
#                          Stack-2.5.1a\Projects\zstack\SE\SampleApp\CC2530DB #
#                          \..\..\..\..\..\Components\osal\include\ -I        #
#                          G:\»ªÖÚÎÞÏß\12.´®¿ÚÍ¸´«Ö®ÎÞÏßQQ\ZStack-2.5.1a\Proj #
#                          ects\zstack\SE\SampleApp\CC2530DB\..\..\..\..\..\C #
#                          omponents\services\saddr\ -I                       #
#                          G:\»ªÖÚÎÞÏß\12.´®¿ÚÍ¸´«Ö®ÎÞÏßQQ\ZStack-2.5.1a\Proj #
#                          ects\zstack\SE\SampleApp\CC2530DB\..\..\..\..\..\C #
#                          omponents\services\sdata\ -I                       #
#                          G:\»ªÖÚÎÞÏß\12.´®¿ÚÍ¸´«Ö®ÎÞÏßQQ\ZStack-2.5.1a\Proj #
#                          ects\zstack\SE\SampleApp\CC2530DB\..\..\..\..\..\C #
#                          omponents\stack\af\ -I G:\»ªÖÚÎÞÏß\12.´®¿ÚÍ¸´«Ö®ÎÞ #
#                          ÏßQQ\ZStack-2.5.1a\Projects\zstack\SE\SampleApp\CC #
#                          2530DB\..\..\..\..\..\Components\stack\nwk\ -I     #
#                          G:\»ªÖÚÎÞÏß\12.´®¿ÚÍ¸´«Ö®ÎÞÏßQQ\ZStack-2.5.1a\Proj #
#                          ects\zstack\SE\SampleApp\CC2530DB\..\..\..\..\..\C #
#                          omponents\stack\sapi\ -I                           #
#                          G:\»ªÖÚÎÞÏß\12.´®¿ÚÍ¸´«Ö®ÎÞÏßQQ\ZStack-2.5.1a\Proj #
#                          ects\zstack\SE\SampleApp\CC2530DB\..\..\..\..\..\C #
#                          omponents\stack\sec\ -I G:\»ªÖÚÎÞÏß\12.´®¿ÚÍ¸´«Ö®Î #
#                          ÞÏßQQ\ZStack-2.5.1a\Projects\zstack\SE\SampleApp\C #
#                          C2530DB\..\..\..\..\..\Components\stack\sys\ -I    #
#                          G:\»ªÖÚÎÞÏß\12.´®¿ÚÍ¸´«Ö®ÎÞÏßQQ\ZStack-2.5.1a\Proj #
#                          ects\zstack\SE\SampleApp\CC2530DB\..\..\..\..\..\C #
#                          omponents\stack\zcl\ -I G:\»ªÖÚÎÞÏß\12.´®¿ÚÍ¸´«Ö®Î #
#                          ÞÏßQQ\ZStack-2.5.1a\Projects\zstack\SE\SampleApp\C #
#                          C2530DB\..\..\..\..\..\Components\stack\zdo\ -I    #
#                          G:\»ªÖÚÎÞÏß\12.´®¿ÚÍ¸´«Ö®ÎÞÏßQQ\ZStack-2.5.1a\Proj #
#                          ects\zstack\SE\SampleApp\CC2530DB\..\..\..\..\..\C #
#                          omponents\zmac\ -I G:\»ªÖÚÎÞÏß\12.´®¿ÚÍ¸´«Ö®ÎÞÏßQQ #
#                          \ZStack-2.5.1a\Projects\zstack\SE\SampleApp\CC2530 #
#                          DB\..\..\..\..\..\Components\zmac\f8w\ -Ohz        #
#                          --require_prototypes                               #
#    List file          =  G:\»ªÖÚÎÞÏß\12.´®¿ÚÍ¸´«Ö®ÎÞÏßQQ\ZStack-2.5.1a\Proj #
#                          ects\zstack\SE\SampleApp\CC2530DB\ESP -            #
#                          Coordinator\List\zcl.lst                           #
#    Object file        =  G:\»ªÖÚÎÞÏß\12.´®¿ÚÍ¸´«Ö®ÎÞÏßQQ\ZStack-2.5.1a\Proj #
#                          ects\zstack\SE\SampleApp\CC2530DB\ESP -            #
#                          Coordinator\Obj\zcl.r51                            #
#                                                                             #
#                                                                             #
###############################################################################

G:\»ªÖÚÎÞÏß\12.´®¿ÚÍ¸´«Ö®ÎÞÏßQQ\ZStack-2.5.1a\Components\stack\zcl\zcl.c
      1          /**************************************************************************************************
      2            Filename:       zcl.c
      3            Revised:        $Date: 2012-01-30 10:40:08 -0800 (Mon, 30 Jan 2012) $
      4            Revision:       $Revision: 29096 $
      5          
      6            Description:    This file contains the Zigbee Cluster Library Foundation functions.
      7          
      8          
      9            Copyright 2006-2012 Texas Instruments Incorporated. All rights reserved.
     10          
     11            IMPORTANT: Your use of this Software is limited to those specific rights
     12            granted under the terms of a software license agreement between the user
     13            who downloaded the software, his/her employer (which must be your employer)
     14            and Texas Instruments Incorporated (the "License").  You may not use this
     15            Software unless you agree to abide by the terms of the License. The License
     16            limits your use, and you acknowledge, that the Software may not be modified,
     17            copied or distributed unless embedded on a Texas Instruments microcontroller
     18            or used solely and exclusively in conjunction with a Texas Instruments radio
     19            frequency transceiver, which is integrated into your product.  Other than for
     20            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     21            works of, modify, distribute, perform, display or sell this Software and/or
     22            its documentation for any purpose.
     23          
     24            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     25            PROVIDED AS IS WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     26            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     27            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     28            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     29            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     30            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     31            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     32            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     33            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     34            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     35          
     36            Should you have any questions regarding your right to use this Software,
     37            contact Texas Instruments Incorporated at www.TI.com.
     38          **************************************************************************************************/
     39          
     40          /*********************************************************************
     41           * INCLUDES
     42           */
     43          #include "ZComDef.h"
     44          #include "OSAL.h"
     45          #include "OSAL_Tasks.h"
     46          #include "AF.h"
     47          #include "ZDConfig.h"
     48          
     49          #include "zcl.h"
     50          #include "zcl_general.h"
     51          
     52          #if defined ( INTER_PAN )
     53            #include "stub_aps.h"
     54          #endif
     55          
     56          /*********************************************************************
     57           * MACROS
     58           */
     59          /*** Frame Control ***/
     60          #define zcl_FCType( a )               ( (a) & ZCL_FRAME_CONTROL_TYPE )
     61          #define zcl_FCManuSpecific( a )       ( (a) & ZCL_FRAME_CONTROL_MANU_SPECIFIC )
     62          #define zcl_FCDirection( a )          ( (a) & ZCL_FRAME_CONTROL_DIRECTION )
     63          #define zcl_FCDisableDefaultRsp( a )  ( (a) & ZCL_FRAME_CONTROL_DISABLE_DEFAULT_RSP )
     64          
     65          /*** Attribute Access Control ***/
     66          #define zcl_AccessCtrlRead( a )       ( (a) & ACCESS_CONTROL_READ )
     67          #define zcl_AccessCtrlWrite( a )      ( (a) & ACCESS_CONTROL_WRITE )
     68          #define zcl_AccessCtrlCmd( a )        ( (a) & ACCESS_CONTROL_CMD )
     69          #define zcl_AccessCtrlAuthRead( a )   ( (a) & ACCESS_CONTROL_AUTH_READ )
     70          #define zcl_AccessCtrlAuthWrite( a )  ( (a) & ACCESS_CONTROL_AUTH_WRITE )
     71          
     72          #define zclParseCmd( a, b )           zclCmdTable[(a)].pfnParseInProfile( (b) )
     73          #define zclProcessCmd( a, b )         zclCmdTable[(a)].pfnProcessInProfile( (b) )
     74          
     75          #define zcl_DefaultRspCmd( zclHdr )   ( zcl_ProfileCmd( (zclHdr).fc.type )     && \
     76                                                  (zclHdr).fc.manuSpecific == 0          && \
     77                                                  (zclHdr).commandID == ZCL_CMD_DEFAULT_RSP )
     78          
     79          // Commands that have corresponding responses
     80          #define CMD_HAS_RSP( cmd )            ( (cmd) == ZCL_CMD_READ            || \
     81                                                  (cmd) == ZCL_CMD_WRITE           || \
     82                                                  (cmd) == ZCL_CMD_WRITE_UNDIVIDED || \
     83                                                  (cmd) == ZCL_CMD_CONFIG_REPORT   || \
     84                                                  (cmd) == ZCL_CMD_READ_REPORT_CFG || \
     85                                                  (cmd) == ZCL_CMD_DISCOVER        || \
     86                                                  (cmd) == ZCL_CMD_DEFAULT_RSP ) // exception
     87          
     88          /*********************************************************************
     89           * CONSTANTS
     90           */
     91          
     92          /*********************************************************************
     93           * TYPEDEFS
     94           */
     95          typedef struct zclLibPlugin
     96          {
     97            struct zclLibPlugin *next;
     98            uint16              startClusterID;    // starting cluster ID
     99            uint16              endClusterID;      // ending cluster ID
    100            zclInHdlr_t         pfnIncomingHdlr;    // function to handle incoming message
    101          } zclLibPlugin_t;
    102          
    103          // Attribute record list item
    104          typedef struct zclAttrRecsList
    105          {
    106            struct zclAttrRecsList *next;
    107            uint8                  endpoint;      // Used to link it into the endpoint descriptor
    108            zclReadWriteCB_t       pfnReadWriteCB;// Read or Write attribute value callback function
    109            zclAuthorizeCB_t       pfnAuthorizeCB;// Authorize Read or Write operation
    110            uint8                  numAttributes; // Number of the following records
    111            CONST zclAttrRec_t     *attrs;        // attribute records
    112          } zclAttrRecsList;
    113          
    114          // Cluster option list item
    115          typedef struct zclClusterOptionList
    116          {
    117            struct zclClusterOptionList *next;
    118            uint8                       endpoint;   // Used to link it into the endpoint descriptor
    119            uint8                       numOptions; // Number of the following records
    120            zclOptionRec_t              *options;   // option records
    121          } zclClusterOptionList;
    122          
    123          typedef void *(*zclParseInProfileCmd_t)( zclParseCmd_t *pCmd );
    124          typedef uint8 (*zclProcessInProfileCmd_t)( zclIncoming_t *pInMsg );
    125          
    126          typedef struct
    127          {
    128            zclParseInProfileCmd_t   pfnParseInProfile;
    129            zclProcessInProfileCmd_t pfnProcessInProfile;
    130          } zclCmdItems_t;
    131          
    132          
    133          /*********************************************************************
    134           * GLOBAL VARIABLES
    135           */

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    136          uint8 zcl_TaskID;
   \                     zcl_TaskID:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    137          
    138          // The task Id of the Application where the unprocessed Foundation
    139          // Command/Response messages will be sent to.

   \                                 In  segment XDATA_I, align 1, keep-with-next
    140          uint8 zcl_RegisteredMsgTaskID = TASK_NO_TASK;
   \                     zcl_RegisteredMsgTaskID:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for zcl_RegisteredMsgTaskID>`
   \   000001                REQUIRE __INIT_XDATA_I
    141          
    142          // The Application should register its attribute data validation function

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    143          zclValidateAttrData_t zcl_ValidateAttrDataCB = NULL;
   \                     zcl_ValidateAttrDataCB:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z
    144          
    145          // ZCL Sequence number

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    146          uint8 zcl_SeqNum = 0x00;
   \                     zcl_SeqNum:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    147          
    148          /*********************************************************************
    149           * EXTERNAL VARIABLES
    150           */
    151          
    152          /*********************************************************************
    153           * EXTERNAL FUNCTIONS
    154           */
    155          
    156          /*********************************************************************
    157           * LOCAL VARIABLES
    158           */

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    159          static zclLibPlugin_t *plugins;
   \                     plugins:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    160          static zclAttrRecsList *attrList;
   \                     attrList:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    161          static zclClusterOptionList *clusterOptionList;
   \                     clusterOptionList:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    162          static uint8 zcl_TransID = 0;  // This is the unique message ID (counter)
   \                     zcl_TransID:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    163          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    164          static afIncomingMSGPacket_t *rawAFMsg = NULL;
   \                     rawAFMsg:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z
    165          
    166          /*********************************************************************
    167           * LOCAL FUNCTIONS
    168           */
    169          void zclProcessMessageMSG( afIncomingMSGPacket_t *pkt );  // Not static for ZNP build.
    170          static uint8 *zclBuildHdr( zclFrameHdr_t *hdr, uint8 *pData );
    171          static uint8 zclCalcHdrSize( zclFrameHdr_t *hdr );
    172          static zclLibPlugin_t *zclFindPlugin( uint16 clusterID, uint16 profileID );
    173          static zclAttrRecsList *zclFindAttrRecsList( uint8 endpoint );
    174          static zclOptionRec_t *zclFindClusterOption( uint8 endpoint, uint16 clusterID );
    175          static uint8 zclGetClusterOption( uint8 endpoint, uint16 clusterID );
    176          static void zclSetSecurityOption( uint8 endpoint, uint16 clusterID, uint8 enable );
    177          
    178          static uint8 zcl_DeviceOperational( uint8 srcEP, uint16 clusterID, uint8 frameType, uint8 cmd, uint16 profileID );
    179          
    180          #if defined ( ZCL_READ ) || defined ( ZCL_WRITE )
    181          static zclReadWriteCB_t zclGetReadWriteCB( uint8 endpoint );
    182          static zclAuthorizeCB_t zclGetAuthorizeCB( uint8 endpoint );
    183          #endif // ZCL_READ || ZCL_WRITE
    184          
    185          #ifdef ZCL_READ
    186          static uint16 zclGetAttrDataLengthUsingCB( uint8 endpoint, uint16 clusterID, uint16 attrId );
    187          static ZStatus_t zclReadAttrDataUsingCB( uint8 endpoint, uint16 clusterId, uint16 attrId,
    188                                                   uint8 *pAttrData, uint16 *pDataLen );
    189          static ZStatus_t zclAuthorizeRead( uint8 endpoint, afAddrType_t *srcAddr, zclAttrRec_t *pAttr );
    190          static void *zclParseInReadRspCmd( zclParseCmd_t *pCmd );
    191          static uint8 zclProcessInReadCmd( zclIncoming_t *pInMsg );
    192          #endif // ZCL_READ
    193          
    194          #ifdef ZCL_WRITE
    195          static ZStatus_t zclWriteAttrData( uint8 endpoint, afAddrType_t *srcAddr,
    196                                             zclAttrRec_t *pAttr, zclWriteRec_t *pWriteRec );
    197          static ZStatus_t zclWriteAttrDataUsingCB( uint8 endpoint, afAddrType_t *srcAddr,
    198                                                    zclAttrRec_t *pAttr, uint8 *pAttrData );
    199          static ZStatus_t zclAuthorizeWrite( uint8 endpoint, afAddrType_t *srcAddr, zclAttrRec_t *pAttr );
    200          static void *zclParseInWriteRspCmd( zclParseCmd_t *pCmd );
    201          static uint8 zclProcessInWriteCmd( zclIncoming_t *pInMsg );
    202          static uint8 zclProcessInWriteUndividedCmd( zclIncoming_t *pInMsg );
    203          #endif // ZCL_WRITE
    204          
    205          #ifdef ZCL_REPORT
    206          static void *zclParseInConfigReportRspCmd( zclParseCmd_t *pCmd );
    207          static void *zclParseInReadReportCfgRspCmd( zclParseCmd_t *pCmd );
    208          #endif // ZCL_REPORT
    209          
    210          static void *zclParseInDefaultRspCmd( zclParseCmd_t *pCmd );
    211          
    212          #ifdef ZCL_DISCOVER
    213          static uint8 zclFindNextAttrRec( uint8 endpoint, uint16 clusterID, uint16 *attrId, zclAttrRec_t *pAttr );
    214          static void *zclParseInDiscRspCmd( zclParseCmd_t *pCmd );
    215          static uint8 zclProcessInDiscCmd( zclIncoming_t *pInMsg );
    216          #endif // ZCL_DISCOVER
    217          
    218          static uint8 zclSendMsg( zclIncoming_t *pInMsg );
    219          
    220          /*********************************************************************
    221           * Parse Profile Command Function Table
    222           */

   \                                 In  segment CODE_C, align 1
    223          static CONST zclCmdItems_t zclCmdTable[] =
   \                     zclCmdTable:
   \   000000   ....         DW ??zclParseInReadCmd?relay
   \   000002   ....         DW ??zclProcessInReadCmd?relay
   \   000004   ....         DW ??zclParseInReadRspCmd?relay
   \   000006   ....         DW ??zclSendMsg?relay
   \   000008   ....         DW ??zclParseInWriteCmd?relay
   \   00000A   ....         DW ??zclProcessInWriteCmd?relay
   \   00000C   ....         DW ??zclParseInWriteCmd?relay
   \   00000E   ....         DW ??zclProcessInWriteUndividedCmd?relay
   \   000010   ....         DW ??zclParseInWriteRspCmd?relay
   \   000012   ....         DW ??zclSendMsg?relay
   \   000014   ....         DW ??zclParseInWriteCmd?relay
   \   000016   ....         DW ??zclProcessInWriteCmd?relay
   \   000018   ....         DW ??zclParseInConfigReportCmd?relay
   \   00001A   ....         DW ??zclSendMsg?relay
   \   00001C   ....         DW ??zclParseInConfigReportRspCmd?relay
   \   00001E   ....         DW ??zclSendMsg?relay
   \   000020   ....         DW ??zclParseInReadReportCfgCmd?relay
   \   000022   ....         DW ??zclSendMsg?relay
   \   000024   ....         DW ??zclParseInReadReportCfgRspCmd?relay
   \   000026   ....         DW ??zclSendMsg?relay
   \   000028   ....         DW ??zclParseInReportCmd?relay
   \   00002A   ....         DW ??zclSendMsg?relay
   \   00002C   ....         DW ??zclParseInDefaultRspCmd?relay
   \   00002E   ....         DW ??zclSendMsg?relay
   \   000030   0000         DW 0H
   \   000032   0000         DW 0H
   \   000034   0000         DW 0H
   \   000036   0000         DW 0H
    224          {
    225          #ifdef ZCL_READ
    226            /* ZCL_CMD_READ */                { zclParseInReadCmd,             zclProcessInReadCmd             },
    227            /* ZCL_CMD_READ_RSP */            { zclParseInReadRspCmd,          zclSendMsg                      },
    228          #else
    229            /* ZCL_CMD_READ */                { NULL,                          NULL                            },
    230            /* ZCL_CMD_READ_RSP */            { NULL,                          NULL                            },
    231          #endif // ZCL_READ
    232          
    233          #ifdef ZCL_WRITE
    234            /* ZCL_CMD_WRITE */               { zclParseInWriteCmd,            zclProcessInWriteCmd            },
    235            /* ZCL_CMD_WRITE_UNDIVIDED */     { zclParseInWriteCmd,            zclProcessInWriteUndividedCmd   },
    236            /* ZCL_CMD_WRITE_RSP */           { zclParseInWriteRspCmd,         zclSendMsg                      },
    237            /* ZCL_CMD_WRITE_NO_RSP */        { zclParseInWriteCmd,            zclProcessInWriteCmd            },
    238          #else
    239            /* ZCL_CMD_WRITE */               { NULL,                          NULL                            },
    240            /* ZCL_CMD_WRITE_UNDIVIDED */     { NULL,                          NULL                            },
    241            /* ZCL_CMD_WRITE_RSP */           { NULL,                          NULL                            },
    242            /* ZCL_CMD_WRITE_NO_RSP */        { NULL,                          NULL                            },
    243          #endif // ZCL_WRITE
    244          
    245          #ifdef ZCL_REPORT
    246            /* ZCL_CMD_CONFIG_REPORT */       { zclParseInConfigReportCmd,     zclSendMsg                      },
    247            /* ZCL_CMD_CONFIG_REPORT_RSP */   { zclParseInConfigReportRspCmd,  zclSendMsg                      },
    248            /* ZCL_CMD_READ_REPORT_CFG */     { zclParseInReadReportCfgCmd,    zclSendMsg                      },
    249            /* ZCL_CMD_READ_REPORT_CFG_RSP */ { zclParseInReadReportCfgRspCmd, zclSendMsg                      },
    250            /* ZCL_CMD_REPORT */              { zclParseInReportCmd,           zclSendMsg                      },
    251          #else
    252            /* ZCL_CMD_CONFIG_REPORT */       { NULL,                          NULL                            },
    253            /* ZCL_CMD_CONFIG_REPORT_RSP */   { NULL,                          NULL                            },
    254            /* ZCL_CMD_READ_REPORT_CFG */     { NULL,                          NULL                            },
    255            /* ZCL_CMD_READ_REPORT_CFG_RSP */ { NULL,                          NULL                            },
    256            /* ZCL_CMD_REPORT */              { NULL,                          NULL                            },
    257          #endif // ZCL_REPORT
    258          
    259            /* ZCL_CMD_DEFAULT_RSP */         { zclParseInDefaultRspCmd,       zclSendMsg                      },
    260          
    261          #ifdef ZCL_DISCOVER
    262            /* ZCL_CMD_DISCOVER */            { zclParseInDiscCmd,             zclProcessInDiscCmd             },
    263            /* ZCL_CMD_DISCOVER_RSP */        { zclParseInDiscRspCmd,          zclSendMsg                      }
    264          #else
    265            /* ZCL_CMD_DISCOVER */            { NULL,                          NULL                            },
    266            /* ZCL_CMD_DISCOVER_RSP */        { NULL,                          NULL                            }
    267          #endif // ZCL_DISCOVER
    268          };
    269          
    270          /*********************************************************************
    271           * PUBLIC FUNCTIONS
    272           *********************************************************************/
    273          
    274          /*********************************************************************
    275           * @fn          zcl_Init
    276           *
    277           * @brief       Initialization function for the zcl layer.
    278           *
    279           * @param       task_id - ZCL task id
    280           *
    281           * @return      none
    282           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    283          void zcl_Init( uint8 task_id )
   \                     zcl_Init:
    284          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    285            zcl_TaskID = task_id;
   \   000004   E9           MOV     A,R1
   \   000005   90....       MOV     DPTR,#zcl_TaskID
   \   000008   F0           MOVX    @DPTR,A
    286          
    287            plugins = (zclLibPlugin_t  *)NULL;
   \   000009   90....       MOV     DPTR,#plugins
   \   00000C   E4           CLR     A
   \   00000D   F0           MOVX    @DPTR,A
   \   00000E   A3           INC     DPTR
   \   00000F   F0           MOVX    @DPTR,A
    288            attrList = (zclAttrRecsList *)NULL;
   \   000010   90....       MOV     DPTR,#attrList
   \   000013   F0           MOVX    @DPTR,A
   \   000014   A3           INC     DPTR
   \   000015   F0           MOVX    @DPTR,A
    289            clusterOptionList = (zclClusterOptionList *)NULL;
   \   000016   90....       MOV     DPTR,#clusterOptionList
   \   000019   F0           MOVX    @DPTR,A
   \   00001A   A3           INC     DPTR
   \   00001B   F0           MOVX    @DPTR,A
    290          }
   \   00001C   02....       LJMP    ?Subroutine0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   D083         POP     DPH
   \   000002   D082         POP     DPL
   \   000004   02....       LJMP    ?BRET
    291          
    292          /*********************************************************************
    293           * @fn          zcl_event_loop
    294           *
    295           * @brief       Event Loop Processor for zcl.
    296           *
    297           * @param       task_id - task id
    298           * @param       events - event bitmap
    299           *
    300           * @return      unprocessed events
    301           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    302          uint16 zcl_event_loop( uint8 task_id, uint16 events )
   \                     zcl_event_loop:
    303          {
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV     ?V0 + 0,R2
   \   000007   8B..         MOV     ?V0 + 1,R3
    304            uint8 *msgPtr;
    305          
    306            (void)task_id;  // Intentionally unreferenced parameter
    307          
    308            if ( events & SYS_EVENT_MSG )
   \   000009   EB           MOV     A,R3
   \   00000A   5480         ANL     A,#0x80
   \   00000C   6059         JZ      ??zcl_event_loop_0
    309            {
    310              msgPtr = osal_msg_receive( zcl_TaskID );
   \   00000E                ; Setup parameters for call to function osal_msg_receive
   \   00000E   801F         SJMP    ??zcl_event_loop_1
    311              while ( msgPtr != NULL )
    312              {
    313                uint8 dealloc = TRUE;
    314          
    315                if ( *msgPtr == AF_INCOMING_MSG_CMD )
    316                {
    317                  rawAFMsg = (afIncomingMSGPacket_t *)msgPtr;
   \                     ??zcl_event_loop_2:
   \   000010   90....       MOV     DPTR,#rawAFMsg
   \   000013   EE           MOV     A,R6
   \   000014   F0           MOVX    @DPTR,A
   \   000015   A3           INC     DPTR
   \   000016   EF           MOV     A,R7
   \   000017   F0           MOVX    @DPTR,A
    318                  zclProcessMessageMSG( rawAFMsg );
   \   000018                ; Setup parameters for call to function zclProcessMessageMSG
   \   000018   90....       MOV     DPTR,#rawAFMsg
   \   00001B   12....       LCALL   ??Subroutine234_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_393:
   \   00001E   12....       LCALL   ??zclProcessMessageMSG?relay
    319                  rawAFMsg = NULL;
   \   000021   90....       MOV     DPTR,#rawAFMsg
   \   000024   E4           CLR     A
   \   000025   F0           MOVX    @DPTR,A
   \   000026   A3           INC     DPTR
   \   000027   F0           MOVX    @DPTR,A
    320                }
    321                else if ( zcl_RegisteredMsgTaskID != TASK_NO_TASK )
    322                {
    323                  // send it to another task to process.
    324                  osal_msg_send( zcl_RegisteredMsgTaskID, msgPtr );
    325                  dealloc = FALSE;
    326                }
    327          
    328                // Release the memory
    329                if ( dealloc )
    330                {
    331                  osal_msg_deallocate( msgPtr );
   \                     ??zcl_event_loop_3:
   \   000028                ; Setup parameters for call to function osal_msg_deallocate
   \   000028   EE           MOV     A,R6
   \   000029   FA           MOV     R2,A
   \   00002A   EF           MOV     A,R7
   \   00002B   FB           MOV     R3,A
   \   00002C   12....       LCALL   ??osal_msg_deallocate?relay
    332                }
    333          
    334                // Next
    335                msgPtr = osal_msg_receive( zcl_TaskID );
   \                     ??zcl_event_loop_1:
   \   00002F                ; Setup parameters for call to function osal_msg_receive
   \   00002F   90....       MOV     DPTR,#zcl_TaskID
   \   000032   E0           MOVX    A,@DPTR
   \   000033   F9           MOV     R1,A
   \   000034   12....       LCALL   ??osal_msg_receive?relay
   \   000037   8A..         MOV     ?V0 + 2,R2
   \   000039   8B..         MOV     ?V0 + 3,R3
   \   00003B   AE..         MOV     R6,?V0 + 2
   \   00003D   AF..         MOV     R7,?V0 + 3
   \   00003F   EE           MOV     A,R6
   \   000040   4F           ORL     A,R7
   \   000041   601B         JZ      ??zcl_event_loop_4
   \   000043   8E82         MOV     DPL,R6
   \   000045   8F83         MOV     DPH,R7
   \   000047   E0           MOVX    A,@DPTR
   \   000048   641A         XRL     A,#0x1a
   \   00004A   60C4         JZ      ??zcl_event_loop_2
   \   00004C   90....       MOV     DPTR,#zcl_RegisteredMsgTaskID
   \   00004F   E0           MOVX    A,@DPTR
   \   000050   F4           CPL     A
   \   000051   60D5         JZ      ??zcl_event_loop_3
   \   000053                ; Setup parameters for call to function osal_msg_send
   \   000053   EE           MOV     A,R6
   \   000054   FA           MOV     R2,A
   \   000055   EF           MOV     A,R7
   \   000056   FB           MOV     R3,A
   \   000057   E0           MOVX    A,@DPTR
   \   000058   F9           MOV     R1,A
   \   000059   12....       LCALL   ??osal_msg_send?relay
   \   00005C   80D1         SJMP    ??zcl_event_loop_1
    336              }
    337          
    338              // return unprocessed events
    339              return (events ^ SYS_EVENT_MSG);
   \                     ??zcl_event_loop_4:
   \   00005E   AA..         MOV     R2,?V0 + 0
   \   000060   E5..         MOV     A,?V0 + 1
   \   000062   6480         XRL     A,#0x80
   \   000064   FB           MOV     R3,A
   \   000065   8004         SJMP    ??zcl_event_loop_5
    340            }
    341          
    342            // Discard unknown events
    343            return 0;
   \                     ??zcl_event_loop_0:
   \   000067   7A00         MOV     R2,#0x0
   \   000069   7B00         MOV     R3,#0x0
   \                     ??zcl_event_loop_5:
   \   00006B   02....       LJMP    ?Subroutine1 & 0xFFFF
    344          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000   7F04         MOV     R7,#0x4
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine234_0:
   \   000000   12....       LCALL   ?Subroutine172 & 0xFFFF
   \                     ??CrossCallReturnLabel_417:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine172:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   FA           MOV     R2,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   FB           MOV     R3,A
   \   000005   22           RET
    345          
    346          /*********************************************************************
    347           * @fn          zcl_getRawAFMsg
    348           *
    349           * @brief       Call to get original unprocessed AF message
    350           *              (not parsed by ZCL).
    351           *
    352           *   NOTE:  This function can only be called during a ZCL callback function
    353           *          and the calling function must NOT change any data in the message.
    354           *
    355           * @param       none
    356           *
    357           * @return      pointer to original AF message, NULL if not processing
    358           *              AF message.
    359           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    360          afIncomingMSGPacket_t *zcl_getRawAFMsg( void )
   \                     zcl_getRawAFMsg:
    361          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    362            return ( rawAFMsg );
   \   000004   90....       MOV     DPTR,#rawAFMsg
   \   000007   12....       LCALL   ??Subroutine234_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_394:
   \   00000A   02....       LJMP    ?Subroutine0 & 0xFFFF
    363          }
    364          
    365          /*********************************************************************
    366           * @fn          zcl_registerPlugin
    367           *
    368           * @brief       Add a Cluster Library handler
    369           *
    370           * @param       startClusterID - starting cluster ID
    371           * @param       endClusterID - ending cluster ID
    372           * @param       pfnHdlr - function pointer to incoming message handler
    373           *
    374           * @return      ZSuccess if OK
    375           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    376          ZStatus_t zcl_registerPlugin( uint16 startClusterID,
   \                     zcl_registerPlugin:
    377                    uint16 endClusterID, zclInHdlr_t pfnIncomingHdlr )
    378          {
   \   000000   74F2         MOV     A,#-0xe
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV     ?V0 + 0,R2
   \   000007   8B..         MOV     ?V0 + 1,R3
   \   000009   8C..         MOV     ?V0 + 2,R4
   \   00000B   8D..         MOV     ?V0 + 3,R5
   \   00000D   740E         MOV     A,#0xe
   \   00000F   12....       LCALL   ?XSTACK_DISP0_8
   \   000012   12....       LCALL   ??Subroutine240_0 & 0xFFFF
    379            zclLibPlugin_t *pNewItem;
    380            zclLibPlugin_t *pLoop;
    381          
    382            // Fill in the new profile list
    383            pNewItem = osal_mem_alloc( sizeof( zclLibPlugin_t ) );
   \                     ??CrossCallReturnLabel_446:
   \   000015                ; Setup parameters for call to function osal_mem_alloc
   \   000015   7A08         MOV     R2,#0x8
   \   000017   7B00         MOV     R3,#0x0
   \   000019   12....       LCALL   ??osal_mem_alloc?relay
   \   00001C   8A..         MOV     ?V0 + 4,R2
   \   00001E   8B..         MOV     ?V0 + 5,R3
   \   000020   A8..         MOV     R0,?V0 + 4
   \   000022   A9..         MOV     R1,?V0 + 5
    384            if ( pNewItem == NULL )
   \   000024   E8           MOV     A,R0
   \   000025   49           ORL     A,R1
   \   000026   7004         JNZ     ??zcl_registerPlugin_0
    385            {
    386              return (ZMemError);
   \   000028   7910         MOV     R1,#0x10
   \   00002A   8035         SJMP    ??CrossCallReturnLabel_49
    387            }
    388          
    389            // Fill in the plugin record.
    390            pNewItem->next = (zclLibPlugin_t *)NULL;
   \                     ??zcl_registerPlugin_0:
   \   00002C   12....       LCALL   ?Subroutine155 & 0xFFFF
    391            pNewItem->startClusterID = startClusterID;
   \                     ??CrossCallReturnLabel_230:
   \   00002F   A3           INC     DPTR
   \   000030   12....       LCALL   ?Subroutine37 & 0xFFFF
    392            pNewItem->endClusterID = endClusterID;
   \                     ??CrossCallReturnLabel_287:
   \   000033   E5..         MOV     A,?V0 + 2
   \   000035   F0           MOVX    @DPTR,A
   \   000036   A3           INC     DPTR
   \   000037   E5..         MOV     A,?V0 + 3
   \   000039   F0           MOVX    @DPTR,A
    393            pNewItem->pfnIncomingHdlr = pfnIncomingHdlr;
   \   00003A   EE           MOV     A,R6
   \   00003B   FA           MOV     R2,A
   \   00003C   EF           MOV     A,R7
   \   00003D   FB           MOV     R3,A
   \   00003E   8882         MOV     DPL,R0
   \   000040   8983         MOV     DPH,R1
   \   000042   A3           INC     DPTR
   \   000043   A3           INC     DPTR
   \   000044   A3           INC     DPTR
   \   000045   A3           INC     DPTR
   \   000046   12....       LCALL   ??Subroutine266_0 & 0xFFFF
    394          
    395            // Find spot in list
    396            if (  plugins == NULL )
   \                     ??CrossCallReturnLabel_589:
   \   000049   90....       MOV     DPTR,#plugins
   \   00004C   12....       LCALL   ??Subroutine230_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_388:
   \   00004F   7008         JNZ     ??zcl_registerPlugin_1
    397            {
    398              plugins = pNewItem;
   \   000051   90....       MOV     DPTR,#plugins
   \   000054   8008         SJMP    ??zcl_registerPlugin_2
    399            }
    400            else
    401            {
    402              // Look for end of list
    403              pLoop = plugins;
    404              while ( pLoop->next != NULL )
    405              {
    406                pLoop = pLoop->next;
   \                     ??zcl_registerPlugin_3:
   \   000056   E0           MOVX    A,@DPTR
   \   000057   FA           MOV     R2,A
   \   000058   A3           INC     DPTR
    407              }
   \                     ??zcl_registerPlugin_1:
   \   000059   12....       LCALL   ?Subroutine57 & 0xFFFF
   \                     ??CrossCallReturnLabel_68:
   \   00005C   70F8         JNZ     ??zcl_registerPlugin_3
    408          
    409              // Put new item at end of list
    410              pLoop->next = pNewItem;
    411            }
   \                     ??zcl_registerPlugin_2:
   \   00005E   12....       LCALL   ?Subroutine44 & 0xFFFF
    412          
    413            return ( ZSuccess );
   \                     ??CrossCallReturnLabel_49:
   \   000061   02....       LJMP    ?Subroutine2 & 0xFFFF
    414          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine37:
   \   000000   E5..         MOV     A,?V0 + 1
   \   000002                REQUIRE ??Subroutine207_0
   \   000002                ; // Fall through to label ??Subroutine207_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine207_0:
   \   000000   12....       LCALL   ?Subroutine160 & 0xFFFF
   \                     ??CrossCallReturnLabel_290:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine160:
   \   000000   12....       LCALL   ?Subroutine201 & 0xFFFF
   \                     ??CrossCallReturnLabel_292:
   \   000003   A3           INC     DPTR
   \   000004   A3           INC     DPTR
   \   000005   A3           INC     DPTR
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine57:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   FB           MOV     R3,A
   \   000002   8A82         MOV     DPL,R2
   \   000004   8B83         MOV     DPH,R3
   \   000006   12....       LCALL   ??Subroutine236_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_429:
   \   000009   EC           MOV     A,R4
   \   00000A   4D           ORL     A,R5
   \   00000B   8A82         MOV     DPL,R2
   \   00000D   8B83         MOV     DPH,R3
   \   00000F   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine44:
   \   000000   E8           MOV     A,R0
   \   000001   F0           MOVX    @DPTR,A
   \   000002   A3           INC     DPTR
   \   000003   E9           MOV     A,R1
   \   000004   F0           MOVX    @DPTR,A
   \   000005   7900         MOV     R1,#0x0
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine155:
   \   000000   8882         MOV     DPL,R0
   \   000002   8983         MOV     DPH,R1
   \   000004   E4           CLR     A
   \   000005   F0           MOVX    @DPTR,A
   \   000006   A3           INC     DPTR
   \   000007   12....       LCALL   ?Subroutine201 & 0xFFFF
   \                     ??CrossCallReturnLabel_293:
   \   00000A   A3           INC     DPTR
   \   00000B   E5..         MOV     A,?V0 + 0
   \   00000D   F0           MOVX    @DPTR,A
   \   00000E   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine201:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   8882         MOV     DPL,R0
   \   000003   8983         MOV     DPH,R1
   \   000005   A3           INC     DPTR
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine2:
   \   000000   7F06         MOV     R7,#0x6
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine230_0:
   \   000000   12....       LCALL   ?Subroutine172 & 0xFFFF
   \                     ??CrossCallReturnLabel_416:
   \   000003   EA           MOV     A,R2
   \   000004   4B           ORL     A,R3
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine236_0:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   FC           MOV     R4,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   FD           MOV     R5,A
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine240_0:
   \   000000   12....       LCALL   ??Subroutine253_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_513:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine253_0:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   FE           MOV     R6,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   FF           MOV     R7,A
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine266_0:
   \   000000   A3           INC     DPTR
   \   000001   A3           INC     DPTR
   \   000002                REQUIRE ??Subroutine267_0
   \   000002                ; // Fall through to label ??Subroutine267_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine267_0:
   \   000000   EA           MOV     A,R2
   \   000001   F0           MOVX    @DPTR,A
   \   000002   A3           INC     DPTR
   \   000003   EB           MOV     A,R3
   \   000004   F0           MOVX    @DPTR,A
   \   000005   22           RET
    415          
    416          /*********************************************************************
    417           * @fn          zcl_registerAttrList
    418           *
    419           * @brief       Register an Attribute List with ZCL Foundation
    420           *
    421           * @param       endpoint - endpoint the attribute list belongs to
    422           * @param       numAttr - number of attributes in list
    423           * @param       newAttrList - array of Attribute records.
    424           *                            NOTE: THE ATTRIBUTE IDs (FOR A CLUSTER) MUST BE IN
    425           *                            ASCENDING ORDER. OTHERWISE, THE DISCOVERY RESPONSE
    426           *                            COMMAND WILL NOT HAVE THE RIGHT ATTRIBUTE INFO
    427           *
    428           * @return      ZSuccess if OK
    429           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    430          ZStatus_t zcl_registerAttrList( uint8 endpoint, uint8 numAttr, CONST zclAttrRec_t newAttrList[] )
   \                     zcl_registerAttrList:
    431          {
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   89..         MOV     ?V0 + 0,R1
   \   000007   8A..         MOV     ?V0 + 1,R2
   \   000009   EC           MOV     A,R4
   \   00000A   FE           MOV     R6,A
   \   00000B   ED           MOV     A,R5
   \   00000C   FF           MOV     R7,A
    432            zclAttrRecsList *pNewItem;
    433            zclAttrRecsList *pLoop;
    434          
    435            // Fill in the new profile list
    436            pNewItem = osal_mem_alloc( sizeof( zclAttrRecsList ) );
   \   00000D                ; Setup parameters for call to function osal_mem_alloc
   \   00000D   7A0A         MOV     R2,#0xa
   \   00000F   12....       LCALL   ?Subroutine120 & 0xFFFF
    437            if ( pNewItem == NULL )
   \                     ??CrossCallReturnLabel_180:
   \   000012   7004         JNZ     ??zcl_registerAttrList_0
    438            {
    439              return (ZMemError);
   \   000014   7910         MOV     R1,#0x10
   \   000016   802C         SJMP    ??CrossCallReturnLabel_50
    440            }
    441          
    442            pNewItem->next = (zclAttrRecsList *)NULL;
   \                     ??zcl_registerAttrList_0:
   \   000018   12....       LCALL   ?Subroutine24 & 0xFFFF
    443            pNewItem->endpoint = endpoint;
    444            pNewItem->pfnReadWriteCB = NULL;
   \                     ??CrossCallReturnLabel_18:
   \   00001B   E4           CLR     A
   \   00001C   F0           MOVX    @DPTR,A
   \   00001D   A3           INC     DPTR
   \   00001E   12....       LCALL   ?Subroutine36 & 0xFFFF
    445            pNewItem->numAttributes = numAttr;
   \                     ??CrossCallReturnLabel_37:
   \   000021   E5..         MOV     A,?V0 + 1
   \   000023   12....       LCALL   ?Subroutine36 & 0xFFFF
    446            pNewItem->attrs = newAttrList;
   \                     ??CrossCallReturnLabel_38:
   \   000026   A3           INC     DPTR
   \   000027   EE           MOV     A,R6
   \   000028   F0           MOVX    @DPTR,A
   \   000029   A3           INC     DPTR
   \   00002A   EF           MOV     A,R7
   \   00002B   F0           MOVX    @DPTR,A
    447          
    448            // Find spot in list
    449            if ( attrList == NULL )
   \   00002C   90....       MOV     DPTR,#attrList
   \   00002F   12....       LCALL   ??Subroutine230_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_389:
   \   000032   7008         JNZ     ??zcl_registerAttrList_1
    450            {
    451              attrList = pNewItem;
   \   000034   90....       MOV     DPTR,#attrList
   \   000037   8008         SJMP    ??zcl_registerAttrList_2
    452            }
    453            else
    454            {
    455              // Look for end of list
    456              pLoop = attrList;
    457              while ( pLoop->next != NULL )
    458              {
    459                pLoop = pLoop->next;
   \                     ??zcl_registerAttrList_3:
   \   000039   E0           MOVX    A,@DPTR
   \   00003A   FA           MOV     R2,A
   \   00003B   A3           INC     DPTR
    460              }
   \                     ??zcl_registerAttrList_1:
   \   00003C   12....       LCALL   ?Subroutine57 & 0xFFFF
   \                     ??CrossCallReturnLabel_69:
   \   00003F   70F8         JNZ     ??zcl_registerAttrList_3
    461          
    462              // Put new item at end of list
    463              pLoop->next = pNewItem;
    464            }
   \                     ??zcl_registerAttrList_2:
   \   000041   12....       LCALL   ?Subroutine44 & 0xFFFF
    465          
    466            return ( ZSuccess );
   \                     ??CrossCallReturnLabel_50:
   \   000044   02....       LJMP    ?Subroutine1 & 0xFFFF
    467          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine36:
   \   000000   12....       LCALL   ?Subroutine160 & 0xFFFF
   \                     ??CrossCallReturnLabel_291:
   \   000003   A3           INC     DPTR
   \   000004   A3           INC     DPTR
   \   000005   A3           INC     DPTR
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine120:
   \   000000   7B00         MOV     R3,#0x0
   \   000002   12....       LCALL   ??osal_mem_alloc?relay
   \   000005   8A..         MOV     ?V0 + 2,R2
   \   000007   8B..         MOV     ?V0 + 3,R3
   \   000009   A8..         MOV     R0,?V0 + 2
   \   00000B   A9..         MOV     R1,?V0 + 3
   \   00000D   E8           MOV     A,R0
   \   00000E   49           ORL     A,R1
   \   00000F   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine24:
   \   000000   12....       LCALL   ?Subroutine155 & 0xFFFF
   \                     ??CrossCallReturnLabel_231:
   \   000003   8882         MOV     DPL,R0
   \   000005   8983         MOV     DPH,R1
   \   000007   A3           INC     DPTR
   \   000008   A3           INC     DPTR
   \   000009   A3           INC     DPTR
   \   00000A   22           RET
    468          
    469          /*********************************************************************
    470           * @fn          zcl_registerClusterOptionList
    471           *
    472           * @brief       Register a Cluster Option List with ZCL Foundation
    473           *
    474           * @param       endpoint - endpoint the option list belongs to
    475           * @param       numOption - number of options in list
    476           * @param       optionList - array of cluster option records.
    477           *
    478           *              NOTE: This API should be called to enable 'Application
    479           *                    Link Key' security and/or 'APS ACK' for a specific
    480           *                    Cluster. The 'Application Link Key' is discarded
    481           *                    if security isn't enabled on the device.
    482           *                    The default behavior is 'Network Key' when security
    483           *                    is enabled and no 'APS ACK' for the ZCL messages.
    484           *
    485           * @return      ZSuccess if OK
    486           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    487          ZStatus_t zcl_registerClusterOptionList( uint8 endpoint, uint8 numOption, zclOptionRec_t optionList[] )
   \                     zcl_registerClusterOptionList:
    488          {
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   89..         MOV     ?V0 + 0,R1
   \   000007   8A..         MOV     ?V0 + 1,R2
   \   000009   EC           MOV     A,R4
   \   00000A   FE           MOV     R6,A
   \   00000B   ED           MOV     A,R5
   \   00000C   FF           MOV     R7,A
    489            zclClusterOptionList *pNewItem;
    490            zclClusterOptionList *pLoop;
    491          
    492            // Fill in the new profile list
    493            pNewItem = osal_mem_alloc( sizeof( zclClusterOptionList ) );
   \   00000D                ; Setup parameters for call to function osal_mem_alloc
   \   00000D   7A06         MOV     R2,#0x6
   \   00000F   12....       LCALL   ?Subroutine120 & 0xFFFF
    494            if ( pNewItem == NULL )
   \                     ??CrossCallReturnLabel_181:
   \   000012   7004         JNZ     ??zcl_registerClusterOptionList_0
    495            {
    496              return (ZMemError);
   \   000014   7910         MOV     R1,#0x10
   \   000016   8023         SJMP    ??CrossCallReturnLabel_51
    497            }
    498          
    499            pNewItem->next = (zclClusterOptionList *)NULL;
   \                     ??zcl_registerClusterOptionList_0:
   \   000018   12....       LCALL   ?Subroutine24 & 0xFFFF
    500            pNewItem->endpoint = endpoint;
    501            pNewItem->numOptions = numOption;
   \                     ??CrossCallReturnLabel_19:
   \   00001B   12....       LCALL   ?Subroutine37 & 0xFFFF
    502            pNewItem->options = optionList;
   \                     ??CrossCallReturnLabel_288:
   \   00001E   EE           MOV     A,R6
   \   00001F   F0           MOVX    @DPTR,A
   \   000020   A3           INC     DPTR
   \   000021   EF           MOV     A,R7
   \   000022   F0           MOVX    @DPTR,A
    503          
    504            // Find spot in list
    505            if ( clusterOptionList == NULL )
   \   000023   90....       MOV     DPTR,#clusterOptionList
   \   000026   12....       LCALL   ??Subroutine230_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_390:
   \   000029   7008         JNZ     ??zcl_registerClusterOptionList_1
    506            {
    507              clusterOptionList = pNewItem;
   \   00002B   90....       MOV     DPTR,#clusterOptionList
   \   00002E   8008         SJMP    ??zcl_registerClusterOptionList_2
    508            }
    509            else
    510            {
    511              // Look for end of list
    512              pLoop = clusterOptionList;
    513              while ( pLoop->next != NULL )
    514              {
    515                pLoop = pLoop->next;
   \                     ??zcl_registerClusterOptionList_3:
   \   000030   E0           MOVX    A,@DPTR
   \   000031   FA           MOV     R2,A
   \   000032   A3           INC     DPTR
    516              }
   \                     ??zcl_registerClusterOptionList_1:
   \   000033   12....       LCALL   ?Subroutine57 & 0xFFFF
   \                     ??CrossCallReturnLabel_70:
   \   000036   70F8         JNZ     ??zcl_registerClusterOptionList_3
    517          
    518              // Put new item at end of list
    519              pLoop->next = pNewItem;
    520            }
   \                     ??zcl_registerClusterOptionList_2:
   \   000038   12....       LCALL   ?Subroutine44 & 0xFFFF
    521          
    522            return ( ZSuccess );
   \                     ??CrossCallReturnLabel_51:
   \   00003B   02....       LJMP    ?Subroutine1 & 0xFFFF
    523          }
    524          
    525          /*********************************************************************
    526           * @fn          zcl_registerValidateAttrData
    527           *
    528           * @brief       Add a validation function for attribute data
    529           *
    530           * @param       pfnValidateAttrData - function pointer to validate routine
    531           *
    532           * @return      ZSuccess if OK
    533           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    534          ZStatus_t zcl_registerValidateAttrData( zclValidateAttrData_t pfnValidateAttrData )
   \                     zcl_registerValidateAttrData:
    535          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    536            zcl_ValidateAttrDataCB = pfnValidateAttrData;
   \   000004   90....       MOV     DPTR,#zcl_ValidateAttrDataCB
   \   000007   12....       LCALL   ??Subroutine267_0 & 0xFFFF
    537          
    538            return ( ZSuccess );
   \                     ??CrossCallReturnLabel_586:
   \   00000A   7900         MOV     R1,#0x0
   \   00000C   80..         SJMP    ?Subroutine0
    539          }
    540          
    541          /*********************************************************************
    542           * @fn          zcl_registerReadWriteCB
    543           *
    544           * @brief       Register the application's callback function to read/write
    545           *              attribute data, and authorize read/write operation.
    546           *
    547           *              Note: The pfnReadWriteCB callback function is only required
    548           *                    when the attribute data format is unknown to ZCL. The
    549           *                    callback function gets called when the pointer 'dataPtr'
    550           *                    to the attribute value is NULL in the attribute database
    551           *                    registered with the ZCL.
    552           *
    553           *              Note: The pfnAuthorizeCB callback function is only required
    554           *                    when the Read/Write operation on an attribute requires
    555           *                    authorization (i.e., attributes with ACCESS_CONTROL_AUTH_READ
    556           *                    or ACCESS_CONTROL_AUTH_WRITE access permissions).
    557           *
    558           * @param       endpoint - application's endpoint
    559           * @param       pfnReadWriteCB - function pointer to read/write routine
    560           * @param       pfnAuthorizeCB - function pointer to authorize read/write operation
    561           *
    562           * @return      ZSuccess if successful. ZFailure, otherwise.
    563           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    564          ZStatus_t zcl_registerReadWriteCB( uint8 endpoint, zclReadWriteCB_t pfnReadWriteCB,
   \                     zcl_registerReadWriteCB:
    565                                             zclAuthorizeCB_t pfnAuthorizeCB )
    566          {
   \   000000   74F2         MOV     A,#-0xe
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
   \   000009   8C..         MOV     ?V0 + 0,R4
   \   00000B   8D..         MOV     ?V0 + 1,R5
    567            zclAttrRecsList *pRec = zclFindAttrRecsList( endpoint );
   \   00000D                ; Setup parameters for call to function zclFindAttrRecsList
   \   00000D   12....       LCALL   ??zclFindAttrRecsList?relay
   \   000010   8A..         MOV     ?V0 + 4,R2
   \   000012   8B..         MOV     ?V0 + 5,R3
   \   000014   A8..         MOV     R0,?V0 + 4
   \   000016   A9..         MOV     R1,?V0 + 5
    568          
    569            if ( pRec != NULL )
   \   000018   E8           MOV     A,R0
   \   000019   49           ORL     A,R1
   \   00001A   601A         JZ      ??zcl_registerReadWriteCB_0
    570            {
    571              pRec->pfnReadWriteCB = pfnReadWriteCB;
   \   00001C   8882         MOV     DPL,R0
   \   00001E   8983         MOV     DPH,R1
   \   000020   A3           INC     DPTR
   \   000021   A3           INC     DPTR
   \   000022   A3           INC     DPTR
   \   000023   EE           MOV     A,R6
   \   000024   F0           MOVX    @DPTR,A
   \   000025   A3           INC     DPTR
   \   000026   EF           MOV     A,R7
   \   000027   12....       LCALL   ??Subroutine207_0 & 0xFFFF
    572              pRec->pfnAuthorizeCB = pfnAuthorizeCB;
   \                     ??CrossCallReturnLabel_289:
   \   00002A   A3           INC     DPTR
   \   00002B   E5..         MOV     A,?V0 + 0
   \   00002D   F0           MOVX    @DPTR,A
   \   00002E   A3           INC     DPTR
   \   00002F   E5..         MOV     A,?V0 + 1
   \   000031   F0           MOVX    @DPTR,A
    573          
    574              return ( ZSuccess );
   \   000032   7900         MOV     R1,#0x0
   \   000034   8002         SJMP    ??zcl_registerReadWriteCB_1
    575            }
    576          
    577            return ( ZFailure );
   \                     ??zcl_registerReadWriteCB_0:
   \   000036   7901         MOV     R1,#0x1
   \                     ??zcl_registerReadWriteCB_1:
   \   000038   02....       LJMP    ?Subroutine2 & 0xFFFF
    578          }
    579          
    580          /*********************************************************************
    581           * @fn      zcl_registerForMsg
    582           *
    583           * @brief   The ZCL is setup to send all incoming Foundation Command/Response
    584           *          messages that aren't processed to one task (if a task is
    585           *          registered).
    586           *
    587           * @param   taskId - task Id of the Application where commands will be sent to
    588           *
    589           * @return  TRUE if task registeration successful, FALSE otherwise
    590           *********************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    591          uint8 zcl_registerForMsg( uint8 taskId )
   \                     zcl_registerForMsg:
    592          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   \   000004   E9           MOV     A,R1
   \   000005   F8           MOV     R0,A
    593            // Allow only the first task
    594            if ( zcl_RegisteredMsgTaskID == TASK_NO_TASK )
   \   000006   90....       MOV     DPTR,#zcl_RegisteredMsgTaskID
   \   000009   E0           MOVX    A,@DPTR
   \   00000A   F4           CPL     A
   \   00000B   7006         JNZ     ??zcl_registerForMsg_0
    595            {
    596              zcl_RegisteredMsgTaskID = taskId;
   \   00000D   E8           MOV     A,R0
   \   00000E   F0           MOVX    @DPTR,A
    597          
    598              return ( true );
   \   00000F   7901         MOV     R1,#0x1
   \   000011   8002         SJMP    ??zcl_registerForMsg_1
    599            }
    600          
    601            return ( false );
   \                     ??zcl_registerForMsg_0:
   \   000013   7900         MOV     R1,#0x0
   \                     ??zcl_registerForMsg_1:
   \   000015                REQUIRE ?Subroutine0
   \   000015                ; // Fall through to label ?Subroutine0
    602          }
    603          
    604          /*********************************************************************
    605           * @fn      zcl_DeviceOperational
    606           *
    607           * @brief   Used to see whether or not the device can send or respond
    608           *          to application level commands.
    609           *
    610           * @param   srcEP - source endpoint
    611           * @param   clusterID - cluster ID
    612           * @param   frameType - command type
    613           * @param   cmd - command ID
    614           *
    615           * @return  TRUE if device is operational, FALSE otherwise
    616           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    617          static uint8 zcl_DeviceOperational( uint8 srcEP, uint16 clusterID,
   \                     zcl_DeviceOperational:
    618                                              uint8 frameType, uint8 cmd, uint16 profileID )
    619          {
   \   000000   74F5         MOV     A,#-0xb
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 11
   \   000005                ; Auto size: 9
   \   000005   74F7         MOV     A,#-0x9
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   EC           MOV     A,R4
   \   00000B   FF           MOV     R7,A
    620            zclAttrRec_t attrRec;
    621            uint8 deviceEnabled = DEVICE_ENABLED; // default value
   \   00000C   85..82       MOV     DPL,?XSP + 0
   \   00000F   85..83       MOV     DPH,?XSP + 1
   \   000012   7401         MOV     A,#0x1
   \   000014   F0           MOVX    @DPTR,A
    622          
    623            (void)profileID;  // Intentionally unreferenced parameter
    624          
    625            // If the device is Disabled (DeviceEnabled attribute is set to Disabled), it
    626            // cannot send or respond to application level commands, other than commands
    627            // to read or write attributes. Note that the Identify cluster cannot be
    628            // disabled, and remains functional regardless of this setting.
    629            if ( zcl_ProfileCmd( frameType ) && cmd <= ZCL_CMD_WRITE_NO_RSP )
   \   000015   EF           MOV     A,R7
   \   000016   700A         JNZ     ??zcl_DeviceOperational_0
   \   000018   ED           MOV     A,R5
   \   000019   C3           CLR     C
   \   00001A   9406         SUBB    A,#0x6
   \   00001C   5004         JNC     ??zcl_DeviceOperational_0
    630            {
    631              return ( TRUE );
   \                     ??zcl_DeviceOperational_1:
   \   00001E   7901         MOV     R1,#0x1
   \   000020   805A         SJMP    ??zcl_DeviceOperational_2
    632            }
    633          
    634            if ( clusterID == ZCL_CLUSTER_ID_GEN_IDENTIFY )
   \                     ??zcl_DeviceOperational_0:
   \   000022   7403         MOV     A,#0x3
   \   000024   6A           XRL     A,R2
   \   000025   7001         JNZ     ??zcl_DeviceOperational_3
   \   000027   EB           MOV     A,R3
   \                     ??zcl_DeviceOperational_3:
   \   000028   60F4         JZ      ??zcl_DeviceOperational_1
    635            {
    636              return ( TRUE );
    637            }
    638          
    639            // Is device enabled?
    640            if ( zclFindAttrRec( srcEP, ZCL_CLUSTER_ID_GEN_BASIC,
    641                                 ATTRID_BASIC_DEVICE_ENABLED, &attrRec ) )
   \   00002A                ; Setup parameters for call to function zclFindAttrRec
   \   00002A   7401         MOV     A,#0x1
   \   00002C   12....       LCALL   ?XSTACK_DISP0_8
   \   00002F   8582..       MOV     ?V0 + 0,DPL
   \   000032   8583..       MOV     ?V0 + 1,DPH
   \   000035   78..         MOV     R0,#?V0 + 0
   \   000037   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00003A   7C12         MOV     R4,#0x12
   \   00003C   7D00         MOV     R5,#0x0
   \   00003E   7A00         MOV     R2,#0x0
   \   000040   7B00         MOV     R3,#0x0
   \   000042   12....       LCALL   ??Subroutine265_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_584:
   \   000045   12....       LCALL   ?DEALLOC_XSTACK8
   \   000048   E9           MOV     A,R1
   \   000049   6024         JZ      ??zcl_DeviceOperational_4
    642            {
    643              zclReadAttrData( &deviceEnabled, &attrRec, NULL );
   \   00004B                ; Setup parameters for call to function zclReadAttrData
   \   00004B   E4           CLR     A
   \   00004C   F5..         MOV     ?V0 + 0,A
   \   00004E   F5..         MOV     ?V0 + 1,A
   \   000050   78..         MOV     R0,#?V0 + 0
   \   000052   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000055   7403         MOV     A,#0x3
   \   000057   12....       LCALL   ?XSTACK_DISP0_8
   \   00005A   AC82         MOV     R4,DPL
   \   00005C   AD83         MOV     R5,DPH
   \   00005E   7402         MOV     A,#0x2
   \   000060   12....       LCALL   ?XSTACK_DISP0_8
   \   000063   AA82         MOV     R2,DPL
   \   000065   AB83         MOV     R3,DPH
   \   000067   12....       LCALL   ??zclReadAttrData?relay
   \   00006A   7402         MOV     A,#0x2
   \   00006C   12....       LCALL   ?DEALLOC_XSTACK8
    644            }
    645          
    646            return ( deviceEnabled == DEVICE_ENABLED ? TRUE : FALSE );
   \                     ??zcl_DeviceOperational_4:
   \   00006F   85..82       MOV     DPL,?XSP + 0
   \   000072   85..83       MOV     DPH,?XSP + 1
   \   000075   E0           MOVX    A,@DPTR
   \   000076   6401         XRL     A,#0x1
   \   000078   60A4         JZ      ??zcl_DeviceOperational_1
   \   00007A   7900         MOV     R1,#0x0
   \                     ??zcl_DeviceOperational_2:
   \   00007C   7409         MOV     A,#0x9
   \   00007E   12....       LCALL   ?DEALLOC_XSTACK8
   \   000081                REQUIRE ?Subroutine3
   \   000081                ; // Fall through to label ?Subroutine3
    647          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine3:
   \   000000   7F03         MOV     R7,#0x3
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine265_0:
   \   000000   12....       LCALL   ??zclFindAttrRec?relay
   \   000003   7402         MOV     A,#0x2
   \   000005   22           RET
    648          
    649          /*********************************************************************
    650           * @fn      zcl_SendCommand
    651           *
    652           * @brief   Used to send Profile and Cluster Specific Command messages.
    653           *
    654           *          NOTE: The calling application is responsible for incrementing
    655           *                the Sequence Number.
    656           *
    657           * @param   srcEp - source endpoint
    658           * @param   destAddr - destination address
    659           * @param   clusterID - cluster ID
    660           * @param   cmd - command ID
    661           * @param   specific - whether the command is Cluster Specific
    662           * @param   direction - client/server direction of the command
    663           * @param   disableDefaultRsp - disable Default Response command
    664           * @param   manuCode - manufacturer code for proprietary extensions to a profile
    665           * @param   seqNumber - identification number for the transaction
    666           * @param   cmdFormatLen - length of the command to be sent
    667           * @param   cmdFormat - command to be sent
    668           *
    669           * @return  ZSuccess if OK
    670           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    671          ZStatus_t zcl_SendCommand( uint8 srcEP, afAddrType_t *destAddr,
   \                     zcl_SendCommand:
    672                                     uint16 clusterID, uint8 cmd, uint8 specific, uint8 direction,
    673                                     uint8 disableDefaultRsp, uint16 manuCode, uint8 seqNum,
    674                                     uint16 cmdFormatLen, uint8 *cmdFormat )
    675          {
   \   000000   74E8         MOV     A,#-0x18
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 24
   \   000005                ; Auto size: 6
   \   000005   74FA         MOV     A,#-0x6
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   89..         MOV     ?V0 + 7,R1
   \   00000C   8A..         MOV     ?V0 + 14,R2
   \   00000E   8B..         MOV     ?V0 + 15,R3
   \   000010   8C..         MOV     ?V0 + 2,R4
   \   000012   8D..         MOV     ?V0 + 3,R5
   \   000014   741E         MOV     A,#0x1e
   \   000016   12....       LCALL   ?XSTACK_DISP0_8
   \   000019   E0           MOVX    A,@DPTR
   \   00001A   FE           MOV     R6,A
   \   00001B   741F         MOV     A,#0x1f
   \   00001D   12....       LCALL   ?XSTACK_DISP0_8
   \   000020   E0           MOVX    A,@DPTR
   \   000021   F5..         MOV     ?V0 + 1,A
   \   000023   7420         MOV     A,#0x20
   \   000025   12....       LCALL   ?XSTACK_DISP0_8
   \   000028   E0           MOVX    A,@DPTR
   \   000029   F5..         MOV     ?V0 + 4,A
   \   00002B   7421         MOV     A,#0x21
   \   00002D   12....       LCALL   ?XSTACK_DISP0_8
   \   000030   E0           MOVX    A,@DPTR
   \   000031   F5..         MOV     ?V0 + 0,A
   \   000033   7422         MOV     A,#0x22
   \   000035   12....       LCALL   ?XSTACK_DISP0_8
   \   000038   E0           MOVX    A,@DPTR
   \   000039   F5..         MOV     ?V0 + 10,A
   \   00003B   A3           INC     DPTR
   \   00003C   E0           MOVX    A,@DPTR
   \   00003D   F5..         MOV     ?V0 + 11,A
   \   00003F   7424         MOV     A,#0x24
   \   000041   12....       LCALL   ?XSTACK_DISP0_8
   \   000044   E0           MOVX    A,@DPTR
   \   000045   FF           MOV     R7,A
    676            endPointDesc_t *epDesc;
    677            zclFrameHdr_t hdr;
    678            uint8 *msgBuf;
    679            uint16 msgLen;
    680            uint8 *pBuf;
    681            uint8 options;
    682            ZStatus_t status;
    683          
    684            epDesc = afFindEndPointDesc( srcEP );
   \   000046                ; Setup parameters for call to function afFindEndPointDesc
   \   000046   12....       LCALL   ??afFindEndPointDesc?relay
   \   000049   8A..         MOV     ?V0 + 12,R2
   \   00004B   8B..         MOV     ?V0 + 13,R3
    685            if ( epDesc == NULL )
   \   00004D   EA           MOV     A,R2
   \   00004E   45..         ORL     A,?V0 + 13
   \   000050   7005         JNZ     ??zcl_SendCommand_0
    686            {
    687              return ( ZInvalidParameter ); // EMBEDDED RETURN
   \   000052   7902         MOV     R1,#0x2
   \   000054   02....       LJMP    ??zcl_SendCommand_1 & 0xFFFF
    688            }
    689          
    690          #if defined ( INTER_PAN )
    691            if ( StubAPS_InterPan( destAddr->panId, destAddr->endPoint ) )
   \                     ??zcl_SendCommand_0:
   \   000057                ; Setup parameters for call to function StubAPS_InterPan
   \   000057   85..82       MOV     DPL,?V0 + 14
   \   00005A   85..83       MOV     DPH,?V0 + 15
   \   00005D   A3           INC     DPTR
   \   00005E   A3           INC     DPTR
   \   00005F   A3           INC     DPTR
   \   000060   A3           INC     DPTR
   \   000061   A3           INC     DPTR
   \   000062   A3           INC     DPTR
   \   000063   A3           INC     DPTR
   \   000064   A3           INC     DPTR
   \   000065   A3           INC     DPTR
   \   000066   E0           MOVX    A,@DPTR
   \   000067   F9           MOV     R1,A
   \   000068   85..82       MOV     DPL,?V0 + 14
   \   00006B   85..83       MOV     DPH,?V0 + 15
   \   00006E   A3           INC     DPTR
   \   00006F   A3           INC     DPTR
   \   000070   A3           INC     DPTR
   \   000071   A3           INC     DPTR
   \   000072   A3           INC     DPTR
   \   000073   A3           INC     DPTR
   \   000074   A3           INC     DPTR
   \   000075   A3           INC     DPTR
   \   000076   A3           INC     DPTR
   \   000077   A3           INC     DPTR
   \   000078   12....       LCALL   ?Subroutine97 & 0xFFFF
   \                     ??CrossCallReturnLabel_145:
   \   00007B   6005         JZ      ??zcl_SendCommand_2
    692            {
    693              options = AF_TX_OPTIONS_NONE;
   \   00007D   75..00       MOV     ?V0 + 6,#0x0
   \   000080   800C         SJMP    ??zcl_SendCommand_3
    694            }
    695            else
    696          #endif
    697            {
    698              options = zclGetClusterOption( srcEP, clusterID );
   \                     ??zcl_SendCommand_2:
   \   000082                ; Setup parameters for call to function zclGetClusterOption
   \   000082   AA..         MOV     R2,?V0 + 2
   \   000084   AB..         MOV     R3,?V0 + 3
   \   000086   A9..         MOV     R1,?V0 + 7
   \   000088   12....       LCALL   ??zclGetClusterOption?relay
   \   00008B   E9           MOV     A,R1
   \   00008C   F5..         MOV     ?V0 + 6,A
    699            }
    700          
    701            osal_memset( &hdr, 0, sizeof( zclFrameHdr_t ) );
   \                     ??zcl_SendCommand_3:
   \   00008E                ; Setup parameters for call to function osal_memset
   \   00008E   7C06         MOV     R4,#0x6
   \   000090   7D00         MOV     R5,#0x0
   \   000092   7900         MOV     R1,#0x0
   \   000094   85..82       MOV     DPL,?XSP + 0
   \   000097   85..83       MOV     DPH,?XSP + 1
   \   00009A   AA82         MOV     R2,DPL
   \   00009C   AB83         MOV     R3,DPH
   \   00009E   12....       LCALL   ??osal_memset?relay
    702          
    703            // Not Profile wide command (like READ, WRITE)
    704            if ( specific )
   \   0000A1   E5..         MOV     A,?V0 + 1
   \   0000A3   85..82       MOV     DPL,?XSP + 0
   \   0000A6   85..83       MOV     DPH,?XSP + 1
   \   0000A9   6015         JZ      ??zcl_SendCommand_4
    705            {
    706              hdr.fc.type = ZCL_FRAME_TYPE_SPECIFIC_CMD;
   \   0000AB   E0           MOVX    A,@DPTR
   \   0000AC   54FC         ANL     A,#0xfc
   \   0000AE   F8           MOV     R0,A
   \   0000AF   A3           INC     DPTR
   \   0000B0   E0           MOVX    A,@DPTR
   \   0000B1   F9           MOV     R1,A
   \   0000B2   E8           MOV     A,R0
   \   0000B3   4401         ORL     A,#0x1
   \   0000B5   85..82       MOV     DPL,?XSP + 0
   \   0000B8   85..83       MOV     DPH,?XSP + 1
   \   0000BB   F0           MOVX    @DPTR,A
   \   0000BC   A3           INC     DPTR
   \   0000BD   E9           MOV     A,R1
   \   0000BE   8003         SJMP    ??zcl_SendCommand_5
    707            }
    708            else
    709            {
    710              hdr.fc.type = ZCL_FRAME_TYPE_PROFILE_CMD;
   \                     ??zcl_SendCommand_4:
   \   0000C0   E0           MOVX    A,@DPTR
   \   0000C1   54FC         ANL     A,#0xfc
    711            }
   \                     ??zcl_SendCommand_5:
   \   0000C3   12....       LCALL   ?Subroutine40 & 0xFFFF
    712          
    713            if ( ( epDesc->simpleDesc == NULL ) ||
    714                 ( zcl_DeviceOperational( srcEP, clusterID, hdr.fc.type,
    715                                          cmd, epDesc->simpleDesc->AppProfId ) == FALSE ) )
   \                     ??CrossCallReturnLabel_43:
   \   0000C6   12....       LCALL   ??Subroutine258_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_543:
   \   0000C9   6028         JZ      ??zcl_SendCommand_6
   \   0000CB                ; Setup parameters for call to function zcl_DeviceOperational
   \   0000CB   85..82       MOV     DPL,?V0 + 12
   \   0000CE   85..83       MOV     DPH,?V0 + 13
   \   0000D1   12....       LCALL   ?Subroutine104 & 0xFFFF
   \                     ??CrossCallReturnLabel_296:
   \   0000D4   12....       LCALL   ?PUSH_XSTACK8_X_TWO
   \   0000D7   EE           MOV     A,R6
   \   0000D8   FD           MOV     R5,A
   \   0000D9   7402         MOV     A,#0x2
   \   0000DB   12....       LCALL   ?XSTACK_DISP0_8
   \   0000DE   E0           MOVX    A,@DPTR
   \   0000DF   5403         ANL     A,#0x3
   \   0000E1   FC           MOV     R4,A
   \   0000E2   AA..         MOV     R2,?V0 + 2
   \   0000E4   AB..         MOV     R3,?V0 + 3
   \   0000E6   A9..         MOV     R1,?V0 + 7
   \   0000E8   12....       LCALL   ??zcl_DeviceOperational?relay
   \   0000EB   7402         MOV     A,#0x2
   \   0000ED   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000F0   E9           MOV     A,R1
   \   0000F1   7005         JNZ     ??zcl_SendCommand_7
    716            {
    717              return ( ZFailure ); // EMBEDDED RETURN
   \                     ??zcl_SendCommand_6:
   \   0000F3   7901         MOV     R1,#0x1
   \   0000F5   02....       LJMP    ??zcl_SendCommand_1 & 0xFFFF
    718            }
    719          
    720            // Fill in the Maufacturer Code
    721            if ( manuCode != 0 )
   \                     ??zcl_SendCommand_7:
   \   0000F8   E5..         MOV     A,?V0 + 10
   \   0000FA   45..         ORL     A,?V0 + 11
   \   0000FC   6016         JZ      ??zcl_SendCommand_8
    722            {
    723              hdr.fc.manuSpecific = 1;
   \   0000FE   85..82       MOV     DPL,?XSP + 0
   \   000101   85..83       MOV     DPH,?XSP + 1
   \   000104   E0           MOVX    A,@DPTR
   \   000105   4404         ORL     A,#0x4
   \   000107   F0           MOVX    @DPTR,A
    724              hdr.manuCode = manuCode;
   \   000108   7402         MOV     A,#0x2
   \   00010A   12....       LCALL   ?XSTACK_DISP0_8
   \   00010D   E5..         MOV     A,?V0 + 10
   \   00010F   F0           MOVX    @DPTR,A
   \   000110   A3           INC     DPTR
   \   000111   E5..         MOV     A,?V0 + 11
   \   000113   F0           MOVX    @DPTR,A
    725            }
    726          
    727            // Set the Command Direction
    728            if ( direction )
   \                     ??zcl_SendCommand_8:
   \   000114   E5..         MOV     A,?V0 + 4
   \   000116   85..82       MOV     DPL,?XSP + 0
   \   000119   85..83       MOV     DPH,?XSP + 1
   \   00011C   6005         JZ      ??zcl_SendCommand_9
    729            {
    730              hdr.fc.direction = ZCL_FRAME_SERVER_CLIENT_DIR;
   \   00011E   E0           MOVX    A,@DPTR
   \   00011F   4408         ORL     A,#0x8
   \   000121   8003         SJMP    ??zcl_SendCommand_10
    731            }
    732            else
    733            {
    734              hdr.fc.direction = ZCL_FRAME_CLIENT_SERVER_DIR;
   \                     ??zcl_SendCommand_9:
   \   000123   E0           MOVX    A,@DPTR
   \   000124   54F7         ANL     A,#0xf7
   \                     ??zcl_SendCommand_10:
   \   000126   F0           MOVX    @DPTR,A
    735            }
    736          
    737            // Set the Disable Default Response field
    738            if ( disableDefaultRsp )
   \   000127   E5..         MOV     A,?V0 + 0
   \   000129   6005         JZ      ??zcl_SendCommand_11
    739            {
    740              hdr.fc.disableDefaultRsp = 1;
   \   00012B   E0           MOVX    A,@DPTR
   \   00012C   4410         ORL     A,#0x10
   \   00012E   8003         SJMP    ??zcl_SendCommand_12
    741            }
    742            else
    743            {
    744              hdr.fc.disableDefaultRsp = 0;
   \                     ??zcl_SendCommand_11:
   \   000130   E0           MOVX    A,@DPTR
   \   000131   54EF         ANL     A,#0xef
   \                     ??zcl_SendCommand_12:
   \   000133   F0           MOVX    @DPTR,A
    745            }
    746          
    747            // Fill in the Transaction Sequence Number
    748            hdr.transSeqNum = seqNum;
   \   000134   7404         MOV     A,#0x4
   \   000136   12....       LCALL   ?XSTACK_DISP0_8
   \   000139   EF           MOV     A,R7
   \   00013A   F0           MOVX    @DPTR,A
    749          
    750            // Fill in the command
    751            hdr.commandID = cmd;
   \   00013B   7405         MOV     A,#0x5
   \   00013D   12....       LCALL   ?XSTACK_DISP0_8
   \   000140   EE           MOV     A,R6
   \   000141   F0           MOVX    @DPTR,A
    752          
    753            // calculate the needed buffer size
    754            msgLen = zclCalcHdrSize( &hdr );
   \   000142   75..03       MOV     ?V0 + 0,#0x3
   \   000145   85..82       MOV     DPL,?XSP + 0
   \   000148   85..83       MOV     DPH,?XSP + 1
   \   00014B   E0           MOVX    A,@DPTR
   \   00014C   5404         ANL     A,#0x4
   \   00014E   6003         JZ      ??zcl_SendCommand_13
   \   000150   75..05       MOV     ?V0 + 0,#0x5
    755            msgLen += cmdFormatLen;
   \                     ??zcl_SendCommand_13:
   \   000153   7425         MOV     A,#0x25
   \   000155   12....       LCALL   ?XSTACK_DISP0_8
   \   000158   E0           MOVX    A,@DPTR
   \   000159   25..         ADD     A,?V0 + 0
   \   00015B   F5..         MOV     ?V0 + 0,A
   \   00015D   A3           INC     DPTR
   \   00015E   E0           MOVX    A,@DPTR
   \   00015F   12....       LCALL   ??Subroutine251_0 & 0xFFFF
    756          
    757            // Allocate the buffer needed
    758            msgBuf = osal_mem_alloc( msgLen );
   \                     ??CrossCallReturnLabel_499:
   \   000162                ; Setup parameters for call to function osal_mem_alloc
   \   000162   AA..         MOV     R2,?V0 + 0
   \   000164   12....       LCALL   ?Subroutine122 & 0xFFFF
    759            if ( msgBuf != NULL )
   \                     ??CrossCallReturnLabel_184:
   \   000167   6070         JZ      ??zcl_SendCommand_14
    760            {
    761              // Fill in the ZCL Header
    762              pBuf = zclBuildHdr( &hdr, msgBuf );
    763          
    764              // Fill in the command frame
    765              osal_memcpy( pBuf, cmdFormat, cmdFormatLen );
   \   000169                ; Setup parameters for call to function osal_memcpy
   \   000169   7427         MOV     A,#0x27
   \   00016B   12....       LCALL   ?XSTACK_DISP0_8
   \   00016E   12....       LCALL   ?Subroutine70 & 0xFFFF
   \                     ??CrossCallReturnLabel_97:
   \   000171   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   000174   7428         MOV     A,#0x28
   \   000176   12....       LCALL   ?XSTACK_DISP0_8
   \   000179   12....       LCALL   ??Subroutine235_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_418:
   \   00017C   EC           MOV     A,R4
   \   00017D   FE           MOV     R6,A
   \   00017E   ED           MOV     A,R5
   \   00017F   FF           MOV     R7,A
   \   000180                ; Setup parameters for call to function zclBuildHdr
   \   000180   AC..         MOV     R4,?V0 + 4
   \   000182   AD..         MOV     R5,?V0 + 5
   \   000184   7403         MOV     A,#0x3
   \   000186   12....       LCALL   ?XSTACK_DISP0_8
   \   000189   AA82         MOV     R2,DPL
   \   00018B   AB83         MOV     R3,DPH
   \   00018D   12....       LCALL   ??zclBuildHdr?relay
   \   000190   EE           MOV     A,R6
   \   000191   FC           MOV     R4,A
   \   000192   EF           MOV     A,R7
   \   000193   FD           MOV     R5,A
   \   000194   12....       LCALL   ??Subroutine238_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_442:
   \   000197   12....       LCALL   ?DEALLOC_XSTACK8
    766          
    767              status = AF_DataRequest( destAddr, epDesc, clusterID, msgLen, msgBuf,
    768                                       &zcl_TransID, options, AF_DEFAULT_RADIUS );
   \   00019A                ; Setup parameters for call to function AF_DataRequest
   \   00019A   75..1E       MOV     ?V0 + 8,#0x1e
   \   00019D   78..         MOV     R0,#?V0 + 8
   \   00019F   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0001A2   75....       MOV     ?V0 + 8,#zcl_TransID & 0xff
   \   0001A5   75....       MOV     ?V0 + 9,#(zcl_TransID >> 8) & 0xff
   \   0001A8   78..         MOV     R0,#?V0 + 8
   \   0001AA   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0001AD   78..         MOV     R0,#?V0 + 4
   \   0001AF   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0001B2   78..         MOV     R0,#?V0 + 0
   \   0001B4   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0001B7   78..         MOV     R0,#?V0 + 2
   \   0001B9   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0001BC   A9..         MOV     R1,?V0 + 6
   \   0001BE   AC..         MOV     R4,?V0 + 12
   \   0001C0   AD..         MOV     R5,?V0 + 13
   \   0001C2   AA..         MOV     R2,?V0 + 14
   \   0001C4   AB..         MOV     R3,?V0 + 15
   \   0001C6   12....       LCALL   ??AF_DataRequest?relay
   \   0001C9   7409         MOV     A,#0x9
   \   0001CB   12....       LCALL   ?DEALLOC_XSTACK8
   \   0001CE   E9           MOV     A,R1
   \   0001CF   FE           MOV     R6,A
    769              osal_mem_free ( msgBuf );
   \   0001D0                ; Setup parameters for call to function osal_mem_free
   \   0001D0   AA..         MOV     R2,?V0 + 4
   \   0001D2   AB..         MOV     R3,?V0 + 5
   \   0001D4   12....       LCALL   ??osal_mem_free?relay
   \   0001D7   8002         SJMP    ??zcl_SendCommand_15
    770            }
    771            else
    772            {
    773              status = ZMemError;
   \                     ??zcl_SendCommand_14:
   \   0001D9   7E10         MOV     R6,#0x10
    774            }
    775          
    776            return ( status );
   \                     ??zcl_SendCommand_15:
   \   0001DB   EE           MOV     A,R6
   \   0001DC   F9           MOV     R1,A
   \                     ??zcl_SendCommand_1:
   \   0001DD   7406         MOV     A,#0x6
   \   0001DF   02....       LJMP    ?Subroutine4 & 0xFFFF
    777          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine104:
   \   000000   A3           INC     DPTR
   \   000001   A3           INC     DPTR
   \   000002   A3           INC     DPTR
   \   000003                REQUIRE ??Subroutine208_0
   \   000003                ; // Fall through to label ??Subroutine208_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine208_0:
   \   000000   A3           INC     DPTR
   \   000001   E0           MOVX    A,@DPTR
   \   000002   F583         MOV     DPH,A
   \   000004   8882         MOV     DPL,R0
   \   000006   A3           INC     DPTR
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine97:
   \   000000   12....       LCALL   ?Subroutine172 & 0xFFFF
   \                     ??CrossCallReturnLabel_415:
   \   000003   12....       LCALL   ??StubAPS_InterPan?relay
   \   000006   E9           MOV     A,R1
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine70:
   \   000000   12....       LCALL   ?Subroutine173 & 0xFFFF
   \                     ??CrossCallReturnLabel_529:
   \   000003   75..00       MOV     ?V0 + 10,#0x0
   \   000006   78..         MOV     R0,#?V0 + 8
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine235_0:
   \   000000   12....       LCALL   ??Subroutine236_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_433:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine238_0:
   \   000000   12....       LCALL   ??osal_memcpy?relay
   \   000003   7403         MOV     A,#0x3
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine251_0:
   \   000000   3400         ADDC    A,#0x0
   \   000002   F5..         MOV     ?V0 + 1,A
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine122:
   \   000000   FB           MOV     R3,A
   \   000001   12....       LCALL   ??osal_mem_alloc?relay
   \   000004   8A..         MOV     ?V0 + 4,R2
   \   000006   8B..         MOV     ?V0 + 5,R3
   \   000008   EA           MOV     A,R2
   \   000009   45..         ORL     A,?V0 + 5
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine173:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F5..         MOV     ?V0 + 8,A
   \   000003   A3           INC     DPTR
   \   000004   E0           MOVX    A,@DPTR
   \   000005   F5..         MOV     ?V0 + 9,A
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine258_0:
   \   000000   12....       LCALL   ??Subroutine260_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_562:
   \   000003   E8           MOV     A,R0
   \   000004   49           ORL     A,R1
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine260_0:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F8           MOV     R0,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   F9           MOV     R1,A
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine4:
   \   000000   12....       LCALL   ?DEALLOC_XSTACK8
   \   000003                REQUIRE ??Subroutine261_0
   \   000003                ; // Fall through to label ??Subroutine261_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine261_0:
   \   000000   7F10         MOV     R7,#0x10
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine40:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   85..82       MOV     DPL,?V0 + 12
   \   000004   85..83       MOV     DPH,?V0 + 13
   \   000007   A3           INC     DPTR
   \   000008   A3           INC     DPTR
   \   000009   A3           INC     DPTR
   \   00000A   22           RET
    778          
    779          #ifdef ZCL_READ
    780          /*********************************************************************
    781           * @fn      zcl_SendRead
    782           *
    783           * @brief   Send a Read command
    784           *
    785           * @param   srcEP - Application's endpoint
    786           * @param   dstAddr - destination address
    787           * @param   clusterID - cluster ID
    788           * @param   readCmd - read command to be sent
    789           * @param   direction - direction of the command
    790           * @param   seqNum - transaction sequence number
    791           *
    792           * @return  ZSuccess if OK
    793           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    794          ZStatus_t zcl_SendRead( uint8 srcEP, afAddrType_t *dstAddr,
   \                     zcl_SendRead:
    795                                  uint16 clusterID, zclReadCmd_t *readCmd,
    796                                  uint8 direction, uint8 disableDefaultRsp, uint8 seqNum)
    797          {
   \   000000   74EA         MOV     A,#-0x16
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 22
   \   000005                ; Auto size: 0
   \   000005   89..         MOV     ?V0 + 2,R1
   \   000007   8A..         MOV     ?V0 + 12,R2
   \   000009   8B..         MOV     ?V0 + 13,R3
   \   00000B   EC           MOV     A,R4
   \   00000C   FE           MOV     R6,A
   \   00000D   ED           MOV     A,R5
   \   00000E   FF           MOV     R7,A
   \   00000F   7416         MOV     A,#0x16
   \   000011   12....       LCALL   ?XSTACK_DISP0_8
   \   000014   12....       LCALL   ?Subroutine69 & 0xFFFF
   \                     ??CrossCallReturnLabel_93:
   \   000017   12....       LCALL   ?XSTACK_DISP0_8
   \   00001A   12....       LCALL   ?Subroutine106 & 0xFFFF
   \                     ??CrossCallReturnLabel_162:
   \   00001D   12....       LCALL   ?XSTACK_DISP0_8
   \   000020   E0           MOVX    A,@DPTR
   \   000021   F5..         MOV     ?V0 + 8,A
   \   000023   741A         MOV     A,#0x1a
   \   000025   12....       LCALL   ?XSTACK_DISP0_8
   \   000028   E0           MOVX    A,@DPTR
   \   000029   F5..         MOV     ?V0 + 9,A
    798            uint16 dataLen;
    799            uint8 *buf;
    800            uint8 *pBuf;
    801            ZStatus_t status;
    802          
    803            dataLen = readCmd->numAttr * 2; // Attribute ID
   \   00002B   85..82       MOV     DPL,?V0 + 4
   \   00002E   85..83       MOV     DPH,?V0 + 5
   \   000031   E0           MOVX    A,@DPTR
   \   000032   C3           CLR     C
   \   000033   33           RLC     A
   \   000034   F5..         MOV     ?V0 + 6,A
   \   000036   E4           CLR     A
   \   000037   33           RLC     A
   \   000038   F5..         MOV     ?V0 + 7,A
    804          
    805            buf = osal_mem_alloc( dataLen );
   \   00003A                ; Setup parameters for call to function osal_mem_alloc
   \   00003A   AA..         MOV     R2,?V0 + 6
   \   00003C   12....       LCALL   ??Subroutine219_0 & 0xFFFF
    806            if ( buf != NULL )
   \                     ??CrossCallReturnLabel_349:
   \   00003F   607F         JZ      ??zcl_SendRead_0
    807            {
    808              uint8 i;
    809          
    810              // Load the buffer - serially
    811              pBuf = buf;
   \   000041   A8..         MOV     R0,?V0 + 0
   \   000043   A9..         MOV     R1,?V0 + 1
    812              for (i = 0; i < readCmd->numAttr; i++)
   \   000045   75..00       MOV     ?V0 + 10,#0x0
   \   000048   801B         SJMP    ??zcl_SendRead_1
    813              {
    814                *pBuf++ = LO_UINT16( readCmd->attrID[i] );
   \                     ??zcl_SendRead_2:
   \   00004A   E5..         MOV     A,?V0 + 10
   \   00004C   C3           CLR     C
   \   00004D   33           RLC     A
   \   00004E   FA           MOV     R2,A
   \   00004F   E4           CLR     A
   \   000050   33           RLC     A
   \   000051   FB           MOV     R3,A
   \   000052   12....       LCALL   ?Subroutine139 & 0xFFFF
   \                     ??CrossCallReturnLabel_206:
   \   000055   AA82         MOV     R2,DPL
   \   000057   AB83         MOV     R3,DPH
   \   000059   12....       LCALL   ?Subroutine174 & 0xFFFF
    815                *pBuf++ = HI_UINT16( readCmd->attrID[i] );
   \                     ??CrossCallReturnLabel_258:
   \   00005C   8A82         MOV     DPL,R2
   \   00005E   8B83         MOV     DPH,R3
   \   000060   12....       LCALL   ?Subroutine165 & 0xFFFF
    816              }
   \                     ??CrossCallReturnLabel_299:
   \   000063   05..         INC     ?V0 + 10
   \                     ??zcl_SendRead_1:
   \   000065   85..82       MOV     DPL,?V0 + 4
   \   000068   85..83       MOV     DPH,?V0 + 5
   \   00006B   E0           MOVX    A,@DPTR
   \   00006C   FA           MOV     R2,A
   \   00006D   E5..         MOV     A,?V0 + 10
   \   00006F   C3           CLR     C
   \   000070   9A           SUBB    A,R2
   \   000071   40D7         JC      ??zcl_SendRead_2
    817          
    818              status = zcl_SendCommand( srcEP, dstAddr, clusterID, ZCL_CMD_READ, FALSE,
    819                                        direction, disableDefaultRsp, 0, seqNum, dataLen, buf );
   \   000073                ; Setup parameters for call to function zcl_SendCommand
   \   000073   78..         MOV     R0,#?V0 + 0
   \   000075   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000078   78..         MOV     R0,#?V0 + 6
   \   00007A   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00007D   E5..         MOV     A,?V0 + 9
   \   00007F   F5..         MOV     ?V0 + 4,A
   \   000081   78..         MOV     R0,#?V0 + 4
   \   000083   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000086   E4           CLR     A
   \   000087   F5..         MOV     ?V0 + 4,A
   \   000089   F5..         MOV     ?V0 + 5,A
   \   00008B   78..         MOV     R0,#?V0 + 4
   \   00008D   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000090   E5..         MOV     A,?V0 + 8
   \   000092   F5..         MOV     ?V0 + 4,A
   \   000094   78..         MOV     R0,#?V0 + 4
   \   000096   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000099   78..         MOV     R0,#?V0 + 3
   \   00009B   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00009E   75..00       MOV     ?V0 + 3,#0x0
   \   0000A1   78..         MOV     R0,#?V0 + 3
   \   0000A3   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000A6   78..         MOV     R0,#?V0 + 3
   \   0000A8   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000AB   EE           MOV     A,R6
   \   0000AC   FC           MOV     R4,A
   \   0000AD   EF           MOV     A,R7
   \   0000AE   FD           MOV     R5,A
   \   0000AF   12....       LCALL   ??Subroutine210_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_304:
   \   0000B2   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000B5   E9           MOV     A,R1
   \   0000B6   FE           MOV     R6,A
    820              osal_mem_free( buf );
   \   0000B7                ; Setup parameters for call to function osal_mem_free
   \   0000B7   AA..         MOV     R2,?V0 + 0
   \   0000B9   AB..         MOV     R3,?V0 + 1
   \   0000BB   12....       LCALL   ??osal_mem_free?relay
   \   0000BE   8002         SJMP    ??zcl_SendRead_3
    821            }
    822            else
    823            {
    824              status = ZMemError;
   \                     ??zcl_SendRead_0:
   \   0000C0   7E10         MOV     R6,#0x10
    825            }
    826          
    827            return ( status );
   \                     ??zcl_SendRead_3:
   \   0000C2   02....       LJMP    ?Subroutine12 & 0xFFFF
    828          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine165:
   \   000000   A3           INC     DPTR
   \   000001                REQUIRE ??Subroutine209_0
   \   000001                ; // Fall through to label ??Subroutine209_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine209_0:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   8882         MOV     DPL,R0
   \   000003   8983         MOV     DPH,R1
   \   000005   F0           MOVX    @DPTR,A
   \   000006   A3           INC     DPTR
   \   000007   08           INC     R0
   \   000008   A983         MOV     R1,DPH
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine210_0:
   \   000000   AA..         MOV     R2,?V0 + 12
   \   000002   AB..         MOV     R3,?V0 + 13
   \   000004   A9..         MOV     R1,?V0 + 2
   \   000006                REQUIRE ??Subroutine211_0
   \   000006                ; // Fall through to label ??Subroutine211_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine211_0:
   \   000000   12....       LCALL   ??zcl_SendCommand?relay
   \   000003   740B         MOV     A,#0xb
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine12:
   \   000000   EE           MOV     A,R6
   \   000001   F9           MOV     R1,A
   \   000002   80..         SJMP    ??Subroutine222_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine219_0:
   \   000000   12....       LCALL   ?Subroutine186 & 0xFFFF
   \                     ??CrossCallReturnLabel_350:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine106:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F5..         MOV     ?V0 + 3,A
   \   000003   7419         MOV     A,#0x19
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine69:
   \   000000   12....       LCALL   ?Subroutine169 & 0xFFFF
   \                     ??CrossCallReturnLabel_250:
   \   000003   7418         MOV     A,#0x18
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine222_0:
   \   000000   7F0E         MOV     R7,#0xe
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine186:
   \   000000   FB           MOV     R3,A
   \   000001   12....       LCALL   ??osal_mem_alloc?relay
   \   000004   8A..         MOV     ?V0 + 0,R2
   \   000006   8B..         MOV     ?V0 + 1,R3
   \   000008   EA           MOV     A,R2
   \   000009   45..         ORL     A,?V0 + 1
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine174:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   8882         MOV     DPL,R0
   \   000003   8983         MOV     DPH,R1
   \   000005   F0           MOVX    @DPTR,A
   \   000006   A3           INC     DPTR
   \   000007   A882         MOV     R0,DPL
   \   000009   A983         MOV     R1,DPH
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine169:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F5..         MOV     ?V0 + 4,A
   \   000003   A3           INC     DPTR
   \   000004   E0           MOVX    A,@DPTR
   \   000005   F5..         MOV     ?V0 + 5,A
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine139:
   \   000000   E5..         MOV     A,?V0 + 4
   \   000002   2A           ADD     A,R2
   \   000003   F582         MOV     DPL,A
   \   000005   E5..         MOV     A,?V0 + 5
   \   000007   3B           ADDC    A,R3
   \   000008   F583         MOV     DPH,A
   \   00000A   A3           INC     DPTR
   \   00000B   22           RET
    829          
    830          /*********************************************************************
    831           * @fn      zcl_SendReadRsp
    832           *
    833           * @brief   Send a Read Response command.
    834           *
    835           * @param   srcEP - Application's endpoint
    836           * @param   dstAddr - destination address
    837           * @param   clusterID - cluster ID
    838           * @param   readRspCmd - read response command to be sent
    839           * @param   direction - direction of the command
    840           * @param   seqNum - transaction sequence number
    841           *
    842           * @return  ZSuccess if OK
    843           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    844          ZStatus_t zcl_SendReadRsp( uint8 srcEP, afAddrType_t *dstAddr,
   \                     zcl_SendReadRsp:
    845                                     uint16 clusterID, zclReadRspCmd_t *readRspCmd,
    846                                     uint8 direction, uint8 disableDefaultRsp, uint8 seqNum )
    847          {
   \   000000   74E8         MOV     A,#-0x18
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 24
   \   000005                ; Auto size: 4
   \   000005   74FC         MOV     A,#-0x4
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   7402         MOV     A,#0x2
   \   00000C   12....       LCALL   ?XSTACK_DISP0_8
   \   00000F   12....       LCALL   ??Subroutine267_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_587:
   \   000012   89..         MOV     ?V0 + 3,R1
   \   000014   8C..         MOV     ?V0 + 4,R4
   \   000016   8D..         MOV     ?V0 + 5,R5
   \   000018   741C         MOV     A,#0x1c
   \   00001A   12....       LCALL   ?XSTACK_DISP0_8
   \   00001D   E0           MOVX    A,@DPTR
   \   00001E   F5..         MOV     ?V0 + 12,A
   \   000020   A3           INC     DPTR
   \   000021   E0           MOVX    A,@DPTR
   \   000022   F5..         MOV     ?V0 + 13,A
   \   000024   741F         MOV     A,#0x1f
   \   000026   12....       LCALL   ?XSTACK_DISP0_8
   \   000029   E0           MOVX    A,@DPTR
   \   00002A   F5..         MOV     ?V0 + 15,A
   \   00002C   7420         MOV     A,#0x20
   \   00002E   12....       LCALL   ?XSTACK_DISP0_8
   \   000031   E0           MOVX    A,@DPTR
   \   000032   F5..         MOV     ?V0 + 14,A
    848            uint8 *buf;
    849            uint16 len = 0;
   \   000034   7E00         MOV     R6,#0x0
   \   000036   7F00         MOV     R7,#0x0
    850            ZStatus_t status;
    851          
    852            // calculate the size of the command
    853            for ( uint8 i = 0; i < readRspCmd->numAttr; i++ )
   \   000038   8E..         MOV     ?V0 + 0,R6
   \   00003A   8014         SJMP    ??zcl_SendReadRsp_0
    854            {
    855              zclReadRspStatus_t *statusRec = &(readRspCmd->attrList[i]);
    856          
    857              len += 2 + 1; // Attribute ID + Status
    858          
    859              if ( statusRec->status == ZCL_STATUS_SUCCESS )
    860              {
    861                len++; // Attribute Data Type length
    862          
    863                // Attribute Data length
    864                if ( statusRec->data != NULL )
    865                {
    866                  len += zclGetAttrDataLength( statusRec->dataType, statusRec->data );
    867                }
    868                else
    869                {
    870                  len += zclGetAttrDataLengthUsingCB( srcEP, clusterID, statusRec->attrID );
   \                     ??zcl_SendReadRsp_1:
   \   00003C                ; Setup parameters for call to function zclGetAttrDataLengthUsingCB
   \   00003C   12....       LCALL   ?Subroutine87 & 0xFFFF
    871                }
   \                     ??CrossCallReturnLabel_131:
   \   00003F   12....       LCALL   ??zclGetAttrDataLengthUsingCB?relay
   \                     ??zcl_SendReadRsp_2:
   \   000042   8A..         MOV     ?V0 + 6,R2
   \   000044   8B..         MOV     ?V0 + 7,R3
   \   000046   EE           MOV     A,R6
   \   000047   25..         ADD     A,?V0 + 6
   \   000049   FE           MOV     R6,A
   \   00004A   EF           MOV     A,R7
   \   00004B   35..         ADDC    A,?V0 + 7
   \   00004D   FF           MOV     R7,A
   \                     ??zcl_SendReadRsp_3:
   \   00004E   05..         INC     ?V0 + 0
   \                     ??zcl_SendReadRsp_0:
   \   000050   85..82       MOV     DPL,?V0 + 12
   \   000053   85..83       MOV     DPH,?V0 + 13
   \   000056   E0           MOVX    A,@DPTR
   \   000057   F8           MOV     R0,A
   \   000058   E5..         MOV     A,?V0 + 0
   \   00005A   C3           CLR     C
   \   00005B   98           SUBB    A,R0
   \   00005C   502B         JNC     ??zcl_SendReadRsp_4
   \   00005E   E5..         MOV     A,?V0 + 0
   \   000060   12....       LCALL   ?Subroutine140 & 0xFFFF
   \                     ??CrossCallReturnLabel_313:
   \   000063   A882         MOV     R0,DPL
   \   000065   A983         MOV     R1,DPH
   \   000067   12....       LCALL   ?Subroutine145 & 0xFFFF
   \                     ??CrossCallReturnLabel_216:
   \   00006A   A3           INC     DPTR
   \   00006B   A3           INC     DPTR
   \   00006C   E0           MOVX    A,@DPTR
   \   00006D   70DF         JNZ     ??zcl_SendReadRsp_3
   \   00006F   EE           MOV     A,R6
   \   000070   2401         ADD     A,#0x1
   \   000072   0E           INC     R6
   \   000073   EF           MOV     A,R7
   \   000074   3400         ADDC    A,#0x0
   \   000076   FF           MOV     R7,A
   \   000077   8882         MOV     DPL,R0
   \   000079   8983         MOV     DPH,R1
   \   00007B   12....       LCALL   ?Subroutine65 & 0xFFFF
   \                     ??CrossCallReturnLabel_391:
   \   00007E   8882         MOV     DPL,R0
   \   000080   8983         MOV     DPH,R1
   \   000082   60B8         JZ      ??zcl_SendReadRsp_1
   \   000084                ; Setup parameters for call to function zclGetAttrDataLength
   \   000084   12....       LCALL   ?Subroutine94 & 0xFFFF
    872              }
    873            }
   \                     ??CrossCallReturnLabel_321:
   \   000087   80B9         SJMP    ??zcl_SendReadRsp_2
    874          
    875            buf = osal_mem_alloc( len );
   \                     ??zcl_SendReadRsp_4:
   \   000089                ; Setup parameters for call to function osal_mem_alloc
   \   000089   EE           MOV     A,R6
   \   00008A   FA           MOV     R2,A
   \   00008B   EF           MOV     A,R7
   \   00008C   FB           MOV     R3,A
   \   00008D   12....       LCALL   ??osal_mem_alloc?relay
   \   000090   8A..         MOV     ?V0 + 0,R2
   \   000092   8B..         MOV     ?V0 + 1,R3
   \   000094   8A..         MOV     ?V0 + 6,R2
   \   000096   8B..         MOV     ?V0 + 7,R3
    876            if ( buf != NULL )
   \   000098   EA           MOV     A,R2
   \   000099   45..         ORL     A,?V0 + 7
   \   00009B   7003         JNZ     $+5
   \   00009D   02....       LJMP    ??zcl_SendReadRsp_5 & 0xFFFF
    877            {
    878              // Load the buffer - serially
    879              uint8 *pBuf = buf;
    880              for ( uint8 i = 0; i < readRspCmd->numAttr; i++ )
   \   0000A0   75..00       MOV     ?V0 + 2,#0x0
   \   0000A3   803C         SJMP    ??zcl_SendReadRsp_6
    881              {
    882                zclReadRspStatus_t *statusRec = &(readRspCmd->attrList[i]);
    883          
    884                *pBuf++ = LO_UINT16( statusRec->attrID );
    885                *pBuf++ = HI_UINT16( statusRec->attrID );
    886                *pBuf++ = statusRec->status;
    887          
    888                if ( statusRec->status == ZCL_STATUS_SUCCESS )
    889                {
    890                  *pBuf++ = statusRec->dataType;
    891          
    892                  if ( statusRec->data != NULL )
    893                  {
    894                    // Copy attribute data to the buffer to be sent out
    895                    pBuf = zclSerializeData( statusRec->dataType, statusRec->data, pBuf );
    896                  }
    897                  else
    898                  {
    899                    uint16 dataLen;
    900          
    901                    // Read attribute data directly into the buffer to be sent out
    902                    zclReadAttrDataUsingCB( srcEP, clusterID, statusRec->attrID, pBuf, &dataLen );
   \                     ??zcl_SendReadRsp_7:
   \   0000A5                ; Setup parameters for call to function zclReadAttrDataUsingCB
   \   0000A5   85..82       MOV     DPL,?XSP + 0
   \   0000A8   85..83       MOV     DPH,?XSP + 1
   \   0000AB   8582..       MOV     ?V0 + 10,DPL
   \   0000AE   8583..       MOV     ?V0 + 11,DPH
   \   0000B1   78..         MOV     R0,#?V0 + 10
   \   0000B3   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000B6   78..         MOV     R0,#?V0 + 0
   \   0000B8   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000BB   85..82       MOV     DPL,?V0 + 8
   \   0000BE   85..83       MOV     DPH,?V0 + 9
   \   0000C1   12....       LCALL   ?Subroutine87 & 0xFFFF
   \                     ??CrossCallReturnLabel_132:
   \   0000C4   12....       LCALL   ??zclReadAttrDataUsingCB?relay
   \   0000C7   7404         MOV     A,#0x4
   \   0000C9   12....       LCALL   ?DEALLOC_XSTACK8
    903                    pBuf += dataLen;
   \   0000CC   85..82       MOV     DPL,?XSP + 0
   \   0000CF   85..83       MOV     DPH,?XSP + 1
   \   0000D2   12....       LCALL   ??Subroutine248_0 & 0xFFFF
    904                  }
   \                     ??CrossCallReturnLabel_476:
   \   0000D5   E5..         MOV     A,?V0 + 0
   \   0000D7   28           ADD     A,R0
   \   0000D8   F5..         MOV     ?V0 + 0,A
   \   0000DA   E5..         MOV     A,?V0 + 1
   \   0000DC   39           ADDC    A,R1
   \   0000DD   F5..         MOV     ?V0 + 1,A
   \                     ??zcl_SendReadRsp_8:
   \   0000DF   05..         INC     ?V0 + 2
   \                     ??zcl_SendReadRsp_6:
   \   0000E1   85..82       MOV     DPL,?V0 + 12
   \   0000E4   85..83       MOV     DPH,?V0 + 13
   \   0000E7   12....       LCALL   ??Subroutine215_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_325:
   \   0000EA   504D         JNC     ??zcl_SendReadRsp_9
   \   0000EC   E5..         MOV     A,?V0 + 2
   \   0000EE   12....       LCALL   ?Subroutine140 & 0xFFFF
   \                     ??CrossCallReturnLabel_314:
   \   0000F1   8582..       MOV     ?V0 + 8,DPL
   \   0000F4   8583..       MOV     ?V0 + 9,DPH
   \   0000F7   12....       LCALL   ?Subroutine30 & 0xFFFF
   \                     ??CrossCallReturnLabel_29:
   \   0000FA   12....       LCALL   ?Subroutine50 & 0xFFFF
   \                     ??CrossCallReturnLabel_54:
   \   0000FD   E5..         MOV     A,?V0 + 8
   \   0000FF   2402         ADD     A,#0x2
   \   000101   F8           MOV     R0,A
   \   000102   E5..         MOV     A,?V0 + 9
   \   000104   12....       LCALL   ??Subroutine223_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_357:
   \   000107   12....       LCALL   ?Subroutine50 & 0xFFFF
   \                     ??CrossCallReturnLabel_55:
   \   00010A   8882         MOV     DPL,R0
   \   00010C   8983         MOV     DPH,R1
   \   00010E   E0           MOVX    A,@DPTR
   \   00010F   70CE         JNZ     ??zcl_SendReadRsp_8
   \   000111   85..82       MOV     DPL,?V0 + 8
   \   000114   85..83       MOV     DPH,?V0 + 9
   \   000117   A3           INC     DPTR
   \   000118   A3           INC     DPTR
   \   000119   A3           INC     DPTR
   \   00011A   12....       LCALL   ?Subroutine30 & 0xFFFF
   \                     ??CrossCallReturnLabel_30:
   \   00011D   A3           INC     DPTR
   \   00011E   12....       LCALL   ??Subroutine257_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_551:
   \   000121   6082         JZ      ??zcl_SendReadRsp_7
   \   000123                ; Setup parameters for call to function zclSerializeData
   \   000123   AC..         MOV     R4,?V0 + 0
   \   000125   AD..         MOV     R5,?V0 + 1
   \   000127   12....       LCALL   ?Subroutine98 & 0xFFFF
    905                }
    906              } // for loop
   \                     ??CrossCallReturnLabel_409:
   \   00012A   85..82       MOV     DPL,?V0 + 8
   \   00012D   85..83       MOV     DPH,?V0 + 9
   \   000130   12....       LCALL   ?Subroutine182 & 0xFFFF
   \                     ??CrossCallReturnLabel_309:
   \   000133   8A..         MOV     ?V0 + 0,R2
   \   000135   8B..         MOV     ?V0 + 1,R3
   \   000137   80A6         SJMP    ??zcl_SendReadRsp_8
    907          
    908              status = zcl_SendCommand( srcEP, dstAddr, clusterID, ZCL_CMD_READ_RSP, FALSE,
    909                                        direction, disableDefaultRsp, 0, seqNum, len, buf );
   \                     ??zcl_SendReadRsp_9:
   \   000139                ; Setup parameters for call to function zcl_SendCommand
   \   000139   78..         MOV     R0,#?V0 + 6
   \   00013B   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00013E   8E..         MOV     ?V0 + 0,R6
   \   000140   8F..         MOV     ?V0 + 1,R7
   \   000142   78..         MOV     R0,#?V0 + 0
   \   000144   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000147   E5..         MOV     A,?V0 + 14
   \   000149   F5..         MOV     ?V0 + 0,A
   \   00014B   78..         MOV     R0,#?V0 + 0
   \   00014D   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000150   E4           CLR     A
   \   000151   F5..         MOV     ?V0 + 0,A
   \   000153   F5..         MOV     ?V0 + 1,A
   \   000155   78..         MOV     R0,#?V0 + 0
   \   000157   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00015A   E5..         MOV     A,?V0 + 15
   \   00015C   F5..         MOV     ?V0 + 0,A
   \   00015E   78..         MOV     R0,#?V0 + 0
   \   000160   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000163   7426         MOV     A,#0x26
   \   000165   12....       LCALL   ?XSTACK_DISP0_8
   \   000168   12....       LCALL   ?Subroutine103 & 0xFFFF
   \                     ??CrossCallReturnLabel_156:
   \   00016B   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00016E   75..00       MOV     ?V0 + 0,#0x0
   \   000171   78..         MOV     R0,#?V0 + 0
   \   000173   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000176   75..01       MOV     ?V0 + 0,#0x1
   \   000179   78..         MOV     R0,#?V0 + 0
   \   00017B   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00017E   AC..         MOV     R4,?V0 + 4
   \   000180   AD..         MOV     R5,?V0 + 5
   \   000182   740D         MOV     A,#0xd
   \   000184   12....       LCALL   ?XSTACK_DISP0_8
   \   000187   12....       LCALL   ??Subroutine234_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_395:
   \   00018A   A9..         MOV     R1,?V0 + 3
   \   00018C   12....       LCALL   ??Subroutine211_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_305:
   \   00018F   12....       LCALL   ?DEALLOC_XSTACK8
   \   000192   E9           MOV     A,R1
   \   000193   FE           MOV     R6,A
    910              osal_mem_free( buf );
   \   000194                ; Setup parameters for call to function osal_mem_free
   \   000194   AA..         MOV     R2,?V0 + 6
   \   000196   AB..         MOV     R3,?V0 + 7
   \   000198   12....       LCALL   ??osal_mem_free?relay
   \   00019B   8002         SJMP    ??zcl_SendReadRsp_10
    911            }
    912            else
    913            {
    914              status = ZMemError;
   \                     ??zcl_SendReadRsp_5:
   \   00019D   7E10         MOV     R6,#0x10
    915            }
    916          
    917            return ( status );
   \                     ??zcl_SendReadRsp_10:
   \   00019F   EE           MOV     A,R6
   \   0001A0   F9           MOV     R1,A
   \   0001A1   7404         MOV     A,#0x4
   \   0001A3   02....       LJMP    ?Subroutine4 & 0xFFFF
    918          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine182:
   \   000000   A3           INC     DPTR
   \   000001   A3           INC     DPTR
   \   000002   A3           INC     DPTR
   \   000003                REQUIRE ??Subroutine212_0
   \   000003                ; // Fall through to label ??Subroutine212_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine212_0:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F9           MOV     R1,A
   \   000002   12....       LCALL   ??zclSerializeData?relay
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine140:
   \   000000   75F006       MOV     B,#0x6
   \   000003                REQUIRE ??Subroutine213_0
   \   000003                ; // Fall through to label ??Subroutine213_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine213_0:
   \   000000   A4           MUL     AB
   \   000001   F8           MOV     R0,A
   \   000002   A9F0         MOV     R1,B
   \   000004   E5..         MOV     A,?V0 + 12
   \   000006   28           ADD     A,R0
   \   000007   F582         MOV     DPL,A
   \   000009   E5..         MOV     A,?V0 + 13
   \   00000B   12....       LCALL   ?Subroutine205 & 0xFFFF
   \                     ??CrossCallReturnLabel_320:
   \   00000E   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine94:
   \   000000   A3           INC     DPTR
   \   000001   A3           INC     DPTR
   \   000002   A3           INC     DPTR
   \   000003                REQUIRE ??Subroutine214_0
   \   000003                ; // Fall through to label ??Subroutine214_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine214_0:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F9           MOV     R1,A
   \   000002   12....       LCALL   ??zclGetAttrDataLength?relay
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine87:
   \   000000   12....       LCALL   ??Subroutine236_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_430:
   \   000003   AA..         MOV     R2,?V0 + 4
   \   000005   AB..         MOV     R3,?V0 + 5
   \   000007   A9..         MOV     R1,?V0 + 3
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine50:
   \   000000   12....       LCALL   ?Subroutine161 & 0xFFFF
   \                     ??CrossCallReturnLabel_239:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine161:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   85..82       MOV     DPL,?V0 + 0
   \   000004   85..83       MOV     DPH,?V0 + 1
   \   000007   F0           MOVX    @DPTR,A
   \   000008   A3           INC     DPTR
   \   000009   8582..       MOV     ?V0 + 0,DPL
   \   00000C   8583..       MOV     ?V0 + 1,DPH
   \   00000F   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine30:
   \   000000   12....       LCALL   ?Subroutine161 & 0xFFFF
   \                     ??CrossCallReturnLabel_238:
   \   000003   85..82       MOV     DPL,?V0 + 8
   \   000006   85..83       MOV     DPH,?V0 + 9
   \   000009   A3           INC     DPTR
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine215_0:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F8           MOV     R0,A
   \   000002   E5..         MOV     A,?V0 + 2
   \   000004   C3           CLR     C
   \   000005   98           SUBB    A,R0
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine223_0:
   \   000000   12....       LCALL   ?Subroutine191 & 0xFFFF
   \                     ??CrossCallReturnLabel_363:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine191:
   \   000000   3400         ADDC    A,#0x0
   \   000002   F9           MOV     R1,A
   \   000003   8882         MOV     DPL,R0
   \   000005   8983         MOV     DPH,R1
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine205:
   \   000000   39           ADDC    A,R1
   \   000001   F583         MOV     DPH,A
   \   000003   A3           INC     DPTR
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine103:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F5..         MOV     ?V0 + 0,A
   \   000003   78..         MOV     R0,#?V0 + 0
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine65:
   \   000000   A3           INC     DPTR
   \   000001   A3           INC     DPTR
   \   000002   A3           INC     DPTR
   \   000003   A3           INC     DPTR
   \   000004                REQUIRE ??Subroutine230_0
   \   000004                ; // Fall through to label ??Subroutine230_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine98:
   \   000000   85..82       MOV     DPL,?V0 + 8
   \   000003   85..83       MOV     DPH,?V0 + 9
   \   000006                REQUIRE ??Subroutine232_0
   \   000006                ; // Fall through to label ??Subroutine232_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine232_0:
   \   000000   A3           INC     DPTR
   \   000001                REQUIRE ??Subroutine233_0
   \   000001                ; // Fall through to label ??Subroutine233_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine233_0:
   \   000000   A3           INC     DPTR
   \   000001   A3           INC     DPTR
   \   000002   A3           INC     DPTR
   \   000003                REQUIRE ??Subroutine234_0
   \   000003                ; // Fall through to label ??Subroutine234_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine248_0:
   \   000000   12....       LCALL   ??Subroutine260_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_558:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine257_0:
   \   000000   A3           INC     DPTR
   \   000001   A3           INC     DPTR
   \   000002                REQUIRE ??Subroutine258_0
   \   000002                ; // Fall through to label ??Subroutine258_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine145:
   \   000000   EE           MOV     A,R6
   \   000001   2403         ADD     A,#0x3
   \   000003   0E           INC     R6
   \   000004   0E           INC     R6
   \   000005   0E           INC     R6
   \   000006   EF           MOV     A,R7
   \   000007   3400         ADDC    A,#0x0
   \   000009   FF           MOV     R7,A
   \   00000A   22           RET
    919          #endif // ZCL_READ
    920          
    921          #ifdef ZCL_WRITE
    922          /*********************************************************************
    923           * @fn      sendWriteRequest
    924           *
    925           * @brief   Send a Write command
    926           *
    927           * @param   dstAddr - destination address
    928           * @param   clusterID - cluster ID
    929           * @param   writeCmd - write command to be sent
    930           * @param   cmd - ZCL_CMD_WRITE, ZCL_CMD_WRITE_UNDIVIDED or ZCL_CMD_WRITE_NO_RSP
    931           * @param   direction - direction of the command
    932           * @param   seqNum - transaction sequence number
    933           *
    934           * @return  ZSuccess if OK
    935           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    936          ZStatus_t zcl_SendWriteRequest( uint8 srcEP, afAddrType_t *dstAddr, uint16 clusterID,
   \                     zcl_SendWriteRequest:
    937                                          zclWriteCmd_t *writeCmd, uint8 cmd, uint8 direction,
    938                                          uint8 disableDefaultRsp, uint8 seqNum )
    939          {
   \   000000   74E8         MOV     A,#-0x18
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 24
   \   000005                ; Auto size: 0
   \   000005   89..         MOV     ?V0 + 11,R1
   \   000007   8A..         MOV     ?V0 + 14,R2
   \   000009   8B..         MOV     ?V0 + 15,R3
   \   00000B   8C..         MOV     ?V0 + 12,R4
   \   00000D   8D..         MOV     ?V0 + 13,R5
   \   00000F   7418         MOV     A,#0x18
   \   000011   12....       LCALL   ?XSTACK_DISP0_8
   \   000014   12....       LCALL   ?Subroutine100 & 0xFFFF
   \                     ??CrossCallReturnLabel_149:
   \   000017   12....       LCALL   ?XSTACK_DISP0_8
   \   00001A   E0           MOVX    A,@DPTR
   \   00001B   F5..         MOV     ?V0 + 10,A
   \   00001D   741B         MOV     A,#0x1b
   \   00001F   12....       LCALL   ?XSTACK_DISP0_8
   \   000022   E0           MOVX    A,@DPTR
   \   000023   F5..         MOV     ?V0 + 7,A
   \   000025   741C         MOV     A,#0x1c
   \   000027   12....       LCALL   ?XSTACK_DISP0_8
   \   00002A   E0           MOVX    A,@DPTR
   \   00002B   F5..         MOV     ?V0 + 6,A
   \   00002D   741D         MOV     A,#0x1d
   \   00002F   12....       LCALL   ?XSTACK_DISP0_8
   \   000032   12....       LCALL   ?Subroutine108 & 0xFFFF
    940            uint8 *buf;
    941            uint16 dataLen = 0;
    942            ZStatus_t status;
    943          
    944            for ( uint8 i = 0; i < writeCmd->numAttr; i++ )
   \                     ??CrossCallReturnLabel_166:
   \   000035   8003         SJMP    ??CrossCallReturnLabel_63
    945            {
    946              zclWriteRec_t *statusRec = &(writeCmd->attrList[i]);
   \                     ??zcl_SendWriteRequest_0:
   \   000037   12....       LCALL   ?Subroutine55 & 0xFFFF
    947          
    948              dataLen += 2 + 1; // Attribute ID + Attribute Type
    949          
    950              // Attribute Data
    951              dataLen += zclGetAttrDataLength( statusRec->dataType, statusRec->attrData );
    952            }
   \                     ??CrossCallReturnLabel_63:
   \   00003A   12....       LCALL   ?Subroutine60 & 0xFFFF
   \                     ??CrossCallReturnLabel_329:
   \   00003D   40F8         JC      ??zcl_SendWriteRequest_0
    953          
    954            buf = osal_mem_alloc( dataLen );
   \   00003F                ; Setup parameters for call to function osal_mem_alloc
   \   00003F   12....       LCALL   ?Subroutine117 & 0xFFFF
    955            if ( buf != NULL )
   \                     ??CrossCallReturnLabel_346:
   \   000042   6070         JZ      ??zcl_SendWriteRequest_1
    956            {
    957              // Load the buffer - serially
    958              uint8 *pBuf = buf;
   \   000044   AC..         MOV     R4,?V0 + 0
   \   000046   AD..         MOV     R5,?V0 + 1
    959              for ( uint8 i = 0; i < writeCmd->numAttr; i++ )
   \   000048   75..00       MOV     ?V0 + 2,#0x0
   \   00004B   8003         SJMP    ??CrossCallReturnLabel_0
    960              {
    961                zclWriteRec_t *statusRec = &(writeCmd->attrList[i]);
   \                     ??zcl_SendWriteRequest_2:
   \   00004D   12....       LCALL   ?Subroutine14 & 0xFFFF
    962          
    963                *pBuf++ = LO_UINT16( statusRec->attrID );
    964                *pBuf++ = HI_UINT16( statusRec->attrID );
    965                *pBuf++ = statusRec->dataType;
    966          
    967                pBuf = zclSerializeData( statusRec->dataType, statusRec->attrData, pBuf );
    968              }
   \                     ??CrossCallReturnLabel_0:
   \   000050   12....       LCALL   ?Subroutine60 & 0xFFFF
   \                     ??CrossCallReturnLabel_330:
   \   000053   40F8         JC      ??zcl_SendWriteRequest_2
    969          
    970              status = zcl_SendCommand( srcEP, dstAddr, clusterID, cmd, FALSE,
    971                                        direction, disableDefaultRsp, 0, seqNum, dataLen, buf );
   \   000055                ; Setup parameters for call to function zcl_SendCommand
   \   000055   78..         MOV     R0,#?V0 + 0
   \   000057   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00005A   8E..         MOV     ?V0 + 4,R6
   \   00005C   8F..         MOV     ?V0 + 5,R7
   \   00005E   78..         MOV     R0,#?V0 + 4
   \   000060   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000063   E5..         MOV     A,?V0 + 3
   \   000065   F5..         MOV     ?V0 + 2,A
   \   000067   78..         MOV     R0,#?V0 + 2
   \   000069   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00006C   E4           CLR     A
   \   00006D   F5..         MOV     ?V0 + 2,A
   \   00006F   F5..         MOV     ?V0 + 3,A
   \   000071   78..         MOV     R0,#?V0 + 2
   \   000073   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000076   E5..         MOV     A,?V0 + 6
   \   000078   F5..         MOV     ?V0 + 2,A
   \   00007A   78..         MOV     R0,#?V0 + 2
   \   00007C   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00007F   E5..         MOV     A,?V0 + 7
   \   000081   F5..         MOV     ?V0 + 2,A
   \   000083   78..         MOV     R0,#?V0 + 2
   \   000085   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000088   75..00       MOV     ?V0 + 2,#0x0
   \   00008B   78..         MOV     R0,#?V0 + 2
   \   00008D   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000090   E5..         MOV     A,?V0 + 10
   \   000092   F5..         MOV     ?V0 + 2,A
   \   000094   78..         MOV     R0,#?V0 + 2
   \   000096   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000099   AC..         MOV     R4,?V0 + 12
   \   00009B   AD..         MOV     R5,?V0 + 13
   \   00009D   AA..         MOV     R2,?V0 + 14
   \   00009F   AB..         MOV     R3,?V0 + 15
   \   0000A1   A9..         MOV     R1,?V0 + 11
   \   0000A3   12....       LCALL   ??Subroutine211_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_306:
   \   0000A6   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000A9   E9           MOV     A,R1
   \   0000AA   FE           MOV     R6,A
    972              osal_mem_free( buf );
   \   0000AB                ; Setup parameters for call to function osal_mem_free
   \   0000AB   AA..         MOV     R2,?V0 + 0
   \   0000AD   AB..         MOV     R3,?V0 + 1
   \   0000AF   12....       LCALL   ??osal_mem_free?relay
   \   0000B2   8002         SJMP    ??zcl_SendWriteRequest_3
    973            }
    974            else
    975            {
    976              status = ZMemError;
   \                     ??zcl_SendWriteRequest_1:
   \   0000B4   7E10         MOV     R6,#0x10
    977            }
    978          
    979            return ( status);
   \                     ??zcl_SendWriteRequest_3:
   \   0000B6                REQUIRE ?Subroutine13
   \   0000B6                ; // Fall through to label ?Subroutine13
    980          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine13:
   \   000000   EE           MOV     A,R6
   \   000001   F9           MOV     R1,A
   \   000002   02....       LJMP    ??Subroutine261_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine60:
   \   000000   85..82       MOV     DPL,?V0 + 4
   \   000003   85..83       MOV     DPH,?V0 + 5
   \   000006                REQUIRE ??Subroutine215_0
   \   000006                ; // Fall through to label ??Subroutine215_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine117:
   \   000000   EE           MOV     A,R6
   \   000001   FA           MOV     R2,A
   \   000002   EF           MOV     A,R7
   \   000003                REQUIRE ??Subroutine219_0
   \   000003                ; // Fall through to label ??Subroutine219_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine108:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F5..         MOV     ?V0 + 3,A
   \   000003   7E00         MOV     R6,#0x0
   \   000005   7F00         MOV     R7,#0x0
   \   000007   8E..         MOV     ?V0 + 2,R6
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine100:
   \   000000   12....       LCALL   ?Subroutine169 & 0xFFFF
   \                     ??CrossCallReturnLabel_251:
   \   000003   741A         MOV     A,#0x1a
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine55:
   \   000000   12....       LCALL   ?Subroutine192 & 0xFFFF
   \                     ??CrossCallReturnLabel_278:
   \   000003   A882         MOV     R0,DPL
   \   000005   A983         MOV     R1,DPH
   \   000007                ; Setup parameters for call to function zclGetAttrDataLength
   \   000007                ; Setup parameters for call to function zclGetAttrDataLength
   \   000007   12....       LCALL   ?Subroutine167 & 0xFFFF
   \                     ??CrossCallReturnLabel_371:
   \   00000A   A3           INC     DPTR
   \   00000B   A3           INC     DPTR
   \   00000C   E0           MOVX    A,@DPTR
   \   00000D   F9           MOV     R1,A
   \   00000E   12....       LCALL   ??zclGetAttrDataLength?relay
   \   000011   EA           MOV     A,R2
   \   000012   2403         ADD     A,#0x3
   \   000014   F8           MOV     R0,A
   \   000015   EB           MOV     A,R3
   \   000016   3400         ADDC    A,#0x0
   \   000018   F9           MOV     R1,A
   \   000019   EE           MOV     A,R6
   \   00001A   28           ADD     A,R0
   \   00001B   FE           MOV     R6,A
   \   00001C   EF           MOV     A,R7
   \   00001D   39           ADDC    A,R1
   \   00001E   FF           MOV     R7,A
   \   00001F   05..         INC     ?V0 + 2
   \   000021   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine167:
   \   000000   A3           INC     DPTR
   \   000001   A3           INC     DPTR
   \   000002   A3           INC     DPTR
   \   000003                REQUIRE ??Subroutine225_0
   \   000003                ; // Fall through to label ??Subroutine225_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine225_0:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   FA           MOV     R2,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   FB           MOV     R3,A
   \   000005   8882         MOV     DPL,R0
   \   000007   8983         MOV     DPH,R1
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine14:
   \   000000   12....       LCALL   ?Subroutine192 & 0xFFFF
   \                     ??CrossCallReturnLabel_277:
   \   000003   AA82         MOV     R2,DPL
   \   000005   AB83         MOV     R3,DPH
   \   000007   12....       LCALL   ??Subroutine228_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_380:
   \   00000A   12....       LCALL   ?Subroutine157 & 0xFFFF
   \                     ??CrossCallReturnLabel_232:
   \   00000D   A3           INC     DPTR
   \   00000E   12....       LCALL   ?Subroutine166 & 0xFFFF
   \                     ??CrossCallReturnLabel_247:
   \   000011   EA           MOV     A,R2
   \   000012   2402         ADD     A,#0x2
   \   000014   F8           MOV     R0,A
   \   000015   EB           MOV     A,R3
   \   000016   12....       LCALL   ?Subroutine191 & 0xFFFF
   \                     ??CrossCallReturnLabel_361:
   \   000019   12....       LCALL   ?Subroutine166 & 0xFFFF
   \                     ??CrossCallReturnLabel_248:
   \   00001C                ; Setup parameters for call to function zclSerializeData
   \   00001C                ; Setup parameters for call to function zclSerializeData
   \   00001C   8A82         MOV     DPL,R2
   \   00001E   8B83         MOV     DPH,R3
   \   000020   12....       LCALL   ?Subroutine167 & 0xFFFF
   \                     ??CrossCallReturnLabel_370:
   \   000023   12....       LCALL   ??Subroutine212_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_311:
   \   000026   8A..         MOV     ?V0 + 8,R2
   \   000028   8B..         MOV     ?V0 + 9,R3
   \   00002A   AC..         MOV     R4,?V0 + 8
   \   00002C   AD..         MOV     R5,?V0 + 9
   \   00002E   05..         INC     ?V0 + 2
   \   000030   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine192:
   \   000000   E5..         MOV     A,?V0 + 2
   \   000002   75F005       MOV     B,#0x5
   \   000005   12....       LCALL   ?Subroutine204 & 0xFFFF
   \                     ??CrossCallReturnLabel_286:
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine204:
   \   000000   A4           MUL     AB
   \   000001   F8           MOV     R0,A
   \   000002   A9F0         MOV     R1,B
   \   000004   E5..         MOV     A,?V0 + 4
   \   000006   28           ADD     A,R0
   \   000007   F582         MOV     DPL,A
   \   000009   E5..         MOV     A,?V0 + 5
   \   00000B   12....       LCALL   ?Subroutine205 & 0xFFFF
   \                     ??CrossCallReturnLabel_319:
   \   00000E   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine166:
   \   000000   12....       LCALL   ??Subroutine228_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_381:
   \   000003   F0           MOVX    @DPTR,A
   \   000004   A3           INC     DPTR
   \   000005   0C           INC     R4
   \   000006   AD83         MOV     R5,DPH
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine228_0:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   8C82         MOV     DPL,R4
   \   000003   8D83         MOV     DPH,R5
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine157:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   A3           INC     DPTR
   \   000002   AC82         MOV     R4,DPL
   \   000004   AD83         MOV     R5,DPH
   \   000006   8A82         MOV     DPL,R2
   \   000008   8B83         MOV     DPH,R3
   \   00000A   22           RET
    981          
    982          /*********************************************************************
    983           * @fn      zcl_SendWriteRsp
    984           *
    985           * @brief   Send a Write Response command
    986           *
    987           * @param   dstAddr - destination address
    988           * @param   clusterID - cluster ID
    989           * @param   wrtieRspCmd - write response command to be sent
    990           * @param   direction - direction of the command
    991           * @param   seqNum - transaction sequence number
    992           *
    993           * @return  ZSuccess if OK
    994           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine136:
   \   000000   AC..         MOV     R4,?V0 + 10
   \   000002   AD..         MOV     R5,?V0 + 11
   \   000004                REQUIRE ??Subroutine210_0
   \   000004                ; // Fall through to label ??Subroutine210_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    995          ZStatus_t zcl_SendWriteRsp( uint8 srcEP, afAddrType_t *dstAddr,
   \                     zcl_SendWriteRsp:
    996                                      uint16 clusterID, zclWriteRspCmd_t *writeRspCmd,
    997                                      uint8 direction, uint8 disableDefaultRsp, uint8 seqNum )
    998          {
   \   000000   74EA         MOV     A,#-0x16
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 22
   \   000005                ; Auto size: 0
   \   000005   89..         MOV     ?V0 + 2,R1
   \   000007   8A..         MOV     ?V0 + 12,R2
   \   000009   8B..         MOV     ?V0 + 13,R3
   \   00000B   8C..         MOV     ?V0 + 10,R4
   \   00000D   8D..         MOV     ?V0 + 11,R5
   \   00000F   7416         MOV     A,#0x16
   \   000011   12....       LCALL   ?XSTACK_DISP0_8
   \   000014   12....       LCALL   ?Subroutine69 & 0xFFFF
   \                     ??CrossCallReturnLabel_94:
   \   000017   12....       LCALL   ?XSTACK_DISP0_8
   \   00001A   12....       LCALL   ?Subroutine106 & 0xFFFF
   \                     ??CrossCallReturnLabel_163:
   \   00001D   12....       LCALL   ?XSTACK_DISP0_8
   \   000020   E0           MOVX    A,@DPTR
   \   000021   F5..         MOV     ?V0 + 6,A
   \   000023   741A         MOV     A,#0x1a
   \   000025   12....       LCALL   ?XSTACK_DISP0_8
   \   000028   12....       LCALL   ?Subroutine61 & 0xFFFF
    999            uint16 dataLen;
   1000            uint8 *buf;
   1001            ZStatus_t status;
   1002          
   1003            dataLen = writeRspCmd->numAttr * ( 1 + 2 ); // status + attribute id
   1004          
   1005            buf = osal_mem_alloc( dataLen );
   1006            if ( buf != NULL )
   \                     ??CrossCallReturnLabel_78:
   \   00002B   6077         JZ      ??zcl_SendWriteRsp_0
   1007            {
   1008              // Load the buffer - serially
   1009              uint8 *pBuf = buf;
   \   00002D   A8..         MOV     R0,?V0 + 0
   \   00002F   A9..         MOV     R1,?V0 + 1
   1010              for ( uint8 i = 0; i < writeRspCmd->numAttr; i++ )
   \   000031   75..00       MOV     ?V0 + 8,#0x0
   \   000034   8003         SJMP    ??CrossCallReturnLabel_4
   1011              {
   1012                *pBuf++ = writeRspCmd->attrList[i].status;
   \                     ??zcl_SendWriteRsp_1:
   \   000036   12....       LCALL   ?Subroutine16 & 0xFFFF
   1013                *pBuf++ = LO_UINT16( writeRspCmd->attrList[i].attrID );
   1014                *pBuf++ = HI_UINT16( writeRspCmd->attrList[i].attrID );
   1015              }
   \                     ??CrossCallReturnLabel_4:
   \   000039   85..82       MOV     DPL,?V0 + 4
   \   00003C   85..83       MOV     DPH,?V0 + 5
   \   00003F   E0           MOVX    A,@DPTR
   \   000040   FA           MOV     R2,A
   \   000041   E5..         MOV     A,?V0 + 8
   \   000043   C3           CLR     C
   \   000044   9A           SUBB    A,R2
   \   000045   40EF         JC      ??zcl_SendWriteRsp_1
   1016          
   1017              // If there's only a single status record and its status field is set to
   1018              // SUCCESS then omit the attribute ID field.
   1019              if ( writeRspCmd->numAttr == 1 && writeRspCmd->attrList[0].status == ZCL_STATUS_SUCCESS )
   \   000047   E0           MOVX    A,@DPTR
   \   000048   6401         XRL     A,#0x1
   \   00004A   7008         JNZ     ??zcl_SendWriteRsp_2
   \   00004C   A3           INC     DPTR
   \   00004D   E0           MOVX    A,@DPTR
   \   00004E   7004         JNZ     ??zcl_SendWriteRsp_2
   1020              {
   1021                dataLen = 1;
   \   000050   7E01         MOV     R6,#0x1
   \   000052   7F00         MOV     R7,#0x0
   1022              }
   1023          
   1024              status = zcl_SendCommand( srcEP, dstAddr, clusterID, ZCL_CMD_WRITE_RSP, FALSE,
   1025                                        direction, disableDefaultRsp, 0, seqNum, dataLen, buf );
   \                     ??zcl_SendWriteRsp_2:
   \   000054                ; Setup parameters for call to function zcl_SendCommand
   \   000054   78..         MOV     R0,#?V0 + 0
   \   000056   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000059   8E..         MOV     ?V0 + 4,R6
   \   00005B   8F..         MOV     ?V0 + 5,R7
   \   00005D   78..         MOV     R0,#?V0 + 4
   \   00005F   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000062   E5..         MOV     A,?V0 + 7
   \   000064   F5..         MOV     ?V0 + 4,A
   \   000066   78..         MOV     R0,#?V0 + 4
   \   000068   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00006B   E4           CLR     A
   \   00006C   F5..         MOV     ?V0 + 4,A
   \   00006E   F5..         MOV     ?V0 + 5,A
   \   000070   78..         MOV     R0,#?V0 + 4
   \   000072   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000075   E5..         MOV     A,?V0 + 6
   \   000077   F5..         MOV     ?V0 + 4,A
   \   000079   78..         MOV     R0,#?V0 + 4
   \   00007B   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00007E   78..         MOV     R0,#?V0 + 3
   \   000080   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000083   75..00       MOV     ?V0 + 3,#0x0
   \   000086   78..         MOV     R0,#?V0 + 3
   \   000088   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00008B   75..04       MOV     ?V0 + 3,#0x4
   \   00008E   78..         MOV     R0,#?V0 + 3
   \   000090   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000093   12....       LCALL   ?Subroutine136 & 0xFFFF
   \                     ??CrossCallReturnLabel_301:
   \   000096   12....       LCALL   ?DEALLOC_XSTACK8
   \   000099   E9           MOV     A,R1
   \   00009A   FE           MOV     R6,A
   1026              osal_mem_free( buf );
   \   00009B                ; Setup parameters for call to function osal_mem_free
   \   00009B   AA..         MOV     R2,?V0 + 0
   \   00009D   AB..         MOV     R3,?V0 + 1
   \   00009F   12....       LCALL   ??osal_mem_free?relay
   \   0000A2   8002         SJMP    ??zcl_SendWriteRsp_3
   1027            }
   1028            else
   1029            {
   1030              status = ZMemError;
   \                     ??zcl_SendWriteRsp_0:
   \   0000A4   7E10         MOV     R6,#0x10
   1031            }
   1032          
   1033            return ( status );
   \                     ??zcl_SendWriteRsp_3:
   \   0000A6   02....       LJMP    ?Subroutine12 & 0xFFFF
   1034          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine61:
   \   000000   12....       LCALL   ?Subroutine180 & 0xFFFF
   \                     ??CrossCallReturnLabel_268:
   \   000003   E0           MOVX    A,@DPTR
   \   000004   75F003       MOV     B,#0x3
   \   000007   A4           MUL     AB
   \   000008   FE           MOV     R6,A
   \   000009   AFF0         MOV     R7,B
   \   00000B                ; Setup parameters for call to function osal_mem_alloc
   \   00000B                ; Setup parameters for call to function osal_mem_alloc
   \   00000B   FA           MOV     R2,A
   \   00000C   EF           MOV     A,R7
   \   00000D   12....       LCALL   ?Subroutine186 & 0xFFFF
   \                     ??CrossCallReturnLabel_351:
   \   000010   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine180:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F5..         MOV     ?V0 + 7,A
   \   000003   85..82       MOV     DPL,?V0 + 4
   \   000006   85..83       MOV     DPH,?V0 + 5
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine16:
   \   000000   E5..         MOV     A,?V0 + 8
   \   000002   75F003       MOV     B,#0x3
   \   000005   A4           MUL     AB
   \   000006   FA           MOV     R2,A
   \   000007   ABF0         MOV     R3,B
   \   000009   E5..         MOV     A,?V0 + 4
   \   00000B   2A           ADD     A,R2
   \   00000C   FA           MOV     R2,A
   \   00000D   E5..         MOV     A,?V0 + 5
   \   00000F   3B           ADDC    A,R3
   \   000010   FB           MOV     R3,A
   \   000011   8A82         MOV     DPL,R2
   \   000013   8B83         MOV     DPH,R3
   \   000015   A3           INC     DPTR
   \   000016   12....       LCALL   ?Subroutine174 & 0xFFFF
   \                     ??CrossCallReturnLabel_259:
   \   000019   EA           MOV     A,R2
   \   00001A   2402         ADD     A,#0x2
   \   00001C   FC           MOV     R4,A
   \   00001D   EB           MOV     A,R3
   \   00001E   3400         ADDC    A,#0x0
   \   000020   FD           MOV     R5,A
   \   000021   8C82         MOV     DPL,R4
   \   000023   8D83         MOV     DPH,R5
   \   000025   12....       LCALL   ??Subroutine209_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_298:
   \   000028   8C82         MOV     DPL,R4
   \   00002A   8D83         MOV     DPH,R5
   \   00002C   12....       LCALL   ?Subroutine165 & 0xFFFF
   \                     ??CrossCallReturnLabel_300:
   \   00002F   05..         INC     ?V0 + 8
   \   000031   22           RET
   1035          #endif // ZCL_WRITE
   1036          
   1037          #ifdef ZCL_REPORT
   1038          /*********************************************************************
   1039           * @fn      zcl_SendConfigReportCmd
   1040           *
   1041           * @brief   Send a Configure Reporting command
   1042           *
   1043           * @param   dstAddr - destination address
   1044           * @param   clusterID - cluster ID
   1045           * @param   cfgReportCmd - configure reporting command to be sent
   1046           * @param   direction - direction of the command
   1047           * @param   seqNum - transaction sequence number
   1048           *
   1049           * @return  ZSuccess if OK
   1050           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1051          ZStatus_t zcl_SendConfigReportCmd( uint8 srcEP, afAddrType_t *dstAddr,
   \                     zcl_SendConfigReportCmd:
   1052                                    uint16 clusterID, zclCfgReportCmd_t *cfgReportCmd,
   1053                                    uint8 direction, uint8 disableDefaultRsp, uint8 seqNum )
   1054          {
   \   000000   74E9         MOV     A,#-0x17
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 23
   \   000005                ; Auto size: 4
   \   000005   74FC         MOV     A,#-0x4
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   7402         MOV     A,#0x2
   \   00000C   12....       LCALL   ?XSTACK_DISP0_8
   \   00000F   12....       LCALL   ?Subroutine25 & 0xFFFF
   \                     ??CrossCallReturnLabel_20:
   \   000012   12....       LCALL   ?XSTACK_DISP0_8
   \   000015   12....       LCALL   ?Subroutine101 & 0xFFFF
   \                     ??CrossCallReturnLabel_151:
   \   000018   12....       LCALL   ?XSTACK_DISP0_8
   \   00001B   E0           MOVX    A,@DPTR
   \   00001C   F5..         MOV     ?V0 + 11,A
   \   00001E   741E         MOV     A,#0x1e
   \   000020   12....       LCALL   ?XSTACK_DISP0_8
   \   000023   E0           MOVX    A,@DPTR
   \   000024   F5..         MOV     ?V0 + 10,A
   \   000026   741F         MOV     A,#0x1f
   \   000028   12....       LCALL   ?XSTACK_DISP0_8
   \   00002B   12....       LCALL   ?Subroutine85 & 0xFFFF
   1055            uint8 *buf;
   1056            uint16 dataLen = 0;
   1057            ZStatus_t status;
   1058          
   1059            // Find out the data length
   1060            for ( uint8 i = 0; i < cfgReportCmd->numAttr; i++ )
   \                     ??CrossCallReturnLabel_127:
   \   00002E   8009         SJMP    ??zcl_SendConfigReportCmd_0
   1061            {
   1062              zclCfgReportRec_t *reportRec = &(cfgReportCmd->attrList[i]);
   1063          
   1064              dataLen += 1 + 2; // Direction + Attribute ID
   1065          
   1066              if ( reportRec->direction == ZCL_SEND_ATTR_REPORTS )
   1067              {
   1068                dataLen += 1 + 2 + 2; // Data Type + Min + Max Reporting Intervals
   1069          
   1070                // Find out the size of the Reportable Change field (for Analog data types)
   1071                if ( zclAnalogDataType( reportRec->dataType ) )
   1072                {
   1073                  dataLen += zclGetDataTypeLength( reportRec->dataType );
   1074                }
   1075              }
   1076              else
   1077              {
   1078                dataLen += 2; // Timeout Period
   \                     ??zcl_SendConfigReportCmd_1:
   \   000030   E5..         MOV     A,?V0 + 0
   \   000032   2402         ADD     A,#0x2
   1079              }
   \                     ??zcl_SendConfigReportCmd_2:
   \   000034   12....       LCALL   ??Subroutine250_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_503:
   \   000037   05..         INC     ?V0 + 2
   \                     ??zcl_SendConfigReportCmd_0:
   \   000039   12....       LCALL   ?Subroutine60 & 0xFFFF
   \                     ??CrossCallReturnLabel_331:
   \   00003C   5021         JNC     ??zcl_SendConfigReportCmd_3
   \   00003E   E5..         MOV     A,?V0 + 2
   \   000040   75F00C       MOV     B,#0xc
   \   000043   12....       LCALL   ?Subroutine141 & 0xFFFF
   \                     ??CrossCallReturnLabel_208:
   \   000046   2403         ADD     A,#0x3
   \   000048   12....       LCALL   ??Subroutine250_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_504:
   \   00004B   E0           MOVX    A,@DPTR
   \   00004C   70E2         JNZ     ??zcl_SendConfigReportCmd_1
   \   00004E   12....       LCALL   ?Subroutine130 & 0xFFFF
   \                     ??CrossCallReturnLabel_510:
   \   000051                ; Setup parameters for call to function zclAnalogDataType
   \   000051   12....       LCALL   ?Subroutine176 & 0xFFFF
   \                     ??CrossCallReturnLabel_335:
   \   000054   60E1         JZ      ??CrossCallReturnLabel_503
   \   000056                ; Setup parameters for call to function zclGetDataTypeLength
   \   000056   8E82         MOV     DPL,R6
   \   000058   8F83         MOV     DPH,R7
   \   00005A   12....       LCALL   ?Subroutine95 & 0xFFFF
   1080            }
   \                     ??CrossCallReturnLabel_141:
   \   00005D   80D5         SJMP    ??zcl_SendConfigReportCmd_2
   1081          
   1082            buf = osal_mem_alloc( dataLen );
   \                     ??zcl_SendConfigReportCmd_3:
   \   00005F                ; Setup parameters for call to function osal_mem_alloc
   \   00005F   12....       LCALL   ?Subroutine119 & 0xFFFF
   1083            if ( buf != NULL )
   \                     ??CrossCallReturnLabel_178:
   \   000062   7003         JNZ     $+5
   \   000064   02....       LJMP    ??zcl_SendConfigReportCmd_4 & 0xFFFF
   1084            {
   1085              // Load the buffer - serially
   1086              uint8 *pBuf = buf;
   1087              for ( uint8 i = 0; i < cfgReportCmd->numAttr; i++ )
   \   000067   75..00       MOV     ?V0 + 8,#0x0
   \   00006A   8008         SJMP    ??zcl_SendConfigReportCmd_5
   1088              {
   1089                zclCfgReportRec_t *reportRec = &(cfgReportCmd->attrList[i]);
   1090          
   1091                *pBuf++ = reportRec->direction;
   1092                *pBuf++ = LO_UINT16( reportRec->attrID );
   1093                *pBuf++ = HI_UINT16( reportRec->attrID );
   1094          
   1095                if ( reportRec->direction == ZCL_SEND_ATTR_REPORTS )
   1096                {
   1097                  *pBuf++ = reportRec->dataType;
   1098                  *pBuf++ = LO_UINT16( reportRec->minReportInt );
   1099                  *pBuf++ = HI_UINT16( reportRec->minReportInt );
   1100                  *pBuf++ = LO_UINT16( reportRec->maxReportInt );
   1101                  *pBuf++ = HI_UINT16( reportRec->maxReportInt );
   1102          
   1103                  if ( zclAnalogDataType( reportRec->dataType ) )
   1104                  {
   1105                    pBuf = zclSerializeData( reportRec->dataType, reportRec->reportableChange, pBuf );
   1106                  }
   1107                }
   1108                else
   1109                {
   1110                  *pBuf++ = LO_UINT16( reportRec->timeoutPeriod );
   \                     ??zcl_SendConfigReportCmd_6:
   \   00006C   EE           MOV     A,R6
   \   00006D   2408         ADD     A,#0x8
   \   00006F   12....       LCALL   ?Subroutine21 & 0xFFFF
   1111                  *pBuf++ = HI_UINT16( reportRec->timeoutPeriod );
   1112                }
   \                     ??CrossCallReturnLabel_14:
   \   000072   05..         INC     ?V0 + 8
   \                     ??zcl_SendConfigReportCmd_5:
   \   000074   12....       LCALL   ?Subroutine107 & 0xFFFF
   \                     ??CrossCallReturnLabel_339:
   \   000077   5041         JNC     ??zcl_SendConfigReportCmd_7
   \   000079   E5..         MOV     A,?V0 + 8
   \   00007B   75F00C       MOV     B,#0xc
   \   00007E   12....       LCALL   ?Subroutine35 & 0xFFFF
   \                     ??CrossCallReturnLabel_35:
   \   000081   A882         MOV     R0,DPL
   \   000083   A983         MOV     R1,DPH
   \   000085   12....       LCALL   ?Subroutine19 & 0xFFFF
   \                     ??CrossCallReturnLabel_10:
   \   000088   70E2         JNZ     ??zcl_SendConfigReportCmd_6
   \   00008A   EE           MOV     A,R6
   \   00008B   2403         ADD     A,#0x3
   \   00008D   12....       LCALL   ?Subroutine31 & 0xFFFF
   \                     ??CrossCallReturnLabel_341:
   \   000090   2404         ADD     A,#0x4
   \   000092   12....       LCALL   ?Subroutine20 & 0xFFFF
   \                     ??CrossCallReturnLabel_12:
   \   000095   2406         ADD     A,#0x6
   \   000097   12....       LCALL   ?Subroutine17 & 0xFFFF
   \                     ??CrossCallReturnLabel_6:
   \   00009A   60D6         JZ      ??CrossCallReturnLabel_14
   \   00009C                ; Setup parameters for call to function zclSerializeData
   \   00009C   AC..         MOV     R4,?V0 + 6
   \   00009E   AD..         MOV     R5,?V0 + 7
   \   0000A0   8E82         MOV     DPL,R6
   \   0000A2   8F83         MOV     DPH,R7
   \   0000A4   A3           INC     DPTR
   \   0000A5   A3           INC     DPTR
   \   0000A6   A3           INC     DPTR
   \   0000A7   A3           INC     DPTR
   \   0000A8   A3           INC     DPTR
   \   0000A9   A3           INC     DPTR
   \   0000AA   12....       LCALL   ??Subroutine232_0 & 0xFFFF
   1113              } // for loop
   \                     ??CrossCallReturnLabel_404:
   \   0000AD   8E82         MOV     DPL,R6
   \   0000AF   8F83         MOV     DPH,R7
   \   0000B1   12....       LCALL   ?Subroutine182 & 0xFFFF
   \                     ??CrossCallReturnLabel_310:
   \   0000B4   8A..         MOV     ?V0 + 6,R2
   \   0000B6   8B..         MOV     ?V0 + 7,R3
   \   0000B8   80B8         SJMP    ??CrossCallReturnLabel_14
   1114          
   1115              status = zcl_SendCommand( srcEP, dstAddr, clusterID, ZCL_CMD_CONFIG_REPORT, FALSE,
   1116                                        direction, disableDefaultRsp, 0, seqNum, dataLen, buf );
   \                     ??zcl_SendConfigReportCmd_7:
   \   0000BA                ; Setup parameters for call to function zcl_SendCommand
   \   0000BA   78..         MOV     R0,#?V0 + 2
   \   0000BC   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000BF   78..         MOV     R0,#?V0 + 0
   \   0000C1   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000C4   E5..         MOV     A,?V0 + 9
   \   0000C6   F5..         MOV     ?V0 + 0,A
   \   0000C8   78..         MOV     R0,#?V0 + 0
   \   0000CA   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000CD   E4           CLR     A
   \   0000CE   F5..         MOV     ?V0 + 0,A
   \   0000D0   F5..         MOV     ?V0 + 1,A
   \   0000D2   78..         MOV     R0,#?V0 + 0
   \   0000D4   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000D7   E5..         MOV     A,?V0 + 10
   \   0000D9   F5..         MOV     ?V0 + 0,A
   \   0000DB   78..         MOV     R0,#?V0 + 0
   \   0000DD   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000E0   E5..         MOV     A,?V0 + 11
   \   0000E2   F5..         MOV     ?V0 + 0,A
   \   0000E4   78..         MOV     R0,#?V0 + 0
   \   0000E6   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000E9   75..00       MOV     ?V0 + 0,#0x0
   \   0000EC   78..         MOV     R0,#?V0 + 0
   \   0000EE   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000F1   75..06       MOV     ?V0 + 0,#0x6
   \   0000F4   78..         MOV     R0,#?V0 + 0
   \   0000F6   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000F9   740B         MOV     A,#0xb
   \   0000FB   12....       LCALL   ?XSTACK_DISP0_8
   \   0000FE   12....       LCALL   ??Subroutine235_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_419:
   \   000101   740D         MOV     A,#0xd
   \   000103   12....       LCALL   ?XSTACK_DISP0_8
   \   000106   12....       LCALL   ?Subroutine84 & 0xFFFF
   \                     ??CrossCallReturnLabel_125:
   \   000109   12....       LCALL   ?DEALLOC_XSTACK8
   \   00010C   E9           MOV     A,R1
   \   00010D   FE           MOV     R6,A
   1117              osal_mem_free( buf );
   \   00010E                ; Setup parameters for call to function osal_mem_free
   \   00010E   AA..         MOV     R2,?V0 + 2
   \   000110   AB..         MOV     R3,?V0 + 3
   \   000112   12....       LCALL   ??osal_mem_free?relay
   \   000115   8002         SJMP    ??zcl_SendConfigReportCmd_8
   1118            }
   1119            else
   1120            {
   1121              status = ZMemError;
   \                     ??zcl_SendConfigReportCmd_4:
   \   000117   7E10         MOV     R6,#0x10
   1122            }
   1123          
   1124            return ( status );
   \                     ??zcl_SendConfigReportCmd_8:
   \   000119                REQUIRE ?Subroutine6
   \   000119                ; // Fall through to label ?Subroutine6
   1125          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine6:
   \   000000   EE           MOV     A,R6
   \   000001   F9           MOV     R1,A
   \   000002   7404         MOV     A,#0x4
   \   000004   12....       LCALL   ?DEALLOC_XSTACK8
   \   000007   7F0F         MOV     R7,#0xf
   \   000009   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine176:
   \   000000   A3           INC     DPTR
   \   000001   A3           INC     DPTR
   \   000002   A3           INC     DPTR
   \   000003                REQUIRE ??Subroutine216_0
   \   000003                ; // Fall through to label ??Subroutine216_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine216_0:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F9           MOV     R1,A
   \   000002   12....       LCALL   ??zclAnalogDataType?relay
   \   000005   E9           MOV     A,R1
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine107:
   \   000000   85..82       MOV     DPL,?V0 + 4
   \   000003   85..83       MOV     DPH,?V0 + 5
   \   000006                REQUIRE ??Subroutine217_0
   \   000006                ; // Fall through to label ??Subroutine217_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine217_0:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F8           MOV     R0,A
   \   000002   E5..         MOV     A,?V0 + 8
   \   000004   C3           CLR     C
   \   000005   98           SUBB    A,R0
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine31:
   \   000000   FA           MOV     R2,A
   \   000001   EF           MOV     A,R7
   \   000002   3400         ADDC    A,#0x0
   \   000004   FB           MOV     R3,A
   \   000005   8A82         MOV     DPL,R2
   \   000007   8B83         MOV     DPH,R3
   \   000009                REQUIRE ??Subroutine218_0
   \   000009                ; // Fall through to label ??Subroutine218_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine218_0:
   \   000000   12....       LCALL   ?Subroutine162 & 0xFFFF
   \                     ??CrossCallReturnLabel_345:
   \   000003   EE           MOV     A,R6
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine141:
   \   000000   12....       LCALL   ?Subroutine190 & 0xFFFF
   \                     ??CrossCallReturnLabel_276:
   \   000003   E5..         MOV     A,?V0 + 0
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine119:
   \   000000   AA..         MOV     R2,?V0 + 0
   \   000002   AB..         MOV     R3,?V0 + 1
   \   000004   12....       LCALL   ??osal_mem_alloc?relay
   \   000007   8A..         MOV     ?V0 + 6,R2
   \   000009   8B..         MOV     ?V0 + 7,R3
   \   00000B   8A..         MOV     ?V0 + 2,R2
   \   00000D   8B..         MOV     ?V0 + 3,R3
   \   00000F   EA           MOV     A,R2
   \   000010   45..         ORL     A,?V0 + 3
   \   000012   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine101:
   \   000000   12....       LCALL   ?Subroutine169 & 0xFFFF
   \                     ??CrossCallReturnLabel_252:
   \   000003   741D         MOV     A,#0x1d
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine95:
   \   000000   A3           INC     DPTR
   \   000001   A3           INC     DPTR
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   F9           MOV     R1,A
   \   000005   12....       LCALL   ??zclGetDataTypeLength?relay
   \   000008   E9           MOV     A,R1
   \   000009   F8           MOV     R0,A
   \   00000A   E5..         MOV     A,?V0 + 0
   \   00000C   28           ADD     A,R0
   \   00000D   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine85:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F5..         MOV     ?V0 + 9,A
   \   000003   75..00       MOV     ?V0 + 0,#0x0
   \   000006   75..00       MOV     ?V0 + 1,#0x0
   \   000009   75..00       MOV     ?V0 + 2,#0x0
   \   00000C   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine84:
   \   000000   12....       LCALL   ?Subroutine172 & 0xFFFF
   \                     ??CrossCallReturnLabel_413:
   \   000003   A9..         MOV     R1,?V0 + 14
   \   000005   12....       LCALL   ??zcl_SendCommand?relay
   \   000008   740B         MOV     A,#0xb
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine35:
   \   000000   12....       LCALL   ?Subroutine190 & 0xFFFF
   \                     ??CrossCallReturnLabel_275:
   \   000003   12....       LCALL   ?Subroutine162 & 0xFFFF
   \                     ??CrossCallReturnLabel_344:
   \   000006   8E82         MOV     DPL,R6
   \   000008   8F83         MOV     DPH,R7
   \   00000A   A3           INC     DPTR
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine190:
   \   000000   12....       LCALL   ?Subroutine204 & 0xFFFF
   \                     ??CrossCallReturnLabel_285:
   \   000003   AE82         MOV     R6,DPL
   \   000005   AF83         MOV     R7,DPH
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine162:
   \   000000   12....       LCALL   ??Subroutine224_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_368:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine25:
   \   000000   EA           MOV     A,R2
   \   000001   F0           MOVX    @DPTR,A
   \   000002   A3           INC     DPTR
   \   000003   EB           MOV     A,R3
   \   000004   F0           MOVX    @DPTR,A
   \   000005   85..82       MOV     DPL,?XSP + 0
   \   000008   85..83       MOV     DPH,?XSP + 1
   \   00000B   EC           MOV     A,R4
   \   00000C   F0           MOVX    @DPTR,A
   \   00000D   A3           INC     DPTR
   \   00000E   ED           MOV     A,R5
   \   00000F   F0           MOVX    @DPTR,A
   \   000010   89..         MOV     ?V0 + 14,R1
   \   000012   741B         MOV     A,#0x1b
   \   000014   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine21:
   \   000000   F8           MOV     R0,A
   \   000001   EF           MOV     A,R7
   \   000002   12....       LCALL   ?Subroutine191 & 0xFFFF
   \                     ??CrossCallReturnLabel_362:
   \   000005   12....       LCALL   ?Subroutine151 & 0xFFFF
   \                     ??CrossCallReturnLabel_226:
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine151:
   \   000000   12....       LCALL   ??Subroutine224_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_364:
   \   000003   8882         MOV     DPL,R0
   \   000005   8983         MOV     DPH,R1
   \   000007   12....       LCALL   ?Subroutine198 & 0xFFFF
   \                     ??CrossCallReturnLabel_366:
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine20:
   \   000000   FC           MOV     R4,A
   \   000001   12....       LCALL   ?Subroutine152 & 0xFFFF
   \                     ??CrossCallReturnLabel_228:
   \   000004   EE           MOV     A,R6
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine19:
   \   000000   12....       LCALL   ?Subroutine151 & 0xFFFF
   \                     ??CrossCallReturnLabel_227:
   \   000003   8E82         MOV     DPL,R6
   \   000005   8F83         MOV     DPH,R7
   \   000007   E0           MOVX    A,@DPTR
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine17:
   \   000000   0C           INC     R4
   \   000001   0C           INC     R4
   \   000002   12....       LCALL   ?Subroutine152 & 0xFFFF
   \                     ??CrossCallReturnLabel_229:
   \   000005                ; Setup parameters for call to function zclAnalogDataType
   \   000005                ; Setup parameters for call to function zclAnalogDataType
   \   000005   8A82         MOV     DPL,R2
   \   000007   8B83         MOV     DPH,R3
   \   000009   12....       LCALL   ??Subroutine216_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_337:
   \   00000C   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine152:
   \   000000   EF           MOV     A,R7
   \   000001   3400         ADDC    A,#0x0
   \   000003   FD           MOV     R5,A
   \   000004   8C82         MOV     DPL,R4
   \   000006   8D83         MOV     DPH,R5
   \   000008   12....       LCALL   ??Subroutine224_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_365:
   \   00000B   8C82         MOV     DPL,R4
   \   00000D   8D83         MOV     DPH,R5
   \   00000F   12....       LCALL   ?Subroutine198 & 0xFFFF
   \                     ??CrossCallReturnLabel_367:
   \   000012   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine198:
   \   000000   A3           INC     DPTR
   \   000001                REQUIRE ??Subroutine224_0
   \   000001                ; // Fall through to label ??Subroutine224_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine224_0:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   85..82       MOV     DPL,?V0 + 6
   \   000004   85..83       MOV     DPH,?V0 + 7
   \   000007   F0           MOVX    @DPTR,A
   \   000008   A3           INC     DPTR
   \   000009   8582..       MOV     ?V0 + 6,DPL
   \   00000C   8583..       MOV     ?V0 + 7,DPH
   \   00000F   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine130:
   \   000000   E5..         MOV     A,?V0 + 0
   \   000002   2405         ADD     A,#0x5
   \   000004                REQUIRE ??Subroutine250_0
   \   000004                ; // Fall through to label ??Subroutine250_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine250_0:
   \   000000   F5..         MOV     ?V0 + 0,A
   \   000002   E5..         MOV     A,?V0 + 1
   \   000004                REQUIRE ??Subroutine251_0
   \   000004                ; // Fall through to label ??Subroutine251_0
   1126          
   1127          /*********************************************************************
   1128           * @fn      zcl_SendConfigReportRspCmd
   1129           *
   1130           * @brief   Send a Configure Reporting Response command
   1131           *
   1132           * @param   dstAddr - destination address
   1133           * @param   clusterID - cluster ID
   1134           * @param   cfgReportRspCmd - configure reporting response command to be sent
   1135           * @param   direction - direction of the command
   1136           * @param   seqNum - transaction sequence number
   1137           *
   1138           * @return  ZSuccess if OK
   1139           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1140          ZStatus_t zcl_SendConfigReportRspCmd( uint8 srcEP, afAddrType_t *dstAddr,
   \                     zcl_SendConfigReportRspCmd:
   1141                              uint16 clusterID, zclCfgReportRspCmd_t *cfgReportRspCmd,
   1142                              uint8 direction, uint8 disableDefaultRsp, uint8 seqNum )
   1143          {
   \   000000   74EA         MOV     A,#-0x16
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 22
   \   000005                ; Auto size: 0
   \   000005   89..         MOV     ?V0 + 2,R1
   \   000007   8A..         MOV     ?V0 + 12,R2
   \   000009   8B..         MOV     ?V0 + 13,R3
   \   00000B   8C..         MOV     ?V0 + 10,R4
   \   00000D   8D..         MOV     ?V0 + 11,R5
   \   00000F   7416         MOV     A,#0x16
   \   000011   12....       LCALL   ?XSTACK_DISP0_8
   \   000014   12....       LCALL   ?Subroutine69 & 0xFFFF
   \                     ??CrossCallReturnLabel_95:
   \   000017   12....       LCALL   ?XSTACK_DISP0_8
   \   00001A   12....       LCALL   ?Subroutine106 & 0xFFFF
   \                     ??CrossCallReturnLabel_164:
   \   00001D   12....       LCALL   ?XSTACK_DISP0_8
   \   000020   E0           MOVX    A,@DPTR
   \   000021   F5..         MOV     ?V0 + 6,A
   \   000023   741A         MOV     A,#0x1a
   \   000025   12....       LCALL   ?XSTACK_DISP0_8
   \   000028   12....       LCALL   ?Subroutine180 & 0xFFFF
   1144            uint16 dataLen;
   1145            uint8 *buf;
   1146            ZStatus_t status;
   1147          
   1148            // Atrribute list (Status, Direction and Attribute ID)
   1149            dataLen = cfgReportRspCmd->numAttr * ( 1 + 1 + 2 );
   \                     ??CrossCallReturnLabel_267:
   \   00002B   12....       LCALL   ?Subroutine58 & 0xFFFF
   \                     ??CrossCallReturnLabel_71:
   \   00002E   12....       LCALL   ?S_SHL
   \   000031   AE..         MOV     R6,?V0 + 0
   \   000033   AF..         MOV     R7,?V0 + 1
   1150          
   1151            buf = osal_mem_alloc( dataLen );
   \   000035                ; Setup parameters for call to function osal_mem_alloc
   \   000035   12....       LCALL   ?Subroutine117 & 0xFFFF
   1152            if ( buf != NULL )
   \                     ??CrossCallReturnLabel_347:
   \   000038   7003         JNZ     $+5
   \   00003A   02....       LJMP    ??zcl_SendConfigReportRspCmd_0 & 0xFFFF
   1153            {
   1154              // Load the buffer - serially
   1155              uint8 *pBuf = buf;
   1156              for ( uint8 i = 0; i < cfgReportRspCmd->numAttr; i++ )
   \   00003D   7C00         MOV     R4,#0x0
   \   00003F   8044         SJMP    ??zcl_SendConfigReportRspCmd_1
   1157              {
   1158                *pBuf++ = cfgReportRspCmd->attrList[i].status;
   \                     ??zcl_SendConfigReportRspCmd_2:
   \   000041   8C..         MOV     ?V0 + 8,R4
   \   000043   75..00       MOV     ?V0 + 9,#0x0
   \   000046   7402         MOV     A,#0x2
   \   000048   78..         MOV     R0,#?V0 + 8
   \   00004A   12....       LCALL   ?S_SHL
   \   00004D   E5..         MOV     A,?V0 + 4
   \   00004F   25..         ADD     A,?V0 + 8
   \   000051   F8           MOV     R0,A
   \   000052   E5..         MOV     A,?V0 + 5
   \   000054   35..         ADDC    A,?V0 + 9
   \   000056   F9           MOV     R1,A
   \   000057   8882         MOV     DPL,R0
   \   000059   8983         MOV     DPH,R1
   \   00005B   A3           INC     DPTR
   \   00005C   12....       LCALL   ?Subroutine109 & 0xFFFF
   \                     ??CrossCallReturnLabel_168:
   \   00005F   AB83         MOV     R3,DPH
   1159                *pBuf++ = cfgReportRspCmd->attrList[i].direction;
   \   000061   8882         MOV     DPL,R0
   \   000063   8983         MOV     DPH,R1
   \   000065   A3           INC     DPTR
   \   000066   12....       LCALL   ?Subroutine46 & 0xFFFF
   1160                *pBuf++ = LO_UINT16( cfgReportRspCmd->attrList[i].attrID );
   \                     ??CrossCallReturnLabel_355:
   \   000069   E8           MOV     A,R0
   \   00006A   2403         ADD     A,#0x3
   \   00006C   F5..         MOV     ?V0 + 8,A
   \   00006E   E9           MOV     A,R1
   \   00006F   3400         ADDC    A,#0x0
   \   000071   F5..         MOV     ?V0 + 9,A
   \   000073   85..82       MOV     DPL,?V0 + 8
   \   000076   F583         MOV     DPH,A
   \   000078   12....       LCALL   ??Subroutine220_0 & 0xFFFF
   1161                *pBuf++ = HI_UINT16( cfgReportRspCmd->attrList[i].attrID );
   \                     ??CrossCallReturnLabel_354:
   \   00007B   85..82       MOV     DPL,?V0 + 8
   \   00007E   85..83       MOV     DPH,?V0 + 9
   \   000081   12....       LCALL   ?Subroutine46 & 0xFFFF
   1162              }
   \                     ??CrossCallReturnLabel_356:
   \   000084   0C           INC     R4
   \                     ??zcl_SendConfigReportRspCmd_1:
   \   000085   85..82       MOV     DPL,?V0 + 4
   \   000088   85..83       MOV     DPH,?V0 + 5
   \   00008B   E0           MOVX    A,@DPTR
   \   00008C   F8           MOV     R0,A
   \   00008D   EC           MOV     A,R4
   \   00008E   C3           CLR     C
   \   00008F   98           SUBB    A,R0
   \   000090   40AF         JC      ??zcl_SendConfigReportRspCmd_2
   1163          
   1164              // If there's only a single status record and its status field is set to
   1165              // SUCCESS then omit the attribute ID field.
   1166              if ( cfgReportRspCmd->numAttr == 1 && cfgReportRspCmd->attrList[0].status == ZCL_STATUS_SUCCESS )
   \   000092   E0           MOVX    A,@DPTR
   \   000093   6401         XRL     A,#0x1
   \   000095   7008         JNZ     ??zcl_SendConfigReportRspCmd_3
   \   000097   A3           INC     DPTR
   \   000098   E0           MOVX    A,@DPTR
   \   000099   7004         JNZ     ??zcl_SendConfigReportRspCmd_3
   1167              {
   1168                dataLen = 1;
   \   00009B   7E01         MOV     R6,#0x1
   \   00009D   7F00         MOV     R7,#0x0
   1169              }
   1170          
   1171              status = zcl_SendCommand( srcEP, dstAddr, clusterID,
   1172                                        ZCL_CMD_CONFIG_REPORT_RSP, FALSE, direction,
   1173                                        disableDefaultRsp, 0, seqNum, dataLen, buf );
   \                     ??zcl_SendConfigReportRspCmd_3:
   \   00009F                ; Setup parameters for call to function zcl_SendCommand
   \   00009F   78..         MOV     R0,#?V0 + 0
   \   0000A1   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000A4   8E..         MOV     ?V0 + 4,R6
   \   0000A6   8F..         MOV     ?V0 + 5,R7
   \   0000A8   78..         MOV     R0,#?V0 + 4
   \   0000AA   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000AD   E5..         MOV     A,?V0 + 7
   \   0000AF   F5..         MOV     ?V0 + 4,A
   \   0000B1   78..         MOV     R0,#?V0 + 4
   \   0000B3   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000B6   E4           CLR     A
   \   0000B7   F5..         MOV     ?V0 + 4,A
   \   0000B9   F5..         MOV     ?V0 + 5,A
   \   0000BB   78..         MOV     R0,#?V0 + 4
   \   0000BD   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000C0   E5..         MOV     A,?V0 + 6
   \   0000C2   F5..         MOV     ?V0 + 4,A
   \   0000C4   78..         MOV     R0,#?V0 + 4
   \   0000C6   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000C9   78..         MOV     R0,#?V0 + 3
   \   0000CB   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000CE   75..00       MOV     ?V0 + 3,#0x0
   \   0000D1   78..         MOV     R0,#?V0 + 3
   \   0000D3   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000D6   75..07       MOV     ?V0 + 3,#0x7
   \   0000D9   78..         MOV     R0,#?V0 + 3
   \   0000DB   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000DE   12....       LCALL   ?Subroutine136 & 0xFFFF
   \                     ??CrossCallReturnLabel_302:
   \   0000E1   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000E4   E9           MOV     A,R1
   \   0000E5   FE           MOV     R6,A
   1174              osal_mem_free( buf );
   \   0000E6                ; Setup parameters for call to function osal_mem_free
   \   0000E6   AA..         MOV     R2,?V0 + 0
   \   0000E8   AB..         MOV     R3,?V0 + 1
   \   0000EA   12....       LCALL   ??osal_mem_free?relay
   \   0000ED   8002         SJMP    ??zcl_SendConfigReportRspCmd_4
   1175            }
   1176            else
   1177            {
   1178              status = ZMemError;
   \                     ??zcl_SendConfigReportRspCmd_0:
   \   0000EF   7E10         MOV     R6,#0x10
   1179            }
   1180          
   1181            return ( status );
   \                     ??zcl_SendConfigReportRspCmd_4:
   \   0000F1                REQUIRE ?Subroutine12
   \   0000F1                ; // Fall through to label ?Subroutine12
   1182          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine46:
   \   000000   A3           INC     DPTR
   \   000001                REQUIRE ??Subroutine220_0
   \   000001                ; // Fall through to label ??Subroutine220_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine220_0:
   \   000000   E0           MOVX    A,@DPTR
   \   000001                REQUIRE ??Subroutine221_0
   \   000001                ; // Fall through to label ??Subroutine221_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine221_0:
   \   000000   8A82         MOV     DPL,R2
   \   000002   8B83         MOV     DPH,R3
   \   000004   F0           MOVX    @DPTR,A
   \   000005   A3           INC     DPTR
   \   000006   0A           INC     R2
   \   000007   AB83         MOV     R3,DPH
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine58:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F5..         MOV     ?V0 + 0,A
   \   000003   75..00       MOV     ?V0 + 1,#0x0
   \   000006   7402         MOV     A,#0x2
   \   000008   78..         MOV     R0,#?V0 + 0
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine109:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   8A82         MOV     DPL,R2
   \   000003   8B83         MOV     DPH,R3
   \   000005   F0           MOVX    @DPTR,A
   \   000006   A3           INC     DPTR
   \   000007   AA82         MOV     R2,DPL
   \   000009   22           RET
   1183          
   1184          /*********************************************************************
   1185           * @fn      zcl_SendReadReportCfgCmd
   1186           *
   1187           * @brief   Send a Read Reporting Configuration command
   1188           *
   1189           * @param   dstAddr - destination address
   1190           * @param   clusterID - cluster ID
   1191           * @param   readReportCfgCmd - read reporting configuration command to be sent
   1192           * @param   direction - direction of the command
   1193           * @param   seqNum - transaction sequence number
   1194           *
   1195           * @return  ZSuccess if OK
   1196           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1197          ZStatus_t zcl_SendReadReportCfgCmd( uint8 srcEP, afAddrType_t *dstAddr,
   \                     zcl_SendReadReportCfgCmd:
   1198                            uint16 clusterID, zclReadReportCfgCmd_t *readReportCfgCmd,
   1199                            uint8 direction, uint8 disableDefaultRsp, uint8 seqNum )
   1200          {
   \   000000   74EA         MOV     A,#-0x16
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 22
   \   000005                ; Auto size: 0
   \   000005   89..         MOV     ?V0 + 2,R1
   \   000007   8A..         MOV     ?V0 + 12,R2
   \   000009   8B..         MOV     ?V0 + 13,R3
   \   00000B   8C..         MOV     ?V0 + 10,R4
   \   00000D   8D..         MOV     ?V0 + 11,R5
   \   00000F   7416         MOV     A,#0x16
   \   000011   12....       LCALL   ?XSTACK_DISP0_8
   \   000014   12....       LCALL   ?Subroutine69 & 0xFFFF
   \                     ??CrossCallReturnLabel_96:
   \   000017   12....       LCALL   ?XSTACK_DISP0_8
   \   00001A   12....       LCALL   ?Subroutine106 & 0xFFFF
   \                     ??CrossCallReturnLabel_165:
   \   00001D   12....       LCALL   ?XSTACK_DISP0_8
   \   000020   E0           MOVX    A,@DPTR
   \   000021   F5..         MOV     ?V0 + 6,A
   \   000023   741A         MOV     A,#0x1a
   \   000025   12....       LCALL   ?XSTACK_DISP0_8
   \   000028   12....       LCALL   ?Subroutine61 & 0xFFFF
   1201            uint16 dataLen;
   1202            uint8 *buf;
   1203            ZStatus_t status;
   1204          
   1205            dataLen = readReportCfgCmd->numAttr * ( 1 + 2 ); // Direction + Atrribute ID
   1206          
   1207            buf = osal_mem_alloc( dataLen );
   1208            if ( buf != NULL )
   \                     ??CrossCallReturnLabel_79:
   \   00002B   606A         JZ      ??zcl_SendReadReportCfgCmd_0
   1209            {
   1210              // Load the buffer - serially
   1211              uint8 *pBuf = buf;
   \   00002D   A8..         MOV     R0,?V0 + 0
   \   00002F   A9..         MOV     R1,?V0 + 1
   1212              for ( uint8 i = 0; i < readReportCfgCmd->numAttr; i++ )
   \   000031   75..00       MOV     ?V0 + 8,#0x0
   \   000034   8003         SJMP    ??CrossCallReturnLabel_5
   1213              {
   1214                *pBuf++ = readReportCfgCmd->attrList[i].direction;
   \                     ??zcl_SendReadReportCfgCmd_1:
   \   000036   12....       LCALL   ?Subroutine16 & 0xFFFF
   1215                *pBuf++ = LO_UINT16( readReportCfgCmd->attrList[i].attrID );
   1216                *pBuf++ = HI_UINT16( readReportCfgCmd->attrList[i].attrID );
   1217              }
   \                     ??CrossCallReturnLabel_5:
   \   000039   85..82       MOV     DPL,?V0 + 4
   \   00003C   85..83       MOV     DPH,?V0 + 5
   \   00003F   E0           MOVX    A,@DPTR
   \   000040   FA           MOV     R2,A
   \   000041   E5..         MOV     A,?V0 + 8
   \   000043   C3           CLR     C
   \   000044   9A           SUBB    A,R2
   \   000045   40EF         JC      ??zcl_SendReadReportCfgCmd_1
   1218          
   1219              status = zcl_SendCommand( srcEP, dstAddr, clusterID, ZCL_CMD_READ_REPORT_CFG, FALSE,
   1220                                        direction, disableDefaultRsp, 0, seqNum, dataLen, buf );
   \   000047                ; Setup parameters for call to function zcl_SendCommand
   \   000047   78..         MOV     R0,#?V0 + 0
   \   000049   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00004C   8E..         MOV     ?V0 + 4,R6
   \   00004E   8F..         MOV     ?V0 + 5,R7
   \   000050   78..         MOV     R0,#?V0 + 4
   \   000052   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000055   E5..         MOV     A,?V0 + 7
   \   000057   F5..         MOV     ?V0 + 4,A
   \   000059   78..         MOV     R0,#?V0 + 4
   \   00005B   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00005E   E4           CLR     A
   \   00005F   F5..         MOV     ?V0 + 4,A
   \   000061   F5..         MOV     ?V0 + 5,A
   \   000063   78..         MOV     R0,#?V0 + 4
   \   000065   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000068   E5..         MOV     A,?V0 + 6
   \   00006A   F5..         MOV     ?V0 + 4,A
   \   00006C   78..         MOV     R0,#?V0 + 4
   \   00006E   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000071   78..         MOV     R0,#?V0 + 3
   \   000073   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000076   75..00       MOV     ?V0 + 3,#0x0
   \   000079   78..         MOV     R0,#?V0 + 3
   \   00007B   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00007E   75..08       MOV     ?V0 + 3,#0x8
   \   000081   78..         MOV     R0,#?V0 + 3
   \   000083   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000086   12....       LCALL   ?Subroutine136 & 0xFFFF
   \                     ??CrossCallReturnLabel_303:
   \   000089   12....       LCALL   ?DEALLOC_XSTACK8
   \   00008C   E9           MOV     A,R1
   \   00008D   FE           MOV     R6,A
   1221              osal_mem_free( buf );
   \   00008E                ; Setup parameters for call to function osal_mem_free
   \   00008E   AA..         MOV     R2,?V0 + 0
   \   000090   AB..         MOV     R3,?V0 + 1
   \   000092   12....       LCALL   ??osal_mem_free?relay
   \   000095   8002         SJMP    ??zcl_SendReadReportCfgCmd_2
   1222            }
   1223            else
   1224            {
   1225              status = ZMemError;
   \                     ??zcl_SendReadReportCfgCmd_0:
   \   000097   7E10         MOV     R6,#0x10
   1226            }
   1227          
   1228            return ( status );
   \                     ??zcl_SendReadReportCfgCmd_2:
   \   000099   02....       LJMP    ?Subroutine12 & 0xFFFF
   1229          }
   1230          
   1231          /*********************************************************************
   1232           * @fn      zcl_SendReadReportCfgRspCmd
   1233           *
   1234           * @brief   Send a Read Reporting Configuration Response command
   1235           *
   1236           * @param   dstAddr - destination address
   1237           * @param   clusterID - cluster ID
   1238           * @param   readReportCfgRspCmd - read reporting configuration response command to be sent
   1239           * @param   direction - direction of the command
   1240           * @param   seqNum - transaction sequence number
   1241           *
   1242           * @return  ZSuccess if OK
   1243           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1244          ZStatus_t zcl_SendReadReportCfgRspCmd( uint8 srcEP, afAddrType_t *dstAddr,
   \                     zcl_SendReadReportCfgRspCmd:
   1245                       uint16 clusterID, zclReadReportCfgRspCmd_t *readReportCfgRspCmd,
   1246                       uint8 direction, uint8 disableDefaultRsp, uint8 seqNum )
   1247          {
   \   000000   74E9         MOV     A,#-0x17
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 23
   \   000005                ; Auto size: 4
   \   000005   74FC         MOV     A,#-0x4
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   7402         MOV     A,#0x2
   \   00000C   12....       LCALL   ?XSTACK_DISP0_8
   \   00000F   12....       LCALL   ?Subroutine25 & 0xFFFF
   \                     ??CrossCallReturnLabel_21:
   \   000012   12....       LCALL   ?XSTACK_DISP0_8
   \   000015   12....       LCALL   ?Subroutine101 & 0xFFFF
   \                     ??CrossCallReturnLabel_152:
   \   000018   12....       LCALL   ?XSTACK_DISP0_8
   \   00001B   E0           MOVX    A,@DPTR
   \   00001C   F5..         MOV     ?V0 + 11,A
   \   00001E   741E         MOV     A,#0x1e
   \   000020   12....       LCALL   ?XSTACK_DISP0_8
   \   000023   E0           MOVX    A,@DPTR
   \   000024   F5..         MOV     ?V0 + 10,A
   \   000026   741F         MOV     A,#0x1f
   \   000028   12....       LCALL   ?XSTACK_DISP0_8
   \   00002B   12....       LCALL   ?Subroutine85 & 0xFFFF
   1248            uint8 *buf;
   1249            uint16 dataLen = 0;
   1250            ZStatus_t status;
   1251          
   1252            // Find out the data length
   1253            for ( uint8 i = 0; i < readReportCfgRspCmd->numAttr; i++ )
   \                     ??CrossCallReturnLabel_128:
   \   00002E   8009         SJMP    ??zcl_SendReadReportCfgRspCmd_0
   1254            {
   1255              zclReportCfgRspRec_t *reportRspRec = &(readReportCfgRspCmd->attrList[i]);
   1256          
   1257              dataLen += 1 + 1 + 2 ; // Status, Direction and Atrribute ID
   1258          
   1259              if ( reportRspRec->status == ZCL_STATUS_SUCCESS )
   1260              {
   1261                if ( reportRspRec->direction == ZCL_SEND_ATTR_REPORTS )
   1262                {
   1263                  dataLen += 1 + 2 + 2; // Data Type + Min + Max Reporting Intervals
   1264          
   1265                  // Find out the size of the Reportable Change field (for Analog data types)
   1266                  if ( zclAnalogDataType( reportRspRec->dataType ) )
   1267                  {
   1268                    dataLen += zclGetDataTypeLength( reportRspRec->dataType );
   1269                  }
   1270                }
   1271                else
   1272                {
   1273                  dataLen += 2; // Timeout Period
   \                     ??zcl_SendReadReportCfgRspCmd_1:
   \   000030   E5..         MOV     A,?V0 + 0
   \   000032   2402         ADD     A,#0x2
   1274                }
   \                     ??zcl_SendReadReportCfgRspCmd_2:
   \   000034   12....       LCALL   ??Subroutine250_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_505:
   \   000037   05..         INC     ?V0 + 2
   \                     ??zcl_SendReadReportCfgRspCmd_0:
   \   000039   12....       LCALL   ?Subroutine60 & 0xFFFF
   \                     ??CrossCallReturnLabel_332:
   \   00003C   502B         JNC     ??zcl_SendReadReportCfgRspCmd_3
   \   00003E   E5..         MOV     A,?V0 + 2
   \   000040   75F00D       MOV     B,#0xd
   \   000043   12....       LCALL   ?Subroutine141 & 0xFFFF
   \                     ??CrossCallReturnLabel_209:
   \   000046   2404         ADD     A,#0x4
   \   000048   12....       LCALL   ??Subroutine250_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_506:
   \   00004B   E0           MOVX    A,@DPTR
   \   00004C   70E9         JNZ     ??CrossCallReturnLabel_505
   \   00004E   A3           INC     DPTR
   \   00004F   E0           MOVX    A,@DPTR
   \   000050   70DE         JNZ     ??zcl_SendReadReportCfgRspCmd_1
   \   000052   12....       LCALL   ?Subroutine130 & 0xFFFF
   \                     ??CrossCallReturnLabel_511:
   \   000055                ; Setup parameters for call to function zclAnalogDataType
   \   000055   8E82         MOV     DPL,R6
   \   000057   8F83         MOV     DPH,R7
   \   000059   A3           INC     DPTR
   \   00005A   12....       LCALL   ?Subroutine176 & 0xFFFF
   \                     ??CrossCallReturnLabel_336:
   \   00005D   60D8         JZ      ??CrossCallReturnLabel_505
   \   00005F                ; Setup parameters for call to function zclGetDataTypeLength
   \   00005F   8E82         MOV     DPL,R6
   \   000061   8F83         MOV     DPH,R7
   \   000063   A3           INC     DPTR
   \   000064   12....       LCALL   ?Subroutine95 & 0xFFFF
   1275              }
   1276            }
   \                     ??CrossCallReturnLabel_142:
   \   000067   80CB         SJMP    ??zcl_SendReadReportCfgRspCmd_2
   1277          
   1278            buf = osal_mem_alloc( dataLen );
   \                     ??zcl_SendReadReportCfgRspCmd_3:
   \   000069                ; Setup parameters for call to function osal_mem_alloc
   \   000069   12....       LCALL   ?Subroutine119 & 0xFFFF
   1279            if ( buf != NULL )
   \                     ??CrossCallReturnLabel_179:
   \   00006C   7003         JNZ     $+5
   \   00006E   02....       LJMP    ??zcl_SendReadReportCfgRspCmd_4 & 0xFFFF
   1280            {
   1281              // Load the buffer - serially
   1282              uint8 *pBuf = buf;
   1283              for ( uint8 i = 0; i < readReportCfgRspCmd->numAttr; i++ )
   \   000071   75..00       MOV     ?V0 + 8,#0x0
   \   000074   8008         SJMP    ??zcl_SendReadReportCfgRspCmd_5
   1284              {
   1285                zclReportCfgRspRec_t *reportRspRec = &(readReportCfgRspCmd->attrList[i]);
   1286          
   1287                *pBuf++ = reportRspRec->status;
   1288                *pBuf++ = reportRspRec->direction;
   1289                *pBuf++ = LO_UINT16( reportRspRec->attrID );
   1290                *pBuf++ = HI_UINT16( reportRspRec->attrID );
   1291          
   1292                if ( reportRspRec->status == ZCL_STATUS_SUCCESS )
   1293                {
   1294                  if ( reportRspRec->direction == ZCL_SEND_ATTR_REPORTS )
   1295                  {
   1296                    *pBuf++ = reportRspRec->dataType;
   1297                    *pBuf++ = LO_UINT16( reportRspRec->minReportInt );
   1298                    *pBuf++ = HI_UINT16( reportRspRec->minReportInt );
   1299                    *pBuf++ = LO_UINT16( reportRspRec->maxReportInt );
   1300                    *pBuf++ = HI_UINT16( reportRspRec->maxReportInt );
   1301          
   1302                    if ( zclAnalogDataType( reportRspRec->dataType ) )
   1303                    {
   1304                      pBuf = zclSerializeData( reportRspRec->dataType,
   1305                                               reportRspRec->reportableChange, pBuf );
   1306                    }
   1307                  }
   1308                  else
   1309                  {
   1310                    *pBuf++ = LO_UINT16( reportRspRec->timeoutPeriod );
   \                     ??zcl_SendReadReportCfgRspCmd_6:
   \   000076   EE           MOV     A,R6
   \   000077   2409         ADD     A,#0x9
   \   000079   12....       LCALL   ?Subroutine21 & 0xFFFF
   1311                    *pBuf++ = HI_UINT16( reportRspRec->timeoutPeriod );
   1312                  }
   \                     ??CrossCallReturnLabel_15:
   \   00007C   05..         INC     ?V0 + 8
   \                     ??zcl_SendReadReportCfgRspCmd_5:
   \   00007E   12....       LCALL   ?Subroutine107 & 0xFFFF
   \                     ??CrossCallReturnLabel_340:
   \   000081   5043         JNC     ??zcl_SendReadReportCfgRspCmd_7
   \   000083   E5..         MOV     A,?V0 + 8
   \   000085   75F00D       MOV     B,#0xd
   \   000088   12....       LCALL   ?Subroutine35 & 0xFFFF
   \                     ??CrossCallReturnLabel_36:
   \   00008B   12....       LCALL   ??Subroutine218_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_343:
   \   00008E   2402         ADD     A,#0x2
   \   000090   12....       LCALL   ?Subroutine131 & 0xFFFF
   \                     ??CrossCallReturnLabel_359:
   \   000093   12....       LCALL   ?Subroutine19 & 0xFFFF
   \                     ??CrossCallReturnLabel_11:
   \   000096   70E4         JNZ     ??CrossCallReturnLabel_15
   \   000098   A3           INC     DPTR
   \   000099   E0           MOVX    A,@DPTR
   \   00009A   70DA         JNZ     ??zcl_SendReadReportCfgRspCmd_6
   \   00009C   EE           MOV     A,R6
   \   00009D   2404         ADD     A,#0x4
   \   00009F   12....       LCALL   ?Subroutine31 & 0xFFFF
   \                     ??CrossCallReturnLabel_342:
   \   0000A2   2405         ADD     A,#0x5
   \   0000A4   12....       LCALL   ?Subroutine20 & 0xFFFF
   \                     ??CrossCallReturnLabel_13:
   \   0000A7   2407         ADD     A,#0x7
   \   0000A9   12....       LCALL   ?Subroutine17 & 0xFFFF
   \                     ??CrossCallReturnLabel_7:
   \   0000AC   60CE         JZ      ??CrossCallReturnLabel_15
   \   0000AE                ; Setup parameters for call to function zclSerializeData
   \   0000AE   AC..         MOV     R4,?V0 + 6
   \   0000B0   AD..         MOV     R5,?V0 + 7
   \   0000B2   EE           MOV     A,R6
   \   0000B3   240B         ADD     A,#0xb
   \   0000B5   F582         MOV     DPL,A
   \   0000B7   EF           MOV     A,R7
   \   0000B8   3400         ADDC    A,#0x0
   \   0000BA   12....       LCALL   ?Subroutine78 & 0xFFFF
   1313                }
   1314              }
   \                     ??CrossCallReturnLabel_116:
   \   0000BD   12....       LCALL   ??zclSerializeData?relay
   \   0000C0   8A..         MOV     ?V0 + 6,R2
   \   0000C2   8B..         MOV     ?V0 + 7,R3
   \   0000C4   80B6         SJMP    ??CrossCallReturnLabel_15
   1315          
   1316              status = zcl_SendCommand( srcEP, dstAddr, clusterID,
   1317                                        ZCL_CMD_READ_REPORT_CFG_RSP, FALSE,
   1318                                        direction, disableDefaultRsp, 0, seqNum, dataLen, buf );
   \                     ??zcl_SendReadReportCfgRspCmd_7:
   \   0000C6                ; Setup parameters for call to function zcl_SendCommand
   \   0000C6   78..         MOV     R0,#?V0 + 2
   \   0000C8   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000CB   78..         MOV     R0,#?V0 + 0
   \   0000CD   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000D0   E5..         MOV     A,?V0 + 9
   \   0000D2   F5..         MOV     ?V0 + 0,A
   \   0000D4   78..         MOV     R0,#?V0 + 0
   \   0000D6   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000D9   E4           CLR     A
   \   0000DA   F5..         MOV     ?V0 + 0,A
   \   0000DC   F5..         MOV     ?V0 + 1,A
   \   0000DE   78..         MOV     R0,#?V0 + 0
   \   0000E0   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000E3   E5..         MOV     A,?V0 + 10
   \   0000E5   F5..         MOV     ?V0 + 0,A
   \   0000E7   78..         MOV     R0,#?V0 + 0
   \   0000E9   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000EC   E5..         MOV     A,?V0 + 11
   \   0000EE   F5..         MOV     ?V0 + 0,A
   \   0000F0   78..         MOV     R0,#?V0 + 0
   \   0000F2   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000F5   75..00       MOV     ?V0 + 0,#0x0
   \   0000F8   78..         MOV     R0,#?V0 + 0
   \   0000FA   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000FD   75..09       MOV     ?V0 + 0,#0x9
   \   000100   78..         MOV     R0,#?V0 + 0
   \   000102   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000105   740B         MOV     A,#0xb
   \   000107   12....       LCALL   ?XSTACK_DISP0_8
   \   00010A   12....       LCALL   ??Subroutine235_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_420:
   \   00010D   740D         MOV     A,#0xd
   \   00010F   12....       LCALL   ?XSTACK_DISP0_8
   \   000112   12....       LCALL   ?Subroutine84 & 0xFFFF
   \                     ??CrossCallReturnLabel_126:
   \   000115   12....       LCALL   ?DEALLOC_XSTACK8
   \   000118   E9           MOV     A,R1
   \   000119   FE           MOV     R6,A
   1319              osal_mem_free( buf );
   \   00011A                ; Setup parameters for call to function osal_mem_free
   \   00011A   AA..         MOV     R2,?V0 + 2
   \   00011C   AB..         MOV     R3,?V0 + 3
   \   00011E   12....       LCALL   ??osal_mem_free?relay
   \   000121   8002         SJMP    ??zcl_SendReadReportCfgRspCmd_8
   1320            }
   1321            else
   1322            {
   1323              status = ZMemError;
   \                     ??zcl_SendReadReportCfgRspCmd_4:
   \   000123   7E10         MOV     R6,#0x10
   1324            }
   1325          
   1326            return ( status );
   \                     ??zcl_SendReadReportCfgRspCmd_8:
   \   000125   02....       LJMP    ?Subroutine6 & 0xFFFF
   1327          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine131:
   \   000000   F8           MOV     R0,A
   \   000001   EF           MOV     A,R7
   \   000002                REQUIRE ??Subroutine223_0
   \   000002                ; // Fall through to label ??Subroutine223_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine78:
   \   000000   F583         MOV     DPH,A
   \   000002   12....       LCALL   ?Subroutine172 & 0xFFFF
   \                     ??CrossCallReturnLabel_412:
   \   000005   8E82         MOV     DPL,R6
   \   000007   8F83         MOV     DPH,R7
   \   000009   A3           INC     DPTR
   \   00000A   A3           INC     DPTR
   \   00000B   A3           INC     DPTR
   \   00000C   A3           INC     DPTR
   \   00000D   E0           MOVX    A,@DPTR
   \   00000E   F9           MOV     R1,A
   \   00000F   22           RET
   1328          
   1329          /*********************************************************************
   1330           * @fn      zcl_SendReportCmd
   1331           *
   1332           * @brief   Send a Report command
   1333           *
   1334           * @param   dstAddr - destination address
   1335           * @param   clusterID - cluster ID
   1336           * @param   reportCmd - report command to be sent
   1337           * @param   direction - direction of the command
   1338           * @param   seqNum - transaction sequence number
   1339           *
   1340           * @return  ZSuccess if OK
   1341           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1342          ZStatus_t zcl_SendReportCmd( uint8 srcEP, afAddrType_t *dstAddr,
   \                     zcl_SendReportCmd:
   1343                                       uint16 clusterID, zclReportCmd_t *reportCmd,
   1344                                       uint8 direction, uint8 disableDefaultRsp, uint8 seqNum )
   1345          {
   \   000000   74E8         MOV     A,#-0x18
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 24
   \   000005                ; Auto size: 0
   \   000005   89..         MOV     ?V0 + 10,R1
   \   000007   8A..         MOV     ?V0 + 14,R2
   \   000009   8B..         MOV     ?V0 + 15,R3
   \   00000B   8C..         MOV     ?V0 + 12,R4
   \   00000D   8D..         MOV     ?V0 + 13,R5
   \   00000F   7418         MOV     A,#0x18
   \   000011   12....       LCALL   ?XSTACK_DISP0_8
   \   000014   12....       LCALL   ?Subroutine100 & 0xFFFF
   \                     ??CrossCallReturnLabel_150:
   \   000017   12....       LCALL   ?XSTACK_DISP0_8
   \   00001A   E0           MOVX    A,@DPTR
   \   00001B   F5..         MOV     ?V0 + 7,A
   \   00001D   741B         MOV     A,#0x1b
   \   00001F   12....       LCALL   ?XSTACK_DISP0_8
   \   000022   E0           MOVX    A,@DPTR
   \   000023   F5..         MOV     ?V0 + 6,A
   \   000025   741C         MOV     A,#0x1c
   \   000027   12....       LCALL   ?XSTACK_DISP0_8
   \   00002A   12....       LCALL   ?Subroutine108 & 0xFFFF
   1346            uint16 dataLen = 0;
   1347            uint8 *buf;
   1348            ZStatus_t status;
   1349          
   1350            // calculate the size of the command
   1351            for ( uint8 i = 0; i < reportCmd->numAttr; i++ )
   \                     ??CrossCallReturnLabel_167:
   \   00002D   8003         SJMP    ??CrossCallReturnLabel_64
   1352            {
   1353              zclReport_t *reportRec = &(reportCmd->attrList[i]);
   \                     ??zcl_SendReportCmd_0:
   \   00002F   12....       LCALL   ?Subroutine55 & 0xFFFF
   1354          
   1355              dataLen += 2 + 1; // Attribute ID + data type
   1356          
   1357              // Attribute Data
   1358              dataLen += zclGetAttrDataLength( reportRec->dataType, reportRec->attrData );
   1359            }
   \                     ??CrossCallReturnLabel_64:
   \   000032   12....       LCALL   ?Subroutine60 & 0xFFFF
   \                     ??CrossCallReturnLabel_333:
   \   000035   40F8         JC      ??zcl_SendReportCmd_0
   1360          
   1361            buf = osal_mem_alloc( dataLen );
   \   000037                ; Setup parameters for call to function osal_mem_alloc
   \   000037   12....       LCALL   ?Subroutine117 & 0xFFFF
   1362            if ( buf != NULL )
   \                     ??CrossCallReturnLabel_348:
   \   00003A   606F         JZ      ??zcl_SendReportCmd_1
   1363            {
   1364              // Load the buffer - serially
   1365              uint8 *pBuf = buf;
   \   00003C   AC..         MOV     R4,?V0 + 0
   \   00003E   AD..         MOV     R5,?V0 + 1
   1366              for ( uint8 i = 0; i < reportCmd->numAttr; i++ )
   \   000040   75..00       MOV     ?V0 + 2,#0x0
   \   000043   8003         SJMP    ??CrossCallReturnLabel_1
   1367              {
   1368                zclReport_t *reportRec = &(reportCmd->attrList[i]);
   \                     ??zcl_SendReportCmd_2:
   \   000045   12....       LCALL   ?Subroutine14 & 0xFFFF
   1369          
   1370                *pBuf++ = LO_UINT16( reportRec->attrID );
   1371                *pBuf++ = HI_UINT16( reportRec->attrID );
   1372                *pBuf++ = reportRec->dataType;
   1373          
   1374                pBuf = zclSerializeData( reportRec->dataType, reportRec->attrData, pBuf );
   1375              }
   \                     ??CrossCallReturnLabel_1:
   \   000048   12....       LCALL   ?Subroutine60 & 0xFFFF
   \                     ??CrossCallReturnLabel_334:
   \   00004B   40F8         JC      ??zcl_SendReportCmd_2
   1376          
   1377              status = zcl_SendCommand( srcEP, dstAddr, clusterID, ZCL_CMD_REPORT, FALSE,
   1378                                        direction, disableDefaultRsp, 0, seqNum, dataLen, buf );
   \   00004D                ; Setup parameters for call to function zcl_SendCommand
   \   00004D   78..         MOV     R0,#?V0 + 0
   \   00004F   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000052   8E..         MOV     ?V0 + 4,R6
   \   000054   8F..         MOV     ?V0 + 5,R7
   \   000056   78..         MOV     R0,#?V0 + 4
   \   000058   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00005B   E5..         MOV     A,?V0 + 3
   \   00005D   F5..         MOV     ?V0 + 2,A
   \   00005F   78..         MOV     R0,#?V0 + 2
   \   000061   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000064   E4           CLR     A
   \   000065   F5..         MOV     ?V0 + 2,A
   \   000067   F5..         MOV     ?V0 + 3,A
   \   000069   78..         MOV     R0,#?V0 + 2
   \   00006B   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00006E   E5..         MOV     A,?V0 + 6
   \   000070   F5..         MOV     ?V0 + 2,A
   \   000072   78..         MOV     R0,#?V0 + 2
   \   000074   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000077   E5..         MOV     A,?V0 + 7
   \   000079   F5..         MOV     ?V0 + 2,A
   \   00007B   78..         MOV     R0,#?V0 + 2
   \   00007D   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000080   75..00       MOV     ?V0 + 2,#0x0
   \   000083   78..         MOV     R0,#?V0 + 2
   \   000085   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000088   75..0A       MOV     ?V0 + 2,#0xa
   \   00008B   78..         MOV     R0,#?V0 + 2
   \   00008D   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000090   AC..         MOV     R4,?V0 + 12
   \   000092   AD..         MOV     R5,?V0 + 13
   \   000094   AA..         MOV     R2,?V0 + 14
   \   000096   AB..         MOV     R3,?V0 + 15
   \   000098   A9..         MOV     R1,?V0 + 10
   \   00009A   12....       LCALL   ??Subroutine211_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_307:
   \   00009D   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000A0   E9           MOV     A,R1
   \   0000A1   FE           MOV     R6,A
   1379              osal_mem_free( buf );
   \   0000A2                ; Setup parameters for call to function osal_mem_free
   \   0000A2   AA..         MOV     R2,?V0 + 0
   \   0000A4   AB..         MOV     R3,?V0 + 1
   \   0000A6   12....       LCALL   ??osal_mem_free?relay
   \   0000A9   8002         SJMP    ??zcl_SendReportCmd_3
   1380            }
   1381            else
   1382            {
   1383              status = ZMemError;
   \                     ??zcl_SendReportCmd_1:
   \   0000AB   7E10         MOV     R6,#0x10
   1384            }
   1385          
   1386            return ( status );
   \                     ??zcl_SendReportCmd_3:
   \   0000AD   02....       LJMP    ?Subroutine13 & 0xFFFF
   1387          }
   1388          #endif // ZCL_REPORT
   1389          
   1390          /*********************************************************************
   1391           * @fn      zcl_SendDefaultRspCmd
   1392           *
   1393           * @brief   Send a Default Response command
   1394           *
   1395           *          Note: The manufacturer code field should be set if this
   1396           *          command is being sent in response to a manufacturer specific
   1397           *          command.
   1398           *
   1399           * @param   dstAddr - destination address
   1400           * @param   clusterID - cluster ID
   1401           * @param   defaultRspCmd - default response command to be sent
   1402           * @param   direction - direction of the command
   1403           * @param   manuCode - manufacturer code for proprietary extensions to a profile
   1404           * @param   seqNum - transaction sequence number
   1405           *
   1406           * @return  ZSuccess if OK
   1407           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1408          ZStatus_t zcl_SendDefaultRspCmd( uint8 srcEP, afAddrType_t *dstAddr, uint16 clusterID,
   \                     zcl_SendDefaultRspCmd:
   1409                                           zclDefaultRspCmd_t *defaultRspCmd, uint8 direction,
   1410                                           uint8 disableDefaultRsp, uint16 manuCode, uint8 seqNum )
   1411          {
   \   000000   74F2         MOV     A,#-0xe
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 2
   \   000005   74FE         MOV     A,#-0x2
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   E9           MOV     A,R1
   \   00000B   FE           MOV     R6,A
   \   00000C   7410         MOV     A,#0x10
   \   00000E   12....       LCALL   ?XSTACK_DISP0_8
   \   000011   12....       LCALL   ??Subroutine248_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_477:
   \   000014   7412         MOV     A,#0x12
   \   000016   12....       LCALL   ?XSTACK_DISP0_8
   \   000019   E0           MOVX    A,@DPTR
   \   00001A   FF           MOV     R7,A
   \   00001B   7413         MOV     A,#0x13
   \   00001D   12....       LCALL   ?XSTACK_DISP0_8
   \   000020   E0           MOVX    A,@DPTR
   \   000021   F5..         MOV     ?V0 + 4,A
   \   000023   7414         MOV     A,#0x14
   \   000025   12....       LCALL   ?XSTACK_DISP0_8
   \   000028   E0           MOVX    A,@DPTR
   \   000029   F5..         MOV     ?V0 + 2,A
   \   00002B   A3           INC     DPTR
   \   00002C   E0           MOVX    A,@DPTR
   \   00002D   F5..         MOV     ?V0 + 3,A
   \   00002F   7416         MOV     A,#0x16
   \   000031   12....       LCALL   ?XSTACK_DISP0_8
   \   000034   E0           MOVX    A,@DPTR
   \   000035   F5..         MOV     ?V0 + 5,A
   1412            uint8 buf[2]; // Command ID and Status;
   1413          
   1414            // Load the buffer - serially
   1415            buf[0] = defaultRspCmd->commandID;
   \   000037   8882         MOV     DPL,R0
   \   000039   8983         MOV     DPH,R1
   \   00003B   E0           MOVX    A,@DPTR
   \   00003C   85..82       MOV     DPL,?XSP + 0
   \   00003F   85..83       MOV     DPH,?XSP + 1
   \   000042   12....       LCALL   ?Subroutine201 & 0xFFFF
   1416            buf[1] = defaultRspCmd->statusCode;
   \                     ??CrossCallReturnLabel_294:
   \   000045   E0           MOVX    A,@DPTR
   \   000046   C0E0         PUSH    A
   \   000048   7401         MOV     A,#0x1
   \   00004A   12....       LCALL   ?XSTACK_DISP0_8
   \   00004D   D0E0         POP     A
   \   00004F   F0           MOVX    @DPTR,A
   1417          
   1418            return ( zcl_SendCommand( srcEP, dstAddr, clusterID, ZCL_CMD_DEFAULT_RSP, FALSE,
   1419                                      direction, disableDefaultRsp, manuCode, seqNum, 2, buf ) );
   \   000050                ; Setup parameters for call to function zcl_SendCommand
   \   000050   85..82       MOV     DPL,?XSP + 0
   \   000053   85..83       MOV     DPH,?XSP + 1
   \   000056   8582..       MOV     ?V0 + 0,DPL
   \   000059   8583..       MOV     ?V0 + 1,DPH
   \   00005C   78..         MOV     R0,#?V0 + 0
   \   00005E   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000061   75..02       MOV     ?V0 + 0,#0x2
   \   000064   75..00       MOV     ?V0 + 1,#0x0
   \   000067   78..         MOV     R0,#?V0 + 0
   \   000069   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00006C   E5..         MOV     A,?V0 + 5
   \   00006E   F5..         MOV     ?V0 + 0,A
   \   000070   78..         MOV     R0,#?V0 + 0
   \   000072   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000075   78..         MOV     R0,#?V0 + 2
   \   000077   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00007A   E5..         MOV     A,?V0 + 4
   \   00007C   F5..         MOV     ?V0 + 0,A
   \   00007E   78..         MOV     R0,#?V0 + 0
   \   000080   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000083   EF           MOV     A,R7
   \   000084   F5..         MOV     ?V0 + 0,A
   \   000086   78..         MOV     R0,#?V0 + 0
   \   000088   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00008B   75..00       MOV     ?V0 + 0,#0x0
   \   00008E   78..         MOV     R0,#?V0 + 0
   \   000090   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000093   75..0B       MOV     ?V0 + 0,#0xb
   \   000096   78..         MOV     R0,#?V0 + 0
   \   000098   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00009B   EE           MOV     A,R6
   \   00009C   F9           MOV     R1,A
   \   00009D   12....       LCALL   ??Subroutine211_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_308:
   \   0000A0   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000A3   7402         MOV     A,#0x2
   \   0000A5   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000A8                REQUIRE ?Subroutine2
   \   0000A8                ; // Fall through to label ?Subroutine2
   1420          }
   1421          
   1422          #ifdef ZCL_DISCOVER
   1423          /*********************************************************************
   1424           * @fn      zcl_SendDiscoverCmd
   1425           *
   1426           * @brief   Send a Discover command
   1427           *
   1428           * @param   dstAddr - destination address
   1429           * @param   clusterID - cluster ID
   1430           * @param   discoverCmd - discover command to be sent
   1431           * @param   direction - direction of the command
   1432           * @param   seqNum - transaction sequence number
   1433           *
   1434           * @return  ZSuccess if OK
   1435           */
   1436          ZStatus_t zcl_SendDiscoverCmd( uint8 srcEP, afAddrType_t *dstAddr,
   1437                                      uint16 clusterID, zclDiscoverCmd_t *discoverCmd,
   1438                                      uint8 direction, uint8 disableDefaultRsp, uint8 seqNum )
   1439          {
   1440            uint16 dataLen = 2 + 1; // Start Attribute ID and Max Attribute IDs
   1441            uint8 *buf;
   1442            ZStatus_t status;
   1443          
   1444            buf = osal_mem_alloc( dataLen );
   1445            if ( buf != NULL )
   1446            {
   1447              // Load the buffer - serially
   1448              uint8 *pBuf = buf;
   1449              *pBuf++ = LO_UINT16(discoverCmd->startAttr);
   1450              *pBuf++ = HI_UINT16(discoverCmd->startAttr);
   1451              *pBuf++ = discoverCmd->maxAttrIDs;
   1452          
   1453              status = zcl_SendCommand( srcEP, dstAddr, clusterID, ZCL_CMD_DISCOVER, FALSE,
   1454                                        direction, disableDefaultRsp, 0, seqNum, dataLen, buf );
   1455              osal_mem_free( buf );
   1456            }
   1457            else
   1458            {
   1459              status = ZMemError;
   1460            }
   1461          
   1462            return ( status );
   1463          }
   1464          
   1465          /*********************************************************************
   1466           * @fn      zcl_SendDiscoverRspCmd
   1467           *
   1468           * @brief   Send a Discover Response command
   1469           *
   1470           * @param   dstAddr - destination address
   1471           * @param   clusterID - cluster ID
   1472           * @param   reportRspCmd - report response command to be sent
   1473           * @param   direction - direction of the command
   1474           * @param   seqNum - transaction sequence number
   1475           *
   1476           * @return  ZSuccess if OK
   1477           */
   1478          ZStatus_t zcl_SendDiscoverRspCmd( uint8 srcEP, afAddrType_t *dstAddr,
   1479                                uint16 clusterID, zclDiscoverRspCmd_t *discoverRspCmd,
   1480                                uint8 direction, uint8 disableDefaultRsp, uint8 seqNum )
   1481          {
   1482            uint16 dataLen = 1; // Discovery complete
   1483            uint8 *buf;
   1484            ZStatus_t status;
   1485          
   1486            // calculate the size of the command
   1487            dataLen += discoverRspCmd->numAttr * (2 + 1); // Attribute ID and Data Type
   1488          
   1489            buf = osal_mem_alloc( dataLen );
   1490            if ( buf != NULL )
   1491            {
   1492              // Load the buffer - serially
   1493              uint8 *pBuf = buf;
   1494              *pBuf++ = discoverRspCmd->discComplete;
   1495              for ( uint8 i = 0; i < discoverRspCmd->numAttr; i++ )
   1496              {
   1497                *pBuf++ = LO_UINT16(discoverRspCmd->attrList[i].attrID);
   1498                *pBuf++ = HI_UINT16(discoverRspCmd->attrList[i].attrID);
   1499                *pBuf++ = discoverRspCmd->attrList[i].dataType;
   1500              }
   1501          
   1502              status = zcl_SendCommand( srcEP, dstAddr, clusterID, ZCL_CMD_DISCOVER_RSP, FALSE,
   1503                                        direction, disableDefaultRsp, 0, seqNum, dataLen, buf );
   1504              osal_mem_free( buf );
   1505            }
   1506            else
   1507            {
   1508              status = ZMemError;
   1509            }
   1510          
   1511            return ( status );
   1512          }
   1513          #endif // ZCL_DISCOVER
   1514          
   1515          /*********************************************************************
   1516           * PRIVATE FUNCTIONS
   1517           *********************************************************************/
   1518          
   1519          /*********************************************************************
   1520           * @fn      zclProcessMessageMSG
   1521           *
   1522           * @brief   Data message processor callback.  This function processes
   1523           *          any incoming data - probably from other devices.  So, based
   1524           *          on cluster ID, perform the intended action.
   1525           *
   1526           * @param   pkt - incoming message
   1527           *
   1528           * @return  none
   1529           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1530          void zclProcessMessageMSG( afIncomingMSGPacket_t *pkt )
   \                     zclProcessMessageMSG:
   1531          {
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 21
   \   000005   74EB         MOV     A,#-0x15
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   EA           MOV     A,R2
   \   00000B   FE           MOV     R6,A
   \   00000C   EB           MOV     A,R3
   \   00000D   FF           MOV     R7,A
   1532            endPointDesc_t *epDesc;
   1533            zclIncoming_t inMsg;
   1534            zclLibPlugin_t *pInPlugin;
   1535            zclDefaultRspCmd_t defautlRspCmd;
   1536            uint8 options;
   1537            uint8 securityEnable;
   1538            uint8 interPanMsg;
   1539            ZStatus_t status = ZFailure;
   1540          
   1541            if ( pkt->cmd.DataLength == 0 )
   \   00000E   EE           MOV     A,R6
   \   00000F   2420         ADD     A,#0x20
   \   000011   F582         MOV     DPL,A
   \   000013   EF           MOV     A,R7
   \   000014   12....       LCALL   ??Subroutine270_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_594:
   \   000017   12....       LCALL   ??Subroutine258_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_544:
   \   00001A   7003         JNZ     $+5
   \   00001C   02....       LJMP    ??zclProcessMessageMSG_0 & 0xFFFF
   1542            {
   1543              return;   // Error, ignore the message
   1544            }
   1545          
   1546            // Initialize
   1547            inMsg.msg = pkt;
   \   00001F   85..82       MOV     DPL,?XSP + 0
   \   000022   85..83       MOV     DPH,?XSP + 1
   \   000025   EE           MOV     A,R6
   \   000026   F0           MOVX    @DPTR,A
   \   000027   A3           INC     DPTR
   \   000028   EF           MOV     A,R7
   \   000029   F0           MOVX    @DPTR,A
   1548            inMsg.attrCmd = NULL;
   \   00002A   740C         MOV     A,#0xc
   \   00002C   12....       LCALL   ?XSTACK_DISP0_8
   \   00002F   E4           CLR     A
   \   000030   F0           MOVX    @DPTR,A
   \   000031   A3           INC     DPTR
   \   000032   F0           MOVX    @DPTR,A
   1549            inMsg.pData = NULL;
   \   000033   7408         MOV     A,#0x8
   \   000035   12....       LCALL   ?XSTACK_DISP0_8
   \   000038   E4           CLR     A
   \   000039   F0           MOVX    @DPTR,A
   \   00003A   A3           INC     DPTR
   \   00003B   F0           MOVX    @DPTR,A
   1550            inMsg.pDataLen = 0;
   \   00003C   740A         MOV     A,#0xa
   \   00003E   12....       LCALL   ?XSTACK_DISP0_8
   \   000041   E4           CLR     A
   \   000042   F0           MOVX    @DPTR,A
   \   000043   A3           INC     DPTR
   \   000044   F0           MOVX    @DPTR,A
   1551          
   1552            inMsg.pData = zclParseHdr( &(inMsg.hdr), pkt->cmd.Data );
   \   000045   EE           MOV     A,R6
   \   000046   2422         ADD     A,#0x22
   \   000048   F8           MOV     R0,A
   \   000049   EF           MOV     A,R7
   \   00004A   12....       LCALL   ?Subroutine134 & 0xFFFF
   \                     ??CrossCallReturnLabel_200:
   \   00004D   F583         MOV     DPH,A
   \   00004F   12....       LCALL   ??Subroutine235_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_421:
   \   000052   7402         MOV     A,#0x2
   \   000054   12....       LCALL   ?XSTACK_DISP0_8
   \   000057   AA82         MOV     R2,DPL
   \   000059   AB83         MOV     R3,DPH
   \   00005B   12....       LCALL   ??zclParseHdr?relay
   \   00005E   8A..         MOV     ?V0 + 2,R2
   \   000060   8B..         MOV     ?V0 + 3,R3
   \   000062   A8..         MOV     R0,?V0 + 2
   \   000064   A9..         MOV     R1,?V0 + 3
   \   000066   7408         MOV     A,#0x8
   \   000068   12....       LCALL   ?XSTACK_DISP0_8
   \   00006B   12....       LCALL   ??Subroutine256_0 & 0xFFFF
   1553            inMsg.pDataLen = pkt->cmd.DataLength;
   1554            inMsg.pDataLen -= (uint16)(inMsg.pData - pkt->cmd.Data);
   \                     ??CrossCallReturnLabel_532:
   \   00006E   EE           MOV     A,R6
   \   00006F   2420         ADD     A,#0x20
   \   000071   F582         MOV     DPL,A
   \   000073   EF           MOV     A,R7
   \   000074   12....       LCALL   ??Subroutine270_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_595:
   \   000077   12....       LCALL   ??Subroutine234_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_396:
   \   00007A   EA           MOV     A,R2
   \   00007B   C3           CLR     C
   \   00007C   98           SUBB    A,R0
   \   00007D   F8           MOV     R0,A
   \   00007E   EB           MOV     A,R3
   \   00007F   99           SUBB    A,R1
   \   000080   F9           MOV     R1,A
   \   000081   85..82       MOV     DPL,?V0 + 0
   \   000084   85..83       MOV     DPH,?V0 + 1
   \   000087   E0           MOVX    A,@DPTR
   \   000088   28           ADD     A,R0
   \   000089   F8           MOV     R0,A
   \   00008A   A3           INC     DPTR
   \   00008B   E0           MOVX    A,@DPTR
   \   00008C   39           ADDC    A,R1
   \   00008D   F9           MOV     R1,A
   \   00008E   740A         MOV     A,#0xa
   \   000090   12....       LCALL   ?XSTACK_DISP0_8
   \   000093   12....       LCALL   ??Subroutine256_0 & 0xFFFF
   1555          
   1556            // Find the wanted endpoint
   1557            epDesc = afFindEndPointDesc( pkt->endPoint );
   \                     ??CrossCallReturnLabel_533:
   \   000096                ; Setup parameters for call to function afFindEndPointDesc
   \   000096   12....       LCALL   ?Subroutine129 & 0xFFFF
   \                     ??CrossCallReturnLabel_568:
   \   000099   12....       LCALL   ??afFindEndPointDesc?relay
   1558            if ( epDesc == NULL )
   \   00009C   EA           MOV     A,R2
   \   00009D   4B           ORL     A,R3
   \   00009E   7003         JNZ     $+5
   \   0000A0   02....       LJMP    ??zclProcessMessageMSG_0 & 0xFFFF
   1559            {
   1560              return;   // Error, ignore the message
   1561            }
   1562          
   1563            if ( ( epDesc->simpleDesc == NULL ) ||
   1564                 ( zcl_DeviceOperational( pkt->endPoint, pkt->clusterId, inMsg.hdr.fc.type,
   1565                                          inMsg.hdr.commandID, epDesc->simpleDesc->AppProfId ) == FALSE ) )
   \   0000A3   8A82         MOV     DPL,R2
   \   0000A5   8B83         MOV     DPH,R3
   \   0000A7   A3           INC     DPTR
   \   0000A8   12....       LCALL   ??Subroutine257_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_552:
   \   0000AB   7003         JNZ     $+5
   \   0000AD   02....       LJMP    ??zclProcessMessageMSG_0 & 0xFFFF
   \   0000B0                ; Setup parameters for call to function zcl_DeviceOperational
   \   0000B0   8A82         MOV     DPL,R2
   \   0000B2   8B83         MOV     DPH,R3
   \   0000B4   12....       LCALL   ?Subroutine104 & 0xFFFF
   \                     ??CrossCallReturnLabel_297:
   \   0000B7   12....       LCALL   ?PUSH_XSTACK8_X_TWO
   \   0000BA   7409         MOV     A,#0x9
   \   0000BC   12....       LCALL   ?XSTACK_DISP0_8
   \   0000BF   E0           MOVX    A,@DPTR
   \   0000C0   FD           MOV     R5,A
   \   0000C1   7404         MOV     A,#0x4
   \   0000C3   12....       LCALL   ?XSTACK_DISP0_8
   \   0000C6   E0           MOVX    A,@DPTR
   \   0000C7   5403         ANL     A,#0x3
   \   0000C9   FC           MOV     R4,A
   \   0000CA   12....       LCALL   ?Subroutine56 & 0xFFFF
   \                     ??CrossCallReturnLabel_65:
   \   0000CD   12....       LCALL   ??zcl_DeviceOperational?relay
   \   0000D0   7402         MOV     A,#0x2
   \   0000D2   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000D5   E9           MOV     A,R1
   \   0000D6   7003         JNZ     $+5
   \   0000D8   02....       LJMP    ??zclProcessMessageMSG_0 & 0xFFFF
   1566            {
   1567              return; // Error, ignore the message
   1568            }
   1569          
   1570          #if defined ( INTER_PAN )
   1571            if ( StubAPS_InterPan( pkt->srcAddr.panId, pkt->srcAddr.endPoint ) )
   \   0000DB                ; Setup parameters for call to function StubAPS_InterPan
   \   0000DB   EE           MOV     A,R6
   \   0000DC   240F         ADD     A,#0xf
   \   0000DE   12....       LCALL   ??Subroutine262_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_567:
   \   0000E1   EE           MOV     A,R6
   \   0000E2   2410         ADD     A,#0x10
   \   0000E4   F582         MOV     DPL,A
   \   0000E6   EF           MOV     A,R7
   \   0000E7   12....       LCALL   ??Subroutine270_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_596:
   \   0000EA   12....       LCALL   ?Subroutine97 & 0xFFFF
   \                     ??CrossCallReturnLabel_146:
   \   0000ED   6026         JZ      ??zclProcessMessageMSG_1
   1572            {
   1573              // No foundation command is supported thru Inter-PAN communication.
   1574              // But the Smart Light cluster uses a different Frame Control format
   1575              // for it's Inter-PAN messages, where the messages could be confused
   1576              // with the foundation commands.
   1577              if ( !ZCL_CLUSTER_ID_SL( pkt->clusterId ) && zcl_ProfileCmd( inMsg.hdr.fc.type ) )
   \   0000EF   8E82         MOV     DPL,R6
   \   0000F1   8F83         MOV     DPH,R7
   \   0000F3   A3           INC     DPTR
   \   0000F4   A3           INC     DPTR
   \   0000F5   A3           INC     DPTR
   \   0000F6   A3           INC     DPTR
   \   0000F7   E0           MOVX    A,@DPTR
   \   0000F8   7004         JNZ     ??zclProcessMessageMSG_2
   \   0000FA   A3           INC     DPTR
   \   0000FB   E0           MOVX    A,@DPTR
   \   0000FC   6410         XRL     A,#0x10
   \                     ??zclProcessMessageMSG_2:
   \   0000FE   600D         JZ      ??zclProcessMessageMSG_3
   \   000100   7402         MOV     A,#0x2
   \   000102   12....       LCALL   ?XSTACK_DISP0_8
   \   000105   E0           MOVX    A,@DPTR
   \   000106   5403         ANL     A,#0x3
   \   000108   7003         JNZ     $+5
   \   00010A   02....       LJMP    ??zclProcessMessageMSG_0 & 0xFFFF
   1578              {
   1579                return;
   1580              }
   1581          
   1582              interPanMsg = TRUE;
   \                     ??zclProcessMessageMSG_3:
   \   00010D   75..01       MOV     ?V0 + 0,#0x1
   1583              options = AF_TX_OPTIONS_NONE;
   \   000110   75..00       MOV     ?V0 + 1,#0x0
   \   000113   800C         SJMP    ??zclProcessMessageMSG_4
   1584            }
   1585            else
   1586          #endif
   1587            {
   1588              interPanMsg = FALSE;
   \                     ??zclProcessMessageMSG_1:
   \   000115   75..00       MOV     ?V0 + 0,#0x0
   1589              options = zclGetClusterOption( pkt->endPoint, pkt->clusterId );
   \   000118                ; Setup parameters for call to function zclGetClusterOption
   \   000118   12....       LCALL   ?Subroutine56 & 0xFFFF
   1590            }
   \                     ??CrossCallReturnLabel_66:
   \   00011B   12....       LCALL   ??zclGetClusterOption?relay
   \   00011E   E9           MOV     A,R1
   \   00011F   F5..         MOV     ?V0 + 1,A
   1591          
   1592            // Find the appropriate plugin
   1593            pInPlugin = zclFindPlugin( pkt->clusterId, epDesc->simpleDesc->AppProfId );
   \                     ??zclProcessMessageMSG_4:
   \   000121   8E82         MOV     DPL,R6
   \   000123   8F83         MOV     DPH,R7
   \   000125   12....       LCALL   ??Subroutine232_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_405:
   \   000128   90....       MOV     DPTR,#plugins
   \   00012B   8004         SJMP    ??zclProcessMessageMSG_5
   \                     ??zclProcessMessageMSG_6:
   \   00012D   8882         MOV     DPL,R0
   \   00012F   8983         MOV     DPH,R1
   \                     ??zclProcessMessageMSG_5:
   \   000131   12....       LCALL   ??Subroutine258_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_541:
   \   000134   6022         JZ      ??zclProcessMessageMSG_7
   \   000136   8882         MOV     DPL,R0
   \   000138   8983         MOV     DPH,R1
   \   00013A   A3           INC     DPTR
   \   00013B   A3           INC     DPTR
   \   00013C   12....       LCALL   ??Subroutine235_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_422:
   \   00013F   C3           CLR     C
   \   000140   EA           MOV     A,R2
   \   000141   9C           SUBB    A,R4
   \   000142   EB           MOV     A,R3
   \   000143   9D           SUBB    A,R5
   \   000144   40E7         JC      ??zclProcessMessageMSG_6
   \   000146   8882         MOV     DPL,R0
   \   000148   8983         MOV     DPH,R1
   \   00014A   A3           INC     DPTR
   \   00014B   A3           INC     DPTR
   \   00014C   A3           INC     DPTR
   \   00014D   A3           INC     DPTR
   \   00014E   C3           CLR     C
   \   00014F   E0           MOVX    A,@DPTR
   \   000150   9A           SUBB    A,R2
   \   000151   A3           INC     DPTR
   \   000152   E0           MOVX    A,@DPTR
   \   000153   9B           SUBB    A,R3
   \   000154   40D7         JC      ??zclProcessMessageMSG_6
   \   000156   8004         SJMP    ??zclProcessMessageMSG_8
   \                     ??zclProcessMessageMSG_7:
   \   000158   7800         MOV     R0,#0x0
   \   00015A   7900         MOV     R1,#0x0
   1594          
   1595            // Local and remote Security options must match except for Default Response command
   1596            if ( ( pInPlugin != NULL ) && !zcl_DefaultRspCmd( inMsg.hdr ) )
   \                     ??zclProcessMessageMSG_8:
   \   00015C   E8           MOV     A,R0
   \   00015D   49           ORL     A,R1
   \   00015E   7003         JNZ     $+5
   \   000160   02....       LJMP    ??zclProcessMessageMSG_9 & 0xFFFF
   \   000163   7402         MOV     A,#0x2
   \   000165   12....       LCALL   ?XSTACK_DISP0_8
   \   000168   E0           MOVX    A,@DPTR
   \   000169   5407         ANL     A,#0x7
   \   00016B   700D         JNZ     ??zclProcessMessageMSG_10
   \   00016D   7407         MOV     A,#0x7
   \   00016F   12....       LCALL   ?XSTACK_DISP0_8
   \   000172   E0           MOVX    A,@DPTR
   \   000173   640B         XRL     A,#0xb
   \   000175   7003         JNZ     $+5
   \   000177   02....       LJMP    ??zclProcessMessageMSG_9 & 0xFFFF
   1597            {
   1598              securityEnable = ( options & AF_EN_SECURITY ) ? TRUE : FALSE;
   \                     ??zclProcessMessageMSG_10:
   \   00017A   E5..         MOV     A,?V0 + 1
   \   00017C   A2E6         MOV     C,0xE0 /* A   */.6
   \   00017E   5004         JNC     ??zclProcessMessageMSG_11
   \   000180   D2F0         SETB    B.0
   \   000182   8002         SJMP    ??zclProcessMessageMSG_12
   \                     ??zclProcessMessageMSG_11:
   \   000184   C2F0         CLR     B.0
   \                     ??zclProcessMessageMSG_12:
   \   000186   A2F0         MOV     C,B.0
   \   000188   E4           CLR     A
   \   000189   33           RLC     A
   \   00018A   F5..         MOV     ?V0 + 1,A
   1599              if ( pkt->SecurityUse != securityEnable )
   \   00018C   EE           MOV     A,R6
   \   00018D   2419         ADD     A,#0x19
   \   00018F   F582         MOV     DPL,A
   \   000191   EF           MOV     A,R7
   \   000192   12....       LCALL   ??Subroutine270_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_597:
   \   000195   E0           MOVX    A,@DPTR
   \   000196   65..         XRL     A,?V0 + 1
   \   000198   7003         JNZ     $+5
   \   00019A   02....       LJMP    ??zclProcessMessageMSG_9 & 0xFFFF
   1600              {
   1601                if ( UNICAST_MSG( inMsg.msg ) )
   \   00019D   12....       LCALL   ?Subroutine74 & 0xFFFF
   \                     ??CrossCallReturnLabel_606:
   \   0001A0   6003         JZ      $+5
   \   0001A2   02....       LJMP    ??zclProcessMessageMSG_0 & 0xFFFF
   \   0001A5   12....       LCALL   ?Subroutine51 & 0xFFFF
   \                     ??CrossCallReturnLabel_553:
   \   0001A8   6003         JZ      $+5
   \   0001AA   02....       LJMP    ??zclProcessMessageMSG_0 & 0xFFFF
   1602                {
   1603                  // Send a Default Response command back with no Application Link Key security
   1604                  if ( securityEnable )
   \   0001AD   E5..         MOV     A,?V0 + 1
   \   0001AF   A2E0         MOV     C,0xE0 /* A   */.0
   \   0001B1   5008         JNC     ??zclProcessMessageMSG_13
   1605                  {
   1606                    zclSetSecurityOption( pkt->endPoint, pkt->clusterId, FALSE );
   \   0001B3                ; Setup parameters for call to function zclSetSecurityOption
   \   0001B3   7C00         MOV     R4,#0x0
   \   0001B5   12....       LCALL   ?Subroutine129 & 0xFFFF
   1607                  }
   \                     ??CrossCallReturnLabel_569:
   \   0001B8   12....       LCALL   ??zclSetSecurityOption?relay
   1608          
   1609                  defautlRspCmd.statusCode = status;
   \                     ??zclProcessMessageMSG_13:
   \   0001BB   740F         MOV     A,#0xf
   \   0001BD   12....       LCALL   ?XSTACK_DISP0_8
   \   0001C0   7401         MOV     A,#0x1
   \   0001C2   F0           MOVX    @DPTR,A
   1610                  defautlRspCmd.commandID = inMsg.hdr.commandID;
   \   0001C3   7407         MOV     A,#0x7
   \   0001C5   12....       LCALL   ?XSTACK_DISP0_8
   \   0001C8   E0           MOVX    A,@DPTR
   \   0001C9   C0E0         PUSH    A
   \   0001CB   740E         MOV     A,#0xe
   \   0001CD   12....       LCALL   ?XSTACK_DISP0_8
   \   0001D0   D0E0         POP     A
   \   0001D2   F0           MOVX    @DPTR,A
   1611                  zcl_SendDefaultRspCmd( inMsg.msg->endPoint, &(inMsg.msg->srcAddr),
   1612                                         inMsg.msg->clusterId, &defautlRspCmd,
   1613                                         ZCL_FRAME_SERVER_CLIENT_DIR, true,
   1614                                         inMsg.hdr.manuCode, inMsg.hdr.transSeqNum );
   \   0001D3                ; Setup parameters for call to function zcl_SendDefaultRspCmd
   \   0001D3   7406         MOV     A,#0x6
   \   0001D5   12....       LCALL   ?XSTACK_DISP0_8
   \   0001D8   12....       LCALL   ?Subroutine103 & 0xFFFF
   \                     ??CrossCallReturnLabel_157:
   \   0001DB   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0001DE   7405         MOV     A,#0x5
   \   0001E0   12....       LCALL   ?XSTACK_DISP0_8
   \   0001E3   12....       LCALL   ?PUSH_XSTACK8_X_TWO
   \   0001E6   75..01       MOV     ?V0 + 0,#0x1
   \   0001E9   78..         MOV     R0,#?V0 + 0
   \   0001EB   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0001EE   78..         MOV     R0,#?V0 + 0
   \   0001F0   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0001F3   7413         MOV     A,#0x13
   \   0001F5   12....       LCALL   ?XSTACK_DISP0_8
   \   0001F8   8582..       MOV     ?V0 + 2,DPL
   \   0001FB   8583..       MOV     ?V0 + 3,DPH
   \   0001FE   78..         MOV     R0,#?V0 + 2
   \   000200   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000203   7407         MOV     A,#0x7
   \   000205   12....       LCALL   ?XSTACK_DISP0_8
   \   000208   12....       LCALL   ?Subroutine76 & 0xFFFF
   \                     ??CrossCallReturnLabel_109:
   \   00020B   12....       LCALL   ?XSTACK_DISP0_8
   \   00020E   12....       LCALL   ?Subroutine92 & 0xFFFF
   \                     ??CrossCallReturnLabel_137:
   \   000211   12....       LCALL   ?XSTACK_DISP0_8
   \   000214   12....       LCALL   ?Subroutine73 & 0xFFFF
   \                     ??CrossCallReturnLabel_104:
   \   000217   12....       LCALL   ?DEALLOC_XSTACK8
   1615                  if ( securityEnable )
   \   00021A   E5..         MOV     A,?V0 + 1
   \   00021C   A2E0         MOV     C,0xE0 /* A   */.0
   \   00021E   4003         JC      $+5
   \   000220   02....       LJMP    ??zclProcessMessageMSG_0 & 0xFFFF
   1616                  {
   1617                    zclSetSecurityOption( pkt->endPoint, pkt->clusterId, TRUE );
   \   000223                ; Setup parameters for call to function zclSetSecurityOption
   \   000223   7C01         MOV     R4,#0x1
   \   000225   12....       LCALL   ?Subroutine56 & 0xFFFF
   1618                  }
   1619                }
   1620          
   1621                return;   // Error, ignore the message
   1622              }
   1623            }
   \                     ??CrossCallReturnLabel_67:
   \   000228   12....       LCALL   ??zclSetSecurityOption?relay
   \   00022B   02....       LJMP    ??zclProcessMessageMSG_0 & 0xFFFF
   1624          
   1625            // Is this a foundation type message
   1626            if ( !interPanMsg && zcl_ProfileCmd( inMsg.hdr.fc.type ) )
   \                     ??zclProcessMessageMSG_9:
   \   00022E   E5..         MOV     A,?V0 + 0
   \   000230   A2E0         MOV     C,0xE0 /* A   */.0
   \   000232   5003         JNC     $+5
   \   000234   02....       LJMP    ??zclProcessMessageMSG_14 & 0xFFFF
   \   000237   7402         MOV     A,#0x2
   \   000239   12....       LCALL   ?XSTACK_DISP0_8
   \   00023C   E0           MOVX    A,@DPTR
   \   00023D   5403         ANL     A,#0x3
   \   00023F   6003         JZ      $+5
   \   000241   02....       LJMP    ??zclProcessMessageMSG_14 & 0xFFFF
   1627            {
   1628              if ( inMsg.hdr.fc.manuSpecific )
   \   000244   E0           MOVX    A,@DPTR
   \   000245   5404         ANL     A,#0x4
   \   000247   6005         JZ      ??zclProcessMessageMSG_15
   1629              {
   1630                // We don't support any manufacturer specific command
   1631                status = ZCL_STATUS_UNSUP_MANU_GENERAL_COMMAND;
   \   000249   7A84         MOV     R2,#-0x7c
   \   00024B   02....       LJMP    ??zclProcessMessageMSG_16 & 0xFFFF
   1632              }
   1633              else if ( ( inMsg.hdr.commandID <= ZCL_CMD_MAX ) &&
   1634                        ( zclCmdTable[inMsg.hdr.commandID].pfnParseInProfile != NULL ) )
   \                     ??zclProcessMessageMSG_15:
   \   00024E   7407         MOV     A,#0x7
   \   000250   12....       LCALL   ?XSTACK_DISP0_8
   \   000253   E0           MOVX    A,@DPTR
   \   000254   C3           CLR     C
   \   000255   940E         SUBB    A,#0xe
   \   000257   4003         JC      $+5
   \   000259   02....       LJMP    ??zclProcessMessageMSG_17 & 0xFFFF
   \   00025C   12....       LCALL   ?Subroutine58 & 0xFFFF
   \                     ??CrossCallReturnLabel_72:
   \   00025F   12....       LCALL   ?S_SHL
   \   000262   12....       LCALL   ?Subroutine124 & 0xFFFF
   \                     ??CrossCallReturnLabel_188:
   \   000265   F8           MOV     R0,A
   \   000266   7401         MOV     A,#0x1
   \   000268   93           MOVC    A,@A+DPTR
   \   000269   F9           MOV     R1,A
   \   00026A   E8           MOV     A,R0
   \   00026B   49           ORL     A,R1
   \   00026C   7003         JNZ     $+5
   \   00026E   02....       LJMP    ??zclProcessMessageMSG_17 & 0xFFFF
   1635              {
   1636                zclParseCmd_t parseCmd;
   1637          
   1638                parseCmd.endpoint = pkt->endPoint;
   \   000271   EE           MOV     A,R6
   \   000272   12....       LCALL   ??Subroutine264_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_575:
   \   000275   EF           MOV     A,R7
   \   000276   12....       LCALL   ??Subroutine270_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_598:
   \   000279   E0           MOVX    A,@DPTR
   \   00027A   C0E0         PUSH    A
   \   00027C   7410         MOV     A,#0x10
   \   00027E   12....       LCALL   ?XSTACK_DISP0_8
   \   000281   D0E0         POP     A
   \   000283   F0           MOVX    @DPTR,A
   1639                parseCmd.dataLen = inMsg.pDataLen;
   \   000284   740A         MOV     A,#0xa
   \   000286   12....       LCALL   ?XSTACK_DISP0_8
   \   000289   12....       LCALL   ??Subroutine248_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_478:
   \   00028C   7411         MOV     A,#0x11
   \   00028E   12....       LCALL   ?XSTACK_DISP0_8
   \   000291   12....       LCALL   ??Subroutine256_0 & 0xFFFF
   1640                parseCmd.pData = inMsg.pData;
   \                     ??CrossCallReturnLabel_534:
   \   000294   7408         MOV     A,#0x8
   \   000296   12....       LCALL   ?XSTACK_DISP0_8
   \   000299   12....       LCALL   ??Subroutine248_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_479:
   \   00029C   7413         MOV     A,#0x13
   \   00029E   12....       LCALL   ?XSTACK_DISP0_8
   \   0002A1   12....       LCALL   ??Subroutine256_0 & 0xFFFF
   1641          
   1642                // Parse the command, remember that the return value is a pointer to allocated memory
   1643                inMsg.attrCmd = zclParseCmd( inMsg.hdr.commandID, &parseCmd );
   \                     ??CrossCallReturnLabel_535:
   \   0002A4                ; Setup parameters for indirect call
   \   0002A4   7410         MOV     A,#0x10
   \   0002A6   12....       LCALL   ?XSTACK_DISP0_8
   \   0002A9   AA82         MOV     R2,DPL
   \   0002AB   AB83         MOV     R3,DPH
   \   0002AD   7407         MOV     A,#0x7
   \   0002AF   12....       LCALL   ?XSTACK_DISP0_8
   \   0002B2   12....       LCALL   ?Subroutine58 & 0xFFFF
   \                     ??CrossCallReturnLabel_73:
   \   0002B5   12....       LCALL   ?S_SHL
   \   0002B8   12....       LCALL   ?Subroutine124 & 0xFFFF
   \                     ??CrossCallReturnLabel_189:
   \   0002BB   C0E0         PUSH    A
   \   0002BD   7401         MOV     A,#0x1
   \   0002BF   93           MOVC    A,@A+DPTR
   \   0002C0   F583         MOV     DPH,A
   \   0002C2   D082         POP     DPL
   \   0002C4   12....       LCALL   ?CALL_IND
   \   0002C7   8A..         MOV     ?V0 + 0,R2
   \   0002C9   8B..         MOV     ?V0 + 1,R3
   \   0002CB   A8..         MOV     R0,?V0 + 0
   \   0002CD   A9..         MOV     R1,?V0 + 1
   \   0002CF   740C         MOV     A,#0xc
   \   0002D1   12....       LCALL   ?XSTACK_DISP0_8
   \   0002D4   12....       LCALL   ??Subroutine256_0 & 0xFFFF
   1644                if ( (inMsg.attrCmd != NULL) && (zclCmdTable[inMsg.hdr.commandID].pfnProcessInProfile != NULL) )
   \                     ??CrossCallReturnLabel_536:
   \   0002D7   E8           MOV     A,R0
   \   0002D8   49           ORL     A,R1
   \   0002D9   6050         JZ      ??zclProcessMessageMSG_18
   \   0002DB   7407         MOV     A,#0x7
   \   0002DD   12....       LCALL   ?XSTACK_DISP0_8
   \   0002E0   12....       LCALL   ?Subroutine58 & 0xFFFF
   \                     ??CrossCallReturnLabel_74:
   \   0002E3   12....       LCALL   ?S_SHL
   \   0002E6   12....       LCALL   ?Subroutine125 & 0xFFFF
   \                     ??CrossCallReturnLabel_190:
   \   0002E9   F8           MOV     R0,A
   \   0002EA   7401         MOV     A,#0x1
   \   0002EC   93           MOVC    A,@A+DPTR
   \   0002ED   F9           MOV     R1,A
   \   0002EE   E8           MOV     A,R0
   \   0002EF   49           ORL     A,R1
   \   0002F0   602E         JZ      ??zclProcessMessageMSG_19
   1645                {
   1646                  // Process the command
   1647                  if ( zclProcessCmd( inMsg.hdr.commandID, &inMsg ) == FALSE )
   \   0002F2                ; Setup parameters for indirect call
   \   0002F2   85..82       MOV     DPL,?XSP + 0
   \   0002F5   85..83       MOV     DPH,?XSP + 1
   \   0002F8   AA82         MOV     R2,DPL
   \   0002FA   AB83         MOV     R3,DPH
   \   0002FC   7407         MOV     A,#0x7
   \   0002FE   12....       LCALL   ?XSTACK_DISP0_8
   \   000301   12....       LCALL   ?Subroutine58 & 0xFFFF
   1648                  {
   1649                    // Couldn't find attribute in the table.
   1650                  }
   1651                }
   \                     ??CrossCallReturnLabel_75:
   \   000304   12....       LCALL   ?S_SHL
   \   000307   12....       LCALL   ?Subroutine125 & 0xFFFF
   \                     ??CrossCallReturnLabel_191:
   \   00030A   C0E0         PUSH    A
   \   00030C   7401         MOV     A,#0x1
   \   00030E   93           MOVC    A,@A+DPTR
   \   00030F   F583         MOV     DPH,A
   \   000311   D082         POP     DPL
   \   000313   12....       LCALL   ?CALL_IND
   1652          
   1653                // Free the buffer
   1654                if ( inMsg.attrCmd )
   \   000316   740C         MOV     A,#0xc
   \   000318   12....       LCALL   ?XSTACK_DISP0_8
   \   00031B   12....       LCALL   ??Subroutine258_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_545:
   \   00031E   600B         JZ      ??zclProcessMessageMSG_18
   1655                {
   1656                  osal_mem_free( inMsg.attrCmd );
   \                     ??zclProcessMessageMSG_19:
   \   000320                ; Setup parameters for call to function osal_mem_free
   \   000320   740C         MOV     A,#0xc
   \   000322   12....       LCALL   ?XSTACK_DISP0_8
   \   000325   12....       LCALL   ??Subroutine234_0 & 0xFFFF
   1657                }
   \                     ??CrossCallReturnLabel_397:
   \   000328   12....       LCALL   ??osal_mem_free?relay
   1658          
   1659                if ( CMD_HAS_RSP( inMsg.hdr.commandID ) )
   \                     ??zclProcessMessageMSG_18:
   \   00032B   7407         MOV     A,#0x7
   \   00032D   12....       LCALL   ?XSTACK_DISP0_8
   \   000330   E0           MOVX    A,@DPTR
   \   000331   7003         JNZ     $+5
   \   000333   02....       LJMP    ??zclProcessMessageMSG_0 & 0xFFFF
   \   000336   6402         XRL     A,#0x2
   \   000338   7003         JNZ     $+5
   \   00033A   02....       LJMP    ??zclProcessMessageMSG_0 & 0xFFFF
   \   00033D   E0           MOVX    A,@DPTR
   \   00033E   6403         XRL     A,#0x3
   \   000340   7003         JNZ     $+5
   \   000342   02....       LJMP    ??zclProcessMessageMSG_0 & 0xFFFF
   \   000345   E0           MOVX    A,@DPTR
   \   000346   6406         XRL     A,#0x6
   \   000348   7003         JNZ     $+5
   \   00034A   02....       LJMP    ??zclProcessMessageMSG_0 & 0xFFFF
   \   00034D   E0           MOVX    A,@DPTR
   \   00034E   6408         XRL     A,#0x8
   \   000350   7003         JNZ     $+5
   \   000352   02....       LJMP    ??zclProcessMessageMSG_0 & 0xFFFF
   \   000355   E0           MOVX    A,@DPTR
   \   000356   640C         XRL     A,#0xc
   \   000358   7003         JNZ     $+5
   \   00035A   02....       LJMP    ??zclProcessMessageMSG_0 & 0xFFFF
   \   00035D   E0           MOVX    A,@DPTR
   \   00035E   640B         XRL     A,#0xb
   \   000360   7003         JNZ     $+5
   \   000362   02....       LJMP    ??zclProcessMessageMSG_0 & 0xFFFF
   1660                {
   1661                  return; // We're done
   1662                }
   1663          
   1664                status = ZSuccess;
   \   000365   7A00         MOV     R2,#0x0
   \   000367   8058         SJMP    ??zclProcessMessageMSG_16
   1665              }
   1666              else
   1667              {
   1668                // Unsupported message
   1669                status = ZCL_STATUS_UNSUP_GENERAL_COMMAND;
   \                     ??zclProcessMessageMSG_17:
   \   000369   7A82         MOV     R2,#-0x7e
   \   00036B   8054         SJMP    ??zclProcessMessageMSG_16
   1670              }
   1671            }
   1672            else  // Not a foundation type message, so it must be specific to the cluster ID.
   1673            {
   1674              if ( pInPlugin && pInPlugin->pfnIncomingHdlr )
   \                     ??zclProcessMessageMSG_14:
   \   00036D   E8           MOV     A,R0
   \   00036E   49           ORL     A,R1
   \   00036F   6040         JZ      ??zclProcessMessageMSG_20
   \   000371   8882         MOV     DPL,R0
   \   000373   8983         MOV     DPH,R1
   \   000375   A3           INC     DPTR
   \   000376   A3           INC     DPTR
   \   000377   12....       LCALL   ?Subroutine65 & 0xFFFF
   \                     ??CrossCallReturnLabel_392:
   \   00037A   6035         JZ      ??zclProcessMessageMSG_20
   1675              {
   1676                // The return value of the plugin function will be
   1677                //  ZSuccess - Supported and need default response
   1678                //  ZFailure - Unsupported
   1679                //  ZCL_STATUS_CMD_HAS_RSP - Supported and do not need default rsp
   1680                //  ZCL_STATUS_INVALID_FIELD - Supported, but the incoming msg is wrong formatted
   1681                //  ZCL_STATUS_INVALID_VALUE - Supported, but the request not achievable by the h/w
   1682                //  ZCL_STATUS_SOFTWARE_FAILURE - Supported but ZStack memory allocation fails
   1683                status = pInPlugin->pfnIncomingHdlr( &inMsg );
   \   00037C                ; Setup parameters for indirect call
   \   00037C   85..82       MOV     DPL,?XSP + 0
   \   00037F   85..83       MOV     DPH,?XSP + 1
   \   000382   AA82         MOV     R2,DPL
   \   000384   AB83         MOV     R3,DPH
   \   000386   8882         MOV     DPL,R0
   \   000388   8983         MOV     DPH,R1
   \   00038A   A3           INC     DPTR
   \   00038B   A3           INC     DPTR
   \   00038C   A3           INC     DPTR
   \   00038D   A3           INC     DPTR
   \   00038E   A3           INC     DPTR
   \   00038F   A3           INC     DPTR
   \   000390   12....       LCALL   ?Subroutine83 & 0xFFFF
   \                     ??CrossCallReturnLabel_122:
   \   000393   12....       LCALL   ?CALL_IND
   \   000396   E9           MOV     A,R1
   \   000397   FA           MOV     R2,A
   1684                if ( status == ZCL_STATUS_CMD_HAS_RSP || ( interPanMsg && status == ZSuccess ) )
   \   000398   74FF         MOV     A,#-0x1
   \   00039A   6A           XRL     A,R2
   \   00039B   7003         JNZ     $+5
   \   00039D   02....       LJMP    ??zclProcessMessageMSG_0 & 0xFFFF
   \   0003A0   E5..         MOV     A,?V0 + 0
   \   0003A2   A2E0         MOV     C,0xE0 /* A   */.0
   \   0003A4   5006         JNC     ??zclProcessMessageMSG_21
   \   0003A6   EA           MOV     A,R2
   \   0003A7   7003         JNZ     $+5
   \   0003A9   02....       LJMP    ??zclProcessMessageMSG_0 & 0xFFFF
   1685                {
   1686                  return; // We're done
   1687                }
   1688              }
   1689          
   1690              if ( status == ZFailure )
   \                     ??zclProcessMessageMSG_21:
   \   0003AC   7401         MOV     A,#0x1
   \   0003AE   6A           XRL     A,R2
   \   0003AF   7010         JNZ     ??zclProcessMessageMSG_16
   1691              {
   1692                // Unsupported message
   1693                if ( inMsg.hdr.fc.manuSpecific )
   \                     ??zclProcessMessageMSG_20:
   \   0003B1   7402         MOV     A,#0x2
   \   0003B3   12....       LCALL   ?XSTACK_DISP0_8
   \   0003B6   E0           MOVX    A,@DPTR
   \   0003B7   5404         ANL     A,#0x4
   \   0003B9   6004         JZ      ??zclProcessMessageMSG_22
   1694                {
   1695                  status = ZCL_STATUS_UNSUP_MANU_CLUSTER_COMMAND;
   \   0003BB   7A83         MOV     R2,#-0x7d
   \   0003BD   8002         SJMP    ??zclProcessMessageMSG_16
   1696                }
   1697                else
   1698                {
   1699                  status = ZCL_STATUS_UNSUP_CLUSTER_COMMAND;
   \                     ??zclProcessMessageMSG_22:
   \   0003BF   7A81         MOV     R2,#-0x7f
   1700                }
   1701              }
   1702            }
   1703          
   1704            if ( UNICAST_MSG( inMsg.msg ) && inMsg.hdr.fc.disableDefaultRsp == 0 )
   \                     ??zclProcessMessageMSG_16:
   \   0003C1   12....       LCALL   ?Subroutine74 & 0xFFFF
   \                     ??CrossCallReturnLabel_607:
   \   0003C4   706D         JNZ     ??zclProcessMessageMSG_0
   \   0003C6   12....       LCALL   ?Subroutine51 & 0xFFFF
   \                     ??CrossCallReturnLabel_554:
   \   0003C9   7068         JNZ     ??zclProcessMessageMSG_0
   \   0003CB   7402         MOV     A,#0x2
   \   0003CD   12....       LCALL   ?XSTACK_DISP0_8
   \   0003D0   E0           MOVX    A,@DPTR
   \   0003D1   5410         ANL     A,#0x10
   \   0003D3   705E         JNZ     ??zclProcessMessageMSG_0
   1705            {
   1706              // Send a Default Response command back
   1707              defautlRspCmd.statusCode = status;
   \   0003D5   740F         MOV     A,#0xf
   \   0003D7   12....       LCALL   ?XSTACK_DISP0_8
   \   0003DA   EA           MOV     A,R2
   \   0003DB   F0           MOVX    @DPTR,A
   1708              defautlRspCmd.commandID = inMsg.hdr.commandID;
   \   0003DC   7407         MOV     A,#0x7
   \   0003DE   12....       LCALL   ?XSTACK_DISP0_8
   \   0003E1   E0           MOVX    A,@DPTR
   \   0003E2   C0E0         PUSH    A
   \   0003E4   740E         MOV     A,#0xe
   \   0003E6   12....       LCALL   ?XSTACK_DISP0_8
   \   0003E9   D0E0         POP     A
   \   0003EB   F0           MOVX    @DPTR,A
   1709              zcl_SendDefaultRspCmd( inMsg.msg->endPoint, &(inMsg.msg->srcAddr),
   1710                                     inMsg.msg->clusterId, &defautlRspCmd,
   1711                                     ZCL_FRAME_SERVER_CLIENT_DIR, true,
   1712                                     inMsg.hdr.manuCode, inMsg.hdr.transSeqNum );
   \   0003EC                ; Setup parameters for call to function zcl_SendDefaultRspCmd
   \   0003EC   7406         MOV     A,#0x6
   \   0003EE   12....       LCALL   ?XSTACK_DISP0_8
   \   0003F1   12....       LCALL   ?Subroutine103 & 0xFFFF
   1713            }
   \                     ??CrossCallReturnLabel_158:
   \   0003F4   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0003F7   7405         MOV     A,#0x5
   \   0003F9   12....       LCALL   ?XSTACK_DISP0_8
   \   0003FC   12....       LCALL   ?PUSH_XSTACK8_X_TWO
   \   0003FF   75..01       MOV     ?V0 + 0,#0x1
   \   000402   78..         MOV     R0,#?V0 + 0
   \   000404   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000407   78..         MOV     R0,#?V0 + 0
   \   000409   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00040C   7413         MOV     A,#0x13
   \   00040E   12....       LCALL   ?XSTACK_DISP0_8
   \   000411   8582..       MOV     ?V0 + 0,DPL
   \   000414   8583..       MOV     ?V0 + 1,DPH
   \   000417   78..         MOV     R0,#?V0 + 0
   \   000419   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00041C   7407         MOV     A,#0x7
   \   00041E   12....       LCALL   ?XSTACK_DISP0_8
   \   000421   12....       LCALL   ?Subroutine76 & 0xFFFF
   \                     ??CrossCallReturnLabel_110:
   \   000424   12....       LCALL   ?XSTACK_DISP0_8
   \   000427   12....       LCALL   ?Subroutine92 & 0xFFFF
   \                     ??CrossCallReturnLabel_138:
   \   00042A   12....       LCALL   ?XSTACK_DISP0_8
   \   00042D   12....       LCALL   ?Subroutine73 & 0xFFFF
   \                     ??CrossCallReturnLabel_105:
   \   000430   12....       LCALL   ?DEALLOC_XSTACK8
   \                     ??zclProcessMessageMSG_0:
   \   000433   7415         MOV     A,#0x15
   \   000435   12....       LCALL   ?DEALLOC_XSTACK8
   \   000438                REQUIRE ?Subroutine1
   \   000438                ; // Fall through to label ?Subroutine1
   1714          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine125:
   \   000000   74..         MOV     A,#(zclCmdTable + 2) & 0xff
   \   000002   25..         ADD     A,?V0 + 0
   \   000004   F582         MOV     DPL,A
   \   000006   74..         MOV     A,#((zclCmdTable + 2) >> 8) & 0xff
   \   000008   35..         ADDC    A,?V0 + 1
   \   00000A   F583         MOV     DPH,A
   \   00000C   E4           CLR     A
   \   00000D   93           MOVC    A,@A+DPTR
   \   00000E   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine124:
   \   000000   74..         MOV     A,#zclCmdTable & 0xff
   \   000002   25..         ADD     A,?V0 + 0
   \   000004   F582         MOV     DPL,A
   \   000006   74..         MOV     A,#(zclCmdTable >> 8) & 0xff
   \   000008   35..         ADDC    A,?V0 + 1
   \   00000A   F583         MOV     DPH,A
   \   00000C   E4           CLR     A
   \   00000D   93           MOVC    A,@A+DPTR
   \   00000E   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine92:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   2406         ADD     A,#0x6
   \   000003   FA           MOV     R2,A
   \   000004   A3           INC     DPTR
   \   000005   E0           MOVX    A,@DPTR
   \   000006   3400         ADDC    A,#0x0
   \   000008   FB           MOV     R3,A
   \   000009   7407         MOV     A,#0x7
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine76:
   \   000000   12....       LCALL   ?Subroutine164 & 0xFFFF
   \                     ??CrossCallReturnLabel_244:
   \   000003   12....       LCALL   ?Subroutine185 & 0xFFFF
   \                     ??CrossCallReturnLabel_432:
   \   000006   7407         MOV     A,#0x7
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine73:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   2414         ADD     A,#0x14
   \   000003   12....       LCALL   ?Subroutine181 & 0xFFFF
   \                     ??CrossCallReturnLabel_608:
   \   000006   F9           MOV     R1,A
   \   000007   12....       LCALL   ??zcl_SendDefaultRspCmd?relay
   \   00000A   7407         MOV     A,#0x7
   \   00000C   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine56:
   \   000000   8E82         MOV     DPL,R6
   \   000002   8F83         MOV     DPH,R7
   \   000004   A3           INC     DPTR
   \   000005   A3           INC     DPTR
   \   000006   A3           INC     DPTR
   \   000007   A3           INC     DPTR
   \   000008   12....       LCALL   ?Subroutine172 & 0xFFFF
   \                     ??CrossCallReturnLabel_411:
   \   00000B   12....       LCALL   ?Subroutine189 & 0xFFFF
   \                     ??CrossCallReturnLabel_571:
   \   00000E   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine189:
   \   000000   EE           MOV     A,R6
   \   000001   2414         ADD     A,#0x14
   \   000003   F582         MOV     DPL,A
   \   000005   EF           MOV     A,R7
   \   000006                REQUIRE ??Subroutine226_0
   \   000006                ; // Fall through to label ??Subroutine226_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine226_0:
   \   000000   3400         ADDC    A,#0x0
   \   000002   F583         MOV     DPH,A
   \   000004   E0           MOVX    A,@DPTR
   \   000005   F9           MOV     R1,A
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine134:
   \   000000   3400         ADDC    A,#0x0
   \   000002   F9           MOV     R1,A
   \   000003   88..         MOV     ?V0 + 0,R0
   \   000005   89..         MOV     ?V0 + 1,R1
   \   000007                ; Setup parameters for call to function zclParseHdr
   \   000007                ; Setup parameters for call to function zclGetAttrDataLength
   \   000007   8882         MOV     DPL,R0
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine185:
   \   000000   A3           INC     DPTR
   \   000001   A3           INC     DPTR
   \   000002   A3           INC     DPTR
   \   000003   A3           INC     DPTR
   \   000004                REQUIRE ??Subroutine236_0
   \   000004                ; // Fall through to label ??Subroutine236_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine256_0:
   \   000000   E8           MOV     A,R0
   \   000001   F0           MOVX    @DPTR,A
   \   000002   A3           INC     DPTR
   \   000003   E9           MOV     A,R1
   \   000004   F0           MOVX    @DPTR,A
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine51:
   \   000000   85..82       MOV     DPL,?XSP + 0
   \   000003   85..83       MOV     DPH,?XSP + 1
   \   000006   12....       LCALL   ?Subroutine164 & 0xFFFF
   \                     ??CrossCallReturnLabel_243:
   \   000009                REQUIRE ??Subroutine257_0
   \   000009                ; // Fall through to label ??Subroutine257_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine129:
   \   000000   EE           MOV     A,R6
   \   000001   2414         ADD     A,#0x14
   \   000003                REQUIRE ??Subroutine262_0
   \   000003                ; // Fall through to label ??Subroutine262_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine262_0:
   \   000000   F582         MOV     DPL,A
   \   000002   EF           MOV     A,R7
   \   000003                REQUIRE ??Subroutine263_0
   \   000003                ; // Fall through to label ??Subroutine263_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine263_0:
   \   000000   12....       LCALL   ??Subroutine226_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_574:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine264_0:
   \   000000   2414         ADD     A,#0x14
   \   000002   F582         MOV     DPL,A
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine83:
   \   000000   12....       LCALL   ?Subroutine164 & 0xFFFF
   \                     ??CrossCallReturnLabel_246:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine164:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F8           MOV     R0,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   F583         MOV     DPH,A
   \   000006   8882         MOV     DPL,R0
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine270_0:
   \   000000   3400         ADDC    A,#0x0
   \   000002   F583         MOV     DPH,A
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine74:
   \   000000   85..82       MOV     DPL,?XSP + 0
   \   000003   85..83       MOV     DPH,?XSP + 1
   \   000006   E0           MOVX    A,@DPTR
   \   000007   2415         ADD     A,#0x15
   \   000009                REQUIRE ??Subroutine271_0
   \   000009                ; // Fall through to label ??Subroutine271_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine271_0:
   \   000000   12....       LCALL   ?Subroutine181 & 0xFFFF
   \                     ??CrossCallReturnLabel_609:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine181:
   \   000000   F8           MOV     R0,A
   \   000001   A3           INC     DPTR
   \   000002   E0           MOVX    A,@DPTR
   \   000003   3400         ADDC    A,#0x0
   \   000005   F9           MOV     R1,A
   \   000006   8882         MOV     DPL,R0
   \   000008   8983         MOV     DPH,R1
   \   00000A   E0           MOVX    A,@DPTR
   \   00000B   22           RET
   1715          
   1716          /*********************************************************************
   1717           * @fn      zclParseHdr
   1718           *
   1719           * @brief   Parse header of the ZCL format
   1720           *
   1721           * @param   hdr - place to put the frame control information
   1722           * @param   pData - incoming buffer to parse
   1723           *
   1724           * @return  pointer past the header
   1725           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1726          uint8 *zclParseHdr( zclFrameHdr_t *hdr, uint8 *pData )
   \                     zclParseHdr:
   1727          {
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV     ?V0 + 0,R2
   \   000007   8B..         MOV     ?V0 + 1,R3
   \   000009   EC           MOV     A,R4
   \   00000A   FE           MOV     R6,A
   \   00000B   ED           MOV     A,R5
   \   00000C   FF           MOV     R7,A
   1728            // Clear the header
   1729            osal_memset( (uint8 *)hdr, 0, sizeof ( zclFrameHdr_t ) );
   \   00000D                ; Setup parameters for call to function osal_memset
   \   00000D   7C06         MOV     R4,#0x6
   \   00000F   7D00         MOV     R5,#0x0
   \   000011   7900         MOV     R1,#0x0
   \   000013   12....       LCALL   ??osal_memset?relay
   1730          
   1731            // Parse the Frame Control
   1732            hdr->fc.type = zcl_FCType( *pData );
   \   000016   85..82       MOV     DPL,?V0 + 0
   \   000019   85..83       MOV     DPH,?V0 + 1
   \   00001C   E0           MOVX    A,@DPTR
   \   00001D   54FC         ANL     A,#0xfc
   \   00001F   F8           MOV     R0,A
   \   000020   A3           INC     DPTR
   \   000021   E0           MOVX    A,@DPTR
   \   000022   F9           MOV     R1,A
   \   000023   8E82         MOV     DPL,R6
   \   000025   8F83         MOV     DPH,R7
   \   000027   E0           MOVX    A,@DPTR
   \   000028   5403         ANL     A,#0x3
   \   00002A   FA           MOV     R2,A
   \   00002B   E8           MOV     A,R0
   \   00002C   4A           ORL     A,R2
   \   00002D   85..82       MOV     DPL,?V0 + 0
   \   000030   85..83       MOV     DPH,?V0 + 1
   \   000033   12....       LCALL   ?Subroutine29 & 0xFFFF
   1733            hdr->fc.manuSpecific = zcl_FCManuSpecific( *pData ) ? 1 : 0;
   \                     ??CrossCallReturnLabel_26:
   \   000036   A2E2         MOV     C,0xE0 /* A   */.2
   \   000038   5004         JNC     ??zclParseHdr_0
   \   00003A   D2F0         SETB    B.0
   \   00003C   8002         SJMP    ??zclParseHdr_1
   \                     ??zclParseHdr_0:
   \   00003E   C2F0         CLR     B.0
   \                     ??zclParseHdr_1:
   \   000040   85..82       MOV     DPL,?V0 + 0
   \   000043   85..83       MOV     DPH,?V0 + 1
   \   000046   E0           MOVX    A,@DPTR
   \   000047   54FB         ANL     A,#0xfb
   \   000049   FA           MOV     R2,A
   \   00004A   A2F0         MOV     C,B.0
   \   00004C   E4           CLR     A
   \   00004D   33           RLC     A
   \   00004E   F5..         MOV     ?V0 + 2,A
   \   000050   75..00       MOV     ?V0 + 3,#0x0
   \   000053   7402         MOV     A,#0x2
   \   000055   78..         MOV     R0,#?V0 + 2
   \   000057   12....       LCALL   ?S_SHL
   \   00005A   EA           MOV     A,R2
   \   00005B   45..         ORL     A,?V0 + 2
   \   00005D   12....       LCALL   ?Subroutine29 & 0xFFFF
   1734            if ( zcl_FCDirection( *pData ) )
   \                     ??CrossCallReturnLabel_27:
   \   000060   A2E3         MOV     C,0xE0 /* A   */.3
   \   000062   85..82       MOV     DPL,?V0 + 0
   \   000065   85..83       MOV     DPH,?V0 + 1
   \   000068   E0           MOVX    A,@DPTR
   \   000069   5004         JNC     ??zclParseHdr_2
   1735            {
   1736              hdr->fc.direction = ZCL_FRAME_SERVER_CLIENT_DIR;
   \   00006B   4408         ORL     A,#0x8
   \   00006D   8002         SJMP    ??zclParseHdr_3
   1737            }
   1738            else
   1739            {
   1740              hdr->fc.direction = ZCL_FRAME_CLIENT_SERVER_DIR;
   \                     ??zclParseHdr_2:
   \   00006F   54F7         ANL     A,#0xf7
   1741            }
   \                     ??zclParseHdr_3:
   \   000071   12....       LCALL   ?Subroutine202 & 0xFFFF
   1742          
   1743            hdr->fc.disableDefaultRsp = zcl_FCDisableDefaultRsp( *pData ) ? 1 : 0;
   \                     ??CrossCallReturnLabel_376:
   \   000074   E0           MOVX    A,@DPTR
   \   000075   A2E4         MOV     C,0xE0 /* A   */.4
   \   000077   5004         JNC     ??zclParseHdr_4
   \   000079   D2F0         SETB    B.0
   \   00007B   8002         SJMP    ??zclParseHdr_5
   \                     ??zclParseHdr_4:
   \   00007D   C2F0         CLR     B.0
   \                     ??zclParseHdr_5:
   \   00007F   85..82       MOV     DPL,?V0 + 0
   \   000082   85..83       MOV     DPH,?V0 + 1
   \   000085   E0           MOVX    A,@DPTR
   \   000086   54EF         ANL     A,#0xef
   \   000088   FA           MOV     R2,A
   \   000089   A3           INC     DPTR
   \   00008A   E0           MOVX    A,@DPTR
   \   00008B   FB           MOV     R3,A
   \   00008C   A2F0         MOV     C,B.0
   \   00008E   E4           CLR     A
   \   00008F   33           RLC     A
   \   000090   F5..         MOV     ?V0 + 2,A
   \   000092   7404         MOV     A,#0x4
   \   000094   78..         MOV     R0,#?V0 + 2
   \   000096   12....       LCALL   ?S_SHL
   \   000099   EA           MOV     A,R2
   \   00009A   45..         ORL     A,?V0 + 2
   \   00009C   F8           MOV     R0,A
   \   00009D   EB           MOV     A,R3
   \   00009E   F9           MOV     R1,A
   \   00009F   85..82       MOV     DPL,?V0 + 0
   \   0000A2   85..83       MOV     DPH,?V0 + 1
   \   0000A5   E8           MOV     A,R0
   \   0000A6   F0           MOVX    @DPTR,A
   \   0000A7   A3           INC     DPTR
   \   0000A8   E9           MOV     A,R1
   \   0000A9   12....       LCALL   ?Subroutine41 & 0xFFFF
   1744            pData++;  // move past the frame control field
   1745          
   1746            // parse the manfacturer code
   1747            if ( hdr->fc.manuSpecific )
   \                     ??CrossCallReturnLabel_45:
   \   0000AC   E8           MOV     A,R0
   \   0000AD   5404         ANL     A,#0x4
   \   0000AF   6006         JZ      ??CrossCallReturnLabel_470
   1748            {
   1749              hdr->manuCode = BUILD_UINT16( pData[0], pData[1] );
   \   0000B1   12....       LCALL   ?Subroutine68 & 0xFFFF
   1750              pData += 2;
   1751            }
   \                     ??CrossCallReturnLabel_90:
   \   0000B4   12....       LCALL   ??Subroutine246_0 & 0xFFFF
   1752          
   1753            // parse the Transaction Sequence Number
   1754            hdr->transSeqNum = *pData++;
   \                     ??CrossCallReturnLabel_470:
   \   0000B7   8E82         MOV     DPL,R6
   \   0000B9   8F83         MOV     DPH,R7
   \   0000BB   E0           MOVX    A,@DPTR
   \   0000BC   85..82       MOV     DPL,?V0 + 0
   \   0000BF   85..83       MOV     DPH,?V0 + 1
   \   0000C2   A3           INC     DPTR
   \   0000C3   A3           INC     DPTR
   \   0000C4   A3           INC     DPTR
   \   0000C5   A3           INC     DPTR
   \   0000C6   12....       LCALL   ?Subroutine26 & 0xFFFF
   1755          
   1756            // parse the Cluster's command ID
   1757            hdr->commandID = *pData++;
   \                     ??CrossCallReturnLabel_22:
   \   0000C9   A3           INC     DPTR
   \   0000CA   12....       LCALL   ?Subroutine43 & 0xFFFF
   1758          
   1759            // Should point to the frame payload
   1760            return ( pData );
   \                     ??CrossCallReturnLabel_374:
   \   0000CD   AA82         MOV     R2,DPL
   \   0000CF   AB83         MOV     R3,DPH
   \   0000D1   02....       LJMP    ?Subroutine1 & 0xFFFF
   1761          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine43:
   \   000000   A3           INC     DPTR
   \   000001   A3           INC     DPTR
   \   000002   A3           INC     DPTR
   \   000003                REQUIRE ??Subroutine227_0
   \   000003                ; // Fall through to label ??Subroutine227_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine227_0:
   \   000000   12....       LCALL   ?Subroutine202 & 0xFFFF
   \                     ??CrossCallReturnLabel_377:
   \   000003   A3           INC     DPTR
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine41:
   \   000000   12....       LCALL   ?Subroutine158 & 0xFFFF
   \                     ??CrossCallReturnLabel_234:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine158:
   \   000000   12....       LCALL   ?Subroutine200 & 0xFFFF
   \                     ??CrossCallReturnLabel_466:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine200:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   8E82         MOV     DPL,R6
   \   000003   8F83         MOV     DPH,R7
   \   000005   A3           INC     DPTR
   \   000006   AE82         MOV     R6,DPL
   \   000008   AF83         MOV     R7,DPH
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine156:
   \   000000   12....       LCALL   ?Subroutine200 & 0xFFFF
   \                     ??CrossCallReturnLabel_467:
   \   000003   E0           MOVX    A,@DPTR
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine68:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   12....       LCALL   ?Subroutine177 & 0xFFFF
   \                     ??CrossCallReturnLabel_260:
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine246_0:
   \   000000   A3           INC     DPTR
   \   000001   A3           INC     DPTR
   \   000002                REQUIRE ??Subroutine247_0
   \   000002                ; // Fall through to label ??Subroutine247_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine247_0:
   \   000000   12....       LCALL   ?Subroutine153 & 0xFFFF
   \                     ??CrossCallReturnLabel_472:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine153:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   A3           INC     DPTR
   \   000002   E9           MOV     A,R1
   \   000003   12....       LCALL   ?Subroutine199 & 0xFFFF
   \                     ??CrossCallReturnLabel_495:
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine177:
   \   000000   FA           MOV     R2,A
   \   000001   A3           INC     DPTR
   \   000002   E0           MOVX    A,@DPTR
   \   000003   F9           MOV     R1,A
   \   000004   EA           MOV     A,R2
   \   000005   85..82       MOV     DPL,?V0 + 0
   \   000008   85..83       MOV     DPH,?V0 + 1
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine202:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   8E82         MOV     DPL,R6
   \   000003   8F83         MOV     DPH,R7
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine199:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   12....       LCALL   ?Subroutine206 & 0xFFFF
   \                     ??CrossCallReturnLabel_498:
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine206:
   \   000000   EE           MOV     A,R6
   \   000001   2402         ADD     A,#0x2
   \   000003   0E           INC     R6
   \   000004   0E           INC     R6
   \   000005   EF           MOV     A,R7
   \   000006   3400         ADDC    A,#0x0
   \   000008   FF           MOV     R7,A
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine26:
   \   000000   12....       LCALL   ?Subroutine156 & 0xFFFF
   \                     ??CrossCallReturnLabel_465:
   \   000003   85..82       MOV     DPL,?V0 + 0
   \   000006   85..83       MOV     DPH,?V0 + 1
   \   000009   A3           INC     DPTR
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine29:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   A3           INC     DPTR
   \   000002   E9           MOV     A,R1
   \   000003   12....       LCALL   ?Subroutine202 & 0xFFFF
   \                     ??CrossCallReturnLabel_378:
   \   000006   E0           MOVX    A,@DPTR
   \   000007   22           RET
   1762          
   1763          /*********************************************************************
   1764           * @fn      zclBuildHdr
   1765           *
   1766           * @brief   Build header of the ZCL format
   1767           *
   1768           * @param   hdr - outgoing header information
   1769           * @param   pData - outgoing header space
   1770           *
   1771           * @return  pointer past the header
   1772           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1773          static uint8 *zclBuildHdr( zclFrameHdr_t *hdr, uint8 *pData )
   \                     zclBuildHdr:
   1774          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   1775            // Build the Frame Control byte
   1776            *pData = hdr->fc.type;
   \   000005   8A82         MOV     DPL,R2
   \   000007   8B83         MOV     DPH,R3
   \   000009   E0           MOVX    A,@DPTR
   \   00000A   5403         ANL     A,#0x3
   \   00000C   8C82         MOV     DPL,R4
   \   00000E   8D83         MOV     DPH,R5
   \   000010   12....       LCALL   ??Subroutine229_0 & 0xFFFF
   1777            *pData |= hdr->fc.manuSpecific << 2;
   \                     ??CrossCallReturnLabel_386:
   \   000013   5404         ANL     A,#0x4
   \   000015   12....       LCALL   ?Subroutine47 & 0xFFFF
   1778            *pData |= hdr->fc.direction << 3;
   \                     ??CrossCallReturnLabel_384:
   \   000018   5408         ANL     A,#0x8
   \   00001A   12....       LCALL   ?Subroutine47 & 0xFFFF
   1779            *pData |= hdr->fc.disableDefaultRsp << 4;
   \                     ??CrossCallReturnLabel_385:
   \   00001D   5410         ANL     A,#0x10
   \   00001F   F8           MOV     R0,A
   \   000020   8C82         MOV     DPL,R4
   \   000022   8D83         MOV     DPH,R5
   \   000024   E0           MOVX    A,@DPTR
   \   000025   48           ORL     A,R0
   \   000026   12....       LCALL   ?Subroutine39 & 0xFFFF
   1780            pData++;  // move past the frame control field
   1781          
   1782            // Add the manfacturer code
   1783            if ( hdr->fc.manuSpecific )
   \                     ??CrossCallReturnLabel_41:
   \   000029   E0           MOVX    A,@DPTR
   \   00002A   5404         ANL     A,#0x4
   \   00002C   6013         JZ      ??CrossCallReturnLabel_144
   1784            {
   1785              *pData++ = LO_UINT16( hdr->manuCode );
   \   00002E   EA           MOV     A,R2
   \   00002F   2402         ADD     A,#0x2
   \   000031   F8           MOV     R0,A
   \   000032   EB           MOV     A,R3
   \   000033   12....       LCALL   ??Subroutine223_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_358:
   \   000036   12....       LCALL   ?Subroutine96 & 0xFFFF
   1786              *pData++ = HI_UINT16( hdr->manuCode );
   \                     ??CrossCallReturnLabel_143:
   \   000039   8882         MOV     DPL,R0
   \   00003B   8983         MOV     DPH,R1
   \   00003D   A3           INC     DPTR
   \   00003E   12....       LCALL   ?Subroutine96 & 0xFFFF
   1787            }
   1788          
   1789            // Add the Transaction Sequence Number
   1790            *pData++ = hdr->transSeqNum;
   \                     ??CrossCallReturnLabel_144:
   \   000041   8A82         MOV     DPL,R2
   \   000043   8B83         MOV     DPH,R3
   \   000045   12....       LCALL   ?Subroutine203 & 0xFFFF
   \                     ??CrossCallReturnLabel_382:
   \   000048   12....       LCALL   ?Subroutine39 & 0xFFFF
   1791          
   1792            // Add the Cluster's command ID
   1793            *pData++ = hdr->commandID;
   \                     ??CrossCallReturnLabel_42:
   \   00004B   A3           INC     DPTR
   \   00004C   12....       LCALL   ?Subroutine203 & 0xFFFF
   \                     ??CrossCallReturnLabel_383:
   \   00004F   F0           MOVX    @DPTR,A
   \   000050   A3           INC     DPTR
   1794          
   1795            // Should point to the frame payload
   1796            return ( pData );
   \   000051   AA82         MOV     R2,DPL
   \   000053   AB83         MOV     R3,DPH
   \   000055   02....       LJMP    ?Subroutine7 & 0xFFFF
   1797          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine96:
   \   000000   12....       LCALL   ?Subroutine166 & 0xFFFF
   \                     ??CrossCallReturnLabel_249:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine203:
   \   000000   A3           INC     DPTR
   \   000001   A3           INC     DPTR
   \   000002   A3           INC     DPTR
   \   000003   A3           INC     DPTR
   \   000004                REQUIRE ??Subroutine228_0
   \   000004                ; // Fall through to label ??Subroutine228_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine47:
   \   000000   F8           MOV     R0,A
   \   000001   8C82         MOV     DPL,R4
   \   000003   8D83         MOV     DPH,R5
   \   000005   E0           MOVX    A,@DPTR
   \   000006   48           ORL     A,R0
   \   000007                REQUIRE ??Subroutine229_0
   \   000007                ; // Fall through to label ??Subroutine229_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine229_0:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   8A82         MOV     DPL,R2
   \   000003   8B83         MOV     DPH,R3
   \   000005   E0           MOVX    A,@DPTR
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine39:
   \   000000   12....       LCALL   ?Subroutine157 & 0xFFFF
   \                     ??CrossCallReturnLabel_233:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine7:
   \   000000   7F01         MOV     R7,#0x1
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA
   1798          
   1799          /*********************************************************************
   1800           * @fn      zclCalcHdrSize
   1801           *
   1802           * @brief   Calculate the number of bytes needed for an outgoing
   1803           *          ZCL header.
   1804           *
   1805           * @param   hdr - outgoing header information
   1806           *
   1807           * @return  returns the number of bytes needed
   1808           */
   1809          static uint8 zclCalcHdrSize( zclFrameHdr_t *hdr )
   1810          {
   1811            uint8 needed = (1 + 1 + 1); // frame control + transaction seq num + cmd ID
   1812          
   1813            // Add the manfacturer code
   1814            if ( hdr->fc.manuSpecific )
   1815            {
   1816              needed += 2;
   1817            }
   1818          
   1819            return ( needed );
   1820          }
   1821          
   1822          /*********************************************************************
   1823           * @fn      zclFindPlugin
   1824           *
   1825           * @brief   Find the right plugin for a cluster ID
   1826           *
   1827           * @param   clusterID - cluster ID to look for
   1828           * @param   profileID - profile ID
   1829           *
   1830           * @return  pointer to plugin, NULL if not found
   1831           */
   1832          static zclLibPlugin_t *zclFindPlugin( uint16 clusterID, uint16 profileID )
   1833          {
   1834            (void)profileID;  // Intentionally unreferenced parameter
   1835          
   1836            zclLibPlugin_t *pLoop = plugins;
   1837          
   1838            while ( pLoop != NULL )
   1839            {
   1840              if ( ( clusterID >= pLoop->startClusterID ) && ( clusterID <= pLoop->endClusterID ) )
   1841              {
   1842                return ( pLoop );
   1843              }
   1844          
   1845              pLoop = pLoop->next;
   1846            }
   1847          
   1848            return ( (zclLibPlugin_t *)NULL );
   1849          }
   1850          
   1851          /*********************************************************************
   1852           * @fn      zclFindAttrRecsList
   1853           *
   1854           * @brief   Find the right attribute record list for an endpoint
   1855           *
   1856           * @param   clusterID - endpointto look for
   1857           *
   1858           * @return  pointer to record list, NULL if not found
   1859           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1860          static zclAttrRecsList *zclFindAttrRecsList( uint8 endpoint )
   \                     zclFindAttrRecsList:
   1861          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   1862            zclAttrRecsList *pLoop = attrList;
   \   000004   90....       MOV     DPTR,#attrList
   \   000007   8004         SJMP    ??zclFindAttrRecsList_0
   1863          
   1864            while ( pLoop != NULL )
   1865            {
   1866              if ( pLoop->endpoint == endpoint )
   1867              {
   1868                return ( pLoop );
   1869              }
   1870          
   1871              pLoop = pLoop->next;
   \                     ??zclFindAttrRecsList_1:
   \   000009   8A82         MOV     DPL,R2
   \   00000B   8B83         MOV     DPH,R3
   \                     ??zclFindAttrRecsList_0:
   \   00000D   12....       LCALL   ??Subroutine230_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_387:
   \   000010   600C         JZ      ??zclFindAttrRecsList_2
   \   000012   8A82         MOV     DPL,R2
   \   000014   8B83         MOV     DPH,R3
   \   000016   A3           INC     DPTR
   \   000017   A3           INC     DPTR
   \   000018   E0           MOVX    A,@DPTR
   \   000019   69           XRL     A,R1
   \   00001A   70ED         JNZ     ??zclFindAttrRecsList_1
   \   00001C   8004         SJMP    ??zclFindAttrRecsList_3
   1872            }
   1873          
   1874            return ( NULL );
   \                     ??zclFindAttrRecsList_2:
   \   00001E   7A00         MOV     R2,#0x0
   \   000020   7B00         MOV     R3,#0x0
   \                     ??zclFindAttrRecsList_3:
   \   000022   02....       LJMP    ?Subroutine0 & 0xFFFF
   1875          }
   1876          
   1877          /*********************************************************************
   1878           * @fn      zclFindAttrRec
   1879           *
   1880           * @brief   Find the attribute record that matchs the parameters
   1881           *
   1882           * @param   endpoint - Application's endpoint
   1883           * @param   clusterID - cluster ID
   1884           * @param   attrId - attribute looking for
   1885           * @param   pAttr - attribute record to be returned
   1886           *
   1887           * @return  TRUE if record found. FALSE, otherwise.
   1888           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1889          uint8 zclFindAttrRec( uint8 endpoint, uint16 clusterID, uint16 attrId, zclAttrRec_t *pAttr )
   \                     zclFindAttrRec:
   1890          {
   \   000000   74EE         MOV     A,#-0x12
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 18
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV     ?V0 + 2,R2
   \   000007   8B..         MOV     ?V0 + 3,R3
   \   000009   8C..         MOV     ?V0 + 0,R4
   \   00000B   8D..         MOV     ?V0 + 1,R5
   \   00000D   7412         MOV     A,#0x12
   \   00000F   12....       LCALL   ?XSTACK_DISP0_8
   \   000012   12....       LCALL   ??Subroutine240_0 & 0xFFFF
   1891            uint8 x;
   1892            zclAttrRecsList *pRec = zclFindAttrRecsList( endpoint );
   \                     ??CrossCallReturnLabel_447:
   \   000015                ; Setup parameters for call to function zclFindAttrRecsList
   \   000015   12....       LCALL   ??zclFindAttrRecsList?relay
   1893          
   1894            if ( pRec != NULL )
   \   000018   EA           MOV     A,R2
   \   000019   4B           ORL     A,R3
   \   00001A   7003         JNZ     $+5
   \   00001C   02....       LJMP    ??zclFindAttrRec_0 & 0xFFFF
   1895            {
   1896              for ( x = 0; x < pRec->numAttributes; x++ )
   \   00001F   75..00       MOV     ?V0 + 6,#0x0
   \   000022   8002         SJMP    ??zclFindAttrRec_1
   \                     ??zclFindAttrRec_2:
   \   000024   05..         INC     ?V0 + 6
   \                     ??zclFindAttrRec_1:
   \   000026   8A82         MOV     DPL,R2
   \   000028   8B83         MOV     DPH,R3
   \   00002A   A3           INC     DPTR
   \   00002B   A3           INC     DPTR
   \   00002C   A3           INC     DPTR
   \   00002D   A3           INC     DPTR
   \   00002E   A3           INC     DPTR
   \   00002F   A3           INC     DPTR
   \   000030   A3           INC     DPTR
   \   000031   E0           MOVX    A,@DPTR
   \   000032   F8           MOV     R0,A
   \   000033   E5..         MOV     A,?V0 + 6
   \   000035   C3           CLR     C
   \   000036   98           SUBB    A,R0
   \   000037   5073         JNC     ??zclFindAttrRec_0
   1897              {
   1898                if ( pRec->attrs[x].clusterID == clusterID && pRec->attrs[x].attr.attrId == attrId )
   \   000039   85....       MOV     ?V0 + 8,?V0 + 6
   \   00003C   75..00       MOV     ?V0 + 9,#0x0
   \   00003F   7403         MOV     A,#0x3
   \   000041   78..         MOV     R0,#?V0 + 8
   \   000043   12....       LCALL   ?S_SHL
   \   000046   12....       LCALL   ?Subroutine86 & 0xFFFF
   \                     ??CrossCallReturnLabel_129:
   \   000049   E4           CLR     A
   \   00004A   93           MOVC    A,@A+DPTR
   \   00004B   F8           MOV     R0,A
   \   00004C   7401         MOV     A,#0x1
   \   00004E   93           MOVC    A,@A+DPTR
   \   00004F   F9           MOV     R1,A
   \   000050   E5..         MOV     A,?V0 + 2
   \   000052   68           XRL     A,R0
   \   000053   7003         JNZ     ??zclFindAttrRec_3
   \   000055   E5..         MOV     A,?V0 + 3
   \   000057   69           XRL     A,R1
   \                     ??zclFindAttrRec_3:
   \   000058   70CA         JNZ     ??zclFindAttrRec_2
   \   00005A   85....       MOV     ?V0 + 8,?V0 + 6
   \   00005D   75..00       MOV     ?V0 + 9,#0x0
   \   000060   7403         MOV     A,#0x3
   \   000062   78..         MOV     R0,#?V0 + 8
   \   000064   12....       LCALL   ?S_SHL
   \   000067   12....       LCALL   ?Subroutine86 & 0xFFFF
   \                     ??CrossCallReturnLabel_130:
   \   00006A   A3           INC     DPTR
   \   00006B   A3           INC     DPTR
   \   00006C   E4           CLR     A
   \   00006D   93           MOVC    A,@A+DPTR
   \   00006E   F8           MOV     R0,A
   \   00006F   7401         MOV     A,#0x1
   \   000071   93           MOVC    A,@A+DPTR
   \   000072   F9           MOV     R1,A
   \   000073   E5..         MOV     A,?V0 + 0
   \   000075   68           XRL     A,R0
   \   000076   7003         JNZ     ??zclFindAttrRec_4
   \   000078   E5..         MOV     A,?V0 + 1
   \   00007A   69           XRL     A,R1
   \                     ??zclFindAttrRec_4:
   \   00007B   70A7         JNZ     ??zclFindAttrRec_2
   1899                {
   1900                  *pAttr = pRec->attrs[x];
   \   00007D   75..00       MOV     ?V0 + 7,#0x0
   \   000080   7403         MOV     A,#0x3
   \   000082   78..         MOV     R0,#?V0 + 6
   \   000084   12....       LCALL   ?S_SHL
   \   000087   8A82         MOV     DPL,R2
   \   000089   8B83         MOV     DPH,R3
   \   00008B   A3           INC     DPTR
   \   00008C   A3           INC     DPTR
   \   00008D   A3           INC     DPTR
   \   00008E   A3           INC     DPTR
   \   00008F   A3           INC     DPTR
   \   000090   A3           INC     DPTR
   \   000091   A3           INC     DPTR
   \   000092   A3           INC     DPTR
   \   000093   E0           MOVX    A,@DPTR
   \   000094   25..         ADD     A,?V0 + 6
   \   000096   F8           MOV     R0,A
   \   000097   A3           INC     DPTR
   \   000098   E0           MOVX    A,@DPTR
   \   000099   35..         ADDC    A,?V0 + 7
   \   00009B   8882         MOV     DPL,R0
   \   00009D   F583         MOV     DPH,A
   \   00009F   EE           MOV     A,R6
   \   0000A0   FC           MOV     R4,A
   \   0000A1   EF           MOV     A,R7
   \   0000A2   FD           MOV     R5,A
   \   0000A3   7408         MOV     A,#0x8
   \   0000A5   12....       LCALL   ?MOVE_LONG8_XDATA_CODE
   1901          
   1902                  return ( TRUE ); // EMBEDDED RETURN
   \   0000A8   7901         MOV     R1,#0x1
   \   0000AA   8002         SJMP    ??zclFindAttrRec_5
   1903                }
   1904              }
   1905            }
   1906          
   1907            return ( FALSE );
   \                     ??zclFindAttrRec_0:
   \   0000AC   7900         MOV     R1,#0x0
   \                     ??zclFindAttrRec_5:
   \   0000AE   7F0A         MOV     R7,#0xa
   \   0000B0   02....       LJMP    ?BANKED_LEAVE_XDATA
   1908          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine86:
   \   000000   8A82         MOV     DPL,R2
   \   000002   8B83         MOV     DPH,R3
   \   000004   A3           INC     DPTR
   \   000005   A3           INC     DPTR
   \   000006   A3           INC     DPTR
   \   000007   A3           INC     DPTR
   \   000008   A3           INC     DPTR
   \   000009   A3           INC     DPTR
   \   00000A   A3           INC     DPTR
   \   00000B   A3           INC     DPTR
   \   00000C   E0           MOVX    A,@DPTR
   \   00000D   25..         ADD     A,?V0 + 8
   \   00000F   F8           MOV     R0,A
   \   000010   A3           INC     DPTR
   \   000011   E0           MOVX    A,@DPTR
   \   000012   35..         ADDC    A,?V0 + 9
   \   000014   8882         MOV     DPL,R0
   \   000016   F583         MOV     DPH,A
   \   000018   22           RET
   1909          
   1910          #if defined ( ZCL_READ ) || defined ( ZCL_WRITE )
   1911          /*********************************************************************
   1912           * @fn      zclGetReadWriteCB
   1913           *
   1914           * @brief   Get the Read/Write callback function pointer for a given endpoint.
   1915           *
   1916           * @param   endpoint - Application's endpoint
   1917           *
   1918           * @return  Read/Write CB, NULL if not found
   1919           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1920          static zclReadWriteCB_t zclGetReadWriteCB( uint8 endpoint )
   \                     zclGetReadWriteCB:
   1921          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   1922            zclAttrRecsList *pRec = zclFindAttrRecsList( endpoint );
   \   000005                ; Setup parameters for call to function zclFindAttrRecsList
   \   000005   12....       LCALL   ?Subroutine121 & 0xFFFF
   1923          
   1924            if ( pRec != NULL )
   \                     ??CrossCallReturnLabel_182:
   \   000008   6005         JZ      ??zclGetReadWriteCB_0
   1925            {
   1926              return ( pRec->pfnReadWriteCB );
   \   00000A   12....       LCALL   ??Subroutine233_0 & 0xFFFF
   1927            }
   \                     ??CrossCallReturnLabel_403:
   \   00000D   8004         SJMP    ??zclGetReadWriteCB_1
   1928          
   1929            return ( NULL );
   \                     ??zclGetReadWriteCB_0:
   \   00000F   7A00         MOV     R2,#0x0
   \   000011   7B00         MOV     R3,#0x0
   \                     ??zclGetReadWriteCB_1:
   \   000013   02....       LJMP    ?Subroutine8 & 0xFFFF
   1930          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine121:
   \   000000   12....       LCALL   ??zclFindAttrRecsList?relay
   \   000003   8A82         MOV     DPL,R2
   \   000005   8B83         MOV     DPH,R3
   \   000007   E582         MOV     A,DPL
   \   000009   4583         ORL     A,DPH
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine8:
   \   000000   7F02         MOV     R7,#0x2
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA
   1931          
   1932          /*********************************************************************
   1933           * @fn      zclGetAuthorizeCB
   1934           *
   1935           * @brief   Get the Read/Write Authorization callback function pointer
   1936           *          for a given endpoint.
   1937           *
   1938           * @param   endpoint - Application's endpoint
   1939           *
   1940           * @return  Authorization CB, NULL if not found
   1941           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1942          static zclAuthorizeCB_t zclGetAuthorizeCB( uint8 endpoint )
   \                     zclGetAuthorizeCB:
   1943          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   1944            zclAttrRecsList *pRec = zclFindAttrRecsList( endpoint );
   \   000005                ; Setup parameters for call to function zclFindAttrRecsList
   \   000005   12....       LCALL   ?Subroutine121 & 0xFFFF
   1945          
   1946            if ( pRec != NULL )
   \                     ??CrossCallReturnLabel_183:
   \   000008   6006         JZ      ??zclGetAuthorizeCB_0
   1947            {
   1948              return ( pRec->pfnAuthorizeCB );
   \   00000A   A3           INC     DPTR
   \   00000B   12....       LCALL   ??Subroutine232_0 & 0xFFFF
   1949            }
   \                     ??CrossCallReturnLabel_406:
   \   00000E   8004         SJMP    ??zclGetAuthorizeCB_1
   1950          
   1951            return ( NULL );
   \                     ??zclGetAuthorizeCB_0:
   \   000010   7A00         MOV     R2,#0x0
   \   000012   7B00         MOV     R3,#0x0
   \                     ??zclGetAuthorizeCB_1:
   \   000014   02....       LJMP    ?Subroutine8 & 0xFFFF
   1952          }
   1953          #endif // ZCL_READ || ZCL_WRITE
   1954          
   1955          /*********************************************************************
   1956           * @fn      zclFindClusterOption
   1957           *
   1958           * @brief   Find the option record that matchs the cluster id
   1959           *
   1960           * @param   endpoint - Application's endpoint
   1961           * @param   clusterID - cluster ID looking for
   1962           *
   1963           * @return  pointer to clutser option, NULL if not found
   1964           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1965          static zclOptionRec_t *zclFindClusterOption( uint8 endpoint, uint16 clusterID )
   \                     zclFindClusterOption:
   1966          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
   \   000006   FE           MOV     R6,A
   1967            zclClusterOptionList *pLoop;
   1968          
   1969            pLoop = clusterOptionList;
   \   000007   90....       MOV     DPTR,#clusterOptionList
   \   00000A   8004         SJMP    ??zclFindClusterOption_0
   1970            while ( pLoop != NULL )
   1971            {
   1972              if ( pLoop->endpoint == endpoint )
   1973              {
   1974                for ( uint8 x = 0; x < pLoop->numOptions; x++ )
   1975                {
   1976                  if ( pLoop->options[x].clusterID == clusterID )
   1977                  {
   1978                    return ( &(pLoop->options[x]) ); // EMBEDDED RETURN
   1979                  }
   1980                }
   1981              }
   1982          
   1983              pLoop = pLoop->next;
   \                     ??zclFindClusterOption_1:
   \   00000C   8882         MOV     DPL,R0
   \   00000E   8983         MOV     DPH,R1
   \                     ??zclFindClusterOption_0:
   \   000010   12....       LCALL   ??Subroutine258_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_542:
   \   000013   605E         JZ      ??zclFindClusterOption_2
   \   000015   8882         MOV     DPL,R0
   \   000017   8983         MOV     DPH,R1
   \   000019   A3           INC     DPTR
   \   00001A   A3           INC     DPTR
   \   00001B   E0           MOVX    A,@DPTR
   \   00001C   6E           XRL     A,R6
   \   00001D   70ED         JNZ     ??zclFindClusterOption_1
   \   00001F   75..00       MOV     ?V0 + 0,#0x0
   \   000022   8002         SJMP    ??zclFindClusterOption_3
   \                     ??zclFindClusterOption_4:
   \   000024   05..         INC     ?V0 + 0
   \                     ??zclFindClusterOption_3:
   \   000026   8882         MOV     DPL,R0
   \   000028   8983         MOV     DPH,R1
   \   00002A   A3           INC     DPTR
   \   00002B   A3           INC     DPTR
   \   00002C   A3           INC     DPTR
   \   00002D   E0           MOVX    A,@DPTR
   \   00002E   FC           MOV     R4,A
   \   00002F   E5..         MOV     A,?V0 + 0
   \   000031   C3           CLR     C
   \   000032   9C           SUBB    A,R4
   \   000033   50D7         JNC     ??zclFindClusterOption_1
   \   000035   E5..         MOV     A,?V0 + 0
   \   000037   75F003       MOV     B,#0x3
   \   00003A   A4           MUL     AB
   \   00003B   FC           MOV     R4,A
   \   00003C   ADF0         MOV     R5,B
   \   00003E   8882         MOV     DPL,R0
   \   000040   8983         MOV     DPH,R1
   \   000042   A3           INC     DPTR
   \   000043   A3           INC     DPTR
   \   000044   A3           INC     DPTR
   \   000045   A3           INC     DPTR
   \   000046   E0           MOVX    A,@DPTR
   \   000047   2C           ADD     A,R4
   \   000048   FF           MOV     R7,A
   \   000049   A3           INC     DPTR
   \   00004A   E0           MOVX    A,@DPTR
   \   00004B   3D           ADDC    A,R5
   \   00004C   8F82         MOV     DPL,R7
   \   00004E   F583         MOV     DPH,A
   \   000050   E0           MOVX    A,@DPTR
   \   000051   6A           XRL     A,R2
   \   000052   7003         JNZ     ??zclFindClusterOption_5
   \   000054   A3           INC     DPTR
   \   000055   E0           MOVX    A,@DPTR
   \   000056   6B           XRL     A,R3
   \                     ??zclFindClusterOption_5:
   \   000057   70CB         JNZ     ??zclFindClusterOption_4
   \   000059   E5..         MOV     A,?V0 + 0
   \   00005B   75F003       MOV     B,#0x3
   \   00005E   A4           MUL     AB
   \   00005F   FA           MOV     R2,A
   \   000060   ABF0         MOV     R3,B
   \   000062   8882         MOV     DPL,R0
   \   000064   8983         MOV     DPH,R1
   \   000066   A3           INC     DPTR
   \   000067   A3           INC     DPTR
   \   000068   A3           INC     DPTR
   \   000069   A3           INC     DPTR
   \   00006A   E0           MOVX    A,@DPTR
   \   00006B   2A           ADD     A,R2
   \   00006C   FA           MOV     R2,A
   \   00006D   A3           INC     DPTR
   \   00006E   E0           MOVX    A,@DPTR
   \   00006F   3B           ADDC    A,R3
   \   000070   FB           MOV     R3,A
   \   000071   8004         SJMP    ??zclFindClusterOption_6
   1984            }
   1985          
   1986            return ( NULL );
   \                     ??zclFindClusterOption_2:
   \   000073   7A00         MOV     R2,#0x0
   \   000075   7B00         MOV     R3,#0x0
   \                     ??zclFindClusterOption_6:
   \   000077   02....       LJMP    ?Subroutine7 & 0xFFFF
   1987          }
   1988          
   1989          /*********************************************************************
   1990           * @fn      zclGetClusterOption
   1991           *
   1992           * @brief   Get the option record that matchs the cluster id
   1993           *
   1994           * @param   endpoint - Application's endpoint
   1995           * @param   clusterID - cluster ID looking for
   1996           *
   1997           * @return  clutser option, AF_TX_OPTIONS_NONE if not found
   1998           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1999          static uint8 zclGetClusterOption( uint8 endpoint, uint16 clusterID )
   \                     zclGetClusterOption:
   2000          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   2001            uint8 option;
   2002            zclOptionRec_t *pOption;
   2003          
   2004            pOption = zclFindClusterOption( endpoint, clusterID );
   \   000005                ; Setup parameters for call to function zclFindClusterOption
   \   000005   12....       LCALL   ?Subroutine150 & 0xFFFF
   2005            if ( pOption != NULL )
   \                     ??CrossCallReturnLabel_224:
   \   000008   6008         JZ      ??zclGetClusterOption_0
   2006            {
   2007              option = pOption->option;
   2008              if ( !ZG_SECURE_ENABLED )
   2009              {
   2010                option &= (AF_EN_SECURITY ^ 0xFF); // make sure Application Link Key security is off
   2011              }
   2012          
   2013              return ( option ); // EMBEDDED RETURN
   \   00000A   A3           INC     DPTR
   \   00000B   A3           INC     DPTR
   \   00000C   E0           MOVX    A,@DPTR
   \   00000D   54BF         ANL     A,#0xbf
   \   00000F   F9           MOV     R1,A
   \   000010   8002         SJMP    ??zclGetClusterOption_1
   2014            }
   2015          
   2016            return ( AF_TX_OPTIONS_NONE );
   \                     ??zclGetClusterOption_0:
   \   000012   7900         MOV     R1,#0x0
   \                     ??zclGetClusterOption_1:
   \   000014                REQUIRE ?Subroutine8
   \   000014                ; // Fall through to label ?Subroutine8
   2017          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine150:
   \   000000   12....       LCALL   ??zclFindClusterOption?relay
   \   000003   8A82         MOV     DPL,R2
   \   000005   8B83         MOV     DPH,R3
   \   000007   E582         MOV     A,DPL
   \   000009   4583         ORL     A,DPH
   \   00000B   22           RET
   2018          
   2019          /*********************************************************************
   2020           * @fn      zclSetSecurityOption
   2021           *
   2022           * @brief   Set the security option for the cluster id
   2023           *
   2024           * @param   endpoint - Application's endpoint
   2025           * @param   clusterID - cluster ID looking for
   2026           * @param   enable - whether to enable (TRUE) or disable (FALSE) security option
   2027           *
   2028           * @return  none
   2029           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2030          static void zclSetSecurityOption( uint8 endpoint, uint16 clusterID, uint8 enable )
   \                     zclSetSecurityOption:
   2031          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   EC           MOV     A,R4
   \   000006   FF           MOV     R7,A
   2032            zclOptionRec_t *pOption;
   2033          
   2034            pOption = zclFindClusterOption( endpoint, clusterID );
   \   000007                ; Setup parameters for call to function zclFindClusterOption
   \   000007   12....       LCALL   ?Subroutine150 & 0xFFFF
   2035            if ( pOption != NULL )
   \                     ??CrossCallReturnLabel_225:
   \   00000A   600E         JZ      ??zclSetSecurityOption_0
   2036            {
   2037              if ( enable )
   \   00000C   EF           MOV     A,R7
   \   00000D   A3           INC     DPTR
   \   00000E   A3           INC     DPTR
   \   00000F   6005         JZ      ??zclSetSecurityOption_1
   2038              {
   2039                pOption->option |= AF_EN_SECURITY;
   \   000011   E0           MOVX    A,@DPTR
   \   000012   D2E6         SETB    0xE0 /* A   */.6
   \   000014   8003         SJMP    ??zclSetSecurityOption_2
   2040              }
   2041              else
   2042              {
   2043                pOption->option &= (AF_EN_SECURITY ^ 0xFF);
   \                     ??zclSetSecurityOption_1:
   \   000016   E0           MOVX    A,@DPTR
   \   000017   C2E6         CLR     0xE0 /* A   */.6
   \                     ??zclSetSecurityOption_2:
   \   000019   F0           MOVX    @DPTR,A
   2044              }
   2045            }
   2046          }
   \                     ??zclSetSecurityOption_0:
   \   00001A   80..         SJMP    ?Subroutine8
   2047          
   2048          #ifdef ZCL_DISCOVER
   2049          /*********************************************************************
   2050           * @fn      zclFindNextAttrRec
   2051           *
   2052           * @brief   Find the attribute (or next) record that matchs the parameters
   2053           *
   2054           * @param   endpoint - Application's endpoint
   2055           * @param   clusterID - cluster ID
   2056           * @param   attr - attribute looking for
   2057           *
   2058           * @return  pointer to attribute record, NULL if not found
   2059           */
   2060          static uint8 zclFindNextAttrRec( uint8 endpoint, uint16 clusterID,
   2061                                           uint16 *attrId, zclAttrRec_t *pAttr )
   2062          {
   2063            zclAttrRecsList *pRec = zclFindAttrRecsList( endpoint );
   2064          
   2065            if ( pRec != NULL )
   2066            {
   2067              for ( uint16 x = 0; x < pRec->numAttributes; x++ )
   2068              {
   2069                if ( ( pRec->attrs[x].clusterID == clusterID ) &&
   2070                     ( pRec->attrs[x].attr.attrId >= *attrId ) )
   2071                {
   2072                  *pAttr = pRec->attrs[x];
   2073          
   2074                  // Update attribute ID
   2075                  *attrId = pAttr->attr.attrId;
   2076          
   2077                  return ( TRUE ); // EMBEDDED RETURN
   2078                }
   2079              }
   2080            }
   2081          
   2082            return ( FALSE );
   2083          }
   2084          #endif // ZCL_DISCOVER
   2085          
   2086          /*********************************************************************
   2087           * @fn      zclSerializeData
   2088           *
   2089           * @brief   Builds a buffer from the attribute data to sent out over
   2090           *          the air.
   2091           *
   2092           * @param   dataType - data types defined in zcl.h
   2093           * @param   attrData - pointer to the attribute data
   2094           * @param   buf - where to put the serialized data
   2095           *
   2096           * @return  pointer to end of destination buffer
   2097           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2098          uint8 *zclSerializeData( uint8 dataType, void *attrData, uint8 *buf )
   \                     zclSerializeData:
   2099          {
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
   \   000009   EC           MOV     A,R4
   \   00000A   FA           MOV     R2,A
   \   00000B   ED           MOV     A,R5
   \   00000C   FB           MOV     R3,A
   2100            uint8 *pStr;
   2101            uint16 len;
   2102          
   2103            switch ( dataType )
   \   00000D   E9           MOV     A,R1
   \   00000E   12....       LCALL   ?UC_SWITCH_SPARSE
   \                     `?<Jumptable for zclSerializeData>_0`:
   \   000011   04           DB        4
   \   000012   41           DB        65
   \   000013   42           DB        66
   \   000014   ....         DW        ??zclSerializeData_0
   \   000016   43           DB        67
   \   000017   44           DB        68
   \   000018   ....         DW        ??zclSerializeData_1
   \   00001A   E0           DB        224
   \   00001B   E2           DB        226
   \   00001C   ....         DW        ??zclSerializeData_2
   \   00001E   E8           DB        232
   \   00001F   E9           DB        233
   \   000020   ....         DW        ??zclSerializeData_3
   \   000022   1A           DB        26
   \   000023   08           DB        8
   \   000024   ....         DW        ??zclSerializeData_4
   \   000026   09           DB        9
   \   000027   ....         DW        ??zclSerializeData_3
   \   000029   0A           DB        10
   \   00002A   ....         DW        ??zclSerializeData_5
   \   00002C   0B           DB        11
   \   00002D   ....         DW        ??zclSerializeData_2
   \   00002F   10           DB        16
   \   000030   ....         DW        ??zclSerializeData_4
   \   000032   18           DB        24
   \   000033   ....         DW        ??zclSerializeData_4
   \   000035   19           DB        25
   \   000036   ....         DW        ??zclSerializeData_3
   \   000038   1A           DB        26
   \   000039   ....         DW        ??zclSerializeData_5
   \   00003B   1B           DB        27
   \   00003C   ....         DW        ??zclSerializeData_2
   \   00003E   20           DB        32
   \   00003F   ....         DW        ??zclSerializeData_4
   \   000041   21           DB        33
   \   000042   ....         DW        ??zclSerializeData_3
   \   000044   22           DB        34
   \   000045   ....         DW        ??zclSerializeData_5
   \   000047   23           DB        35
   \   000048   ....         DW        ??zclSerializeData_2
   \   00004A   24           DB        36
   \   00004B   ....         DW        ??zclSerializeData_6
   \   00004D   25           DB        37
   \   00004E   ....         DW        ??zclSerializeData_7
   \   000050   28           DB        40
   \   000051   ....         DW        ??zclSerializeData_4
   \   000053   29           DB        41
   \   000054   ....         DW        ??zclSerializeData_3
   \   000056   2A           DB        42
   \   000057   ....         DW        ??zclSerializeData_5
   \   000059   2B           DB        43
   \   00005A   ....         DW        ??zclSerializeData_2
   \   00005C   30           DB        48
   \   00005D   ....         DW        ??zclSerializeData_4
   \   00005F   31           DB        49
   \   000060   ....         DW        ??zclSerializeData_3
   \   000062   38           DB        56
   \   000063   ....         DW        ??zclSerializeData_3
   \   000065   39           DB        57
   \   000066   ....         DW        ??zclSerializeData_2
   \   000068   EA           DB        234
   \   000069   ....         DW        ??zclSerializeData_2
   \   00006B   F0           DB        240
   \   00006C   ....         DW        ??zclSerializeData_8
   \   00006E   F1           DB        241
   \   00006F   ....         DW        ??zclSerializeData_9
   \   000071   ....         DW        ??zclSerializeData_10
   2104            {
   2105              case ZCL_DATATYPE_DATA8:
   2106              case ZCL_DATATYPE_BOOLEAN:
   2107              case ZCL_DATATYPE_BITMAP8:
   2108              case ZCL_DATATYPE_INT8:
   2109              case ZCL_DATATYPE_UINT8:
   2110              case ZCL_DATATYPE_ENUM8:
   2111                *buf++ = *((uint8 *)attrData);
   \                     ??zclSerializeData_4:
   \   000073   8E82         MOV     DPL,R6
   \   000075   8F83         MOV     DPH,R7
   \   000077   12....       LCALL   ?Subroutine109 & 0xFFFF
   \                     ??CrossCallReturnLabel_169:
   \   00007A   AB83         MOV     R3,DPH
   2112                 break;
   \   00007C   02....       LJMP    ??zclSerializeData_10 & 0xFFFF
   2113          
   2114              case ZCL_DATATYPE_DATA16:
   2115              case ZCL_DATATYPE_BITMAP16:
   2116              case ZCL_DATATYPE_UINT16:
   2117              case ZCL_DATATYPE_INT16:
   2118              case ZCL_DATATYPE_ENUM16:
   2119              case ZCL_DATATYPE_SEMI_PREC:
   2120              case ZCL_DATATYPE_CLUSTER_ID:
   2121              case ZCL_DATATYPE_ATTR_ID:
   2122                *buf++ = LO_UINT16( *((uint16*)attrData) );
   \                     ??zclSerializeData_3:
   \   00007F   12....       LCALL   ?Subroutine110 & 0xFFFF
   \                     ??CrossCallReturnLabel_522:
   \   000082   12....       LCALL   ?Subroutine38 & 0xFFFF
   2123                *buf++ = HI_UINT16( *((uint16*)attrData) );
   \                     ??CrossCallReturnLabel_39:
   \   000085   A3           INC     DPTR
   \   000086   12....       LCALL   ??Subroutine254_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_519:
   \   000089   F0           MOVX    @DPTR,A
   \   00008A   A3           INC     DPTR
   \   00008B   0A           INC     R2
   \   00008C   80EC         SJMP    ??CrossCallReturnLabel_169
   2124                break;
   2125          
   2126              case ZCL_DATATYPE_DATA24:
   2127              case ZCL_DATATYPE_BITMAP24:
   2128              case ZCL_DATATYPE_UINT24:
   2129              case ZCL_DATATYPE_INT24:
   2130                *buf++ = BREAK_UINT32( *((uint32*)attrData), 0 );
   \                     ??zclSerializeData_5:
   \   00008E   8E82         MOV     DPL,R6
   \   000090   8F83         MOV     DPH,R7
   \   000092   78..         MOV     R0,#?V0 + 4
   \   000094   12....       LCALL   ?L_MOV_X
   \   000097   8A82         MOV     DPL,R2
   \   000099   8B83         MOV     DPH,R3
   \   00009B   E5..         MOV     A,?V0 + 4
   \   00009D   12....       LCALL   ?Subroutine38 & 0xFFFF
   2131                *buf++ = BREAK_UINT32( *((uint32*)attrData), 1 );
   \                     ??CrossCallReturnLabel_40:
   \   0000A0   78..         MOV     R0,#?V0 + 4
   \   0000A2   12....       LCALL   ?L_MOV_X
   \   0000A5   E5..         MOV     A,?V0 + 5
   \   0000A7   12....       LCALL   ??Subroutine221_0 & 0xFFFF
   2132                *buf++ = BREAK_UINT32( *((uint32*)attrData), 2 );
   \                     ??CrossCallReturnLabel_353:
   \   0000AA   8E82         MOV     DPL,R6
   \   0000AC   8F83         MOV     DPH,R7
   \   0000AE   78..         MOV     R0,#?V0 + 4
   \   0000B0   12....       LCALL   ?L_MOV_X
   \   0000B3   7410         MOV     A,#0x10
   \   0000B5   78..         MOV     R0,#?V0 + 4
   \   0000B7   12....       LCALL   ?UL_SHR
   \   0000BA   8A82         MOV     DPL,R2
   \   0000BC   8B83         MOV     DPH,R3
   \   0000BE   E5..         MOV     A,?V0 + 4
   \   0000C0   80C7         SJMP    ??CrossCallReturnLabel_519
   2133                break;
   2134          
   2135              case ZCL_DATATYPE_DATA32:
   2136              case ZCL_DATATYPE_BITMAP32:
   2137              case ZCL_DATATYPE_UINT32:
   2138              case ZCL_DATATYPE_INT32:
   2139              case ZCL_DATATYPE_SINGLE_PREC:
   2140              case ZCL_DATATYPE_TOD:
   2141              case ZCL_DATATYPE_DATE:
   2142              case ZCL_DATATYPE_UTC:
   2143              case ZCL_DATATYPE_BAC_OID:
   2144                buf = osal_buffer_uint32( buf, *((uint32*)attrData) );
   \                     ??zclSerializeData_2:
   \   0000C2                ; Setup parameters for call to function osal_buffer_uint32
   \   0000C2   8E82         MOV     DPL,R6
   \   0000C4   8F83         MOV     DPH,R7
   \   0000C6   12....       LCALL   ?PUSH_XSTACK8_X_FOUR
   \   0000C9   12....       LCALL   ??osal_buffer_uint32?relay
   \   0000CC   7404         MOV     A,#0x4
   \   0000CE   12....       LCALL   ?DEALLOC_XSTACK8
   2145                break;
   \   0000D1   8078         SJMP    ??zclSerializeData_10
   2146          
   2147              case ZCL_DATATYPE_UINT40:
   2148                pStr = (uint8*)attrData;
   2149                buf = osal_memcpy( buf, pStr, 5 );
   \                     ??zclSerializeData_6:
   \   0000D3                ; Setup parameters for call to function osal_memcpy
   \   0000D3   8E..         MOV     ?V0 + 4,R6
   \   0000D5   8F..         MOV     ?V0 + 5,R7
   \   0000D7   75..00       MOV     ?V0 + 6,#0x0
   \   0000DA   78..         MOV     R0,#?V0 + 4
   \   0000DC   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   0000DF   7C05         MOV     R4,#0x5
   \   0000E1   8060         SJMP    ??zclSerializeData_11
   2150                break;
   2151          
   2152              case ZCL_DATATYPE_UINT48:
   2153                pStr = (uint8*)attrData;
   2154                buf = osal_memcpy( buf, pStr, 6 );
   \                     ??zclSerializeData_7:
   \   0000E3                ; Setup parameters for call to function osal_memcpy
   \   0000E3   8E..         MOV     ?V0 + 4,R6
   \   0000E5   8F..         MOV     ?V0 + 5,R7
   \   0000E7   75..00       MOV     ?V0 + 6,#0x0
   \   0000EA   78..         MOV     R0,#?V0 + 4
   \   0000EC   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   0000EF   7C06         MOV     R4,#0x6
   \   0000F1   8050         SJMP    ??zclSerializeData_11
   2155                break;
   2156          
   2157              case ZCL_DATATYPE_IEEE_ADDR:
   2158                pStr = (uint8*)attrData;
   2159                buf = osal_memcpy( buf, pStr, 8 );
   \                     ??zclSerializeData_8:
   \   0000F3                ; Setup parameters for call to function osal_memcpy
   \   0000F3   8E..         MOV     ?V0 + 4,R6
   \   0000F5   8F..         MOV     ?V0 + 5,R7
   \   0000F7   75..00       MOV     ?V0 + 6,#0x0
   \   0000FA   78..         MOV     R0,#?V0 + 4
   \   0000FC   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   0000FF   7C08         MOV     R4,#0x8
   \   000101   8040         SJMP    ??zclSerializeData_11
   2160                break;
   2161          
   2162              case ZCL_DATATYPE_CHAR_STR:
   2163              case ZCL_DATATYPE_OCTET_STR:
   2164                pStr = (uint8*)attrData;
   2165                len = *pStr;
   2166                buf = osal_memcpy( buf, pStr, len+1 ); // Including length field
   \                     ??zclSerializeData_0:
   \   000103                ; Setup parameters for call to function osal_memcpy
   \   000103   8E..         MOV     ?V0 + 4,R6
   \   000105   8F..         MOV     ?V0 + 5,R7
   \   000107   75..00       MOV     ?V0 + 6,#0x0
   \   00010A   78..         MOV     R0,#?V0 + 4
   \   00010C   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   00010F   8E82         MOV     DPL,R6
   \   000111   8F83         MOV     DPH,R7
   \   000113   E0           MOVX    A,@DPTR
   \   000114   2401         ADD     A,#0x1
   \   000116   FC           MOV     R4,A
   \   000117   E4           CLR     A
   \                     ??zclSerializeData_12:
   \   000118   3400         ADDC    A,#0x0
   \   00011A   FD           MOV     R5,A
   \   00011B   8028         SJMP    ??zclSerializeData_13
   2167                break;
   2168          
   2169              case ZCL_DATATYPE_LONG_CHAR_STR:
   2170              case ZCL_DATATYPE_LONG_OCTET_STR:
   2171                pStr = (uint8*)attrData;
   2172                len = BUILD_UINT16( pStr[0], pStr[1] );
   2173                buf = osal_memcpy( buf, pStr, len+2 ); // Including length field
   \                     ??zclSerializeData_1:
   \   00011D                ; Setup parameters for call to function osal_memcpy
   \   00011D   8E..         MOV     ?V0 + 4,R6
   \   00011F   8F..         MOV     ?V0 + 5,R7
   \   000121   75..00       MOV     ?V0 + 6,#0x0
   \   000124   78..         MOV     R0,#?V0 + 4
   \   000126   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   000129   8E82         MOV     DPL,R6
   \   00012B   8F83         MOV     DPH,R7
   \   00012D   12....       LCALL   ?Subroutine115 & 0xFFFF
   \                     ??CrossCallReturnLabel_174:
   \   000130   0C           INC     R4
   \   000131   0C           INC     R4
   \   000132   E9           MOV     A,R1
   \   000133   80E3         SJMP    ??zclSerializeData_12
   2174                break;
   2175          
   2176              case ZCL_DATATYPE_128_BIT_SEC_KEY:
   2177                pStr = (uint8*)attrData;
   2178                buf = osal_memcpy( buf, pStr, SEC_KEY_LEN );
   \                     ??zclSerializeData_9:
   \   000135                ; Setup parameters for call to function osal_memcpy
   \   000135   8E..         MOV     ?V0 + 4,R6
   \   000137   8F..         MOV     ?V0 + 5,R7
   \   000139   75..00       MOV     ?V0 + 6,#0x0
   \   00013C   78..         MOV     R0,#?V0 + 4
   \   00013E   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   000141   7C10         MOV     R4,#0x10
   \                     ??zclSerializeData_11:
   \   000143   7D00         MOV     R5,#0x0
   \                     ??zclSerializeData_13:
   \   000145   12....       LCALL   ??Subroutine238_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_443:
   \   000148   12....       LCALL   ?DEALLOC_XSTACK8
   2179                break;
   2180          
   2181              case ZCL_DATATYPE_NO_DATA:
   2182              case ZCL_DATATYPE_UNKNOWN:
   2183                // Fall through
   2184          
   2185              default:
   2186                break;
   2187            }
   2188          
   2189            return ( buf );
   \                     ??zclSerializeData_10:
   \   00014B                REQUIRE ?Subroutine9
   \   00014B                ; // Fall through to label ?Subroutine9
   2190          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine9:
   \   000000   7F08         MOV     R7,#0x8
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine38:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   A3           INC     DPTR
   \   000002   AA82         MOV     R2,DPL
   \   000004   AB83         MOV     R3,DPH
   \   000006   8E82         MOV     DPL,R6
   \   000008   8F83         MOV     DPH,R7
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine115:
   \   000000   12....       LCALL   ?Subroutine179 & 0xFFFF
   \                     ??CrossCallReturnLabel_266:
   \   000003   2402         ADD     A,#0x2
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine179:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   FC           MOV     R4,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   F9           MOV     R1,A
   \   000005   EC           MOV     A,R4
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine110:
   \   000000   8E82         MOV     DPL,R6
   \   000002   8F83         MOV     DPH,R7
   \   000004                REQUIRE ??Subroutine254_0
   \   000004                ; // Fall through to label ??Subroutine254_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine254_0:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   8A82         MOV     DPL,R2
   \   000003   8B83         MOV     DPH,R3
   \   000005   22           RET
   2191          
   2192          #ifdef ZCL_REPORT
   2193          /*********************************************************************
   2194           * @fn      zclAnalogDataType
   2195           *
   2196           * @brief   Checks to see if Data Type is Analog
   2197           *
   2198           * @param   dataType - data type
   2199           *
   2200           * @return  TRUE if data type is analog
   2201           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2202          uint8 zclAnalogDataType( uint8 dataType )
   \                     zclAnalogDataType:
   2203          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   \   000004   E9           MOV     A,R1
   2204            uint8 analog;
   2205          
   2206            switch ( dataType )
   \   000005   12....       LCALL   ?UC_SWITCH_SPARSE
   \                     `?<Jumptable for zclAnalogDataType>_0`:
   \   000008   03           DB        3
   \   000009   20           DB        32
   \   00000A   2F           DB        47
   \   00000B   ....         DW        ??zclAnalogDataType_0
   \   00000D   38           DB        56
   \   00000E   3A           DB        58
   \   00000F   ....         DW        ??zclAnalogDataType_0
   \   000011   E0           DB        224
   \   000012   E2           DB        226
   \   000013   ....         DW        ??zclAnalogDataType_0
   \   000015   00           DB        0
   \   000016   ....         DW        ??zclAnalogDataType_1
   2207            {
   2208              case ZCL_DATATYPE_UINT8:
   2209              case ZCL_DATATYPE_UINT16:
   2210              case ZCL_DATATYPE_UINT24:
   2211              case ZCL_DATATYPE_UINT32:
   2212              case ZCL_DATATYPE_UINT40:
   2213              case ZCL_DATATYPE_UINT48:
   2214              case ZCL_DATATYPE_UINT56:
   2215              case ZCL_DATATYPE_UINT64:
   2216              case ZCL_DATATYPE_INT8:
   2217              case ZCL_DATATYPE_INT16:
   2218              case ZCL_DATATYPE_INT24:
   2219              case ZCL_DATATYPE_INT32:
   2220              case ZCL_DATATYPE_INT40:
   2221              case ZCL_DATATYPE_INT48:
   2222              case ZCL_DATATYPE_INT56:
   2223              case ZCL_DATATYPE_INT64:
   2224              case ZCL_DATATYPE_SEMI_PREC:
   2225              case ZCL_DATATYPE_SINGLE_PREC:
   2226              case ZCL_DATATYPE_DOUBLE_PREC:
   2227              case ZCL_DATATYPE_TOD:
   2228              case ZCL_DATATYPE_DATE:
   2229              case ZCL_DATATYPE_UTC:
   2230                analog = TRUE;
   \                     ??zclAnalogDataType_0:
   \   000018   7901         MOV     R1,#0x1
   2231                break;
   \   00001A   8002         SJMP    ??zclAnalogDataType_2
   2232          
   2233              default:
   2234                analog = FALSE;
   \                     ??zclAnalogDataType_1:
   \   00001C   7900         MOV     R1,#0x0
   2235                break;
   2236            }
   2237          
   2238            return ( analog );
   \                     ??zclAnalogDataType_2:
   \   00001E   02....       LJMP    ?Subroutine0 & 0xFFFF
   2239          }
   2240          
   2241          /*********************************************************************
   2242           * @fn      zcl_BuildAnalogData
   2243           *
   2244           * @brief   Build an analog arribute out of sequential bytes.
   2245           *
   2246           * @param   dataType - type of data
   2247           * @param   pData - pointer to data
   2248           * @param   pBuf - where to put the data
   2249           *
   2250           * @return  none
   2251           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2252          static void zcl_BuildAnalogData( uint8 dataType, uint8 *pData, uint8 *pBuf)
   \                     zcl_BuildAnalogData:
   2253          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
   \   000009   EC           MOV     A,R4
   \   00000A   FA           MOV     R2,A
   \   00000B   ED           MOV     A,R5
   \   00000C   FB           MOV     R3,A
   2254            switch ( dataType )
   \   00000D   E9           MOV     A,R1
   \   00000E   24E0         ADD     A,#-0x20
   \   000010   6029         JZ      ??zcl_BuildAnalogData_0
   \   000012   14           DEC     A
   \   000013   6031         JZ      ??zcl_BuildAnalogData_1
   \   000015   14           DEC     A
   \   000016   603E         JZ      ??zcl_BuildAnalogData_2
   \   000018   14           DEC     A
   \   000019   6049         JZ      ??zcl_BuildAnalogData_3
   \   00001B   24FB         ADD     A,#-0x5
   \   00001D   601C         JZ      ??zcl_BuildAnalogData_0
   \   00001F   14           DEC     A
   \   000020   6024         JZ      ??zcl_BuildAnalogData_1
   \   000022   14           DEC     A
   \   000023   6031         JZ      ??zcl_BuildAnalogData_2
   \   000025   14           DEC     A
   \   000026   603C         JZ      ??zcl_BuildAnalogData_3
   \   000028   24F3         ADD     A,#-0xd
   \   00002A   601A         JZ      ??zcl_BuildAnalogData_1
   \   00002C   14           DEC     A
   \   00002D   6035         JZ      ??zcl_BuildAnalogData_3
   \   00002F   2459         ADD     A,#0x59
   \   000031   6031         JZ      ??zcl_BuildAnalogData_3
   \   000033   14           DEC     A
   \   000034   602E         JZ      ??zcl_BuildAnalogData_3
   \   000036   14           DEC     A
   \   000037   602B         JZ      ??zcl_BuildAnalogData_3
   \   000039   802D         SJMP    ??zcl_BuildAnalogData_4
   2255            {
   2256              case ZCL_DATATYPE_UINT8:
   2257              case ZCL_DATATYPE_INT8:
   2258                *pData = *pBuf;
   \                     ??zcl_BuildAnalogData_0:
   \   00003B   8A82         MOV     DPL,R2
   \   00003D   8B83         MOV     DPH,R3
   \   00003F   E0           MOVX    A,@DPTR
   \   000040   8E82         MOV     DPL,R6
   \   000042   8F83         MOV     DPH,R7
   \   000044   8027         SJMP    ??zcl_BuildAnalogData_5
   2259                break;
   2260          
   2261              case ZCL_DATATYPE_UINT16:
   2262              case ZCL_DATATYPE_INT16:
   2263              case ZCL_DATATYPE_SEMI_PREC:
   2264                *((uint16*)pData) = BUILD_UINT16( pBuf[0], pBuf[1] );
   \                     ??zcl_BuildAnalogData_1:
   \   000046   8A82         MOV     DPL,R2
   \   000048   8B83         MOV     DPH,R3
   \   00004A   12....       LCALL   ?Subroutine179 & 0xFFFF
   \                     ??CrossCallReturnLabel_264:
   \   00004D   8E82         MOV     DPL,R6
   \   00004F   8F83         MOV     DPH,R7
   \   000051   F0           MOVX    @DPTR,A
   \   000052   A3           INC     DPTR
   \   000053   E9           MOV     A,R1
   \   000054   8017         SJMP    ??zcl_BuildAnalogData_5
   2265                break;
   2266          
   2267              case ZCL_DATATYPE_UINT24:
   2268              case ZCL_DATATYPE_INT24:
   2269                *((uint32*)pData) = osal_build_uint32( pBuf, 3 );
   \                     ??zcl_BuildAnalogData_2:
   \   000056                ; Setup parameters for call to function osal_build_uint32
   \   000056   7903         MOV     R1,#0x3
   \                     ??zcl_BuildAnalogData_6:
   \   000058   12....       LCALL   ??osal_build_uint32?relay
   \   00005B   8E82         MOV     DPL,R6
   \   00005D   8F83         MOV     DPH,R7
   \   00005F   12....       LCALL   ?XSTORE_R2345
   2270                break;
   \   000062   800A         SJMP    ??zcl_BuildAnalogData_7
   2271          
   2272              case ZCL_DATATYPE_UINT32:
   2273              case ZCL_DATATYPE_INT32:
   2274              case ZCL_DATATYPE_SINGLE_PREC:
   2275              case ZCL_DATATYPE_TOD:
   2276              case ZCL_DATATYPE_DATE:
   2277              case ZCL_DATATYPE_UTC:
   2278                *((uint32*)pData) = osal_build_uint32( pBuf, 4 );
   \                     ??zcl_BuildAnalogData_3:
   \   000064                ; Setup parameters for call to function osal_build_uint32
   \   000064   7904         MOV     R1,#0x4
   \   000066   80F0         SJMP    ??zcl_BuildAnalogData_6
   2279                break;
   2280          
   2281              case ZCL_DATATYPE_UINT40:
   2282              case ZCL_DATATYPE_UINT48:
   2283              case ZCL_DATATYPE_UINT56:
   2284              case ZCL_DATATYPE_UINT64:
   2285              case ZCL_DATATYPE_INT40:
   2286              case ZCL_DATATYPE_INT48:
   2287              case ZCL_DATATYPE_INT56:
   2288              case ZCL_DATATYPE_INT64:
   2289              case ZCL_DATATYPE_DOUBLE_PREC:
   2290                *pData = 0;
   \                     ??zcl_BuildAnalogData_4:
   \   000068   8E82         MOV     DPL,R6
   \   00006A   8F83         MOV     DPH,R7
   \   00006C   E4           CLR     A
   \                     ??zcl_BuildAnalogData_5:
   \   00006D   F0           MOVX    @DPTR,A
   2291                break;
   2292          
   2293              default:
   2294                *pData = 0;
   2295                break;
   2296            }
   2297          }
   \                     ??zcl_BuildAnalogData_7:
   \   00006E                REQUIRE ?Subroutine7
   \   00006E                ; // Fall through to label ?Subroutine7
   2298          #endif // ZCL_REPORT
   2299          
   2300          /*********************************************************************
   2301           * @fn      zclGetDataTypeLength
   2302           *
   2303           * @brief   Return the length of the datatype in octet.
   2304           *
   2305           *          NOTE: Should not be called for ZCL_DATATYPE_OCTECT_STR or
   2306           *                ZCL_DATATYPE_CHAR_STR data types.
   2307           *
   2308           * @param   dataType - data type
   2309           *
   2310           * @return  length of data
   2311           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2312          uint8 zclGetDataTypeLength( uint8 dataType )
   \                     zclGetDataTypeLength:
   2313          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   \   000004   E9           MOV     A,R1
   2314            uint8 len;
   2315          
   2316            switch ( dataType )
   \   000005   12....       LCALL   ?UC_SWITCH_SPARSE
   \                     `?<Jumptable for zclGetDataTypeLength>_0`:
   \   000008   02           DB        2
   \   000009   E0           DB        224
   \   00000A   E2           DB        226
   \   00000B   ....         DW        ??zclGetDataTypeLength_0
   \   00000D   E8           DB        232
   \   00000E   E9           DB        233
   \   00000F   ....         DW        ??zclGetDataTypeLength_1
   \   000011   21           DB        33
   \   000012   08           DB        8
   \   000013   ....         DW        ??zclGetDataTypeLength_2
   \   000015   09           DB        9
   \   000016   ....         DW        ??zclGetDataTypeLength_1
   \   000018   0A           DB        10
   \   000019   ....         DW        ??zclGetDataTypeLength_3
   \   00001B   0B           DB        11
   \   00001C   ....         DW        ??zclGetDataTypeLength_0
   \   00001E   10           DB        16
   \   00001F   ....         DW        ??zclGetDataTypeLength_2
   \   000021   18           DB        24
   \   000022   ....         DW        ??zclGetDataTypeLength_2
   \   000024   19           DB        25
   \   000025   ....         DW        ??zclGetDataTypeLength_1
   \   000027   1A           DB        26
   \   000028   ....         DW        ??zclGetDataTypeLength_3
   \   00002A   1B           DB        27
   \   00002B   ....         DW        ??zclGetDataTypeLength_0
   \   00002D   20           DB        32
   \   00002E   ....         DW        ??zclGetDataTypeLength_2
   \   000030   21           DB        33
   \   000031   ....         DW        ??zclGetDataTypeLength_1
   \   000033   22           DB        34
   \   000034   ....         DW        ??zclGetDataTypeLength_3
   \   000036   23           DB        35
   \   000037   ....         DW        ??zclGetDataTypeLength_0
   \   000039   24           DB        36
   \   00003A   ....         DW        ??zclGetDataTypeLength_4
   \   00003C   25           DB        37
   \   00003D   ....         DW        ??zclGetDataTypeLength_5
   \   00003F   26           DB        38
   \   000040   ....         DW        ??zclGetDataTypeLength_6
   \   000042   27           DB        39
   \   000043   ....         DW        ??zclGetDataTypeLength_7
   \   000045   28           DB        40
   \   000046   ....         DW        ??zclGetDataTypeLength_2
   \   000048   29           DB        41
   \   000049   ....         DW        ??zclGetDataTypeLength_1
   \   00004B   2A           DB        42
   \   00004C   ....         DW        ??zclGetDataTypeLength_3
   \   00004E   2B           DB        43
   \   00004F   ....         DW        ??zclGetDataTypeLength_0
   \   000051   2C           DB        44
   \   000052   ....         DW        ??zclGetDataTypeLength_4
   \   000054   2D           DB        45
   \   000055   ....         DW        ??zclGetDataTypeLength_5
   \   000057   2E           DB        46
   \   000058   ....         DW        ??zclGetDataTypeLength_6
   \   00005A   2F           DB        47
   \   00005B   ....         DW        ??zclGetDataTypeLength_7
   \   00005D   30           DB        48
   \   00005E   ....         DW        ??zclGetDataTypeLength_2
   \   000060   31           DB        49
   \   000061   ....         DW        ??zclGetDataTypeLength_1
   \   000063   38           DB        56
   \   000064   ....         DW        ??zclGetDataTypeLength_1
   \   000066   39           DB        57
   \   000067   ....         DW        ??zclGetDataTypeLength_0
   \   000069   3A           DB        58
   \   00006A   ....         DW        ??zclGetDataTypeLength_7
   \   00006C   EA           DB        234
   \   00006D   ....         DW        ??zclGetDataTypeLength_0
   \   00006F   F0           DB        240
   \   000070   ....         DW        ??zclGetDataTypeLength_7
   \   000072   F1           DB        241
   \   000073   ....         DW        ??zclGetDataTypeLength_8
   \   000075   ....         DW        ??zclGetDataTypeLength_9
   2317            {
   2318              case ZCL_DATATYPE_DATA8:
   2319              case ZCL_DATATYPE_BOOLEAN:
   2320              case ZCL_DATATYPE_BITMAP8:
   2321              case ZCL_DATATYPE_INT8:
   2322              case ZCL_DATATYPE_UINT8:
   2323              case ZCL_DATATYPE_ENUM8:
   2324                len = 1;
   \                     ??zclGetDataTypeLength_2:
   \   000077   7901         MOV     R1,#0x1
   2325                break;
   \   000079   8022         SJMP    ??zclGetDataTypeLength_10
   2326          
   2327              case ZCL_DATATYPE_DATA16:
   2328              case ZCL_DATATYPE_BITMAP16:
   2329              case ZCL_DATATYPE_UINT16:
   2330              case ZCL_DATATYPE_INT16:
   2331              case ZCL_DATATYPE_ENUM16:
   2332              case ZCL_DATATYPE_SEMI_PREC:
   2333              case ZCL_DATATYPE_CLUSTER_ID:
   2334              case ZCL_DATATYPE_ATTR_ID:
   2335                len = 2;
   \                     ??zclGetDataTypeLength_1:
   \   00007B   7902         MOV     R1,#0x2
   2336                break;
   \   00007D   801E         SJMP    ??zclGetDataTypeLength_10
   2337          
   2338              case ZCL_DATATYPE_DATA24:
   2339              case ZCL_DATATYPE_BITMAP24:
   2340              case ZCL_DATATYPE_UINT24:
   2341              case ZCL_DATATYPE_INT24:
   2342                len = 3;
   \                     ??zclGetDataTypeLength_3:
   \   00007F   7903         MOV     R1,#0x3
   2343                break;
   \   000081   801A         SJMP    ??zclGetDataTypeLength_10
   2344          
   2345              case ZCL_DATATYPE_DATA32:
   2346              case ZCL_DATATYPE_BITMAP32:
   2347              case ZCL_DATATYPE_UINT32:
   2348              case ZCL_DATATYPE_INT32:
   2349              case ZCL_DATATYPE_SINGLE_PREC:
   2350              case ZCL_DATATYPE_TOD:
   2351              case ZCL_DATATYPE_DATE:
   2352              case ZCL_DATATYPE_UTC:
   2353              case ZCL_DATATYPE_BAC_OID:
   2354                len = 4;
   \                     ??zclGetDataTypeLength_0:
   \   000083   7904         MOV     R1,#0x4
   2355                break;
   \   000085   8016         SJMP    ??zclGetDataTypeLength_10
   2356          
   2357             case ZCL_DATATYPE_UINT40:
   2358             case ZCL_DATATYPE_INT40:
   2359                 len = 5;
   \                     ??zclGetDataTypeLength_4:
   \   000087   7905         MOV     R1,#0x5
   2360                 break;
   \   000089   8012         SJMP    ??zclGetDataTypeLength_10
   2361          
   2362             case ZCL_DATATYPE_UINT48:
   2363             case ZCL_DATATYPE_INT48:
   2364                 len = 6;
   \                     ??zclGetDataTypeLength_5:
   \   00008B   7906         MOV     R1,#0x6
   2365                 break;
   \   00008D   800E         SJMP    ??zclGetDataTypeLength_10
   2366          
   2367             case ZCL_DATATYPE_UINT56:
   2368             case ZCL_DATATYPE_INT56:
   2369                 len = 7;
   \                     ??zclGetDataTypeLength_6:
   \   00008F   7907         MOV     R1,#0x7
   2370                 break;
   \   000091   800A         SJMP    ??zclGetDataTypeLength_10
   2371          
   2372             case ZCL_DATATYPE_DOUBLE_PREC:
   2373             case ZCL_DATATYPE_IEEE_ADDR:
   2374             case ZCL_DATATYPE_UINT64:
   2375             case ZCL_DATATYPE_INT64:
   2376               len = 8;
   \                     ??zclGetDataTypeLength_7:
   \   000093   7908         MOV     R1,#0x8
   2377               break;
   \   000095   8006         SJMP    ??zclGetDataTypeLength_10
   2378          
   2379              case ZCL_DATATYPE_128_BIT_SEC_KEY:
   2380               len = SEC_KEY_LEN;
   \                     ??zclGetDataTypeLength_8:
   \   000097   7910         MOV     R1,#0x10
   2381               break;
   \   000099   8002         SJMP    ??zclGetDataTypeLength_10
   2382          
   2383              case ZCL_DATATYPE_NO_DATA:
   2384              case ZCL_DATATYPE_UNKNOWN:
   2385                // Fall through
   2386          
   2387              default:
   2388                len = 0;
   \                     ??zclGetDataTypeLength_9:
   \   00009B   7900         MOV     R1,#0x0
   2389                break;
   2390            }
   2391          
   2392            return ( len );
   \                     ??zclGetDataTypeLength_10:
   \   00009D   02....       LJMP    ?Subroutine0 & 0xFFFF
   2393          }
   2394          
   2395          /*********************************************************************
   2396           * @fn      zclGetAttrDataLength
   2397           *
   2398           * @brief   Return the length of the attribute.
   2399           *
   2400           * @param   dataType - data type
   2401           * @param   pData - pointer to data
   2402           *
   2403           * @return  returns atrribute length
   2404           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2405          uint16 zclGetAttrDataLength( uint8 dataType, uint8 *pData )
   \                     zclGetAttrDataLength:
   2406          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
   \   000006   FE           MOV     R6,A
   2407            uint16 dataLen = 0;
   2408          
   2409            if ( dataType == ZCL_DATATYPE_LONG_CHAR_STR || dataType == ZCL_DATATYPE_LONG_OCTET_STR )
   \   000007   7444         MOV     A,#0x44
   \   000009   6E           XRL     A,R6
   \   00000A   6005         JZ      ??zclGetAttrDataLength_0
   \   00000C   7443         MOV     A,#0x43
   \   00000E   6E           XRL     A,R6
   \   00000F   700E         JNZ     ??zclGetAttrDataLength_1
   2410            {
   2411              dataLen = BUILD_UINT16( pData[0], pData[1] ) + 2; // long string length + 2 for length field
   \                     ??zclGetAttrDataLength_0:
   \   000011   8A82         MOV     DPL,R2
   \   000013   8B83         MOV     DPH,R3
   \   000015   12....       LCALL   ?Subroutine115 & 0xFFFF
   2412            }
   \                     ??CrossCallReturnLabel_175:
   \   000018   FA           MOV     R2,A
   \   000019   E9           MOV     A,R1
   \                     ??zclGetAttrDataLength_2:
   \   00001A   3400         ADDC    A,#0x0
   \   00001C   FB           MOV     R3,A
   \   00001D   801C         SJMP    ??zclGetAttrDataLength_3
   2413            else if ( dataType == ZCL_DATATYPE_CHAR_STR || dataType == ZCL_DATATYPE_OCTET_STR )
   \                     ??zclGetAttrDataLength_1:
   \   00001F   7442         MOV     A,#0x42
   \   000021   6E           XRL     A,R6
   \   000022   6005         JZ      ??zclGetAttrDataLength_4
   \   000024   7441         MOV     A,#0x41
   \   000026   6E           XRL     A,R6
   \   000027   700B         JNZ     ??zclGetAttrDataLength_5
   2414            {
   2415              dataLen = *pData + 1; // string length + 1 for length field
   \                     ??zclGetAttrDataLength_4:
   \   000029   8A82         MOV     DPL,R2
   \   00002B   8B83         MOV     DPH,R3
   \   00002D   E0           MOVX    A,@DPTR
   \   00002E   2401         ADD     A,#0x1
   \   000030   FA           MOV     R2,A
   \   000031   E4           CLR     A
   \   000032   80E6         SJMP    ??zclGetAttrDataLength_2
   2416            }
   2417            else
   2418            {
   2419              dataLen = zclGetDataTypeLength( dataType );
   \                     ??zclGetAttrDataLength_5:
   \   000034                ; Setup parameters for call to function zclGetDataTypeLength
   \   000034   12....       LCALL   ??zclGetDataTypeLength?relay
   \   000037   E9           MOV     A,R1
   \   000038   FA           MOV     R2,A
   \   000039   7B00         MOV     R3,#0x0
   2420            }
   2421          
   2422            return ( dataLen );
   \                     ??zclGetAttrDataLength_3:
   \   00003B   02....       LJMP    ?Subroutine7 & 0xFFFF
   2423          }
   2424          
   2425          /*********************************************************************
   2426           * @fn      zclReadAttrData
   2427           *
   2428           * @brief   Read the attribute's current value into pAttrData.
   2429           *
   2430           * @param   pAttrData - where to put attribute data
   2431           * @param   pAttr - pointer to attribute
   2432           * @param   pDataLen - where to put attribute data length
   2433           *
   2434           * @return Success
   2435           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2436          uint8 zclReadAttrData( uint8 *pAttrData, zclAttrRec_t *pAttr, uint16 *pDataLen )
   \                     zclReadAttrData:
   2437          {
   \   000000   74ED         MOV     A,#-0x13
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 19
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
   \   000009   7413         MOV     A,#0x13
   \   00000B   12....       LCALL   ?XSTACK_DISP0_8
   \   00000E   12....       LCALL   ??Subroutine248_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_480:
   \   000011   88..         MOV     ?V0 + 0,R0
   \   000013   89..         MOV     ?V0 + 1,R1
   2438            uint16 dataLen;
   2439          
   2440            dataLen = zclGetAttrDataLength( pAttr->attr.dataType, (uint8*)(pAttr->attr.dataPtr) );
   \   000015   EC           MOV     A,R4
   \   000016   2406         ADD     A,#0x6
   \   000018   F8           MOV     R0,A
   \   000019   ED           MOV     A,R5
   \   00001A   3400         ADDC    A,#0x0
   \   00001C   F9           MOV     R1,A
   \   00001D   88..         MOV     ?V0 + 2,R0
   \   00001F   89..         MOV     ?V0 + 3,R1
   \   000021                ; Setup parameters for call to function zclGetAttrDataLength
   \   000021   8882         MOV     DPL,R0
   \   000023   F583         MOV     DPH,A
   \   000025   12....       LCALL   ??Subroutine234_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_398:
   \   000028   8C82         MOV     DPL,R4
   \   00002A   8D83         MOV     DPH,R5
   \   00002C   A3           INC     DPTR
   \   00002D   12....       LCALL   ?Subroutine94 & 0xFFFF
   \                     ??CrossCallReturnLabel_322:
   \   000030   8A..         MOV     ?V0 + 4,R2
   \   000032   8B..         MOV     ?V0 + 5,R3
   2441            osal_memcpy( pAttrData, pAttr->attr.dataPtr, dataLen );
   \   000034                ; Setup parameters for call to function osal_memcpy
   \   000034   85..82       MOV     DPL,?V0 + 2
   \   000037   85..83       MOV     DPH,?V0 + 3
   \   00003A   12....       LCALL   ?Subroutine70 & 0xFFFF
   \                     ??CrossCallReturnLabel_98:
   \   00003D   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   000040   AC..         MOV     R4,?V0 + 4
   \   000042   AD..         MOV     R5,?V0 + 5
   \   000044   EE           MOV     A,R6
   \   000045   FA           MOV     R2,A
   \   000046   EF           MOV     A,R7
   \   000047   FB           MOV     R3,A
   \   000048   12....       LCALL   ??Subroutine238_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_444:
   \   00004B   12....       LCALL   ?DEALLOC_XSTACK8
   2442          
   2443            if ( pDataLen != NULL )
   \   00004E   E5..         MOV     A,?V0 + 0
   \   000050   45..         ORL     A,?V0 + 1
   \   000052   600D         JZ      ??zclReadAttrData_0
   2444            {
   2445              *pDataLen = dataLen;
   \   000054   85..82       MOV     DPL,?V0 + 0
   \   000057   85..83       MOV     DPH,?V0 + 1
   \   00005A   E5..         MOV     A,?V0 + 4
   \   00005C   F0           MOVX    @DPTR,A
   \   00005D   A3           INC     DPTR
   \   00005E   E5..         MOV     A,?V0 + 5
   \   000060   F0           MOVX    @DPTR,A
   2446            }
   2447          
   2448            return ( ZCL_STATUS_SUCCESS );
   \                     ??zclReadAttrData_0:
   \   000061   7900         MOV     R1,#0x0
   \   000063   7F0B         MOV     R7,#0xb
   \   000065   02....       LJMP    ?BANKED_LEAVE_XDATA
   2449          }
   2450          
   2451          #ifdef ZCL_READ
   2452          /*********************************************************************
   2453           * @fn      zclGetAttrDataLengthUsingCB
   2454           *
   2455           * @brief   Use application's callback to get the length of the attribute's
   2456           *          current value stored in the database.
   2457           *
   2458           * @param   endpoint - application's endpoint
   2459           * @param   clusterId - cluster that attribute belongs to
   2460           * @param   attrId - attribute id
   2461           *
   2462           * @return  returns attribute length
   2463           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2464          static uint16 zclGetAttrDataLengthUsingCB( uint8 endpoint, uint16 clusterId, uint16 attrId )
   \                     zclGetAttrDataLengthUsingCB:
   2465          {
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 2
   \   000005   74FE         MOV     A,#-0x2
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   8A..         MOV     ?V0 + 0,R2
   \   00000C   8B..         MOV     ?V0 + 1,R3
   \   00000E   EC           MOV     A,R4
   \   00000F   FE           MOV     R6,A
   \   000010   ED           MOV     A,R5
   \   000011   FF           MOV     R7,A
   2466            uint16 dataLen = 0;
   \   000012   85..82       MOV     DPL,?XSP + 0
   \   000015   85..83       MOV     DPH,?XSP + 1
   \   000018   E4           CLR     A
   \   000019   F0           MOVX    @DPTR,A
   \   00001A   A3           INC     DPTR
   \   00001B   F0           MOVX    @DPTR,A
   2467            zclReadWriteCB_t pfnReadWriteCB = zclGetReadWriteCB( endpoint );
   \   00001C                ; Setup parameters for call to function zclGetReadWriteCB
   \   00001C   12....       LCALL   ??zclGetReadWriteCB?relay
   \   00001F   8A..         MOV     ?V0 + 4,R2
   \   000021   8B..         MOV     ?V0 + 5,R3
   2468          
   2469            if ( pfnReadWriteCB != NULL )
   \   000023   EA           MOV     A,R2
   \   000024   45..         ORL     A,?V0 + 5
   \   000026   6033         JZ      ??zclGetAttrDataLengthUsingCB_0
   2470            {
   2471              // Only get the attribute length
   2472              (*pfnReadWriteCB)( clusterId, attrId, ZCL_OPER_LEN, NULL, &dataLen );
   \   000028                ; Setup parameters for indirect call
   \   000028   85..82       MOV     DPL,?XSP + 0
   \   00002B   85..83       MOV     DPH,?XSP + 1
   \   00002E   8582..       MOV     ?V0 + 6,DPL
   \   000031   8583..       MOV     ?V0 + 7,DPH
   \   000034   78..         MOV     R0,#?V0 + 6
   \   000036   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000039   E4           CLR     A
   \   00003A   F5..         MOV     ?V0 + 6,A
   \   00003C   F5..         MOV     ?V0 + 7,A
   \   00003E   78..         MOV     R0,#?V0 + 6
   \   000040   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000043   7900         MOV     R1,#0x0
   \   000045   EE           MOV     A,R6
   \   000046   FC           MOV     R4,A
   \   000047   EF           MOV     A,R7
   \   000048   FD           MOV     R5,A
   \   000049   AA..         MOV     R2,?V0 + 0
   \   00004B   AB..         MOV     R3,?V0 + 1
   \   00004D   85..82       MOV     DPL,?V0 + 4
   \   000050   85..83       MOV     DPH,?V0 + 5
   \   000053   12....       LCALL   ?CALL_IND
   \   000056   7404         MOV     A,#0x4
   \   000058   12....       LCALL   ?DEALLOC_XSTACK8
   2473            }
   2474          
   2475            return ( dataLen );
   \                     ??zclGetAttrDataLengthUsingCB_0:
   \   00005B   85..82       MOV     DPL,?XSP + 0
   \   00005E   85..83       MOV     DPH,?XSP + 1
   \   000061   12....       LCALL   ??Subroutine234_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_399:
   \   000064   7402         MOV     A,#0x2
   \   000066   12....       LCALL   ?DEALLOC_XSTACK8
   \   000069   02....       LJMP    ?Subroutine9 & 0xFFFF
   2476          }
   2477          
   2478          /*********************************************************************
   2479           * @fn      zclReadAttrDataUsingCB
   2480           *
   2481           * @brief   Use application's callback to read the attribute's current
   2482           *          value stored in the database.
   2483           *
   2484           * @param   endpoint - application's endpoint
   2485           * @param   clusterId - cluster that attribute belongs to
   2486           * @param   attrId - attribute id
   2487           * @param   pAttrData - where to put attribute data
   2488           * @param   pDataLen - where to put attribute data length
   2489           *
   2490           * @return  Successful if data was read
   2491           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2492          static ZStatus_t zclReadAttrDataUsingCB( uint8 endpoint, uint16 clusterId, uint16 attrId,
   \                     zclReadAttrDataUsingCB:
   2493                                                   uint8 *pAttrData, uint16 *pDataLen )
   2494          {
   \   000000   74EC         MOV     A,#-0x14
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 20
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV     ?V0 + 0,R2
   \   000007   8B..         MOV     ?V0 + 1,R3
   \   000009   EC           MOV     A,R4
   \   00000A   FE           MOV     R6,A
   \   00000B   ED           MOV     A,R5
   \   00000C   FF           MOV     R7,A
   \   00000D   7414         MOV     A,#0x14
   \   00000F   12....       LCALL   ?XSTACK_DISP0_8
   \   000012   12....       LCALL   ?Subroutine77 & 0xFFFF
   \                     ??CrossCallReturnLabel_111:
   \   000015   7416         MOV     A,#0x16
   \   000017   12....       LCALL   ?XSTACK_DISP0_8
   \   00001A   12....       LCALL   ??Subroutine255_0 & 0xFFFF
   2495            zclReadWriteCB_t pfnReadWriteCB = zclGetReadWriteCB( endpoint );
   \                     ??CrossCallReturnLabel_525:
   \   00001D                ; Setup parameters for call to function zclGetReadWriteCB
   \   00001D   12....       LCALL   ??zclGetReadWriteCB?relay
   \   000020   8A..         MOV     ?V0 + 2,R2
   \   000022   8B..         MOV     ?V0 + 3,R3
   2496          
   2497            if ( pDataLen != NULL )
   \   000024   E5..         MOV     A,?V0 + 8
   \   000026   45..         ORL     A,?V0 + 9
   \   000028   600A         JZ      ??zclReadAttrDataUsingCB_0
   2498            {
   2499              *pDataLen = 0; // Always initialize it to 0
   \   00002A   85..82       MOV     DPL,?V0 + 8
   \   00002D   85..83       MOV     DPH,?V0 + 9
   \   000030   E4           CLR     A
   \   000031   F0           MOVX    @DPTR,A
   \   000032   A3           INC     DPTR
   \   000033   F0           MOVX    @DPTR,A
   2500            }
   2501          
   2502            if ( pfnReadWriteCB != NULL )
   \                     ??zclReadAttrDataUsingCB_0:
   \   000034   EA           MOV     A,R2
   \   000035   45..         ORL     A,?V0 + 3
   \   000037   6024         JZ      ??zclReadAttrDataUsingCB_1
   2503            {
   2504              // Read the attribute value and its length
   2505              return ( (*pfnReadWriteCB)( clusterId, attrId, ZCL_OPER_READ, pAttrData, pDataLen ) );
   \   000039                ; Setup parameters for indirect call
   \   000039   78..         MOV     R0,#?V0 + 8
   \   00003B   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00003E   78..         MOV     R0,#?V0 + 6
   \   000040   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000043   7901         MOV     R1,#0x1
   \   000045   EE           MOV     A,R6
   \   000046   FC           MOV     R4,A
   \   000047   EF           MOV     A,R7
   \   000048   FD           MOV     R5,A
   \   000049   AA..         MOV     R2,?V0 + 0
   \   00004B   AB..         MOV     R3,?V0 + 1
   \   00004D   85..82       MOV     DPL,?V0 + 2
   \   000050   85..83       MOV     DPH,?V0 + 3
   \   000053   12....       LCALL   ?CALL_IND
   \   000056   7404         MOV     A,#0x4
   \   000058   12....       LCALL   ?DEALLOC_XSTACK8
   \   00005B   8002         SJMP    ??zclReadAttrDataUsingCB_2
   2506            }
   2507          
   2508            return ( ZCL_STATUS_SOFTWARE_FAILURE );
   \                     ??zclReadAttrDataUsingCB_1:
   \   00005D   79C1         MOV     R1,#-0x3f
   \                     ??zclReadAttrDataUsingCB_2:
   \   00005F   80..         SJMP    ??Subroutine231_0
   2509          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine231_0:
   \   000000   7F0C         MOV     R7,#0xc
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine255_0:
   \   000000   12....       LCALL   ?Subroutine173 & 0xFFFF
   \                     ??CrossCallReturnLabel_531:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine77:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F5..         MOV     ?V0 + 6,A
   \   000003   A3           INC     DPTR
   \   000004   E0           MOVX    A,@DPTR
   \   000005   F5..         MOV     ?V0 + 7,A
   \   000007   22           RET
   2510          
   2511          /*********************************************************************
   2512           * @fn      zclAuthorizeRead
   2513           *
   2514           * @brief   Use application's callback to authorize a Read operation
   2515           *          on a given attribute.
   2516           *
   2517           * @param   endpoint - application's endpoint
   2518           * @param   srcAddr - source Address
   2519           * @param   pAttr - pointer to attribute
   2520           *
   2521           * @return  ZCL_STATUS_SUCCESS: Operation authorized
   2522           *          ZCL_STATUS_NOT_AUTHORIZED: Operation not authorized
   2523           */
   2524          static ZStatus_t zclAuthorizeRead( uint8 endpoint, afAddrType_t *srcAddr, zclAttrRec_t *pAttr )
   2525          {
   2526            if ( zcl_AccessCtrlAuthRead( pAttr->attr.accessControl ) )
   2527            {
   2528              zclAuthorizeCB_t pfnAuthorizeCB = zclGetAuthorizeCB( endpoint );
   2529          
   2530              if ( pfnAuthorizeCB != NULL )
   2531              {
   2532                return ( (*pfnAuthorizeCB)( srcAddr, pAttr, ZCL_OPER_READ ) );
   2533              }
   2534            }
   2535          
   2536            return ( ZCL_STATUS_SUCCESS );
   2537          }
   2538          #endif // ZCL_READ
   2539          
   2540          #ifdef ZCL_WRITE
   2541          /*********************************************************************
   2542           * @fn      zclWriteAttrData
   2543           *
   2544           * @brief   Write the received data.
   2545           *
   2546           * @param   endpoint - application's endpoint
   2547           * @param   pAttr - where to write data to
   2548           * @param   pWriteRec - data to be written
   2549           *
   2550           * @return  Successful if data was written
   2551           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2552          static ZStatus_t zclWriteAttrData( uint8 endpoint, afAddrType_t *srcAddr,
   \                     zclWriteAttrData:
   2553                                             zclAttrRec_t *pAttr, zclWriteRec_t *pWriteRec )
   2554          {
   \   000000   74F1         MOV     A,#-0xf
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 15
   \   000005                ; Auto size: 0
   \   000005   EC           MOV     A,R4
   \   000006   FE           MOV     R6,A
   \   000007   ED           MOV     A,R5
   \   000008   FF           MOV     R7,A
   \   000009   740F         MOV     A,#0xf
   \   00000B   12....       LCALL   ?XSTACK_DISP0_8
   \   00000E   E0           MOVX    A,@DPTR
   \   00000F   F5..         MOV     ?V0 + 0,A
   \   000011   A3           INC     DPTR
   \   000012   E0           MOVX    A,@DPTR
   \   000013   F5..         MOV     ?V0 + 1,A
   2555            uint8 status;
   2556          
   2557            if ( zcl_AccessCtrlWrite( pAttr->attr.accessControl ) )
   \   000015   8E82         MOV     DPL,R6
   \   000017   8F83         MOV     DPH,R7
   \   000019   A3           INC     DPTR
   \   00001A   A3           INC     DPTR
   \   00001B   A3           INC     DPTR
   \   00001C   A3           INC     DPTR
   \   00001D   A3           INC     DPTR
   \   00001E   E0           MOVX    A,@DPTR
   \   00001F   A2E1         MOV     C,0xE0 /* A   */.1
   \   000021   5063         JNC     ??zclWriteAttrData_0
   2558            {
   2559              status = zclAuthorizeWrite( endpoint, srcAddr, pAttr );
   \   000023                ; Setup parameters for call to function zclAuthorizeWrite
   \   000023   12....       LCALL   ??zclAuthorizeWrite?relay
   \   000026   E9           MOV     A,R1
   \   000027   F5..         MOV     ?V0 + 3,A
   2560              if ( status == ZCL_STATUS_SUCCESS )
   \   000029   705E         JNZ     ??zclWriteAttrData_1
   2561              {
   2562                if ( ( zcl_ValidateAttrDataCB == NULL ) || zcl_ValidateAttrDataCB( pAttr, pWriteRec ) )
   \   00002B   90....       MOV     DPTR,#zcl_ValidateAttrDataCB
   \   00002E   12....       LCALL   ??Subroutine258_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_546:
   \   000031   6013         JZ      ??zclWriteAttrData_2
   \   000033                ; Setup parameters for indirect call
   \   000033   AC..         MOV     R4,?V0 + 0
   \   000035   AD..         MOV     R5,?V0 + 1
   \   000037   EE           MOV     A,R6
   \   000038   FA           MOV     R2,A
   \   000039   EF           MOV     A,R7
   \   00003A   FB           MOV     R3,A
   \   00003B   E0           MOVX    A,@DPTR
   \   00003C   F583         MOV     DPH,A
   \   00003E   8882         MOV     DPL,R0
   \   000040   12....       LCALL   ?CALL_IND
   \   000043   E9           MOV     A,R1
   \   000044   603B         JZ      ??zclWriteAttrData_3
   2563                {
   2564                  // Write the attribute value
   2565                  uint16 len = zclGetAttrDataLength( pAttr->attr.dataType, pWriteRec->attrData );
   \                     ??zclWriteAttrData_2:
   \   000046   E5..         MOV     A,?V0 + 0
   \   000048   2403         ADD     A,#0x3
   \   00004A   F8           MOV     R0,A
   \   00004B   E5..         MOV     A,?V0 + 1
   \   00004D   12....       LCALL   ?Subroutine134 & 0xFFFF
   \                     ??CrossCallReturnLabel_201:
   \   000050   12....       LCALL   ?Subroutine78 & 0xFFFF
   \                     ??CrossCallReturnLabel_117:
   \   000053   12....       LCALL   ??zclGetAttrDataLength?relay
   \   000056   8A..         MOV     ?V0 + 4,R2
   \   000058   8B..         MOV     ?V0 + 5,R3
   \   00005A   AC..         MOV     R4,?V0 + 4
   \   00005C   AD..         MOV     R5,?V0 + 5
   2566                  osal_memcpy( pAttr->attr.dataPtr, pWriteRec->attrData, len );
   \   00005E                ; Setup parameters for call to function osal_memcpy
   \   00005E   85..82       MOV     DPL,?V0 + 0
   \   000061   85..83       MOV     DPH,?V0 + 1
   \   000064   12....       LCALL   ?Subroutine102 & 0xFFFF
   \                     ??CrossCallReturnLabel_153:
   \   000067   75..00       MOV     ?V0 + 6,#0x0
   \   00006A   78..         MOV     R0,#?V0 + 4
   \   00006C   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   00006F   8E82         MOV     DPL,R6
   \   000071   8F83         MOV     DPH,R7
   \   000073   A3           INC     DPTR
   \   000074   A3           INC     DPTR
   \   000075   A3           INC     DPTR
   \   000076   A3           INC     DPTR
   \   000077   A3           INC     DPTR
   \   000078   A3           INC     DPTR
   \   000079   12....       LCALL   ?Subroutine93 & 0xFFFF
   \                     ??CrossCallReturnLabel_139:
   \   00007C   12....       LCALL   ?DEALLOC_XSTACK8
   2567          
   2568                  status = ZCL_STATUS_SUCCESS;
   \   00007F   8008         SJMP    ??zclWriteAttrData_1
   2569                }
   2570                else
   2571                {
   2572                  status = ZCL_STATUS_INVALID_VALUE;
   \                     ??zclWriteAttrData_3:
   \   000081   75..87       MOV     ?V0 + 3,#-0x79
   \   000084   8003         SJMP    ??zclWriteAttrData_1
   2573                }
   2574              }
   2575            }
   2576            else
   2577            {
   2578              status = ZCL_STATUS_READ_ONLY;
   \                     ??zclWriteAttrData_0:
   \   000086   75..88       MOV     ?V0 + 3,#-0x78
   2579            }
   2580          
   2581            return ( status );
   \                     ??zclWriteAttrData_1:
   \   000089   A9..         MOV     R1,?V0 + 3
   \   00008B   7F07         MOV     R7,#0x7
   \   00008D   02....       LJMP    ?BANKED_LEAVE_XDATA
   2582          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine102:
   \   000000   12....       LCALL   ?Subroutine169 & 0xFFFF
   \                     ??CrossCallReturnLabel_253:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine93:
   \   000000   12....       LCALL   ?Subroutine172 & 0xFFFF
   \                     ??CrossCallReturnLabel_414:
   \   000003   12....       LCALL   ??osal_memcpy?relay
   \   000006   7403         MOV     A,#0x3
   \   000008   22           RET
   2583          
   2584          /*********************************************************************
   2585           * @fn      zclWriteAttrDataUsingCB
   2586           *
   2587           * @brief   Use application's callback to write the attribute's current
   2588           *          value stored in the database.
   2589           *
   2590           * @param   endpoint - application's endpoint
   2591           * @param   pAttr - where to write data to
   2592           * @param   pAttrData - data to be written
   2593           *
   2594           * @return  Successful if data was written
   2595           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2596          static ZStatus_t zclWriteAttrDataUsingCB( uint8 endpoint, afAddrType_t *srcAddr,
   \                     zclWriteAttrDataUsingCB:
   2597                                                    zclAttrRec_t *pAttr, uint8 *pAttrData )
   2598          {
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 0
   \   000005   89..         MOV     ?V0 + 0,R1
   \   000007   EC           MOV     A,R4
   \   000008   FE           MOV     R6,A
   \   000009   ED           MOV     A,R5
   \   00000A   FF           MOV     R7,A
   \   00000B   7410         MOV     A,#0x10
   \   00000D   12....       LCALL   ?XSTACK_DISP0_8
   \   000010   12....       LCALL   ?Subroutine102 & 0xFFFF
   2599            uint8 status;
   2600          
   2601            if ( zcl_AccessCtrlWrite( pAttr->attr.accessControl ) )
   \                     ??CrossCallReturnLabel_154:
   \   000013   8E82         MOV     DPL,R6
   \   000015   8F83         MOV     DPH,R7
   \   000017   A3           INC     DPTR
   \   000018   A3           INC     DPTR
   \   000019   A3           INC     DPTR
   \   00001A   A3           INC     DPTR
   \   00001B   A3           INC     DPTR
   \   00001C   E0           MOVX    A,@DPTR
   \   00001D   A2E1         MOV     C,0xE0 /* A   */.1
   \   00001F   5049         JNC     ??zclWriteAttrDataUsingCB_0
   2602            {
   2603              status = zclAuthorizeWrite( endpoint, srcAddr, pAttr );
   \   000021                ; Setup parameters for call to function zclAuthorizeWrite
   \   000021   12....       LCALL   ??zclAuthorizeWrite?relay
   \   000024   E9           MOV     A,R1
   2604              if ( status == ZCL_STATUS_SUCCESS )
   \   000025   7045         JNZ     ??zclWriteAttrDataUsingCB_1
   2605              {
   2606                zclReadWriteCB_t pfnReadWriteCB = zclGetReadWriteCB( endpoint );
   \   000027                ; Setup parameters for call to function zclGetReadWriteCB
   \   000027   A9..         MOV     R1,?V0 + 0
   \   000029   12....       LCALL   ??zclGetReadWriteCB?relay
   \   00002C   8A..         MOV     ?V0 + 2,R2
   \   00002E   8B..         MOV     ?V0 + 3,R3
   2607                if ( pfnReadWriteCB != NULL )
   \   000030   EA           MOV     A,R2
   \   000031   45..         ORL     A,?V0 + 3
   \   000033   6031         JZ      ??zclWriteAttrDataUsingCB_2
   2608                {
   2609                  // Write the attribute value
   2610                  status = (*pfnReadWriteCB)( pAttr->clusterID, pAttr->attr.attrId,
   2611                                              ZCL_OPER_WRITE, pAttrData, NULL );
   \   000035                ; Setup parameters for indirect call
   \   000035   E4           CLR     A
   \   000036   F5..         MOV     ?V0 + 6,A
   \   000038   F5..         MOV     ?V0 + 7,A
   \   00003A   78..         MOV     R0,#?V0 + 6
   \   00003C   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00003F   78..         MOV     R0,#?V0 + 4
   \   000041   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000044   7902         MOV     R1,#0x2
   \   000046   8E82         MOV     DPL,R6
   \   000048   8F83         MOV     DPH,R7
   \   00004A   A3           INC     DPTR
   \   00004B   A3           INC     DPTR
   \   00004C   12....       LCALL   ??Subroutine235_0 & 0xFFFF
   2612                }
   \                     ??CrossCallReturnLabel_423:
   \   00004F   8E82         MOV     DPL,R6
   \   000051   8F83         MOV     DPH,R7
   \   000053   12....       LCALL   ??Subroutine234_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_400:
   \   000056   85..82       MOV     DPL,?V0 + 2
   \   000059   85..83       MOV     DPH,?V0 + 3
   \   00005C   12....       LCALL   ?CALL_IND
   \   00005F   7404         MOV     A,#0x4
   \   000061   12....       LCALL   ?DEALLOC_XSTACK8
   \   000064   8006         SJMP    ??zclWriteAttrDataUsingCB_1
   2613                else
   2614                {
   2615                  status = ZCL_STATUS_SOFTWARE_FAILURE;
   \                     ??zclWriteAttrDataUsingCB_2:
   \   000066   79C1         MOV     R1,#-0x3f
   \   000068   8002         SJMP    ??zclWriteAttrDataUsingCB_1
   2616                }
   2617              }
   2618            }
   2619            else
   2620            {
   2621              status = ZCL_STATUS_READ_ONLY;
   \                     ??zclWriteAttrDataUsingCB_0:
   \   00006A   7988         MOV     R1,#-0x78
   2622            }
   2623          
   2624            return ( status );
   \                     ??zclWriteAttrDataUsingCB_1:
   \   00006C   02....       LJMP    ?Subroutine9 & 0xFFFF
   2625          }
   2626          
   2627          /*********************************************************************
   2628           * @fn      zclAuthorizeWrite
   2629           *
   2630           * @brief   Use application's callback to authorize a Write operation
   2631           *          on a given attribute.
   2632           *
   2633           * @param   endpoint - application's endpoint
   2634           * @param   srcAddr - source Address
   2635           * @param   pAttr - pointer to attribute
   2636           *
   2637           * @return  ZCL_STATUS_SUCCESS: Operation authorized
   2638           *          ZCL_STATUS_NOT_AUTHORIZED: Operation not authorized
   2639           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2640          static ZStatus_t zclAuthorizeWrite( uint8 endpoint, afAddrType_t *srcAddr, zclAttrRec_t *pAttr )
   \                     zclAuthorizeWrite:
   2641          {
   \   000000   74F2         MOV     A,#-0xe
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
   \   000009   8C..         MOV     ?V0 + 0,R4
   \   00000B   8D..         MOV     ?V0 + 1,R5
   2642            if ( zcl_AccessCtrlAuthWrite( pAttr->attr.accessControl ) )
   \   00000D   8C82         MOV     DPL,R4
   \   00000F   8D83         MOV     DPH,R5
   \   000011   A3           INC     DPTR
   \   000012   A3           INC     DPTR
   \   000013   A3           INC     DPTR
   \   000014   A3           INC     DPTR
   \   000015   A3           INC     DPTR
   \   000016   E0           MOVX    A,@DPTR
   \   000017   A2E5         MOV     C,0xE0 /* A   */.5
   \   000019   501C         JNC     ??zclAuthorizeWrite_0
   2643            {
   2644              zclAuthorizeCB_t pfnAuthorizeCB = zclGetAuthorizeCB( endpoint );
   \   00001B                ; Setup parameters for call to function zclGetAuthorizeCB
   \   00001B   12....       LCALL   ??zclGetAuthorizeCB?relay
   \   00001E   8A82         MOV     DPL,R2
   \   000020   8B83         MOV     DPH,R3
   2645          
   2646              if ( pfnAuthorizeCB != NULL )
   \   000022   E582         MOV     A,DPL
   \   000024   4583         ORL     A,DPH
   \   000026   600F         JZ      ??zclAuthorizeWrite_0
   2647              {
   2648                return ( (*pfnAuthorizeCB)( srcAddr, pAttr, ZCL_OPER_WRITE ) );
   \   000028                ; Setup parameters for indirect call
   \   000028   7902         MOV     R1,#0x2
   \   00002A   AC..         MOV     R4,?V0 + 0
   \   00002C   AD..         MOV     R5,?V0 + 1
   \   00002E   EE           MOV     A,R6
   \   00002F   FA           MOV     R2,A
   \   000030   EF           MOV     A,R7
   \   000031   FB           MOV     R3,A
   \   000032   12....       LCALL   ?CALL_IND
   \   000035   8002         SJMP    ??zclAuthorizeWrite_1
   2649              }
   2650            }
   2651          
   2652            return ( ZCL_STATUS_SUCCESS );
   \                     ??zclAuthorizeWrite_0:
   \   000037   7900         MOV     R1,#0x0
   \                     ??zclAuthorizeWrite_1:
   \   000039   02....       LJMP    ?Subroutine2 & 0xFFFF
   2653          }
   2654          #endif // ZCL_WRITE
   2655          
   2656          #ifdef ZCL_READ
   2657          /*********************************************************************
   2658           * @fn      zclParseInReadCmd
   2659           *
   2660           * @brief   Parse the "Profile" Read Commands
   2661           *
   2662           *      NOTE: THIS FUNCTION ALLOCATES THE RETURN BUFFER, SO THE CALLING
   2663           *            FUNCTION IS RESPONSIBLE TO FREE THE MEMORY.
   2664           *
   2665           * @param   pCmd - pointer to incoming data to parse
   2666           *
   2667           * @return  pointer to the parsed command structure
   2668           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2669          void *zclParseInReadCmd( zclParseCmd_t *pCmd )
   \                     zclParseInReadCmd:
   2670          {
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV     ?V0 + 0,R2
   \   000007   8B..         MOV     ?V0 + 1,R3
   2671            zclReadCmd_t *readCmd;
   2672            uint8 *pBuf = pCmd->pData;
   \   000009   12....       LCALL   ?Subroutine75 & 0xFFFF
   2673          
   2674            readCmd = (zclReadCmd_t *)osal_mem_alloc( sizeof ( zclReadCmd_t ) + pCmd->dataLen );
   \                     ??CrossCallReturnLabel_106:
   \   00000C   12....       LCALL   ?Subroutine105 & 0xFFFF
   2675            if ( readCmd != NULL )
   \                     ??CrossCallReturnLabel_160:
   \   00000F   6050         JZ      ??zclParseInReadCmd_0
   2676            {
   2677              readCmd->numAttr = pCmd->dataLen / 2; // Atrribute ID
   \   000011   85..82       MOV     DPL,?V0 + 0
   \   000014   85..83       MOV     DPH,?V0 + 1
   \   000017   A3           INC     DPTR
   \   000018   E0           MOVX    A,@DPTR
   \   000019   F8           MOV     R0,A
   \   00001A   A3           INC     DPTR
   \   00001B   E0           MOVX    A,@DPTR
   \   00001C   C3           CLR     C
   \   00001D   13           RRC     A
   \   00001E   E8           MOV     A,R0
   \   00001F   13           RRC     A
   \   000020   8A82         MOV     DPL,R2
   \   000022   8B83         MOV     DPH,R3
   \   000024   F0           MOVX    @DPTR,A
   2678              for ( uint8 i = 0; i < readCmd->numAttr; i++ )
   \   000025   75..00       MOV     ?V0 + 0,#0x0
   \   000028   802B         SJMP    ??zclParseInReadCmd_1
   2679              {
   2680                readCmd->attrID[i] = BUILD_UINT16( pBuf[0], pBuf[1] );
   \                     ??zclParseInReadCmd_2:
   \   00002A   8E82         MOV     DPL,R6
   \   00002C   8F83         MOV     DPH,R7
   \   00002E   12....       LCALL   ?Subroutine179 & 0xFFFF
   \                     ??CrossCallReturnLabel_265:
   \   000031   2400         ADD     A,#0x0
   \   000033   E4           CLR     A
   \   000034   39           ADDC    A,R1
   \   000035   FD           MOV     R5,A
   \   000036   E5..         MOV     A,?V0 + 0
   \   000038   33           RLC     A
   \   000039   F8           MOV     R0,A
   \   00003A   E4           CLR     A
   \   00003B   33           RLC     A
   \   00003C   F9           MOV     R1,A
   \   00003D   EA           MOV     A,R2
   \   00003E   28           ADD     A,R0
   \   00003F   F582         MOV     DPL,A
   \   000041   EB           MOV     A,R3
   \   000042   12....       LCALL   ?Subroutine205 & 0xFFFF
   \                     ??CrossCallReturnLabel_315:
   \   000045   EC           MOV     A,R4
   \   000046   F0           MOVX    @DPTR,A
   \   000047   A3           INC     DPTR
   \   000048   ED           MOV     A,R5
   \   000049   F0           MOVX    @DPTR,A
   2681                pBuf += 2;
   \   00004A   EE           MOV     A,R6
   \   00004B   2402         ADD     A,#0x2
   \   00004D   EF           MOV     A,R7
   \   00004E   3400         ADDC    A,#0x0
   \   000050   0E           INC     R6
   \   000051   0E           INC     R6
   \   000052   FF           MOV     R7,A
   2682              }
   \   000053   05..         INC     ?V0 + 0
   \                     ??zclParseInReadCmd_1:
   \   000055   8A82         MOV     DPL,R2
   \   000057   8B83         MOV     DPH,R3
   \   000059   E0           MOVX    A,@DPTR
   \   00005A   F8           MOV     R0,A
   \   00005B   E5..         MOV     A,?V0 + 0
   \   00005D   C3           CLR     C
   \   00005E   98           SUBB    A,R0
   \   00005F   40C9         JC      ??zclParseInReadCmd_2
   2683            }
   2684          
   2685            return ( (void *)readCmd );
   \                     ??zclParseInReadCmd_0:
   \   000061   02....       LJMP    ?Subroutine1 & 0xFFFF
   2686          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine105:
   \   000000   2401         ADD     A,#0x1
   \   000002   FA           MOV     R2,A
   \   000003   A3           INC     DPTR
   \   000004   E0           MOVX    A,@DPTR
   \   000005   12....       LCALL   ?Subroutine193 & 0xFFFF
   \                     ??CrossCallReturnLabel_279:
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine75:
   \   000000   12....       LCALL   ?Subroutine168 & 0xFFFF
   \                     ??CrossCallReturnLabel_516:
   \   000003                ; Setup parameters for call to function osal_mem_alloc
   \   000003   8A82         MOV     DPL,R2
   \   000005   8B83         MOV     DPH,R3
   \   000007   A3           INC     DPTR
   \   000008   E0           MOVX    A,@DPTR
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine193:
   \   000000   3400         ADDC    A,#0x0
   \   000002   FB           MOV     R3,A
   \   000003   12....       LCALL   ??osal_mem_alloc?relay
   \   000006   EA           MOV     A,R2
   \   000007   4B           ORL     A,R3
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine168:
   \   000000   8A82         MOV     DPL,R2
   \   000002   8B83         MOV     DPH,R3
   \   000004                REQUIRE ??Subroutine252_0
   \   000004                ; // Fall through to label ??Subroutine252_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine252_0:
   \   000000   A3           INC     DPTR
   \   000001   A3           INC     DPTR
   \   000002   A3           INC     DPTR
   \   000003                REQUIRE ??Subroutine253_0
   \   000003                ; // Fall through to label ??Subroutine253_0
   2687          
   2688          /*********************************************************************
   2689           * @fn      zclParseInReadRspCmd
   2690           *
   2691           * @brief   Parse the "Profile" Read Response Commands
   2692           *
   2693           *      NOTE: THIS FUNCTION ALLOCATES THE RETURN BUFFER, SO THE CALLING
   2694           *            FUNCTION IS RESPONSIBLE TO FREE THE MEMORY.
   2695           *
   2696           * @param   pCmd - pointer to incoming data to parse
   2697           *
   2698           * @return  pointer to the parsed command structure
   2699           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2700          static void *zclParseInReadRspCmd( zclParseCmd_t *pCmd )
   \                     zclParseInReadRspCmd:
   2701          {
   \   000000   74EA         MOV     A,#-0x16
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 22
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV     ?V0 + 4,R2
   \   000007   8B..         MOV     ?V0 + 5,R3
   2702            zclReadRspCmd_t *readRspCmd;
   2703            uint8 *pBuf = pCmd->pData;
   \   000009   12....       LCALL   ??Subroutine243_0 & 0xFFFF
   2704            uint8 *dataPtr;
   2705            uint8 numAttr = 0;
   2706            uint8 hdrLen;
   2707            uint16 dataLen = 0;
   \                     ??CrossCallReturnLabel_459:
   \   00000C   75..00       MOV     ?V0 + 6,#0x0
   \   00000F   75..00       MOV     ?V0 + 7,#0x0
   \   000012   802C         SJMP    ??zclParseInReadRspCmd_0
   2708            uint16 attrDataLen;
   2709          
   2710            // find out the number of attributes and the length of attribute data
   2711            while ( pBuf < ( pCmd->pData + pCmd->dataLen ) )
   2712            {
   2713              uint8 status;
   2714          
   2715              numAttr++;
   \                     ??zclParseInReadRspCmd_1:
   \   000014   12....       LCALL   ?Subroutine147 & 0xFFFF
   2716              pBuf += 2; // move pass attribute id
   2717          
   2718              status = *pBuf++;
   \                     ??CrossCallReturnLabel_434:
   \   000017   8E82         MOV     DPL,R6
   \   000019   8F83         MOV     DPH,R7
   \   00001B   E0           MOVX    A,@DPTR
   \   00001C   A3           INC     DPTR
   \   00001D   AE82         MOV     R6,DPL
   \   00001F   AF83         MOV     R7,DPH
   2719              if ( status == ZCL_STATUS_SUCCESS )
   \   000021   701D         JNZ     ??zclParseInReadRspCmd_0
   2720              {
   2721                uint8 dataType = *pBuf++;
   \   000023   E0           MOVX    A,@DPTR
   \   000024   F9           MOV     R1,A
   \   000025   A3           INC     DPTR
   \   000026   0E           INC     R6
   \   000027   12....       LCALL   ?Subroutine187 & 0xFFFF
   2722          
   2723                attrDataLen = zclGetAttrDataLength( dataType, pBuf );
   2724                pBuf += attrDataLen; // move pass attribute data
   2725          
   2726                // add padding if needed
   2727                if ( PADDING_NEEDED( attrDataLen ) )
   \                     ??CrossCallReturnLabel_273:
   \   00002A   5008         JNC     ??CrossCallReturnLabel_500
   2728                {
   2729                  attrDataLen++;
   \   00002C   2401         ADD     A,#0x1
   \   00002E   F5..         MOV     ?V0 + 0,A
   \   000030   EB           MOV     A,R3
   \   000031   12....       LCALL   ??Subroutine251_0 & 0xFFFF
   2730                }
   2731          
   2732                dataLen += attrDataLen;
   \                     ??CrossCallReturnLabel_500:
   \   000034   E5..         MOV     A,?V0 + 6
   \   000036   25..         ADD     A,?V0 + 0
   \   000038   F5..         MOV     ?V0 + 6,A
   \   00003A   E5..         MOV     A,?V0 + 7
   \   00003C   35..         ADDC    A,?V0 + 1
   \   00003E   F5..         MOV     ?V0 + 7,A
   2733              }
   2734            }
   \                     ??zclParseInReadRspCmd_0:
   \   000040   85..82       MOV     DPL,?V0 + 4
   \   000043   85..83       MOV     DPH,?V0 + 5
   \   000046   A3           INC     DPTR
   \   000047   12....       LCALL   ??Subroutine248_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_481:
   \   00004A   85..82       MOV     DPL,?V0 + 4
   \   00004D   85..83       MOV     DPH,?V0 + 5
   \   000050   12....       LCALL   ?Subroutine163 & 0xFFFF
   \                     ??CrossCallReturnLabel_240:
   \   000053   40BF         JC      ??zclParseInReadRspCmd_1
   2735          
   2736            // calculate the length of the response header
   2737            hdrLen = sizeof( zclReadRspCmd_t ) + ( numAttr * sizeof( zclReadRspStatus_t ) );
   \   000055   75F006       MOV     B,#0x6
   \   000058   E5..         MOV     A,?V0 + 2
   \   00005A   A4           MUL     AB
   \   00005B   04           INC     A
   \   00005C   F5..         MOV     ?V0 + 8,A
   2738          
   2739            readRspCmd = (zclReadRspCmd_t *)osal_mem_alloc( hdrLen + dataLen );
   \   00005E                ; Setup parameters for call to function osal_mem_alloc
   \   00005E   25..         ADD     A,?V0 + 6
   \   000060   FA           MOV     R2,A
   \   000061   E4           CLR     A
   \   000062   35..         ADDC    A,?V0 + 7
   \   000064   12....       LCALL   ??Subroutine241_0 & 0xFFFF
   2740            if ( readRspCmd != NULL )
   \                     ??CrossCallReturnLabel_453:
   \   000067   7003         JNZ     $+5
   \   000069   02....       LJMP    ??zclParseInReadRspCmd_2 & 0xFFFF
   2741            {
   2742              pBuf = pCmd->pData;
   \   00006C   85..82       MOV     DPL,?V0 + 4
   \   00006F   85..83       MOV     DPH,?V0 + 5
   \   000072   12....       LCALL   ??Subroutine239_0 & 0xFFFF
   2743              dataPtr = (uint8 *)( (uint8 *)readRspCmd + hdrLen );
   \                     ??CrossCallReturnLabel_448:
   \   000075   EA           MOV     A,R2
   \   000076   25..         ADD     A,?V0 + 8
   \   000078   F5..         MOV     ?V0 + 8,A
   \   00007A   EB           MOV     A,R3
   \   00007B   3400         ADDC    A,#0x0
   \   00007D   F5..         MOV     ?V0 + 9,A
   2744          
   2745              readRspCmd->numAttr = numAttr;
   \   00007F   8A82         MOV     DPL,R2
   \   000081   8B83         MOV     DPH,R3
   \   000083   E5..         MOV     A,?V0 + 2
   \   000085   F0           MOVX    @DPTR,A
   2746              for ( uint8 i = 0; i < numAttr; i++ )
   \   000086   75..00       MOV     ?V0 + 3,#0x0
   \   000089   8062         SJMP    ??zclParseInReadRspCmd_3
   2747              {
   2748                zclReadRspStatus_t *statusRec = &(readRspCmd->attrList[i]);
   \                     ??zclParseInReadRspCmd_4:
   \   00008B   E5..         MOV     A,?V0 + 3
   \   00008D   75F006       MOV     B,#0x6
   \   000090   12....       LCALL   ?Subroutine170 & 0xFFFF
   2749          
   2750                statusRec->attrID = BUILD_UINT16( pBuf[0], pBuf[1] );
   \                     ??CrossCallReturnLabel_254:
   \   000093   12....       LCALL   ??Subroutine247_0 & 0xFFFF
   2751                pBuf += 2;
   2752          
   2753                statusRec->status = *pBuf++;
   \                     ??CrossCallReturnLabel_471:
   \   000096   8E82         MOV     DPL,R6
   \   000098   8F83         MOV     DPH,R7
   \   00009A   E0           MOVX    A,@DPTR
   \   00009B   85..82       MOV     DPL,?V0 + 12
   \   00009E   85..83       MOV     DPH,?V0 + 13
   \   0000A1   A3           INC     DPTR
   \   0000A2   A3           INC     DPTR
   \   0000A3   12....       LCALL   ?Subroutine41 & 0xFFFF
   2754                if ( statusRec->status == ZCL_STATUS_SUCCESS )
   \                     ??CrossCallReturnLabel_46:
   \   0000A6   7043         JNZ     ??zclParseInReadRspCmd_5
   2755                {
   2756                  statusRec->dataType = *pBuf++;
   \   0000A8   12....       LCALL   ?Subroutine183 & 0xFFFF
   \                     ??CrossCallReturnLabel_269:
   \   0000AB   12....       LCALL   ?Subroutine43 & 0xFFFF
   \                     ??CrossCallReturnLabel_375:
   \   0000AE   0E           INC     R6
   \   0000AF   AF83         MOV     R7,DPH
   2757          
   2758                  attrDataLen = zclGetAttrDataLength( statusRec->dataType, pBuf );
   \   0000B1                ; Setup parameters for call to function zclGetAttrDataLength
   \   0000B1   12....       LCALL   ?Subroutine195 & 0xFFFF
   2759                  osal_memcpy( dataPtr, pBuf, attrDataLen);
   \                     ??CrossCallReturnLabel_283:
   \   0000B4   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   0000B7   AC..         MOV     R4,?V0 + 0
   \   0000B9   AD..         MOV     R5,?V0 + 1
   \   0000BB   AA..         MOV     R2,?V0 + 8
   \   0000BD   AB..         MOV     R3,?V0 + 9
   \   0000BF   12....       LCALL   ??Subroutine238_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_445:
   \   0000C2   12....       LCALL   ?DEALLOC_XSTACK8
   2760                  statusRec->data = dataPtr;
   \   0000C5   85..82       MOV     DPL,?V0 + 12
   \   0000C8   85..83       MOV     DPH,?V0 + 13
   \   0000CB   A3           INC     DPTR
   \   0000CC   A3           INC     DPTR
   \   0000CD   A3           INC     DPTR
   \   0000CE   A3           INC     DPTR
   \   0000CF   E5..         MOV     A,?V0 + 8
   \   0000D1   F0           MOVX    @DPTR,A
   \   0000D2   A3           INC     DPTR
   \   0000D3   E5..         MOV     A,?V0 + 9
   \   0000D5   12....       LCALL   ??Subroutine242_0 & 0xFFFF
   2761          
   2762                  pBuf += attrDataLen; // move pass attribute data
   2763          
   2764                  // advance attribute data pointer
   2765                  if ( PADDING_NEEDED( attrDataLen ) )
   \                     ??CrossCallReturnLabel_456:
   \   0000D8   5005         JNC     ??CrossCallReturnLabel_507
   2766                  {
   2767                    attrDataLen++;
   \   0000DA   2401         ADD     A,#0x1
   \   0000DC   12....       LCALL   ??Subroutine250_0 & 0xFFFF
   2768                  }
   2769          
   2770                  dataPtr += attrDataLen;
   \                     ??CrossCallReturnLabel_507:
   \   0000DF   E5..         MOV     A,?V0 + 8
   \   0000E1   25..         ADD     A,?V0 + 0
   \   0000E3   F5..         MOV     ?V0 + 8,A
   \   0000E5   E5..         MOV     A,?V0 + 9
   \   0000E7   35..         ADDC    A,?V0 + 1
   \   0000E9   F5..         MOV     ?V0 + 9,A
   2771                }
   2772              }
   \                     ??zclParseInReadRspCmd_5:
   \   0000EB   05..         INC     ?V0 + 3
   \                     ??zclParseInReadRspCmd_3:
   \   0000ED   E5..         MOV     A,?V0 + 3
   \   0000EF   C3           CLR     C
   \   0000F0   95..         SUBB    A,?V0 + 2
   \   0000F2   4097         JC      ??zclParseInReadRspCmd_4
   2773            }
   2774          
   2775            return ( (void *)readRspCmd );
   \                     ??zclParseInReadRspCmd_2:
   \   0000F4                REQUIRE ?Subroutine11
   \   0000F4                ; // Fall through to label ?Subroutine11
   2776          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine11:
   \   000000   AA..         MOV     R2,?V0 + 10
   \   000002   AB..         MOV     R3,?V0 + 11
   \   000004   02....       LJMP    ??Subroutine222_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine147:
   \   000000   05..         INC     ?V0 + 2
   \   000002                REQUIRE ??Subroutine237_0
   \   000002                ; // Fall through to label ??Subroutine237_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine237_0:
   \   000000   12....       LCALL   ?Subroutine196 & 0xFFFF
   \                     ??CrossCallReturnLabel_439:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine196:
   \   000000   12....       LCALL   ?Subroutine206 & 0xFFFF
   \                     ??CrossCallReturnLabel_497:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine239_0:
   \   000000   A3           INC     DPTR
   \   000001   A3           INC     DPTR
   \   000002   A3           INC     DPTR
   \   000003                REQUIRE ??Subroutine240_0
   \   000003                ; // Fall through to label ??Subroutine240_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine241_0:
   \   000000   FB           MOV     R3,A
   \   000001   12....       LCALL   ??osal_mem_alloc?relay
   \   000004   8A..         MOV     ?V0 + 10,R2
   \   000006   8B..         MOV     ?V0 + 11,R3
   \   000008   EA           MOV     A,R2
   \   000009   45..         ORL     A,?V0 + 11
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine242_0:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   EE           MOV     A,R6
   \   000002   25..         ADD     A,?V0 + 0
   \   000004   FE           MOV     R6,A
   \   000005   EF           MOV     A,R7
   \   000006   35..         ADDC    A,?V0 + 1
   \   000008   FF           MOV     R7,A
   \   000009   E5..         MOV     A,?V0 + 0
   \   00000B   A2E0         MOV     C,0xE0 /* A   */.0
   \   00000D   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine243_0:
   \   000000   12....       LCALL   ?Subroutine168 & 0xFFFF
   \                     ??CrossCallReturnLabel_518:
   \   000003   75..00       MOV     ?V0 + 2,#0x0
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine163:
   \   000000   A3           INC     DPTR
   \   000001   A3           INC     DPTR
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   28           ADD     A,R0
   \   000005   F8           MOV     R0,A
   \   000006   A3           INC     DPTR
   \   000007   E0           MOVX    A,@DPTR
   \   000008   39           ADDC    A,R1
   \   000009   F9           MOV     R1,A
   \   00000A   C3           CLR     C
   \   00000B   EE           MOV     A,R6
   \   00000C   98           SUBB    A,R0
   \   00000D   EF           MOV     A,R7
   \   00000E   99           SUBB    A,R1
   \   00000F   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine187:
   \   000000   AF83         MOV     R7,DPH
   \   000002                ; Setup parameters for call to function zclGetAttrDataLength
   \   000002                ; Setup parameters for call to function zclGetAttrDataLength
   \   000002                ; Setup parameters for call to function zclGetAttrDataLength
   \   000002   EE           MOV     A,R6
   \   000003   FA           MOV     R2,A
   \   000004   EF           MOV     A,R7
   \   000005   FB           MOV     R3,A
   \   000006   12....       LCALL   ??zclGetAttrDataLength?relay
   \   000009   8A..         MOV     ?V0 + 0,R2
   \   00000B   8B..         MOV     ?V0 + 1,R3
   \   00000D   EE           MOV     A,R6
   \   00000E   25..         ADD     A,?V0 + 0
   \   000010   FE           MOV     R6,A
   \   000011   EF           MOV     A,R7
   \   000012   35..         ADDC    A,?V0 + 1
   \   000014   FF           MOV     R7,A
   \   000015   EA           MOV     A,R2
   \   000016   A2E0         MOV     C,0xE0 /* A   */.0
   \   000018   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine195:
   \   000000   EE           MOV     A,R6
   \   000001   FA           MOV     R2,A
   \   000002   EF           MOV     A,R7
   \   000003   FB           MOV     R3,A
   \   000004   12....       LCALL   ??zclGetAttrDataLength?relay
   \   000007   8A..         MOV     ?V0 + 0,R2
   \   000009   8B..         MOV     ?V0 + 1,R3
   \   00000B                ; Setup parameters for call to function osal_memcpy
   \   00000B                ; Setup parameters for call to function osal_memcpy
   \   00000B                ; Setup parameters for call to function osal_memcpy
   \   00000B   8E..         MOV     ?V0 + 4,R6
   \   00000D   8F..         MOV     ?V0 + 5,R7
   \   00000F   75..00       MOV     ?V0 + 6,#0x0
   \   000012   78..         MOV     R0,#?V0 + 4
   \   000014   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine183:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F9           MOV     R1,A
   \   000002   85..82       MOV     DPL,?V0 + 12
   \   000005   85..83       MOV     DPH,?V0 + 13
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine170:
   \   000000   A4           MUL     AB
   \   000001   F8           MOV     R0,A
   \   000002   A9F0         MOV     R1,B
   \   000004   E5..         MOV     A,?V0 + 10
   \   000006   28           ADD     A,R0
   \   000007   F582         MOV     DPL,A
   \   000009   E5..         MOV     A,?V0 + 11
   \   00000B   12....       LCALL   ?Subroutine205 & 0xFFFF
   \                     ??CrossCallReturnLabel_318:
   \   00000E   8582..       MOV     ?V0 + 12,DPL
   \   000011   8583..       MOV     ?V0 + 13,DPH
   \   000014   8E82         MOV     DPL,R6
   \   000016   8F83         MOV     DPH,R7
   \   000018   E0           MOVX    A,@DPTR
   \   000019   FA           MOV     R2,A
   \   00001A   A3           INC     DPTR
   \   00001B   E0           MOVX    A,@DPTR
   \   00001C   F9           MOV     R1,A
   \   00001D   EA           MOV     A,R2
   \   00001E   85..82       MOV     DPL,?V0 + 12
   \   000021   85..83       MOV     DPH,?V0 + 13
   \   000024   22           RET
   2777          #endif // ZCL_READ
   2778          
   2779          #ifdef ZCL_WRITE
   2780          /*********************************************************************
   2781           * @fn      zclParseInWriteCmd
   2782           *
   2783           * @brief   Parse the "Profile" Write, Write Undivided and Write No
   2784           *          Response Commands
   2785           *
   2786           *      NOTE: THIS FUNCTION ALLOCATES THE RETURN BUFFER, SO THE CALLING
   2787           *            FUNCTION IS RESPONSIBLE TO FREE THE MEMORY.
   2788           *
   2789           * @param   pCmd - pointer to incoming data to parse
   2790           *
   2791           * @return  pointer to the parsed command structure
   2792           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine137:
   \   000000   AC..         MOV     R4,?V0 + 0
   \   000002   AD..         MOV     R5,?V0 + 1
   \   000004   AA..         MOV     R2,?V0 + 2
   \   000006   AB..         MOV     R3,?V0 + 3
   \   000008                REQUIRE ??Subroutine238_0
   \   000008                ; // Fall through to label ??Subroutine238_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2793          void *zclParseInWriteCmd( zclParseCmd_t *pCmd )
   \                     zclParseInWriteCmd:
   2794          {
   \   000000   74EA         MOV     A,#-0x16
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 22
   \   000005                ; Auto size: 0
   \   000005   12....       LCALL   ?Subroutine80 & 0xFFFF
   2795            zclWriteCmd_t *writeCmd;
   2796            uint8 *pBuf = pCmd->pData;
   2797            uint16 attrDataLen;
   2798            uint8 *dataPtr;
   2799            uint8 numAttr = 0;
   2800            uint8 hdrLen;
   2801            uint16 dataLen = 0;
   \                     ??CrossCallReturnLabel_118:
   \   000008   8010         SJMP    ??CrossCallReturnLabel_194
   2802          
   2803            // find out the number of attributes and the length of attribute data
   2804            while ( pBuf < ( pCmd->pData + pCmd->dataLen ) )
   2805            {
   2806              uint8 dataType;
   2807          
   2808              numAttr++;
   \                     ??zclParseInWriteCmd_0:
   \   00000A   12....       LCALL   ?Subroutine62 & 0xFFFF
   2809              pBuf += 2; // move pass attribute id
   2810          
   2811              dataType = *pBuf++;
   2812          
   2813              attrDataLen = zclGetAttrDataLength( dataType, pBuf );
   2814              pBuf += attrDataLen; // move pass attribute data
   2815          
   2816              // add padding if needed
   2817              if ( PADDING_NEEDED( attrDataLen ) )
   \                     ??CrossCallReturnLabel_80:
   \   00000D   5008         JNC     ??CrossCallReturnLabel_501
   2818              {
   2819                attrDataLen++;
   \   00000F   2401         ADD     A,#0x1
   \   000011   F5..         MOV     ?V0 + 0,A
   \   000013   EB           MOV     A,R3
   \   000014   12....       LCALL   ??Subroutine251_0 & 0xFFFF
   2820              }
   2821          
   2822              dataLen += attrDataLen;
   \                     ??CrossCallReturnLabel_501:
   \   000017   12....       LCALL   ?Subroutine127 & 0xFFFF
   2823            }
   \                     ??CrossCallReturnLabel_194:
   \   00001A   12....       LCALL   ?Subroutine64 & 0xFFFF
   \                     ??CrossCallReturnLabel_84:
   \   00001D   40EB         JC      ??zclParseInWriteCmd_0
   2824          
   2825            // calculate the length of the response header
   2826            hdrLen = sizeof( zclWriteCmd_t ) + ( numAttr * sizeof( zclWriteRec_t ) );
   \   00001F   12....       LCALL   ?Subroutine118 & 0xFFFF
   2827          
   2828            writeCmd = (zclWriteCmd_t *)osal_mem_alloc( hdrLen + dataLen );
   2829            if ( writeCmd != NULL )
   \                     ??CrossCallReturnLabel_451:
   \   000022   6025         JZ      ??zclParseInWriteCmd_1
   2830            {
   2831              pBuf = pCmd->pData;
   \   000024   12....       LCALL   ?Subroutine63 & 0xFFFF
   2832              dataPtr = (uint8 *)( (uint8 *)writeCmd + hdrLen );
   2833          
   2834              writeCmd->numAttr = numAttr;
   2835              for ( uint8 i = 0; i < numAttr; i++ )
   \                     ??CrossCallReturnLabel_82:
   \   000027   8019         SJMP    ??CrossCallReturnLabel_192
   2836              {
   2837                zclWriteRec_t *statusRec = &(writeCmd->attrList[i]);
   \                     ??zclParseInWriteCmd_2:
   \   000029   12....       LCALL   ?Subroutine15 & 0xFFFF
   2838          
   2839                statusRec->attrID = BUILD_UINT16( pBuf[0], pBuf[1] );
   2840                pBuf += 2;
   2841                statusRec->dataType = *pBuf++;
   2842          
   2843                attrDataLen = zclGetAttrDataLength( statusRec->dataType, pBuf );
   2844                osal_memcpy( dataPtr, pBuf, attrDataLen);
   \                     ??CrossCallReturnLabel_2:
   \   00002C   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   00002F   12....       LCALL   ?Subroutine137 & 0xFFFF
   \                     ??CrossCallReturnLabel_440:
   \   000032   12....       LCALL   ?DEALLOC_XSTACK8
   2845                statusRec->attrData = dataPtr;
   \   000035   12....       LCALL   ?Subroutine22 & 0xFFFF
   2846          
   2847                pBuf += attrDataLen; // move pass attribute data
   2848          
   2849                // advance attribute data pointer
   2850                if ( PADDING_NEEDED( attrDataLen ) )
   \                     ??CrossCallReturnLabel_454:
   \   000038   5005         JNC     ??CrossCallReturnLabel_508
   2851                {
   2852                  attrDataLen++;
   \   00003A   2401         ADD     A,#0x1
   \   00003C   12....       LCALL   ??Subroutine250_0 & 0xFFFF
   2853                }
   2854          
   2855                dataPtr += attrDataLen;
   \                     ??CrossCallReturnLabel_508:
   \   00003F   12....       LCALL   ?Subroutine126 & 0xFFFF
   2856              }
   \                     ??CrossCallReturnLabel_192:
   \   000042   E5..         MOV     A,?V0 + 8
   \   000044   C3           CLR     C
   \   000045   95..         SUBB    A,?V0 + 7
   \   000047   40E0         JC      ??zclParseInWriteCmd_2
   2857            }
   2858          
   2859            return ( (void *)writeCmd );
   \                     ??zclParseInWriteCmd_1:
   \   000049   02....       LJMP    ?Subroutine11 & 0xFFFF
   2860          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine118:
   \   000000   75F005       MOV     B,#0x5
   \   000003   E5..         MOV     A,?V0 + 7
   \   000005   A4           MUL     AB
   \   000006   04           INC     A
   \   000007   F5..         MOV     ?V0 + 6,A
   \   000009                ; Setup parameters for call to function osal_mem_alloc
   \   000009                ; Setup parameters for call to function osal_mem_alloc
   \   000009   25..         ADD     A,?V0 + 4
   \   00000B   FA           MOV     R2,A
   \   00000C   E4           CLR     A
   \   00000D   35..         ADDC    A,?V0 + 5
   \   00000F                REQUIRE ??Subroutine241_0
   \   00000F                ; // Fall through to label ??Subroutine241_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine22:
   \   000000   85..82       MOV     DPL,?V0 + 12
   \   000003   85..83       MOV     DPH,?V0 + 13
   \   000006   A3           INC     DPTR
   \   000007   A3           INC     DPTR
   \   000008   A3           INC     DPTR
   \   000009   E5..         MOV     A,?V0 + 2
   \   00000B   F0           MOVX    @DPTR,A
   \   00000C   A3           INC     DPTR
   \   00000D   E5..         MOV     A,?V0 + 3
   \   00000F                REQUIRE ??Subroutine242_0
   \   00000F                ; // Fall through to label ??Subroutine242_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine127:
   \   000000   E5..         MOV     A,?V0 + 4
   \   000002   25..         ADD     A,?V0 + 0
   \   000004   F5..         MOV     ?V0 + 4,A
   \   000006   E5..         MOV     A,?V0 + 5
   \   000008   35..         ADDC    A,?V0 + 1
   \   00000A   F5..         MOV     ?V0 + 5,A
   \   00000C   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine126:
   \   000000   E5..         MOV     A,?V0 + 2
   \   000002   25..         ADD     A,?V0 + 0
   \   000004   F5..         MOV     ?V0 + 2,A
   \   000006   E5..         MOV     A,?V0 + 3
   \   000008   35..         ADDC    A,?V0 + 1
   \   00000A   F5..         MOV     ?V0 + 3,A
   \   00000C   05..         INC     ?V0 + 8
   \   00000E   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine80:
   \   000000   8A..         MOV     ?V0 + 2,R2
   \   000002   8B..         MOV     ?V0 + 3,R3
   \   000004   12....       LCALL   ?Subroutine168 & 0xFFFF
   \                     ??CrossCallReturnLabel_517:
   \   000007   75..00       MOV     ?V0 + 7,#0x0
   \   00000A   75..00       MOV     ?V0 + 4,#0x0
   \   00000D   75..00       MOV     ?V0 + 5,#0x0
   \   000010   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine64:
   \   000000   85..82       MOV     DPL,?V0 + 2
   \   000003   85..83       MOV     DPH,?V0 + 3
   \   000006   12....       LCALL   ?Subroutine175 & 0xFFFF
   \                     ??CrossCallReturnLabel_561:
   \   000009   85..82       MOV     DPL,?V0 + 2
   \   00000C   85..83       MOV     DPH,?V0 + 3
   \   00000F   12....       LCALL   ?Subroutine163 & 0xFFFF
   \                     ??CrossCallReturnLabel_242:
   \   000012   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine63:
   \   000000   85..82       MOV     DPL,?V0 + 2
   \   000003   85..83       MOV     DPH,?V0 + 3
   \   000006   12....       LCALL   ??Subroutine252_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_514:
   \   000009   85....       MOV     ?V0 + 0,?V0 + 6
   \   00000C   EA           MOV     A,R2
   \   00000D   25..         ADD     A,?V0 + 0
   \   00000F   12....       LCALL   ?Subroutine194 & 0xFFFF
   \                     ??CrossCallReturnLabel_282:
   \   000012   E5..         MOV     A,?V0 + 7
   \   000014   F0           MOVX    @DPTR,A
   \   000015   75..00       MOV     ?V0 + 8,#0x0
   \   000018   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine194:
   \   000000   F5..         MOV     ?V0 + 2,A
   \   000002   EB           MOV     A,R3
   \   000003   3400         ADDC    A,#0x0
   \   000005   F5..         MOV     ?V0 + 3,A
   \   000007   8A82         MOV     DPL,R2
   \   000009   8B83         MOV     DPH,R3
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine62:
   \   000000   05..         INC     ?V0 + 7
   \   000002   12....       LCALL   ?Subroutine196 & 0xFFFF
   \                     ??CrossCallReturnLabel_438:
   \   000005   8E82         MOV     DPL,R6
   \   000007   8F83         MOV     DPH,R7
   \   000009   E0           MOVX    A,@DPTR
   \   00000A   F9           MOV     R1,A
   \   00000B   A3           INC     DPTR
   \   00000C   AE82         MOV     R6,DPL
   \   00000E   12....       LCALL   ?Subroutine187 & 0xFFFF
   \                     ??CrossCallReturnLabel_274:
   \   000011   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine15:
   \   000000   E5..         MOV     A,?V0 + 8
   \   000002   75F005       MOV     B,#0x5
   \   000005   12....       LCALL   ?Subroutine170 & 0xFFFF
   \                     ??CrossCallReturnLabel_255:
   \   000008   12....       LCALL   ?Subroutine153 & 0xFFFF
   \                     ??CrossCallReturnLabel_474:
   \   00000B   8E82         MOV     DPL,R6
   \   00000D   8F83         MOV     DPH,R7
   \   00000F   12....       LCALL   ?Subroutine183 & 0xFFFF
   \                     ??CrossCallReturnLabel_270:
   \   000012   A3           INC     DPTR
   \   000013   A3           INC     DPTR
   \   000014   12....       LCALL   ?Subroutine158 & 0xFFFF
   \                     ??CrossCallReturnLabel_235:
   \   000017                ; Setup parameters for call to function zclGetAttrDataLength
   \   000017                ; Setup parameters for call to function zclGetAttrDataLength
   \   000017   12....       LCALL   ?Subroutine195 & 0xFFFF
   \                     ??CrossCallReturnLabel_284:
   \   00001A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine175:
   \   000000   A3           INC     DPTR
   \   000001                REQUIRE ??Subroutine260_0
   \   000001                ; // Fall through to label ??Subroutine260_0
   2861          
   2862          /*********************************************************************
   2863           * @fn      zclParseInWriteRspCmd
   2864           *
   2865           * @brief   Parse the "Profile" Write Response Commands
   2866           *
   2867           *      NOTE: THIS FUNCTION ALLOCATES THE RETURN BUFFER, SO THE CALLING
   2868           *            FUNCTION IS RESPONSIBLE TO FREE THE MEMORY.
   2869           *
   2870           * @param   pCmd - pointer to incoming data to parse
   2871           *
   2872           * @return  pointer to the parsed command structure
   2873           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2874          static void *zclParseInWriteRspCmd( zclParseCmd_t *pCmd )
   \                     zclParseInWriteRspCmd:
   2875          {
   \   000000   74F2         MOV     A,#-0xe
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
   \   000005   12....       LCALL   ?Subroutine81 & 0xFFFF
   2876            zclWriteRspCmd_t *writeRspCmd;
   2877            uint8 *pBuf = pCmd->pData;
   2878            uint8 i = 0;
   2879          
   2880            writeRspCmd = (zclWriteRspCmd_t *)osal_mem_alloc( sizeof ( zclWriteRspCmd_t ) + pCmd->dataLen );
   \                     ??CrossCallReturnLabel_457:
   \   000008                ; Setup parameters for call to function osal_mem_alloc
   \   000008   8A82         MOV     DPL,R2
   \   00000A   8B83         MOV     DPH,R3
   \   00000C   A3           INC     DPTR
   \   00000D   E0           MOVX    A,@DPTR
   \   00000E   12....       LCALL   ?Subroutine105 & 0xFFFF
   2881            if ( writeRspCmd != NULL )
   \                     ??CrossCallReturnLabel_161:
   \   000011   603D         JZ      ??zclParseInWriteRspCmd_0
   2882            {
   2883              if ( pCmd->dataLen == 1 )
   \   000013   85..82       MOV     DPL,?V0 + 0
   \   000016   85..83       MOV     DPH,?V0 + 1
   \   000019   A3           INC     DPTR
   \   00001A   E0           MOVX    A,@DPTR
   \   00001B   6401         XRL     A,#0x1
   \   00001D   7002         JNZ     ??zclParseInWriteRspCmd_1
   \   00001F   A3           INC     DPTR
   \   000020   E0           MOVX    A,@DPTR
   \                     ??zclParseInWriteRspCmd_1:
   \   000021   7021         JNZ     ??CrossCallReturnLabel_435
   2884              {
   2885                // special case when all writes were successfull
   2886                writeRspCmd->attrList[i++].status = *pBuf;
   \   000023   12....       LCALL   ?Subroutine110 & 0xFFFF
   2887              }
   \                     ??CrossCallReturnLabel_523:
   \   000026   A3           INC     DPTR
   \   000027   F0           MOVX    @DPTR,A
   \   000028   75..01       MOV     ?V0 + 2,#0x1
   \   00002B   801C         SJMP    ??zclParseInWriteRspCmd_2
   2888              else
   2889              {
   2890                while ( pBuf < ( pCmd->pData + pCmd->dataLen ) )
   2891                {
   2892                  writeRspCmd->attrList[i].status = *pBuf++;
   \                     ??zclParseInWriteRspCmd_3:
   \   00002D   12....       LCALL   ?Subroutine27 & 0xFFFF
   2893                  writeRspCmd->attrList[i++].attrID = BUILD_UINT16( pBuf[0], pBuf[1] );
   2894                  pBuf += 2;
   2895                }
   \                     ??CrossCallReturnLabel_460:
   \   000030   F5..         MOV     ?V0 + 4,A
   \   000032   A3           INC     DPTR
   \   000033   E0           MOVX    A,@DPTR
   \   000034   FD           MOV     R5,A
   \   000035   E5..         MOV     A,?V0 + 4
   \   000037   8882         MOV     DPL,R0
   \   000039   8983         MOV     DPH,R1
   \   00003B   A3           INC     DPTR
   \   00003C   A3           INC     DPTR
   \   00003D   F0           MOVX    @DPTR,A
   \   00003E   A3           INC     DPTR
   \   00003F   ED           MOV     A,R5
   \   000040   F0           MOVX    @DPTR,A
   \   000041   12....       LCALL   ?Subroutine147 & 0xFFFF
   \                     ??CrossCallReturnLabel_435:
   \   000044   12....       LCALL   ?Subroutine52 & 0xFFFF
   2896              }
   \                     ??CrossCallReturnLabel_56:
   \   000047   40E4         JC      ??zclParseInWriteRspCmd_3
   2897          
   2898              writeRspCmd->numAttr = i;
   \                     ??zclParseInWriteRspCmd_2:
   \   000049   8A82         MOV     DPL,R2
   \   00004B   8B83         MOV     DPH,R3
   \   00004D   E5..         MOV     A,?V0 + 2
   \   00004F   F0           MOVX    @DPTR,A
   2899            }
   2900          
   2901            return ( (void *)writeRspCmd );
   \                     ??zclParseInWriteRspCmd_0:
   \   000050   02....       LJMP    ?Subroutine2 & 0xFFFF
   2902          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine81:
   \   000000   8A..         MOV     ?V0 + 0,R2
   \   000002   8B..         MOV     ?V0 + 1,R3
   \   000004                REQUIRE ??Subroutine243_0
   \   000004                ; // Fall through to label ??Subroutine243_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine27:
   \   000000   E5..         MOV     A,?V0 + 2
   \   000002   75F003       MOV     B,#0x3
   \   000005   A4           MUL     AB
   \   000006   F8           MOV     R0,A
   \   000007   A9F0         MOV     R1,B
   \   000009   EA           MOV     A,R2
   \   00000A   28           ADD     A,R0
   \   00000B   F8           MOV     R0,A
   \   00000C   EB           MOV     A,R3
   \   00000D   39           ADDC    A,R1
   \   00000E                REQUIRE ??Subroutine244_0
   \   00000E                ; // Fall through to label ??Subroutine244_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine244_0:
   \   000000   F9           MOV     R1,A
   \   000001   8E82         MOV     DPL,R6
   \   000003   8F83         MOV     DPH,R7
   \   000005   E0           MOVX    A,@DPTR
   \   000006   8882         MOV     DPL,R0
   \   000008   8983         MOV     DPH,R1
   \   00000A   A3           INC     DPTR
   \   00000B                REQUIRE ??Subroutine245_0
   \   00000B                ; // Fall through to label ??Subroutine245_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine245_0:
   \   000000   12....       LCALL   ?Subroutine156 & 0xFFFF
   \                     ??CrossCallReturnLabel_464:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine52:
   \   000000   85..82       MOV     DPL,?V0 + 0
   \   000003   85..83       MOV     DPH,?V0 + 1
   \   000006   12....       LCALL   ?Subroutine175 & 0xFFFF
   \                     ??CrossCallReturnLabel_560:
   \   000009   85..82       MOV     DPL,?V0 + 0
   \   00000C   85..83       MOV     DPH,?V0 + 1
   \   00000F   12....       LCALL   ?Subroutine163 & 0xFFFF
   \                     ??CrossCallReturnLabel_241:
   \   000012   22           RET
   2903          #endif // ZCL_WRITE
   2904          
   2905          #ifdef ZCL_REPORT
   2906          /*********************************************************************
   2907           * @fn      zclParseInConfigReportCmd
   2908           *
   2909           * @brief   Parse the "Profile" Configure Reporting Command
   2910           *
   2911           *      NOTE: THIS FUNCTION ALLOCATES THE RETURN BUFFER, SO THE CALLING
   2912           *            FUNCTION IS RESPONSIBLE TO FREE THE MEMORY.
   2913           *
   2914           * @param   pCmd - pointer to incoming data to parse
   2915           *
   2916           * @return  pointer to the parsed command structure
   2917           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine10:
   \   000000   AA..         MOV     R2,?V0 + 8
   \   000002   AB..         MOV     R3,?V0 + 9
   \   000004                REQUIRE ??Subroutine231_0
   \   000004                ; // Fall through to label ??Subroutine231_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2918          void *zclParseInConfigReportCmd( zclParseCmd_t *pCmd )
   \                     zclParseInConfigReportCmd:
   2919          {
   \   000000   74EC         MOV     A,#-0x14
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 20
   \   000005                ; Auto size: 0
   \   000005   12....       LCALL   ?Subroutine81 & 0xFFFF
   2920            zclCfgReportCmd_t *cfgReportCmd;
   2921            uint8 *pBuf = pCmd->pData;
   2922            uint8 *dataPtr;
   2923            uint8 numAttr = 0;
   2924            uint8 dataType;
   2925            uint8 hdrLen;
   2926            uint16 dataLen = 0;
   \                     ??CrossCallReturnLabel_458:
   \   000008   75..00       MOV     ?V0 + 4,#0x0
   \   00000B   75..00       MOV     ?V0 + 5,#0x0
   \   00000E   8003         SJMP    ??CrossCallReturnLabel_436
   2927            uint8 reportChangeLen; // length of Reportable Change field
   2928          
   2929            // Calculate the length of the Request command
   2930            while ( pBuf < ( pCmd->pData + pCmd->dataLen ) )
   2931            {
   2932              uint8 direction;
   2933          
   2934              numAttr++;
   2935              direction = *pBuf++;
   2936              pBuf += 2; // move pass the attribute ID
   2937          
   2938              // Is there a Reportable Change field?
   2939              if ( direction == ZCL_SEND_ATTR_REPORTS )
   2940              {
   2941                dataType = *pBuf++;
   2942                pBuf += 4; // move pass the Min and Max Reporting Intervals
   2943          
   2944                // For attributes of 'discrete' data types this field is omitted
   2945                if ( zclAnalogDataType( dataType ) )
   2946                {
   2947                  reportChangeLen = zclGetDataTypeLength( dataType );
   2948                  pBuf += reportChangeLen;
   2949          
   2950                  // add padding if needed
   2951                  if ( PADDING_NEEDED( reportChangeLen ) )
   2952                  {
   2953                    reportChangeLen++;
   2954                  }
   2955          
   2956                  dataLen += reportChangeLen;
   2957                }
   2958              }
   2959              else
   2960              {
   2961                pBuf += 2; // move pass the Timeout Period
   \                     ??zclParseInConfigReportCmd_0:
   \   000010   12....       LCALL   ??Subroutine237_0 & 0xFFFF
   2962              }
   \                     ??CrossCallReturnLabel_436:
   \   000013   12....       LCALL   ?Subroutine52 & 0xFFFF
   \                     ??CrossCallReturnLabel_57:
   \   000016   5037         JNC     ??zclParseInConfigReportCmd_1
   \   000018   05..         INC     ?V0 + 2
   \   00001A   8E82         MOV     DPL,R6
   \   00001C   8F83         MOV     DPH,R7
   \   00001E   E0           MOVX    A,@DPTR
   \   00001F   F8           MOV     R0,A
   \   000020   12....       LCALL   ?Subroutine148 & 0xFFFF
   \                     ??CrossCallReturnLabel_220:
   \   000023   70EB         JNZ     ??zclParseInConfigReportCmd_0
   \   000025   8E82         MOV     DPL,R6
   \   000027   8F83         MOV     DPH,R7
   \   000029   E0           MOVX    A,@DPTR
   \   00002A   F5..         MOV     ?V0 + 3,A
   \   00002C   12....       LCALL   ?Subroutine149 & 0xFFFF
   \                     ??CrossCallReturnLabel_222:
   \   00002F                ; Setup parameters for call to function zclAnalogDataType
   \   00002F   A9..         MOV     R1,?V0 + 3
   \   000031   12....       LCALL   ??zclAnalogDataType?relay
   \   000034   E9           MOV     A,R1
   \   000035   60DC         JZ      ??CrossCallReturnLabel_436
   \   000037                ; Setup parameters for call to function zclGetDataTypeLength
   \   000037   A9..         MOV     R1,?V0 + 3
   \   000039   12....       LCALL   ?Subroutine138 & 0xFFFF
   \                     ??CrossCallReturnLabel_204:
   \   00003C   5001         JNC     ??zclParseInConfigReportCmd_2
   \   00003E   08           INC     R0
   \                     ??zclParseInConfigReportCmd_2:
   \   00003F   88..         MOV     ?V0 + 6,R0
   \   000041   E5..         MOV     A,?V0 + 4
   \   000043   25..         ADD     A,?V0 + 6
   \   000045   F5..         MOV     ?V0 + 4,A
   \   000047   E5..         MOV     A,?V0 + 5
   \   000049   3400         ADDC    A,#0x0
   \   00004B   F5..         MOV     ?V0 + 5,A
   \   00004D   80C4         SJMP    ??CrossCallReturnLabel_436
   2963            } // while loop
   2964          
   2965            hdrLen = sizeof( zclCfgReportCmd_t ) + ( numAttr * sizeof( zclCfgReportRec_t ) );
   \                     ??zclParseInConfigReportCmd_1:
   \   00004F   75F00C       MOV     B,#0xc
   \   000052   E5..         MOV     A,?V0 + 2
   \   000054   A4           MUL     AB
   \   000055   04           INC     A
   \   000056   F5..         MOV     ?V0 + 10,A
   2966          
   2967            cfgReportCmd = (zclCfgReportCmd_t *)osal_mem_alloc( hdrLen + dataLen );
   \   000058                ; Setup parameters for call to function osal_mem_alloc
   \   000058   25..         ADD     A,?V0 + 4
   \   00005A   FA           MOV     R2,A
   \   00005B   E4           CLR     A
   \   00005C   35..         ADDC    A,?V0 + 5
   \   00005E   12....       LCALL   ?Subroutine123 & 0xFFFF
   2968            if ( cfgReportCmd != NULL )
   \                     ??CrossCallReturnLabel_186:
   \   000061   7003         JNZ     $+5
   \   000063   02....       LJMP    ??zclParseInConfigReportCmd_3 & 0xFFFF
   2969            {
   2970              pBuf = pCmd->pData;
   \   000066   12....       LCALL   ?Subroutine112 & 0xFFFF
   2971              dataPtr = (uint8 *)( (uint8 *)cfgReportCmd + hdrLen );
   \                     ??CrossCallReturnLabel_170:
   \   000069   F5..         MOV     ?V0 + 6,A
   \   00006B   EB           MOV     A,R3
   \   00006C   3400         ADDC    A,#0x0
   \   00006E   F5..         MOV     ?V0 + 7,A
   2972          
   2973              cfgReportCmd->numAttr = numAttr;
   \   000070   8A82         MOV     DPL,R2
   \   000072   8B83         MOV     DPH,R3
   \   000074   E5..         MOV     A,?V0 + 2
   \   000076   F0           MOVX    @DPTR,A
   2974              for ( uint8 i = 0; i < numAttr; i++ )
   \   000077   75..00       MOV     ?V0 + 3,#0x0
   \   00007A   8008         SJMP    ??zclParseInConfigReportCmd_4
   2975              {
   2976                zclCfgReportRec_t *reportRec = &(cfgReportCmd->attrList[i]);
   2977          
   2978                osal_memset( reportRec, 0, sizeof( zclCfgReportRec_t ) );
   2979          
   2980                reportRec->direction = *pBuf++;
   2981                reportRec->attrID = BUILD_UINT16( pBuf[0], pBuf[1] );
   2982                pBuf += 2;
   2983                if ( reportRec->direction == ZCL_SEND_ATTR_REPORTS )
   2984                {
   2985                  // Attribute to be reported
   2986                  reportRec->dataType = *pBuf++;
   2987                  reportRec->minReportInt = BUILD_UINT16( pBuf[0], pBuf[1] );
   2988                  pBuf += 2;
   2989                  reportRec->maxReportInt = BUILD_UINT16( pBuf[0], pBuf[1] );
   2990                  pBuf += 2;
   2991          
   2992                  // For attributes of 'discrete' data types this field is omitted
   2993                  if ( zclAnalogDataType( reportRec->dataType ) )
   2994                  {
   2995                    zcl_BuildAnalogData( reportRec->dataType, dataPtr, pBuf);
   2996                    reportRec->reportableChange = dataPtr;
   2997          
   2998                    reportChangeLen = zclGetDataTypeLength( reportRec->dataType );
   2999                    pBuf += reportChangeLen;
   3000          
   3001                    // advance attribute data pointer
   3002                    if ( PADDING_NEEDED( reportChangeLen ) )
   3003                    {
   3004                      reportChangeLen++;
   3005                    }
   3006          
   3007                    dataPtr += reportChangeLen;
   3008                  }
   3009                }
   3010                else
   3011                {
   3012                  // Attribute reports to be received
   3013                  reportRec->timeoutPeriod = BUILD_UINT16( pBuf[0], pBuf[1] );
   \                     ??zclParseInConfigReportCmd_5:
   \   00007C   12....       LCALL   ?Subroutine68 & 0xFFFF
   3014                  pBuf += 2;
   3015                }
   \                     ??CrossCallReturnLabel_91:
   \   00007F   12....       LCALL   ?Subroutine34 & 0xFFFF
   \                     ??CrossCallReturnLabel_468:
   \   000082   05..         INC     ?V0 + 3
   \                     ??zclParseInConfigReportCmd_4:
   \   000084   E5..         MOV     A,?V0 + 3
   \   000086   C3           CLR     C
   \   000087   95..         SUBB    A,?V0 + 2
   \   000089   4003         JC      $+5
   \   00008B   02....       LJMP    ??zclParseInConfigReportCmd_3 & 0xFFFF
   \   00008E   E5..         MOV     A,?V0 + 3
   \   000090   75F00C       MOV     B,#0xc
   \   000093   12....       LCALL   ?Subroutine142 & 0xFFFF
   \                     ??CrossCallReturnLabel_210:
   \   000096                ; Setup parameters for call to function osal_memset
   \   000096   7C0C         MOV     R4,#0xc
   \   000098   7D00         MOV     R5,#0x0
   \   00009A   7900         MOV     R1,#0x0
   \   00009C   AA..         MOV     R2,?V0 + 0
   \   00009E   AB..         MOV     R3,?V0 + 1
   \   0000A0   12....       LCALL   ??osal_memset?relay
   \   0000A3   12....       LCALL   ?Subroutine116 & 0xFFFF
   \                     ??CrossCallReturnLabel_176:
   \   0000A6   12....       LCALL   ??Subroutine245_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_463:
   \   0000A9   12....       LCALL   ?Subroutine99 & 0xFFFF
   \                     ??CrossCallReturnLabel_147:
   \   0000AC   12....       LCALL   ?Subroutine33 & 0xFFFF
   \                     ??CrossCallReturnLabel_33:
   \   0000AF   8E82         MOV     DPL,R6
   \   0000B1   8F83         MOV     DPH,R7
   \   0000B3   70C7         JNZ     ??zclParseInConfigReportCmd_5
   \   0000B5   E0           MOVX    A,@DPTR
   \   0000B6   F9           MOV     R1,A
   \   0000B7   E5..         MOV     A,?V0 + 0
   \   0000B9   2403         ADD     A,#0x3
   \   0000BB   F5..         MOV     ?V0 + 4,A
   \   0000BD   E5..         MOV     A,?V0 + 1
   \   0000BF   3400         ADDC    A,#0x0
   \   0000C1   F5..         MOV     ?V0 + 5,A
   \   0000C3   E9           MOV     A,R1
   \   0000C4   85..82       MOV     DPL,?V0 + 4
   \   0000C7   85..83       MOV     DPH,?V0 + 5
   \   0000CA   12....       LCALL   ?Subroutine23 & 0xFFFF
   \                     ??CrossCallReturnLabel_16:
   \   0000CD   12....       LCALL   ?Subroutine18 & 0xFFFF
   \                     ??CrossCallReturnLabel_8:
   \   0000D0   12....       LCALL   ?Subroutine28 & 0xFFFF
   \                     ??CrossCallReturnLabel_24:
   \   0000D3   60AD         JZ      ??CrossCallReturnLabel_468
   \   0000D5                ; Setup parameters for call to function zcl_BuildAnalogData
   \   0000D5   EE           MOV     A,R6
   \   0000D6   FC           MOV     R4,A
   \   0000D7   EF           MOV     A,R7
   \   0000D8   FD           MOV     R5,A
   \   0000D9   AA..         MOV     R2,?V0 + 6
   \   0000DB   AB..         MOV     R3,?V0 + 7
   \   0000DD   85..82       MOV     DPL,?V0 + 4
   \   0000E0   85..83       MOV     DPH,?V0 + 5
   \   0000E3   E0           MOVX    A,@DPTR
   \   0000E4   F9           MOV     R1,A
   \   0000E5   12....       LCALL   ??zcl_BuildAnalogData?relay
   \   0000E8   85..82       MOV     DPL,?V0 + 0
   \   0000EB   85..83       MOV     DPH,?V0 + 1
   \   0000EE   A3           INC     DPTR
   \   0000EF   A3           INC     DPTR
   \   0000F0   A3           INC     DPTR
   \   0000F1   A3           INC     DPTR
   \   0000F2   A3           INC     DPTR
   \   0000F3   A3           INC     DPTR
   \   0000F4   A3           INC     DPTR
   \   0000F5   A3           INC     DPTR
   \   0000F6   A3           INC     DPTR
   \   0000F7   A3           INC     DPTR
   \   0000F8   E5..         MOV     A,?V0 + 6
   \   0000FA   F0           MOVX    @DPTR,A
   \   0000FB   A3           INC     DPTR
   \   0000FC   E5..         MOV     A,?V0 + 7
   \   0000FE   F0           MOVX    @DPTR,A
   \   0000FF                ; Setup parameters for call to function zclGetDataTypeLength
   \   0000FF   85..82       MOV     DPL,?V0 + 4
   \   000102   85..83       MOV     DPH,?V0 + 5
   \   000105   12....       LCALL   ?Subroutine72 & 0xFFFF
   \                     ??CrossCallReturnLabel_102:
   \   000108   5001         JNC     ??zclParseInConfigReportCmd_6
   \   00010A   08           INC     R0
   \                     ??zclParseInConfigReportCmd_6:
   \   00010B   88..         MOV     ?V0 + 0,R0
   \   00010D   E5..         MOV     A,?V0 + 6
   \   00010F   25..         ADD     A,?V0 + 0
   \   000111   F5..         MOV     ?V0 + 6,A
   \   000113   E5..         MOV     A,?V0 + 7
   \   000115   3400         ADDC    A,#0x0
   \   000117   F5..         MOV     ?V0 + 7,A
   \   000119   02....       LJMP    ??CrossCallReturnLabel_468 & 0xFFFF
   3016              } // while loop
   3017            }
   3018          
   3019            return ( (void *)cfgReportCmd );
   \                     ??zclParseInConfigReportCmd_3:
   \   00011C   02....       LJMP    ?Subroutine10 & 0xFFFF
   3020          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine34:
   \   000000   A3           INC     DPTR
   \   000001   A3           INC     DPTR
   \   000002   A3           INC     DPTR
   \   000003   A3           INC     DPTR
   \   000004   A3           INC     DPTR
   \   000005   A3           INC     DPTR
   \   000006                REQUIRE ??Subroutine246_0
   \   000006                ; // Fall through to label ??Subroutine246_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine149:
   \   000000   A3           INC     DPTR
   \   000001   E582         MOV     A,DPL
   \   000003   2404         ADD     A,#0x4
   \   000005   FE           MOV     R6,A
   \   000006   E583         MOV     A,DPH
   \   000008   3400         ADDC    A,#0x0
   \   00000A   FF           MOV     R7,A
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine148:
   \   000000   A3           INC     DPTR
   \   000001   E582         MOV     A,DPL
   \   000003   2402         ADD     A,#0x2
   \   000005   FE           MOV     R6,A
   \   000006   E583         MOV     A,DPH
   \   000008   3400         ADDC    A,#0x0
   \   00000A   FF           MOV     R7,A
   \   00000B   E8           MOV     A,R0
   \   00000C   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine142:
   \   000000   A4           MUL     AB
   \   000001   F8           MOV     R0,A
   \   000002   A9F0         MOV     R1,B
   \   000004   E5..         MOV     A,?V0 + 8
   \   000006   28           ADD     A,R0
   \   000007   F582         MOV     DPL,A
   \   000009   E5..         MOV     A,?V0 + 9
   \   00000B   12....       LCALL   ?Subroutine205 & 0xFFFF
   \                     ??CrossCallReturnLabel_317:
   \   00000E   8582..       MOV     ?V0 + 0,DPL
   \   000011   8583..       MOV     ?V0 + 1,DPH
   \   000014   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine138:
   \   000000   12....       LCALL   ??zclGetDataTypeLength?relay
   \   000003   E9           MOV     A,R1
   \   000004   F8           MOV     R0,A
   \   000005   88..         MOV     ?V0 + 6,R0
   \   000007   EE           MOV     A,R6
   \   000008   25..         ADD     A,?V0 + 6
   \   00000A   FE           MOV     R6,A
   \   00000B   EF           MOV     A,R7
   \   00000C   3400         ADDC    A,#0x0
   \   00000E   FF           MOV     R7,A
   \   00000F   E8           MOV     A,R0
   \   000010   A2E0         MOV     C,0xE0 /* A   */.0
   \   000012   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine123:
   \   000000   FB           MOV     R3,A
   \   000001   12....       LCALL   ??osal_mem_alloc?relay
   \   000004   8A..         MOV     ?V0 + 8,R2
   \   000006   8B..         MOV     ?V0 + 9,R3
   \   000008   EA           MOV     A,R2
   \   000009   45..         ORL     A,?V0 + 9
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine116:
   \   000000   8E82         MOV     DPL,R6
   \   000002   8F83         MOV     DPH,R7
   \   000004   E0           MOVX    A,@DPTR
   \   000005   FC           MOV     R4,A
   \   000006   85..82       MOV     DPL,?V0 + 0
   \   000009   85..83       MOV     DPH,?V0 + 1
   \   00000C   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine112:
   \   000000   85..82       MOV     DPL,?V0 + 0
   \   000003   85..83       MOV     DPH,?V0 + 1
   \   000006   12....       LCALL   ??Subroutine252_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_515:
   \   000009   EA           MOV     A,R2
   \   00000A   25..         ADD     A,?V0 + 10
   \   00000C   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine99:
   \   000000   12....       LCALL   ?Subroutine177 & 0xFFFF
   \                     ??CrossCallReturnLabel_261:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine72:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F9           MOV     R1,A
   \   000002   12....       LCALL   ??zclGetDataTypeLength?relay
   \   000005   E9           MOV     A,R1
   \   000006   F8           MOV     R0,A
   \   000007   88..         MOV     ?V0 + 0,R0
   \   000009   EE           MOV     A,R6
   \   00000A   25..         ADD     A,?V0 + 0
   \   00000C   FE           MOV     R6,A
   \   00000D   EF           MOV     A,R7
   \   00000E   3400         ADDC    A,#0x0
   \   000010   FF           MOV     R7,A
   \   000011   E8           MOV     A,R0
   \   000012   A2E0         MOV     C,0xE0 /* A   */.0
   \   000014   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine159:
   \   000000   12....       LCALL   ?Subroutine202 & 0xFFFF
   \                     ??CrossCallReturnLabel_379:
   \   000003   A3           INC     DPTR
   \   000004   0E           INC     R6
   \   000005   AF83         MOV     R7,DPH
   \   000007   E0           MOVX    A,@DPTR
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine33:
   \   000000   A3           INC     DPTR
   \   000001   12....       LCALL   ?Subroutine153 & 0xFFFF
   \                     ??CrossCallReturnLabel_473:
   \   000004   EC           MOV     A,R4
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine28:
   \   000000   12....       LCALL   ?Subroutine154 & 0xFFFF
   \                     ??CrossCallReturnLabel_492:
   \   000003                ; Setup parameters for call to function zclAnalogDataType
   \   000003                ; Setup parameters for call to function zclAnalogDataType
   \   000003   12....       LCALL   ??zclAnalogDataType?relay
   \   000006   E9           MOV     A,R1
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine154:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   A3           INC     DPTR
   \   000002   EB           MOV     A,R3
   \   000003                REQUIRE ??Subroutine249_0
   \   000003                ; // Fall through to label ??Subroutine249_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine249_0:
   \   000000   12....       LCALL   ?Subroutine199 & 0xFFFF
   \                     ??CrossCallReturnLabel_496:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine23:
   \   000000   12....       LCALL   ?Subroutine159 & 0xFFFF
   \                     ??CrossCallReturnLabel_237:
   \   000003   12....       LCALL   ?Subroutine178 & 0xFFFF
   \                     ??CrossCallReturnLabel_263:
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine178:
   \   000000   FC           MOV     R4,A
   \   000001   A3           INC     DPTR
   \   000002   E0           MOVX    A,@DPTR
   \   000003   FB           MOV     R3,A
   \   000004   EC           MOV     A,R4
   \   000005   85..82       MOV     DPL,?V0 + 0
   \   000008   85..83       MOV     DPH,?V0 + 1
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine18:
   \   000000   A3           INC     DPTR
   \   000001   A3           INC     DPTR
   \   000002   A3           INC     DPTR
   \   000003   A3           INC     DPTR
   \   000004   12....       LCALL   ?Subroutine154 & 0xFFFF
   \                     ??CrossCallReturnLabel_493:
   \   000007   8E82         MOV     DPL,R6
   \   000009   8F83         MOV     DPH,R7
   \   00000B   E0           MOVX    A,@DPTR
   \   00000C   12....       LCALL   ?Subroutine178 & 0xFFFF
   \                     ??CrossCallReturnLabel_262:
   \   00000F   A3           INC     DPTR
   \   000010   A3           INC     DPTR
   \   000011   A3           INC     DPTR
   \   000012   A3           INC     DPTR
   \   000013   A3           INC     DPTR
   \   000014   A3           INC     DPTR
   \   000015   22           RET
   3021          
   3022          /*********************************************************************
   3023           * @fn      zclParseInConfigReportRspCmd
   3024           *
   3025           * @brief   Parse the "Profile" Configure Reporting Response Command
   3026           *
   3027           *      NOTE: THIS FUNCTION ALLOCATES THE RETURN BUFFER, SO THE CALLING
   3028           *            FUNCTION IS RESPONSIBLE TO FREE THE MEMORY.
   3029           *
   3030           * @param   pCmd - pointer to incoming data to parse
   3031           *
   3032           * @return  pointer to the parsed command structure
   3033           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3034          static void *zclParseInConfigReportRspCmd( zclParseCmd_t *pCmd )
   \                     zclParseInConfigReportRspCmd:
   3035          {
   \   000000   74F5         MOV     A,#-0xb
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 11
   \   000005                ; Auto size: 0
   3036            zclCfgReportRspCmd_t *cfgReportRspCmd;
   3037            uint8 *pBuf = pCmd->pData;
   \   000005   12....       LCALL   ?Subroutine75 & 0xFFFF
   3038            uint8 numAttr;
   3039          
   3040            numAttr = pCmd->dataLen / ( 1 + 1 + 2 ); // Status + Direction + Attribute ID
   \                     ??CrossCallReturnLabel_107:
   \   000008   F5..         MOV     ?V0 + 0,A
   \   00000A   A3           INC     DPTR
   \   00000B   E0           MOVX    A,@DPTR
   \   00000C   F5..         MOV     ?V0 + 1,A
   \   00000E   7402         MOV     A,#0x2
   \   000010   78..         MOV     R0,#?V0 + 0
   \   000012   12....       LCALL   ?US_SHR
   \   000015   E5..         MOV     A,?V0 + 0
   \   000017   F5..         MOV     ?V0 + 2,A
   3041          
   3042            cfgReportRspCmd = (zclCfgReportRspCmd_t *)osal_mem_alloc( sizeof( zclCfgReportRspCmd_t )
   3043                                                      + ( numAttr * sizeof( zclCfgReportStatus_t ) ) );
   \   000019                ; Setup parameters for call to function osal_mem_alloc
   \   000019   75..00       MOV     ?V0 + 1,#0x0
   \   00001C   7402         MOV     A,#0x2
   \   00001E   78..         MOV     R0,#?V0 + 0
   \   000020   12....       LCALL   ?S_SHL
   \   000023   E5..         MOV     A,?V0 + 0
   \   000025   2401         ADD     A,#0x1
   \   000027   FA           MOV     R2,A
   \   000028   E5..         MOV     A,?V0 + 1
   \   00002A   12....       LCALL   ?Subroutine135 & 0xFFFF
   3044            if ( cfgReportRspCmd != NULL )
   \                     ??CrossCallReturnLabel_202:
   \   00002D   603C         JZ      ??zclParseInConfigReportRspCmd_0
   3045            {
   3046              cfgReportRspCmd->numAttr = numAttr;
   \   00002F   8A82         MOV     DPL,R2
   \   000031   8B83         MOV     DPH,R3
   \   000033   E5..         MOV     A,?V0 + 2
   \   000035   F0           MOVX    @DPTR,A
   3047              for ( uint8 i = 0; i < cfgReportRspCmd->numAttr; i++ )
   \   000036   75..00       MOV     ?V0 + 2,#0x0
   \   000039   8027         SJMP    ??CrossCallReturnLabel_31
   3048              {
   3049                cfgReportRspCmd->attrList[i].status = *pBuf++;
   \                     ??zclParseInConfigReportRspCmd_1:
   \   00003B   85....       MOV     ?V0 + 0,?V0 + 2
   \   00003E   75..00       MOV     ?V0 + 1,#0x0
   \   000041   7402         MOV     A,#0x2
   \   000043   78..         MOV     R0,#?V0 + 0
   \   000045   12....       LCALL   ?S_SHL
   \   000048   EA           MOV     A,R2
   \   000049   25..         ADD     A,?V0 + 0
   \   00004B   F8           MOV     R0,A
   \   00004C   EB           MOV     A,R3
   \   00004D   35..         ADDC    A,?V0 + 1
   \   00004F   12....       LCALL   ??Subroutine244_0 & 0xFFFF
   3050                cfgReportRspCmd->attrList[i].direction = *pBuf++;
   3051                cfgReportRspCmd->attrList[i].attrID = BUILD_UINT16( pBuf[0], pBuf[1] );
   3052                pBuf += 2;
   3053              }
   \                     ??CrossCallReturnLabel_462:
   \   000052   8882         MOV     DPL,R0
   \   000054   8983         MOV     DPH,R1
   \   000056   A3           INC     DPTR
   \   000057   A3           INC     DPTR
   \   000058   12....       LCALL   ?Subroutine42 & 0xFFFF
   \                     ??CrossCallReturnLabel_47:
   \   00005B   12....       LCALL   ?Subroutine114 & 0xFFFF
   \                     ??CrossCallReturnLabel_172:
   \   00005E   A3           INC     DPTR
   \   00005F   12....       LCALL   ?Subroutine32 & 0xFFFF
   \                     ??CrossCallReturnLabel_31:
   \   000062   8A82         MOV     DPL,R2
   \   000064   8B83         MOV     DPH,R3
   \   000066   12....       LCALL   ??Subroutine215_0 & 0xFFFF
   3054            }
   \                     ??CrossCallReturnLabel_326:
   \   000069   40D0         JC      ??zclParseInConfigReportRspCmd_1
   3055          
   3056            return ( (void *)cfgReportRspCmd );
   \                     ??zclParseInConfigReportRspCmd_0:
   \   00006B   02....       LJMP    ?Subroutine3 & 0xFFFF
   3057          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine135:
   \   000000   12....       LCALL   ?Subroutine193 & 0xFFFF
   \                     ??CrossCallReturnLabel_280:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine114:
   \   000000   F5..         MOV     ?V0 + 0,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   FD           MOV     R5,A
   \   000005   E5..         MOV     A,?V0 + 0
   \   000007   8882         MOV     DPL,R0
   \   000009   8983         MOV     DPH,R1
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine32:
   \   000000   A3           INC     DPTR
   \   000001   A3           INC     DPTR
   \   000002   F0           MOVX    @DPTR,A
   \   000003   A3           INC     DPTR
   \   000004   ED           MOV     A,R5
   \   000005   12....       LCALL   ??Subroutine249_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_494:
   \   000008   05..         INC     ?V0 + 2
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine42:
   \   000000   12....       LCALL   ?Subroutine159 & 0xFFFF
   \                     ??CrossCallReturnLabel_236:
   \   000003   22           RET
   3058          
   3059          /*********************************************************************
   3060           * @fn      zclParseInReadReportCfgCmd
   3061           *
   3062           * @brief   Parse the "Profile" Read Reporting Configuration Command
   3063           *
   3064           *      NOTE: THIS FUNCTION ALLOCATES THE RETURN BUFFER, SO THE CALLING
   3065           *            FUNCTION IS RESPONSIBLE TO FREE THE MEMORY.
   3066           *
   3067           * @param   pCmd - pointer to incoming data to parse
   3068           *
   3069           * @return  pointer to the parsed command structure
   3070           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3071          void *zclParseInReadReportCfgCmd( zclParseCmd_t *pCmd )
   \                     zclParseInReadReportCfgCmd:
   3072          {
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   3073            zclReadReportCfgCmd_t *readReportCfgCmd;
   3074            uint8 *pBuf = pCmd->pData;
   \   000005   12....       LCALL   ?Subroutine75 & 0xFFFF
   3075            uint8 numAttr;
   3076          
   3077            numAttr = pCmd->dataLen / ( 1 + 2 ); // Direction + Attribute ID
   \                     ??CrossCallReturnLabel_108:
   \   000008   F8           MOV     R0,A
   \   000009   A3           INC     DPTR
   \   00000A   E0           MOVX    A,@DPTR
   \   00000B   F9           MOV     R1,A
   \   00000C   7A03         MOV     R2,#0x3
   \   00000E   7B00         MOV     R3,#0x0
   \   000010   12....       LCALL   ?US_DIV_MOD
   \   000013   E8           MOV     A,R0
   \   000014   F5..         MOV     ?V0 + 0,A
   3078          
   3079            readReportCfgCmd = (zclReadReportCfgCmd_t *)osal_mem_alloc( sizeof( zclReadReportCfgCmd_t )
   3080                                                            + ( numAttr * sizeof( zclReadReportCfgRec_t ) ) );
   \   000016                ; Setup parameters for call to function osal_mem_alloc
   \   000016   75F003       MOV     B,#0x3
   \   000019   A4           MUL     AB
   \   00001A   2401         ADD     A,#0x1
   \   00001C   FA           MOV     R2,A
   \   00001D   E5F0         MOV     A,B
   \   00001F   12....       LCALL   ?Subroutine135 & 0xFFFF
   3081            if ( readReportCfgCmd != NULL )
   \                     ??CrossCallReturnLabel_203:
   \   000022   601E         JZ      ??zclParseInReadReportCfgCmd_0
   3082            {
   3083              readReportCfgCmd->numAttr = numAttr;
   \   000024   8A82         MOV     DPL,R2
   \   000026   8B83         MOV     DPH,R3
   \   000028   E5..         MOV     A,?V0 + 0
   \   00002A   F0           MOVX    @DPTR,A
   3084              for ( uint8 i = 0; i < readReportCfgCmd->numAttr; i++)
   \   00002B   75..00       MOV     ?V0 + 2,#0x0
   \   00002E   8009         SJMP    ??CrossCallReturnLabel_32
   3085              {
   3086                readReportCfgCmd->attrList[i].direction = *pBuf++;;
   \                     ??zclParseInReadReportCfgCmd_1:
   \   000030   12....       LCALL   ?Subroutine27 & 0xFFFF
   3087                readReportCfgCmd->attrList[i].attrID = BUILD_UINT16( pBuf[0], pBuf[1] );
   3088                pBuf += 2;
   3089              }
   \                     ??CrossCallReturnLabel_461:
   \   000033   12....       LCALL   ?Subroutine114 & 0xFFFF
   \                     ??CrossCallReturnLabel_173:
   \   000036   12....       LCALL   ?Subroutine32 & 0xFFFF
   \                     ??CrossCallReturnLabel_32:
   \   000039   8A82         MOV     DPL,R2
   \   00003B   8B83         MOV     DPH,R3
   \   00003D   12....       LCALL   ??Subroutine215_0 & 0xFFFF
   3090            }
   \                     ??CrossCallReturnLabel_327:
   \   000040   40EE         JC      ??zclParseInReadReportCfgCmd_1
   3091          
   3092            return ( (void *)readReportCfgCmd );
   \                     ??zclParseInReadReportCfgCmd_0:
   \   000042   02....       LJMP    ?Subroutine1 & 0xFFFF
   3093          }
   3094          
   3095          /*********************************************************************
   3096           * @fn      zclParseInReadReportCfgRspCmd
   3097           *
   3098           * @brief   Parse the "Profile" Read Reporting Configuration Response Command
   3099           *
   3100           *      NOTE: THIS FUNCTION ALLOCATES THE RETURN BUFFER, SO THE CALLING
   3101           *            FUNCTION IS RESPONSIBLE TO FREE THE MEMORY.
   3102           *
   3103           * @param   pCmd - pointer to incoming data to parse
   3104           *
   3105           * @return  pointer to the parsed command structure
   3106           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine113:
   \   000000   8A82         MOV     DPL,R2
   \   000002   8B83         MOV     DPH,R3
   \   000004                REQUIRE ??Subroutine239_0
   \   000004                ; // Fall through to label ??Subroutine239_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3107          static void *zclParseInReadReportCfgRspCmd( zclParseCmd_t *pCmd )
   \                     zclParseInReadReportCfgRspCmd:
   3108          {
   \   000000   74EC         MOV     A,#-0x14
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 20
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV     ?V0 + 0,R2
   \   000007   8B..         MOV     ?V0 + 1,R3
   3109            zclReadReportCfgRspCmd_t *readReportCfgRspCmd;
   3110            uint8 reportChangeLen;
   3111            uint8 *pBuf = pCmd->pData;
   \   000009   12....       LCALL   ?Subroutine113 & 0xFFFF
   3112            uint8 *dataPtr;
   3113            uint8 numAttr = 0;
   \                     ??CrossCallReturnLabel_449:
   \   00000C   75..00       MOV     ?V0 + 4,#0x0
   3114            uint8 hdrLen;
   3115            uint16 dataLen = 0;
   \   00000F   75..00       MOV     ?V0 + 2,#0x0
   \   000012   75..00       MOV     ?V0 + 3,#0x0
   \   000015   8003         SJMP    ??CrossCallReturnLabel_437
   3116          
   3117            // Calculate the length of the response command
   3118            while ( pBuf < ( pCmd->pData + pCmd->dataLen ) )
   3119            {
   3120              uint8 status;
   3121              uint8 direction;
   3122          
   3123              numAttr++;
   3124              status = *pBuf++;
   3125              direction = *pBuf++;
   3126              pBuf += 2; // move pass the attribute ID
   3127          
   3128              if ( status == ZCL_STATUS_SUCCESS )
   3129              {
   3130                if ( direction == ZCL_SEND_ATTR_REPORTS )
   3131                {
   3132                  uint8 dataType = *pBuf++;
   3133                  pBuf += 4; // move pass the Min and Max Reporting Intervals
   3134          
   3135                  // For attributes of 'discrete' data types this field is omitted
   3136                  if ( zclAnalogDataType( dataType ) )
   3137                  {
   3138                    reportChangeLen = zclGetDataTypeLength( dataType );
   3139                    pBuf += reportChangeLen;
   3140          
   3141                    // add padding if needed
   3142                    if ( PADDING_NEEDED( reportChangeLen ) )
   3143                    {
   3144                      reportChangeLen++;
   3145                    }
   3146          
   3147                    dataLen += reportChangeLen;
   3148                  }
   3149                }
   3150                else
   3151                {
   3152                  pBuf += 2; // move pass the Timeout field
   \                     ??zclParseInReadReportCfgRspCmd_0:
   \   000017   12....       LCALL   ??Subroutine237_0 & 0xFFFF
   3153                }
   \                     ??CrossCallReturnLabel_437:
   \   00001A   12....       LCALL   ?Subroutine52 & 0xFFFF
   \                     ??CrossCallReturnLabel_58:
   \   00001D   503B         JNC     ??zclParseInReadReportCfgRspCmd_1
   \   00001F   05..         INC     ?V0 + 4
   \   000021   8E82         MOV     DPL,R6
   \   000023   8F83         MOV     DPH,R7
   \   000025   12....       LCALL   ??Subroutine248_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_475:
   \   000028   12....       LCALL   ?Subroutine148 & 0xFFFF
   \                     ??CrossCallReturnLabel_221:
   \   00002B   70ED         JNZ     ??CrossCallReturnLabel_437
   \   00002D   E9           MOV     A,R1
   \   00002E   70E7         JNZ     ??zclParseInReadReportCfgRspCmd_0
   \   000030   8E82         MOV     DPL,R6
   \   000032   8F83         MOV     DPH,R7
   \   000034   E0           MOVX    A,@DPTR
   \   000035   F5..         MOV     ?V0 + 5,A
   \   000037   12....       LCALL   ?Subroutine149 & 0xFFFF
   \                     ??CrossCallReturnLabel_223:
   \   00003A                ; Setup parameters for call to function zclAnalogDataType
   \   00003A   A9..         MOV     R1,?V0 + 5
   \   00003C   12....       LCALL   ??zclAnalogDataType?relay
   \   00003F   E9           MOV     A,R1
   \   000040   60D8         JZ      ??CrossCallReturnLabel_437
   \   000042                ; Setup parameters for call to function zclGetDataTypeLength
   \   000042   A9..         MOV     R1,?V0 + 5
   \   000044   12....       LCALL   ?Subroutine138 & 0xFFFF
   \                     ??CrossCallReturnLabel_205:
   \   000047   5001         JNC     ??zclParseInReadReportCfgRspCmd_2
   \   000049   08           INC     R0
   \                     ??zclParseInReadReportCfgRspCmd_2:
   \   00004A   88..         MOV     ?V0 + 6,R0
   \   00004C   E5..         MOV     A,?V0 + 2
   \   00004E   25..         ADD     A,?V0 + 6
   \   000050   F5..         MOV     ?V0 + 2,A
   \   000052   E5..         MOV     A,?V0 + 3
   \   000054   3400         ADDC    A,#0x0
   \   000056   F5..         MOV     ?V0 + 3,A
   \   000058   80C0         SJMP    ??CrossCallReturnLabel_437
   3154              }
   3155            } // while loop
   3156          
   3157            hdrLen = sizeof( zclReadReportCfgRspCmd_t ) + ( numAttr * sizeof( zclReportCfgRspRec_t ) );
   \                     ??zclParseInReadReportCfgRspCmd_1:
   \   00005A   75F00D       MOV     B,#0xd
   \   00005D   E5..         MOV     A,?V0 + 4
   \   00005F   A4           MUL     AB
   \   000060   04           INC     A
   \   000061   F5..         MOV     ?V0 + 10,A
   3158          
   3159            readReportCfgRspCmd = (zclReadReportCfgRspCmd_t *)osal_mem_alloc( hdrLen + dataLen );
   \   000063                ; Setup parameters for call to function osal_mem_alloc
   \   000063   25..         ADD     A,?V0 + 2
   \   000065   FA           MOV     R2,A
   \   000066   E4           CLR     A
   \   000067   35..         ADDC    A,?V0 + 3
   \   000069   12....       LCALL   ?Subroutine123 & 0xFFFF
   3160            if ( readReportCfgRspCmd != NULL )
   \                     ??CrossCallReturnLabel_187:
   \   00006C   7003         JNZ     $+5
   \   00006E   02....       LJMP    ??zclParseInReadReportCfgRspCmd_3 & 0xFFFF
   3161            {
   3162              pBuf = pCmd->pData;
   \   000071   12....       LCALL   ?Subroutine112 & 0xFFFF
   3163              dataPtr = (uint8 *)( (uint8 *)readReportCfgRspCmd + hdrLen );
   \                     ??CrossCallReturnLabel_171:
   \   000074   12....       LCALL   ?Subroutine194 & 0xFFFF
   3164          
   3165              readReportCfgRspCmd->numAttr = numAttr;
   \                     ??CrossCallReturnLabel_281:
   \   000077   E5..         MOV     A,?V0 + 4
   \   000079   F0           MOVX    @DPTR,A
   3166              for ( uint8 i = 0; i < numAttr; i++ )
   \   00007A   75..00       MOV     ?V0 + 5,#0x0
   \   00007D   8009         SJMP    ??zclParseInReadReportCfgRspCmd_4
   3167              {
   3168                zclReportCfgRspRec_t *reportRspRec = &(readReportCfgRspCmd->attrList[i]);
   3169          
   3170                reportRspRec->status = *pBuf++;
   3171                reportRspRec->direction = *pBuf++;
   3172                reportRspRec->attrID = BUILD_UINT16( pBuf[0], pBuf[1] );
   3173                pBuf += 2;
   3174          
   3175                if ( reportRspRec->status == ZCL_STATUS_SUCCESS )
   3176                {
   3177                  if ( reportRspRec->direction == ZCL_SEND_ATTR_REPORTS )
   3178                  {
   3179                    reportRspRec->dataType = *pBuf++;
   3180                    reportRspRec->minReportInt = BUILD_UINT16( pBuf[0], pBuf[1] );
   3181                    pBuf += 2;
   3182                    reportRspRec->maxReportInt = BUILD_UINT16( pBuf[0], pBuf[1] );
   3183                    pBuf += 2;
   3184          
   3185                    if ( zclAnalogDataType( reportRspRec->dataType ) )
   3186                    {
   3187                      zcl_BuildAnalogData( reportRspRec->dataType, dataPtr, pBuf);
   3188                      reportRspRec->reportableChange = dataPtr;
   3189          
   3190                      reportChangeLen = zclGetDataTypeLength( reportRspRec->dataType );
   3191                      pBuf += reportChangeLen;
   3192          
   3193                      // advance attribute data pointer
   3194                      if ( PADDING_NEEDED( reportChangeLen ) )
   3195                      {
   3196                        reportChangeLen++;
   3197                      }
   3198          
   3199                      dataPtr += reportChangeLen;
   3200                    }
   3201                  }
   3202                  else
   3203                  {
   3204                    reportRspRec->timeoutPeriod = BUILD_UINT16( pBuf[0], pBuf[1] );
   \                     ??zclParseInReadReportCfgRspCmd_5:
   \   00007F   12....       LCALL   ?Subroutine68 & 0xFFFF
   3205                    pBuf += 2;
   3206                  }
   \                     ??CrossCallReturnLabel_92:
   \   000082   A3           INC     DPTR
   \   000083   12....       LCALL   ?Subroutine34 & 0xFFFF
   \                     ??CrossCallReturnLabel_469:
   \   000086   05..         INC     ?V0 + 5
   \                     ??zclParseInReadReportCfgRspCmd_4:
   \   000088   E5..         MOV     A,?V0 + 5
   \   00008A   C3           CLR     C
   \   00008B   95..         SUBB    A,?V0 + 4
   \   00008D   4003         JC      $+5
   \   00008F   02....       LJMP    ??zclParseInReadReportCfgRspCmd_3 & 0xFFFF
   \   000092   E5..         MOV     A,?V0 + 5
   \   000094   75F00D       MOV     B,#0xd
   \   000097   12....       LCALL   ?Subroutine142 & 0xFFFF
   \                     ??CrossCallReturnLabel_211:
   \   00009A   12....       LCALL   ?Subroutine116 & 0xFFFF
   \                     ??CrossCallReturnLabel_177:
   \   00009D   12....       LCALL   ?Subroutine26 & 0xFFFF
   \                     ??CrossCallReturnLabel_23:
   \   0000A0   12....       LCALL   ?Subroutine42 & 0xFFFF
   \                     ??CrossCallReturnLabel_48:
   \   0000A3   12....       LCALL   ?Subroutine99 & 0xFFFF
   \                     ??CrossCallReturnLabel_148:
   \   0000A6   A3           INC     DPTR
   \   0000A7   12....       LCALL   ?Subroutine33 & 0xFFFF
   \                     ??CrossCallReturnLabel_34:
   \   0000AA   70DA         JNZ     ??CrossCallReturnLabel_469
   \   0000AC   85..82       MOV     DPL,?V0 + 0
   \   0000AF   85..83       MOV     DPH,?V0 + 1
   \   0000B2   A3           INC     DPTR
   \   0000B3   E0           MOVX    A,@DPTR
   \   0000B4   8E82         MOV     DPL,R6
   \   0000B6   8F83         MOV     DPH,R7
   \   0000B8   70C5         JNZ     ??zclParseInReadReportCfgRspCmd_5
   \   0000BA   E0           MOVX    A,@DPTR
   \   0000BB   F9           MOV     R1,A
   \   0000BC   E5..         MOV     A,?V0 + 0
   \   0000BE   2404         ADD     A,#0x4
   \   0000C0   F5..         MOV     ?V0 + 6,A
   \   0000C2   E5..         MOV     A,?V0 + 1
   \   0000C4   3400         ADDC    A,#0x0
   \   0000C6   F5..         MOV     ?V0 + 7,A
   \   0000C8   E9           MOV     A,R1
   \   0000C9   85..82       MOV     DPL,?V0 + 6
   \   0000CC   85..83       MOV     DPH,?V0 + 7
   \   0000CF   12....       LCALL   ?Subroutine23 & 0xFFFF
   \                     ??CrossCallReturnLabel_17:
   \   0000D2   A3           INC     DPTR
   \   0000D3   12....       LCALL   ?Subroutine18 & 0xFFFF
   \                     ??CrossCallReturnLabel_9:
   \   0000D6   A3           INC     DPTR
   \   0000D7   12....       LCALL   ?Subroutine28 & 0xFFFF
   \                     ??CrossCallReturnLabel_25:
   \   0000DA   60AA         JZ      ??CrossCallReturnLabel_469
   \   0000DC                ; Setup parameters for call to function zcl_BuildAnalogData
   \   0000DC   EE           MOV     A,R6
   \   0000DD   FC           MOV     R4,A
   \   0000DE   EF           MOV     A,R7
   \   0000DF   FD           MOV     R5,A
   \   0000E0   AA..         MOV     R2,?V0 + 2
   \   0000E2   AB..         MOV     R3,?V0 + 3
   \   0000E4   85..82       MOV     DPL,?V0 + 6
   \   0000E7   85..83       MOV     DPH,?V0 + 7
   \   0000EA   E0           MOVX    A,@DPTR
   \   0000EB   F9           MOV     R1,A
   \   0000EC   12....       LCALL   ??zcl_BuildAnalogData?relay
   \   0000EF   E5..         MOV     A,?V0 + 0
   \   0000F1   240B         ADD     A,#0xb
   \   0000F3   F582         MOV     DPL,A
   \   0000F5   E5..         MOV     A,?V0 + 1
   \   0000F7   12....       LCALL   ??Subroutine270_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_599:
   \   0000FA   E5..         MOV     A,?V0 + 2
   \   0000FC   F0           MOVX    @DPTR,A
   \   0000FD   A3           INC     DPTR
   \   0000FE   E5..         MOV     A,?V0 + 3
   \   000100   F0           MOVX    @DPTR,A
   \   000101                ; Setup parameters for call to function zclGetDataTypeLength
   \   000101   85..82       MOV     DPL,?V0 + 6
   \   000104   85..83       MOV     DPH,?V0 + 7
   \   000107   12....       LCALL   ?Subroutine72 & 0xFFFF
   \                     ??CrossCallReturnLabel_103:
   \   00010A   5001         JNC     ??zclParseInReadReportCfgRspCmd_6
   \   00010C   08           INC     R0
   \                     ??zclParseInReadReportCfgRspCmd_6:
   \   00010D   88..         MOV     ?V0 + 0,R0
   \   00010F   E5..         MOV     A,?V0 + 2
   \   000111   25..         ADD     A,?V0 + 0
   \   000113   F5..         MOV     ?V0 + 2,A
   \   000115   E5..         MOV     A,?V0 + 3
   \   000117   3400         ADDC    A,#0x0
   \   000119   F5..         MOV     ?V0 + 3,A
   \   00011B   02....       LJMP    ??CrossCallReturnLabel_469 & 0xFFFF
   3207                }
   3208              }
   3209            }
   3210          
   3211            return ( (void *)readReportCfgRspCmd );
   \                     ??zclParseInReadReportCfgRspCmd_3:
   \   00011E   02....       LJMP    ?Subroutine10 & 0xFFFF
   3212          }
   3213          
   3214          /*********************************************************************
   3215           * @fn      zclParseInReportCmd
   3216           *
   3217           * @brief   Parse the "Profile" Report Command
   3218           *
   3219           *      NOTE: THIS FUNCTION ALLOCATES THE RETURN BUFFER, SO THE CALLING
   3220           *            FUNCTION IS RESPONSIBLE TO FREE THE MEMORY.
   3221           *
   3222           * @param   pCmd - pointer to incoming data to parse
   3223           *
   3224           * @return  pointer to the parsed command structure
   3225           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3226          void *zclParseInReportCmd( zclParseCmd_t *pCmd )
   \                     zclParseInReportCmd:
   3227          {
   \   000000   74EA         MOV     A,#-0x16
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 22
   \   000005                ; Auto size: 0
   \   000005   12....       LCALL   ?Subroutine80 & 0xFFFF
   3228            zclReportCmd_t *reportCmd;
   3229            uint8 *pBuf = pCmd->pData;
   3230            uint16 attrDataLen;
   3231            uint8 *dataPtr;
   3232            uint8 numAttr = 0;
   3233            uint8 hdrLen;
   3234            uint16 dataLen = 0;
   \                     ??CrossCallReturnLabel_119:
   \   000008   8010         SJMP    ??CrossCallReturnLabel_195
   3235          
   3236            // find out the number of attributes and the length of attribute data
   3237            while ( pBuf < ( pCmd->pData + pCmd->dataLen ) )
   3238            {
   3239              uint8 dataType;
   3240          
   3241              numAttr++;
   \                     ??zclParseInReportCmd_0:
   \   00000A   12....       LCALL   ?Subroutine62 & 0xFFFF
   3242              pBuf += 2; // move pass attribute id
   3243          
   3244              dataType = *pBuf++;
   3245          
   3246              attrDataLen = zclGetAttrDataLength( dataType, pBuf );
   3247              pBuf += attrDataLen; // move pass attribute data
   3248          
   3249              // add padding if needed
   3250              if ( PADDING_NEEDED( attrDataLen ) )
   \                     ??CrossCallReturnLabel_81:
   \   00000D   5008         JNC     ??CrossCallReturnLabel_502
   3251              {
   3252                attrDataLen++;
   \   00000F   2401         ADD     A,#0x1
   \   000011   F5..         MOV     ?V0 + 0,A
   \   000013   EB           MOV     A,R3
   \   000014   12....       LCALL   ??Subroutine251_0 & 0xFFFF
   3253              }
   3254          
   3255              dataLen += attrDataLen;
   \                     ??CrossCallReturnLabel_502:
   \   000017   12....       LCALL   ?Subroutine127 & 0xFFFF
   3256            }
   \                     ??CrossCallReturnLabel_195:
   \   00001A   12....       LCALL   ?Subroutine64 & 0xFFFF
   \                     ??CrossCallReturnLabel_85:
   \   00001D   40EB         JC      ??zclParseInReportCmd_0
   3257          
   3258            hdrLen = sizeof( zclReportCmd_t ) + ( numAttr * sizeof( zclReport_t ) );
   \   00001F   12....       LCALL   ?Subroutine118 & 0xFFFF
   3259          
   3260            reportCmd = (zclReportCmd_t *)osal_mem_alloc( hdrLen + dataLen );
   3261            if (reportCmd != NULL )
   \                     ??CrossCallReturnLabel_452:
   \   000022   6025         JZ      ??zclParseInReportCmd_1
   3262            {
   3263              pBuf = pCmd->pData;
   \   000024   12....       LCALL   ?Subroutine63 & 0xFFFF
   3264              dataPtr = (uint8 *)( (uint8 *)reportCmd + hdrLen );
   3265          
   3266              reportCmd->numAttr = numAttr;
   3267              for ( uint8 i = 0; i < numAttr; i++ )
   \                     ??CrossCallReturnLabel_83:
   \   000027   8019         SJMP    ??CrossCallReturnLabel_193
   3268              {
   3269                zclReport_t *reportRec = &(reportCmd->attrList[i]);
   \                     ??zclParseInReportCmd_2:
   \   000029   12....       LCALL   ?Subroutine15 & 0xFFFF
   3270          
   3271                reportRec->attrID = BUILD_UINT16( pBuf[0], pBuf[1] );
   3272                pBuf += 2;
   3273                reportRec->dataType = *pBuf++;
   3274          
   3275                attrDataLen = zclGetAttrDataLength( reportRec->dataType, pBuf );
   3276                osal_memcpy( dataPtr, pBuf, attrDataLen );
   \                     ??CrossCallReturnLabel_3:
   \   00002C   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   00002F   12....       LCALL   ?Subroutine137 & 0xFFFF
   \                     ??CrossCallReturnLabel_441:
   \   000032   12....       LCALL   ?DEALLOC_XSTACK8
   3277                reportRec->attrData = dataPtr;
   \   000035   12....       LCALL   ?Subroutine22 & 0xFFFF
   3278          
   3279                pBuf += attrDataLen; // move pass attribute data
   3280          
   3281                // advance attribute data pointer
   3282                if ( PADDING_NEEDED( attrDataLen ) )
   \                     ??CrossCallReturnLabel_455:
   \   000038   5005         JNC     ??CrossCallReturnLabel_509
   3283                {
   3284                  attrDataLen++;
   \   00003A   2401         ADD     A,#0x1
   \   00003C   12....       LCALL   ??Subroutine250_0 & 0xFFFF
   3285                }
   3286          
   3287                dataPtr += attrDataLen;
   \                     ??CrossCallReturnLabel_509:
   \   00003F   12....       LCALL   ?Subroutine126 & 0xFFFF
   3288              }
   \                     ??CrossCallReturnLabel_193:
   \   000042   E5..         MOV     A,?V0 + 8
   \   000044   C3           CLR     C
   \   000045   95..         SUBB    A,?V0 + 7
   \   000047   40E0         JC      ??zclParseInReportCmd_2
   3289            }
   3290          
   3291            return ( (void *)reportCmd );
   \                     ??zclParseInReportCmd_1:
   \   000049   02....       LJMP    ?Subroutine11 & 0xFFFF
   3292          }
   3293          #endif // ZCL_REPORT
   3294          
   3295          /*********************************************************************
   3296           * @fn      zclParseInDefaultRspCmd
   3297           *
   3298           * @brief   Parse the "Profile" Default Response Command
   3299           *
   3300           *      NOTE: THIS FUNCTION ALLOCATES THE RETURN BUFFER, SO THE CALLING
   3301           *            FUNCTION IS RESPONSIBLE TO FREE THE MEMORY.
   3302           *
   3303           * @param   pCmd - pointer to incoming data to parse
   3304           *
   3305           * @return  pointer to the parsed command structure
   3306           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3307          static void *zclParseInDefaultRspCmd( zclParseCmd_t *pCmd )
   \                     zclParseInDefaultRspCmd:
   3308          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   3309            zclDefaultRspCmd_t *defaultRspCmd;
   3310            uint8 *pBuf = pCmd->pData;
   \   000005   12....       LCALL   ?Subroutine113 & 0xFFFF
   3311          
   3312            defaultRspCmd = (zclDefaultRspCmd_t *)osal_mem_alloc( sizeof ( zclDefaultRspCmd_t ) );
   \                     ??CrossCallReturnLabel_450:
   \   000008                ; Setup parameters for call to function osal_mem_alloc
   \   000008   7A02         MOV     R2,#0x2
   \   00000A   7B00         MOV     R3,#0x0
   \   00000C   12....       LCALL   ??osal_mem_alloc?relay
   3313            if ( defaultRspCmd != NULL )
   \   00000F   EA           MOV     A,R2
   \   000010   4B           ORL     A,R3
   \   000011   600B         JZ      ??zclParseInDefaultRspCmd_0
   3314            {
   3315              defaultRspCmd->commandID = *pBuf++;
   \   000013   12....       LCALL   ?Subroutine110 & 0xFFFF
   \                     ??CrossCallReturnLabel_524:
   \   000016   12....       LCALL   ??Subroutine227_0 & 0xFFFF
   3316              defaultRspCmd->statusCode = *pBuf;
   \                     ??CrossCallReturnLabel_373:
   \   000019   12....       LCALL   ??Subroutine254_0 & 0xFFFF
   3317            }
   \                     ??CrossCallReturnLabel_520:
   \   00001C   A3           INC     DPTR
   \   00001D   F0           MOVX    @DPTR,A
   3318          
   3319            return ( (void *)defaultRspCmd );
   \                     ??zclParseInDefaultRspCmd_0:
   \   00001E   02....       LJMP    ?Subroutine8 & 0xFFFF
   3320          }
   3321          
   3322          #ifdef ZCL_DISCOVER
   3323          /*********************************************************************
   3324           * @fn      zclParseInDiscCmd
   3325           *
   3326           * @brief   Parse the "Profile" Discovery Commands
   3327           *
   3328           *      NOTE: THIS FUNCTION ALLOCATES THE RETURN BUFFER, SO THE CALLING
   3329           *            FUNCTION IS RESPONSIBLE TO FREE THE MEMORY.
   3330           *
   3331           * @param   pCmd - pointer to incoming data to parse
   3332           *
   3333           * @return  pointer to the parsed command structure
   3334           */
   3335          void *zclParseInDiscCmd( zclParseCmd_t *pCmd )
   3336          {
   3337            zclDiscoverCmd_t *discoverCmd;
   3338            uint8 *pBuf = pCmd->pData;
   3339          
   3340            discoverCmd = (zclDiscoverCmd_t *)osal_mem_alloc( sizeof ( zclDiscoverCmd_t ) );
   3341            if ( discoverCmd != NULL )
   3342            {
   3343              discoverCmd->startAttr = BUILD_UINT16( pBuf[0], pBuf[1] );
   3344              pBuf += 2;
   3345              discoverCmd->maxAttrIDs = *pBuf;
   3346            }
   3347          
   3348            return ( (void *)discoverCmd );
   3349          }
   3350          
   3351          /*********************************************************************
   3352           * @fn      zclParseInDiscRspCmd
   3353           *
   3354           * @brief   Parse the "Profile" Discovery Response Commands
   3355           *
   3356           *      NOTE: THIS FUNCTION ALLOCATES THE RETURN BUFFER, SO THE CALLING
   3357           *            FUNCTION IS RESPONSIBLE TO FREE THE MEMORY.
   3358           *
   3359           * @param   pCmd - pointer to incoming data to parse
   3360           *
   3361           * @return  pointer to the parsed command structure
   3362           */
   3363          #define ZCLDISCRSPCMD_DATALEN(a)  ((a)-1) // data len - Discovery Complete
   3364          static void *zclParseInDiscRspCmd( zclParseCmd_t *pCmd )
   3365          {
   3366            zclDiscoverRspCmd_t *discoverRspCmd;
   3367            uint8 *pBuf = pCmd->pData;
   3368            uint8 numAttr = ZCLDISCRSPCMD_DATALEN(pCmd->dataLen) / ( 2 + 1 ); // Attr ID + Data Type
   3369          
   3370            discoverRspCmd = (zclDiscoverRspCmd_t *)osal_mem_alloc( sizeof ( zclDiscoverRspCmd_t )
   3371                                                           + ( numAttr * sizeof(zclDiscoverInfo_t) ) );
   3372            if ( discoverRspCmd != NULL )
   3373            {
   3374              discoverRspCmd->discComplete = *pBuf++;
   3375              discoverRspCmd->numAttr = numAttr;
   3376          
   3377              for ( uint8 i = 0; i < numAttr; i++ )
   3378              {
   3379                discoverRspCmd->attrList[i].attrID = BUILD_UINT16( pBuf[0], pBuf[1] );
   3380                pBuf += 2;
   3381                discoverRspCmd->attrList[i].dataType = *pBuf++;;
   3382              }
   3383            }
   3384          
   3385            return ( (void *)discoverRspCmd );
   3386          }
   3387          #endif // ZCL_DISCOVER
   3388          
   3389          #ifdef ZCL_READ
   3390          /*********************************************************************
   3391           * @fn      zclProcessInReadCmd
   3392           *
   3393           * @brief   Process the "Profile" Read Command
   3394           *
   3395           * @param   pInMsg - incoming message to process
   3396           *
   3397           * @return  TRUE if command processed. FALSE, otherwise.
   3398           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine5:
   \   000000   7408         MOV     A,#0x8
   \   000002   12....       LCALL   ?DEALLOC_XSTACK8
   \   000005                REQUIRE ??Subroutine222_0
   \   000005                ; // Fall through to label ??Subroutine222_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3399          static uint8 zclProcessInReadCmd( zclIncoming_t *pInMsg )
   \                     zclProcessInReadCmd:
   3400          {
   \   000000   74EA         MOV     A,#-0x16
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 22
   \   000005                ; Auto size: 8
   \   000005   74F8         MOV     A,#-0x8
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   8A..         MOV     ?V0 + 0,R2
   \   00000C   8B..         MOV     ?V0 + 1,R3
   3401            zclReadCmd_t *readCmd;
   3402            zclReadRspCmd_t *readRspCmd;
   3403            zclAttrRec_t attrRec;
   3404            uint16 len;
   3405          
   3406            readCmd = (zclReadCmd_t *)pInMsg->attrCmd;
   \   00000E   12....       LCALL   ??Subroutine268_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_603:
   \   000011   12....       LCALL   ?Subroutine77 & 0xFFFF
   3407          
   3408            // calculate the length of the response status record
   3409            len = sizeof( zclReadRspCmd_t ) + (readCmd->numAttr * sizeof( zclReadRspStatus_t ));
   3410          
   3411            readRspCmd = osal_mem_alloc( len );
   \                     ??CrossCallReturnLabel_112:
   \   000014                ; Setup parameters for call to function osal_mem_alloc
   \   000014   85..82       MOV     DPL,?V0 + 6
   \   000017   F583         MOV     DPH,A
   \   000019   E0           MOVX    A,@DPTR
   \   00001A   75F006       MOV     B,#0x6
   \   00001D   A4           MUL     AB
   \   00001E   2401         ADD     A,#0x1
   \   000020   FA           MOV     R2,A
   \   000021   E5F0         MOV     A,B
   \   000023   3400         ADDC    A,#0x0
   \   000025   12....       LCALL   ?Subroutine122 & 0xFFFF
   3412            if ( readRspCmd == NULL )
   \                     ??CrossCallReturnLabel_185:
   \   000028   7005         JNZ     ??zclProcessInReadCmd_0
   3413            {
   3414              return FALSE; // EMBEDDED RETURN
   \   00002A   7900         MOV     R1,#0x0
   \   00002C   02....       LJMP    ??zclProcessInReadCmd_1 & 0xFFFF
   3415            }
   3416          
   3417            readRspCmd->numAttr = readCmd->numAttr;
   \                     ??zclProcessInReadCmd_0:
   \   00002F   85..82       MOV     DPL,?V0 + 6
   \   000032   85..83       MOV     DPH,?V0 + 7
   \   000035   12....       LCALL   ??Subroutine254_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_521:
   \   000038   F0           MOVX    @DPTR,A
   3418            for ( uint8 i = 0; i < readCmd->numAttr; i++ )
   \   000039   75..00       MOV     ?V0 + 2,#0x0
   \   00003C   800B         SJMP    ??zclProcessInReadCmd_2
   3419            {
   3420              zclReadRspStatus_t *statusRec = &(readRspCmd->attrList[i]);
   3421          
   3422              statusRec->attrID = readCmd->attrID[i];
   3423          
   3424              if ( zclFindAttrRec( pInMsg->msg->endPoint, pInMsg->msg->clusterId,
   3425                                   readCmd->attrID[i], &attrRec ) )
   3426              {
   3427                if ( zcl_AccessCtrlRead( attrRec.attr.accessControl ) )
   3428                {
   3429                  statusRec->status = zclAuthorizeRead( pInMsg->msg->endPoint,
   3430                                                        &(pInMsg->msg->srcAddr), &attrRec );
   3431                  if ( statusRec->status == ZCL_STATUS_SUCCESS )
   3432                  {
   3433                    statusRec->data = attrRec.attr.dataPtr;
   3434                    statusRec->dataType = attrRec.attr.dataType;
   3435                  }
   3436                }
   3437                else
   3438                {
   3439                  statusRec->status = ZCL_STATUS_WRITE_ONLY;
   3440                }
   3441              }
   3442              else
   3443              {
   3444                statusRec->status = ZCL_STATUS_UNSUPPORTED_ATTRIBUTE;
   \                     ??zclProcessInReadCmd_3:
   \   00003E   8E82         MOV     DPL,R6
   \   000040   8F83         MOV     DPH,R7
   \   000042   A3           INC     DPTR
   \   000043   A3           INC     DPTR
   \   000044   7486         MOV     A,#-0x7a
   \                     ??zclProcessInReadCmd_4:
   \   000046   F0           MOVX    @DPTR,A
   3445              }
   \                     ??zclProcessInReadCmd_5:
   \   000047   05..         INC     ?V0 + 2
   \                     ??zclProcessInReadCmd_2:
   \   000049   85..82       MOV     DPL,?V0 + 6
   \   00004C   85..83       MOV     DPH,?V0 + 7
   \   00004F   12....       LCALL   ??Subroutine215_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_328:
   \   000052   4003         JC      $+5
   \   000054   02....       LJMP    ??zclProcessInReadCmd_6 & 0xFFFF
   \   000057   85..82       MOV     DPL,?V0 + 2
   \   00005A   A882         MOV     R0,DPL
   \   00005C   E8           MOV     A,R0
   \   00005D   75F006       MOV     B,#0x6
   \   000060   A4           MUL     AB
   \   000061   FA           MOV     R2,A
   \   000062   ABF0         MOV     R3,B
   \   000064   12....       LCALL   ?Subroutine139 & 0xFFFF
   \                     ??CrossCallReturnLabel_207:
   \   000067   AE82         MOV     R6,DPL
   \   000069   AF83         MOV     R7,DPH
   \   00006B   E8           MOV     A,R0
   \   00006C   C3           CLR     C
   \   00006D   33           RLC     A
   \   00006E   F8           MOV     R0,A
   \   00006F   E4           CLR     A
   \   000070   33           RLC     A
   \   000071   F9           MOV     R1,A
   \   000072   E5..         MOV     A,?V0 + 6
   \   000074   28           ADD     A,R0
   \   000075   F582         MOV     DPL,A
   \   000077   E5..         MOV     A,?V0 + 7
   \   000079   12....       LCALL   ?Subroutine205 & 0xFFFF
   \                     ??CrossCallReturnLabel_316:
   \   00007C   AA82         MOV     R2,DPL
   \   00007E   AB83         MOV     R3,DPH
   \   000080   12....       LCALL   ??Subroutine248_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_482:
   \   000083   8E82         MOV     DPL,R6
   \   000085   8F83         MOV     DPH,R7
   \   000087   12....       LCALL   ??Subroutine256_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_537:
   \   00008A   85..82       MOV     DPL,?V0 + 0
   \   00008D   85..83       MOV     DPH,?V0 + 1
   \   000090   12....       LCALL   ?Subroutine71 & 0xFFFF
   \                     ??CrossCallReturnLabel_100:
   \   000093   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000096   8A82         MOV     DPL,R2
   \   000098   8B83         MOV     DPH,R3
   \   00009A   12....       LCALL   ?Subroutine53 & 0xFFFF
   \                     ??CrossCallReturnLabel_59:
   \   00009D   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000A0   E9           MOV     A,R1
   \   0000A1   609B         JZ      ??zclProcessInReadCmd_3
   \   0000A3   7405         MOV     A,#0x5
   \   0000A5   12....       LCALL   ?XSTACK_DISP0_8
   \   0000A8   E0           MOVX    A,@DPTR
   \   0000A9   A2E0         MOV     C,0xE0 /* A   */.0
   \   0000AB   507E         JNC     ??zclProcessInReadCmd_7
   \   0000AD   85..82       MOV     DPL,?V0 + 0
   \   0000B0   85..83       MOV     DPH,?V0 + 1
   \   0000B3   E0           MOVX    A,@DPTR
   \   0000B4   2406         ADD     A,#0x6
   \   0000B6   F5..         MOV     ?V0 + 8,A
   \   0000B8   A3           INC     DPTR
   \   0000B9   E0           MOVX    A,@DPTR
   \   0000BA   3400         ADDC    A,#0x0
   \   0000BC   F5..         MOV     ?V0 + 9,A
   \   0000BE   7405         MOV     A,#0x5
   \   0000C0   12....       LCALL   ?XSTACK_DISP0_8
   \   0000C3   E0           MOVX    A,@DPTR
   \   0000C4   A2E4         MOV     C,0xE0 /* A   */.4
   \   0000C6   5036         JNC     ??zclProcessInReadCmd_8
   \   0000C8                ; Setup parameters for call to function zclGetAuthorizeCB
   \   0000C8   85..82       MOV     DPL,?V0 + 0
   \   0000CB   85..83       MOV     DPH,?V0 + 1
   \   0000CE   E0           MOVX    A,@DPTR
   \   0000CF   2414         ADD     A,#0x14
   \   0000D1   12....       LCALL   ??Subroutine271_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_604:
   \   0000D4   F9           MOV     R1,A
   \   0000D5   12....       LCALL   ??zclGetAuthorizeCB?relay
   \   0000D8   8A..         MOV     ?V0 + 10,R2
   \   0000DA   8B..         MOV     ?V0 + 11,R3
   \   0000DC   EA           MOV     A,R2
   \   0000DD   45..         ORL     A,?V0 + 11
   \   0000DF   601D         JZ      ??zclProcessInReadCmd_8
   \   0000E1                ; Setup parameters for indirect call
   \   0000E1   7901         MOV     R1,#0x1
   \   0000E3   85..82       MOV     DPL,?XSP + 0
   \   0000E6   85..83       MOV     DPH,?XSP + 1
   \   0000E9   AC82         MOV     R4,DPL
   \   0000EB   AD83         MOV     R5,DPH
   \   0000ED   AA..         MOV     R2,?V0 + 8
   \   0000EF   AB..         MOV     R3,?V0 + 9
   \   0000F1   85..82       MOV     DPL,?V0 + 10
   \   0000F4   85..83       MOV     DPH,?V0 + 11
   \   0000F7   12....       LCALL   ?CALL_IND
   \   0000FA   E9           MOV     A,R1
   \   0000FB   F8           MOV     R0,A
   \   0000FC   8002         SJMP    ??zclProcessInReadCmd_9
   \                     ??zclProcessInReadCmd_8:
   \   0000FE   7800         MOV     R0,#0x0
   \                     ??zclProcessInReadCmd_9:
   \   000100   EE           MOV     A,R6
   \   000101   2402         ADD     A,#0x2
   \   000103   F582         MOV     DPL,A
   \   000105   EF           MOV     A,R7
   \   000106   12....       LCALL   ??Subroutine270_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_600:
   \   000109   E8           MOV     A,R0
   \   00010A   F0           MOVX    @DPTR,A
   \   00010B   6003         JZ      $+5
   \   00010D   02....       LJMP    ??zclProcessInReadCmd_5 & 0xFFFF
   \   000110   7406         MOV     A,#0x6
   \   000112   12....       LCALL   ?XSTACK_DISP0_8
   \   000115   12....       LCALL   ?Subroutine89 & 0xFFFF
   \                     ??CrossCallReturnLabel_133:
   \   000118   12....       LCALL   ?Subroutine45 & 0xFFFF
   \                     ??CrossCallReturnLabel_539:
   \   00011B   7404         MOV     A,#0x4
   \   00011D   12....       LCALL   ?XSTACK_DISP0_8
   \   000120   E0           MOVX    A,@DPTR
   \   000121   8E82         MOV     DPL,R6
   \   000123   8F83         MOV     DPH,R7
   \   000125   A3           INC     DPTR
   \   000126   A3           INC     DPTR
   \   000127   A3           INC     DPTR
   \   000128   02....       LJMP    ??zclProcessInReadCmd_4 & 0xFFFF
   \                     ??zclProcessInReadCmd_7:
   \   00012B   8E82         MOV     DPL,R6
   \   00012D   8F83         MOV     DPH,R7
   \   00012F   A3           INC     DPTR
   \   000130   A3           INC     DPTR
   \   000131   748F         MOV     A,#-0x71
   \   000133   02....       LJMP    ??zclProcessInReadCmd_4 & 0xFFFF
   3446            }
   3447          
   3448            // Build and send Read Response command
   3449            zcl_SendReadRsp( pInMsg->msg->endPoint, &(pInMsg->msg->srcAddr), pInMsg->msg->clusterId,
   3450                             readRspCmd, ZCL_FRAME_SERVER_CLIENT_DIR,
   3451                             true, pInMsg->hdr.transSeqNum );
   \                     ??zclProcessInReadCmd_6:
   \   000136   85..82       MOV     DPL,?V0 + 0
   \   000139   85..83       MOV     DPH,?V0 + 1
   \   00013C   12....       LCALL   ??Subroutine255_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_526:
   \   00013F                ; Setup parameters for call to function zcl_SendReadRsp
   \   00013F   85..82       MOV     DPL,?V0 + 0
   \   000142   85..83       MOV     DPH,?V0 + 1
   \   000145   A3           INC     DPTR
   \   000146   A3           INC     DPTR
   \   000147   A3           INC     DPTR
   \   000148   A3           INC     DPTR
   \   000149   A3           INC     DPTR
   \   00014A   A3           INC     DPTR
   \   00014B   12....       LCALL   ?Subroutine103 & 0xFFFF
   \                     ??CrossCallReturnLabel_159:
   \   00014E   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000151   75..01       MOV     ?V0 + 0,#0x1
   \   000154   78..         MOV     R0,#?V0 + 0
   \   000156   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000159   78..         MOV     R0,#?V0 + 0
   \   00015B   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00015E   78..         MOV     R0,#?V0 + 4
   \   000160   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000163   85..82       MOV     DPL,?V0 + 8
   \   000166   85..83       MOV     DPH,?V0 + 9
   \   000169   A3           INC     DPTR
   \   00016A   A3           INC     DPTR
   \   00016B   A3           INC     DPTR
   \   00016C   A3           INC     DPTR
   \   00016D   12....       LCALL   ??Subroutine235_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_424:
   \   000170   12....       LCALL   ?Subroutine128 & 0xFFFF
   \                     ??CrossCallReturnLabel_196:
   \   000173   12....       LCALL   ??zcl_SendReadRsp?relay
   \   000176   7405         MOV     A,#0x5
   \   000178   12....       LCALL   ?DEALLOC_XSTACK8
   3452            osal_mem_free( readRspCmd );
   \   00017B                ; Setup parameters for call to function osal_mem_free
   \   00017B   AA..         MOV     R2,?V0 + 4
   \   00017D   AB..         MOV     R3,?V0 + 5
   \   00017F   12....       LCALL   ??osal_mem_free?relay
   3453          
   3454            return TRUE;
   \   000182   7901         MOV     R1,#0x1
   \                     ??zclProcessInReadCmd_1:
   \   000184   02....       LJMP    ?Subroutine5 & 0xFFFF
   3455          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine45:
   \   000000   A3           INC     DPTR
   \   000001   A3           INC     DPTR
   \   000002                REQUIRE ??Subroutine256_0
   \   000002                ; // Fall through to label ??Subroutine256_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine89:
   \   000000   12....       LCALL   ??Subroutine260_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_559:
   \   000003                ; Setup parameters for call to function zclWriteAttrDataUsingCB
   \   000003   8E82         MOV     DPL,R6
   \   000005   8F83         MOV     DPH,R7
   \   000007   A3           INC     DPTR
   \   000008   A3           INC     DPTR
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine128:
   \   000000   E5..         MOV     A,?V0 + 8
   \   000002   2406         ADD     A,#0x6
   \   000004   FA           MOV     R2,A
   \   000005   E5..         MOV     A,?V0 + 9
   \   000007   3400         ADDC    A,#0x0
   \   000009   FB           MOV     R3,A
   \   00000A   E5..         MOV     A,?V0 + 8
   \   00000C   12....       LCALL   ??Subroutine264_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_579:
   \   00000F   E5..         MOV     A,?V0 + 9
   \   000011   12....       LCALL   ??Subroutine226_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_570:
   \   000014   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine71:
   \   000000   12....       LCALL   ?Subroutine173 & 0xFFFF
   \                     ??CrossCallReturnLabel_530:
   \   000003                ; Setup parameters for call to function zclFindAttrRec
   \   000003                ; Setup parameters for call to function zclReadAttrDataUsingCB
   \   000003   85..82       MOV     DPL,?XSP + 0
   \   000006   85..83       MOV     DPH,?XSP + 1
   \   000009   8582..       MOV     ?V0 + 10,DPL
   \   00000C   8583..       MOV     ?V0 + 11,DPH
   \   00000F   78..         MOV     R0,#?V0 + 10
   \   000011   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine53:
   \   000000   12....       LCALL   ?Subroutine184 & 0xFFFF
   \                     ??CrossCallReturnLabel_271:
   \   000003   85..83       MOV     DPH,?V0 + 9
   \   000006   12....       LCALL   ?Subroutine171 & 0xFFFF
   \                     ??CrossCallReturnLabel_256:
   \   000009   E5..         MOV     A,?V0 + 9
   \   00000B   12....       LCALL   ?Subroutine188 & 0xFFFF
   \                     ??CrossCallReturnLabel_583:
   \   00000E   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine188:
   \   000000   3400         ADDC    A,#0x0
   \   000002   F583         MOV     DPH,A
   \   000004   E0           MOVX    A,@DPTR
   \   000005   F9           MOV     R1,A
   \   000006                REQUIRE ??Subroutine265_0
   \   000006                ; // Fall through to label ??Subroutine265_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine184:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   FC           MOV     R4,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   FD           MOV     R5,A
   \   000005   85..82       MOV     DPL,?V0 + 8
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine171:
   \   000000   A3           INC     DPTR
   \   000001   A3           INC     DPTR
   \   000002   A3           INC     DPTR
   \   000003   A3           INC     DPTR
   \   000004   E0           MOVX    A,@DPTR
   \   000005   FA           MOV     R2,A
   \   000006   A3           INC     DPTR
   \   000007   E0           MOVX    A,@DPTR
   \   000008   FB           MOV     R3,A
   \   000009   E5..         MOV     A,?V0 + 8
   \   00000B   2414         ADD     A,#0x14
   \   00000D   F582         MOV     DPL,A
   \   00000F   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine268_0:
   \   000000   EA           MOV     A,R2
   \   000001   240C         ADD     A,#0xc
   \   000003                REQUIRE ??Subroutine269_0
   \   000003                ; // Fall through to label ??Subroutine269_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine269_0:
   \   000000   F582         MOV     DPL,A
   \   000002   EB           MOV     A,R3
   \   000003                REQUIRE ??Subroutine270_0
   \   000003                ; // Fall through to label ??Subroutine270_0
   3456          #endif // ZCL_READ
   3457          
   3458          #ifdef ZCL_WRITE
   3459          /*********************************************************************
   3460           * @fn      processInWriteCmd
   3461           *
   3462           * @brief   Process the "Profile" Write and Write No Response Commands
   3463           *
   3464           * @param   pInMsg - incoming message to process
   3465           *
   3466           * @return  TRUE if command processed. FALSE, otherwise.
   3467           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine88:
   \   000000   85..82       MOV     DPL,?V0 + 2
   \   000003   85..83       MOV     DPH,?V0 + 3
   \   000006                REQUIRE ??Subroutine235_0
   \   000006                ; // Fall through to label ??Subroutine235_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3468          static uint8 zclProcessInWriteCmd( zclIncoming_t *pInMsg )
   \                     zclProcessInWriteCmd:
   3469          {
   \   000000   74EA         MOV     A,#-0x16
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 22
   \   000005                ; Auto size: 8
   \   000005   74F8         MOV     A,#-0x8
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   8A..         MOV     ?V0 + 4,R2
   \   00000C   8B..         MOV     ?V0 + 5,R3
   3470            zclWriteCmd_t *writeCmd;
   3471            zclWriteRspCmd_t *writeRspCmd;
   3472            uint8 sendRsp = FALSE;
   \   00000E   7F00         MOV     R7,#0x0
   3473            uint8 j = 0;
   \   000010   12....       LCALL   ?Subroutine132 & 0xFFFF
   3474          
   3475            writeCmd = (zclWriteCmd_t *)pInMsg->attrCmd;
   \                     ??CrossCallReturnLabel_592:
   \   000013   E0           MOVX    A,@DPTR
   \   000014   F5..         MOV     ?V0 + 12,A
   \   000016   A3           INC     DPTR
   \   000017   E0           MOVX    A,@DPTR
   \   000018   F5..         MOV     ?V0 + 13,A
   3476            if ( pInMsg->hdr.commandID == ZCL_CMD_WRITE )
   \   00001A   8A82         MOV     DPL,R2
   \   00001C   8B83         MOV     DPH,R3
   \   00001E   A3           INC     DPTR
   \   00001F   A3           INC     DPTR
   \   000020   A3           INC     DPTR
   \   000021   A3           INC     DPTR
   \   000022   A3           INC     DPTR
   \   000023   A3           INC     DPTR
   \   000024   A3           INC     DPTR
   \   000025   E0           MOVX    A,@DPTR
   \   000026   6402         XRL     A,#0x2
   \   000028   7011         JNZ     ??zclProcessInWriteCmd_0
   3477            {
   3478              // We need to send a response back - allocate space for it
   3479              writeRspCmd = (zclWriteRspCmd_t *)osal_mem_alloc( sizeof( zclWriteRspCmd_t )
   3480                      + sizeof( zclWriteRspStatus_t ) * writeCmd->numAttr );
   \   00002A                ; Setup parameters for call to function osal_mem_alloc
   \   00002A   85..82       MOV     DPL,?V0 + 12
   \   00002D   85..83       MOV     DPH,?V0 + 13
   \   000030   12....       LCALL   ?Subroutine66 & 0xFFFF
   3481              if ( writeRspCmd == NULL )
   \                     ??CrossCallReturnLabel_86:
   \   000033   7005         JNZ     ??zclProcessInWriteCmd_1
   3482              {
   3483                return FALSE; // EMBEDDED RETURN
   \   000035   7900         MOV     R1,#0x0
   \   000037   02....       LJMP    ??zclProcessInWriteCmd_2 & 0xFFFF
   3484              }
   3485          
   3486              sendRsp = TRUE;
   \                     ??zclProcessInWriteCmd_1:
   \   00003A   0F           INC     R7
   3487            }
   3488          
   3489            for ( uint8 i = 0; i < writeCmd->numAttr; i++ )
   \                     ??zclProcessInWriteCmd_0:
   \   00003B   8E..         MOV     ?V0 + 8,R6
   \   00003D   8017         SJMP    ??zclProcessInWriteCmd_3
   3490            {
   3491              zclAttrRec_t attrRec;
   3492              zclWriteRec_t *statusRec = &(writeCmd->attrList[i]);
   3493          
   3494              if ( zclFindAttrRec( pInMsg->msg->endPoint, pInMsg->msg->clusterId,
   3495                                   statusRec->attrID, &attrRec ) )
   3496              {
   3497                if ( statusRec->dataType == attrRec.attr.dataType )
   3498                {
   3499                  uint8 status;
   3500          
   3501                  // Write the new attribute value
   3502                  if ( attrRec.attr.dataPtr != NULL )
   3503                  {
   3504                    status = zclWriteAttrData( pInMsg->msg->endPoint, &(pInMsg->msg->srcAddr),
   3505                                               &attrRec, statusRec );
   3506                  }
   3507                  else // Use CB
   3508                  {
   3509                    status = zclWriteAttrDataUsingCB( pInMsg->msg->endPoint, &(pInMsg->msg->srcAddr),
   3510                                                      &attrRec, statusRec->attrData );
   3511                  }
   3512          
   3513                  // If successful, a write attribute status record shall NOT be generated
   3514                  if ( sendRsp && status != ZCL_STATUS_SUCCESS )
   3515                  {
   3516                    // Attribute is read only - move on to the next write attribute record
   3517                    writeRspCmd->attrList[j].status = status;
   3518                    writeRspCmd->attrList[j++].attrID = statusRec->attrID;
   3519                  }
   3520                }
   3521                else
   3522                {
   3523                  // Attribute data type is incorrect - move on to the next write attribute record
   3524                  if ( sendRsp )
   3525                  {
   3526                    writeRspCmd->attrList[j].status = ZCL_STATUS_INVALID_DATA_TYPE;
   3527                    writeRspCmd->attrList[j++].attrID = statusRec->attrID;
   3528                  }
   3529                }
   3530              }
   3531              else
   3532              {
   3533                // Attribute is not supported - move on to the next write attribute record
   3534                if ( sendRsp )
   \                     ??zclProcessInWriteCmd_4:
   \   00003F   EF           MOV     A,R7
   \   000040   A2E0         MOV     C,0xE0 /* A   */.0
   \   000042   5010         JNC     ??zclProcessInWriteCmd_5
   3535                {
   3536                  writeRspCmd->attrList[j].status = ZCL_STATUS_UNSUPPORTED_ATTRIBUTE;
   \   000044   12....       LCALL   ?Subroutine144 & 0xFFFF
   \                     ??CrossCallReturnLabel_214:
   \   000047   7486         MOV     A,#-0x7a
   \                     ??zclProcessInWriteCmd_6:
   \   000049   F0           MOVX    @DPTR,A
   3537                  writeRspCmd->attrList[j++].attrID = statusRec->attrID;
   \   00004A   85..82       MOV     DPL,?V0 + 2
   \   00004D   85..83       MOV     DPH,?V0 + 3
   \   000050   12....       LCALL   ?Subroutine49 & 0xFFFF
   3538                }
   3539              }
   \                     ??CrossCallReturnLabel_590:
   \   000053   0E           INC     R6
   \                     ??zclProcessInWriteCmd_5:
   \   000054   05..         INC     ?V0 + 8
   \                     ??zclProcessInWriteCmd_3:
   \   000056   85..82       MOV     DPL,?V0 + 12
   \   000059   85..83       MOV     DPH,?V0 + 13
   \   00005C   12....       LCALL   ??Subroutine217_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_338:
   \   00005F   4003         JC      $+5
   \   000061   02....       LJMP    ??zclProcessInWriteCmd_7 & 0xFFFF
   \   000064   E5..         MOV     A,?V0 + 8
   \   000066   75F005       MOV     B,#0x5
   \   000069   12....       LCALL   ??Subroutine213_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_312:
   \   00006C   8582..       MOV     ?V0 + 2,DPL
   \   00006F   8583..       MOV     ?V0 + 3,DPH
   \   000072   85..82       MOV     DPL,?V0 + 4
   \   000075   85..83       MOV     DPH,?V0 + 5
   \   000078   12....       LCALL   ?Subroutine77 & 0xFFFF
   \                     ??CrossCallReturnLabel_113:
   \   00007B                ; Setup parameters for call to function zclFindAttrRec
   \   00007B   85..82       MOV     DPL,?XSP + 0
   \   00007E   85..83       MOV     DPH,?XSP + 1
   \   000081   8582..       MOV     ?V0 + 10,DPL
   \   000084   8583..       MOV     ?V0 + 11,DPH
   \   000087   78..         MOV     R0,#?V0 + 10
   \   000089   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00008C   12....       LCALL   ?Subroutine88 & 0xFFFF
   \                     ??CrossCallReturnLabel_427:
   \   00008F   85..82       MOV     DPL,?V0 + 6
   \   000092   85..83       MOV     DPH,?V0 + 7
   \   000095   12....       LCALL   ??Subroutine232_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_407:
   \   000098   12....       LCALL   ?Subroutine197 & 0xFFFF
   \                     ??CrossCallReturnLabel_580:
   \   00009B   E5..         MOV     A,?V0 + 7
   \   00009D   12....       LCALL   ??Subroutine263_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_563:
   \   0000A0   12....       LCALL   ??Subroutine265_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_585:
   \   0000A3   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000A6   E9           MOV     A,R1
   \   0000A7   6096         JZ      ??zclProcessInWriteCmd_4
   \   0000A9   85..82       MOV     DPL,?V0 + 2
   \   0000AC   85..83       MOV     DPH,?V0 + 3
   \   0000AF   A3           INC     DPTR
   \   0000B0   A3           INC     DPTR
   \   0000B1   E0           MOVX    A,@DPTR
   \   0000B2   F8           MOV     R0,A
   \   0000B3   7404         MOV     A,#0x4
   \   0000B5   12....       LCALL   ?XSTACK_DISP0_8
   \   0000B8   E0           MOVX    A,@DPTR
   \   0000B9   68           XRL     A,R0
   \   0000BA   705D         JNZ     ??zclProcessInWriteCmd_8
   \   0000BC   7406         MOV     A,#0x6
   \   0000BE   12....       LCALL   ?XSTACK_DISP0_8
   \   0000C1   12....       LCALL   ??Subroutine258_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_547:
   \   0000C4   85..82       MOV     DPL,?V0 + 4
   \   0000C7   85..83       MOV     DPH,?V0 + 5
   \   0000CA   6018         JZ      ??zclProcessInWriteCmd_9
   \   0000CC   12....       LCALL   ?Subroutine77 & 0xFFFF
   \                     ??CrossCallReturnLabel_114:
   \   0000CF                ; Setup parameters for call to function zclWriteAttrData
   \   0000CF   78..         MOV     R0,#?V0 + 2
   \   0000D1   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000D4   7402         MOV     A,#0x2
   \   0000D6   12....       LCALL   ?XSTACK_DISP0_8
   \   0000D9   12....       LCALL   ?Subroutine133 & 0xFFFF
   \                     ??CrossCallReturnLabel_198:
   \   0000DC   12....       LCALL   ??Subroutine263_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_564:
   \   0000DF   12....       LCALL   ??zclWriteAttrData?relay
   \   0000E2   801A         SJMP    ??CrossCallReturnLabel_557
   \                     ??zclProcessInWriteCmd_9:
   \   0000E4   12....       LCALL   ?Subroutine77 & 0xFFFF
   \                     ??CrossCallReturnLabel_115:
   \   0000E7                ; Setup parameters for call to function zclWriteAttrDataUsingCB
   \   0000E7   85..82       MOV     DPL,?V0 + 2
   \   0000EA   85..83       MOV     DPH,?V0 + 3
   \   0000ED   A3           INC     DPTR
   \   0000EE   A3           INC     DPTR
   \   0000EF   A3           INC     DPTR
   \   0000F0   12....       LCALL   ?PUSH_XSTACK8_X_TWO
   \   0000F3   7402         MOV     A,#0x2
   \   0000F5   12....       LCALL   ?XSTACK_DISP0_8
   \   0000F8   12....       LCALL   ?Subroutine133 & 0xFFFF
   \                     ??CrossCallReturnLabel_199:
   \   0000FB   12....       LCALL   ??Subroutine259_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_557:
   \   0000FE   7402         MOV     A,#0x2
   \   000100   12....       LCALL   ?DEALLOC_XSTACK8
   \   000103   E9           MOV     A,R1
   \   000104   FB           MOV     R3,A
   \   000105   EF           MOV     A,R7
   \   000106   A2E0         MOV     C,0xE0 /* A   */.0
   \   000108   4003         JC      $+5
   \   00010A   02....       LJMP    ??zclProcessInWriteCmd_5 & 0xFFFF
   \   00010D   EB           MOV     A,R3
   \   00010E   7003         JNZ     $+5
   \   000110   02....       LJMP    ??zclProcessInWriteCmd_5 & 0xFFFF
   \   000113   12....       LCALL   ?Subroutine143 & 0xFFFF
   \                     ??CrossCallReturnLabel_212:
   \   000116   02....       LJMP    ??zclProcessInWriteCmd_6 & 0xFFFF
   \                     ??zclProcessInWriteCmd_8:
   \   000119   EF           MOV     A,R7
   \   00011A   A2E0         MOV     C,0xE0 /* A   */.0
   \   00011C   4003         JC      $+5
   \   00011E   02....       LJMP    ??zclProcessInWriteCmd_5 & 0xFFFF
   \   000121   12....       LCALL   ?Subroutine144 & 0xFFFF
   3540            } // for loop
   \                     ??CrossCallReturnLabel_215:
   \   000124   748D         MOV     A,#-0x73
   \   000126   02....       LJMP    ??zclProcessInWriteCmd_6 & 0xFFFF
   3541          
   3542            if ( sendRsp )
   \                     ??zclProcessInWriteCmd_7:
   \   000129   EF           MOV     A,R7
   \   00012A   A2E0         MOV     C,0xE0 /* A   */.0
   \   00012C   5032         JNC     ??zclProcessInWriteCmd_10
   3543            {
   3544              writeRspCmd->numAttr = j;
   \   00012E   EE           MOV     A,R6
   \   00012F   85..82       MOV     DPL,?V0 + 0
   \   000132   85..83       MOV     DPH,?V0 + 1
   \   000135   F0           MOVX    @DPTR,A
   3545              if ( writeRspCmd->numAttr == 0 )
   \   000136   7003         JNZ     ??CrossCallReturnLabel_52
   3546              {
   3547                // Since all records were written successful, include a single status record
   3548                // in the resonse command with the status field set to SUCCESS and the
   3549                // attribute ID field omitted.
   3550                writeRspCmd->attrList[0].status = ZCL_STATUS_SUCCESS;
   \   000138   12....       LCALL   ?Subroutine48 & 0xFFFF
   3551                writeRspCmd->numAttr = 1;
   3552              }
   3553          
   3554              zcl_SendWriteRsp( pInMsg->msg->endPoint, &(pInMsg->msg->srcAddr),
   3555                                pInMsg->msg->clusterId, writeRspCmd, ZCL_FRAME_SERVER_CLIENT_DIR,
   3556                                true, pInMsg->hdr.transSeqNum );
   \                     ??CrossCallReturnLabel_52:
   \   00013B   12....       LCALL   ?Subroutine67 & 0xFFFF
   \                     ??CrossCallReturnLabel_88:
   \   00013E   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000141   75..01       MOV     ?V0 + 2,#0x1
   \   000144   78..         MOV     R0,#?V0 + 2
   \   000146   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000149   78..         MOV     R0,#?V0 + 2
   \   00014B   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00014E   78..         MOV     R0,#?V0 + 0
   \   000150   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000153   12....       LCALL   ?Subroutine59 & 0xFFFF
   \                     ??CrossCallReturnLabel_76:
   \   000156   12....       LCALL   ?DEALLOC_XSTACK8
   3557              osal_mem_free( writeRspCmd );
   \   000159                ; Setup parameters for call to function osal_mem_free
   \   000159   AA..         MOV     R2,?V0 + 0
   \   00015B   AB..         MOV     R3,?V0 + 1
   \   00015D   12....       LCALL   ??osal_mem_free?relay
   3558            }
   3559          
   3560            return TRUE;
   \                     ??zclProcessInWriteCmd_10:
   \   000160   7901         MOV     R1,#0x1
   \                     ??zclProcessInWriteCmd_2:
   \   000162   02....       LJMP    ?Subroutine5 & 0xFFFF
   3561          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine144:
   \   000000   EE           MOV     A,R6
   \   000001   75F003       MOV     B,#0x3
   \   000004   A4           MUL     AB
   \   000005   F8           MOV     R0,A
   \   000006   A9F0         MOV     R1,B
   \   000008   E5..         MOV     A,?V0 + 0
   \   00000A   28           ADD     A,R0
   \   00000B   F8           MOV     R0,A
   \   00000C   E5..         MOV     A,?V0 + 1
   \   00000E   39           ADDC    A,R1
   \   00000F   F9           MOV     R1,A
   \   000010   8882         MOV     DPL,R0
   \   000012   8983         MOV     DPH,R1
   \   000014   A3           INC     DPTR
   \   000015   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine133:
   \   000000   AC82         MOV     R4,DPL
   \   000002   AD83         MOV     R5,DPH
   \   000004   E5..         MOV     A,?V0 + 6
   \   000006   2406         ADD     A,#0x6
   \   000008   FA           MOV     R2,A
   \   000009   E5..         MOV     A,?V0 + 7
   \   00000B   3400         ADDC    A,#0x0
   \   00000D   FB           MOV     R3,A
   \   00000E   12....       LCALL   ?Subroutine197 & 0xFFFF
   \                     ??CrossCallReturnLabel_581:
   \   000011   E5..         MOV     A,?V0 + 7
   \   000013   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine259_0:
   \   000000   12....       LCALL   ??Subroutine226_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_573:
   \   000003   12....       LCALL   ??zclWriteAttrDataUsingCB?relay
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine143:
   \   000000   EE           MOV     A,R6
   \   000001   75F003       MOV     B,#0x3
   \   000004   A4           MUL     AB
   \   000005   F8           MOV     R0,A
   \   000006   A9F0         MOV     R1,B
   \   000008   E5..         MOV     A,?V0 + 0
   \   00000A   28           ADD     A,R0
   \   00000B   F8           MOV     R0,A
   \   00000C   E5..         MOV     A,?V0 + 1
   \   00000E   39           ADDC    A,R1
   \   00000F   F9           MOV     R1,A
   \   000010   EB           MOV     A,R3
   \   000011   8882         MOV     DPL,R0
   \   000013   8983         MOV     DPH,R1
   \   000015   A3           INC     DPTR
   \   000016   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine197:
   \   000000   E5..         MOV     A,?V0 + 6
   \   000002                REQUIRE ??Subroutine264_0
   \   000002                ; // Fall through to label ??Subroutine264_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine67:
   \   000000   85..82       MOV     DPL,?V0 + 4
   \   000003   85..83       MOV     DPH,?V0 + 5
   \   000006   12....       LCALL   ??Subroutine253_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_512:
   \   000009                ; Setup parameters for call to function zcl_SendWriteRsp
   \   000009                ; Setup parameters for call to function zcl_SendWriteRsp
   \   000009   85..82       MOV     DPL,?V0 + 4
   \   00000C   85..83       MOV     DPH,?V0 + 5
   \   00000F   A3           INC     DPTR
   \   000010   A3           INC     DPTR
   \   000011   A3           INC     DPTR
   \   000012   A3           INC     DPTR
   \   000013   A3           INC     DPTR
   \   000014   A3           INC     DPTR
   \   000015   E0           MOVX    A,@DPTR
   \   000016   F5..         MOV     ?V0 + 2,A
   \   000018   78..         MOV     R0,#?V0 + 2
   \   00001A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine66:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   75F003       MOV     B,#0x3
   \   000004   A4           MUL     AB
   \   000005   2401         ADD     A,#0x1
   \   000007   FA           MOV     R2,A
   \   000008   E5F0         MOV     A,B
   \   00000A   3400         ADDC    A,#0x0
   \   00000C   12....       LCALL   ?Subroutine186 & 0xFFFF
   \                     ??CrossCallReturnLabel_352:
   \   00000F   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine59:
   \   000000   8E82         MOV     DPL,R6
   \   000002   8F83         MOV     DPH,R7
   \   000004   12....       LCALL   ?Subroutine185 & 0xFFFF
   \                     ??CrossCallReturnLabel_431:
   \   000007   EE           MOV     A,R6
   \   000008   2406         ADD     A,#0x6
   \   00000A   FA           MOV     R2,A
   \   00000B   EF           MOV     A,R7
   \   00000C   3400         ADDC    A,#0x0
   \   00000E   FB           MOV     R3,A
   \   00000F   12....       LCALL   ?Subroutine189 & 0xFFFF
   \                     ??CrossCallReturnLabel_572:
   \   000012   12....       LCALL   ??zcl_SendWriteRsp?relay
   \   000015   7405         MOV     A,#0x5
   \   000017   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine49:
   \   000000   12....       LCALL   ??Subroutine225_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_369:
   \   000003                REQUIRE ??Subroutine266_0
   \   000003                ; // Fall through to label ??Subroutine266_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine48:
   \   000000   A3           INC     DPTR
   \   000001   E4           CLR     A
   \   000002   F0           MOVX    @DPTR,A
   \   000003   85..82       MOV     DPL,?V0 + 0
   \   000006   85..83       MOV     DPH,?V0 + 1
   \   000009   04           INC     A
   \   00000A   F0           MOVX    @DPTR,A
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine132:
   \   000000   7E00         MOV     R6,#0x0
   \   000002                REQUIRE ??Subroutine268_0
   \   000002                ; // Fall through to label ??Subroutine268_0
   3562          
   3563          /*********************************************************************
   3564           * @fn      zclRevertWriteUndividedCmd
   3565           *
   3566           * @brief   Revert the "Profile" Write Undevided Command
   3567           *
   3568           * @param   pInMsg - incoming message to process
   3569           * @param   curWriteRec - old data
   3570           * @param   numAttr - number of attributes to be reverted
   3571           *
   3572           * @return  none
   3573           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3574          static void zclRevertWriteUndividedCmd( zclIncoming_t *pInMsg,
   \                     zclRevertWriteUndividedCmd:
   3575                                              zclWriteRec_t *curWriteRec, uint16 numAttr )
   3576          {
   \   000000   74EC         MOV     A,#-0x14
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 20
   \   000005                ; Auto size: 8
   \   000005   74F8         MOV     A,#-0x8
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   8A..         MOV     ?V0 + 2,R2
   \   00000C   8B..         MOV     ?V0 + 3,R3
   \   00000E   8C..         MOV     ?V0 + 6,R4
   \   000010   8D..         MOV     ?V0 + 7,R5
   \   000012   741C         MOV     A,#0x1c
   \   000014   12....       LCALL   ?XSTACK_DISP0_8
   \   000017   12....       LCALL   ?Subroutine102 & 0xFFFF
   3577            for ( uint8 i = 0; i < numAttr; i++ )
   \                     ??CrossCallReturnLabel_155:
   \   00001A   75..00       MOV     ?V0 + 0,#0x0
   \   00001D   801C         SJMP    ??zclRevertWriteUndividedCmd_0
   3578            {
   3579              zclAttrRec_t attrRec;
   3580              zclWriteRec_t *statusRec = &(curWriteRec[i]);
   3581          
   3582              if ( !zclFindAttrRec( pInMsg->msg->endPoint, pInMsg->msg->clusterId,
   3583                                    statusRec->attrID, &attrRec ) )
   3584              {
   3585                break; // should never happen
   3586              }
   3587          
   3588              if ( attrRec.attr.dataPtr != NULL )
   3589              {
   3590                // Just copy the old data back - no need to validate the data
   3591                uint16 dataLen = zclGetAttrDataLength( attrRec.attr.dataType, statusRec->attrData );
   3592                osal_memcpy( attrRec.attr.dataPtr, statusRec->attrData, dataLen );
   3593              }
   3594              else // Use CB
   3595              {
   3596                // Write the old data back
   3597                zclWriteAttrDataUsingCB( pInMsg->msg->endPoint, &(pInMsg->msg->srcAddr),
   3598                                         &attrRec, statusRec->attrData );
   \                     ??zclRevertWriteUndividedCmd_1:
   \   00001F   85..82       MOV     DPL,?V0 + 2
   \   000022   85..83       MOV     DPH,?V0 + 3
   \   000025   12....       LCALL   ?Subroutine89 & 0xFFFF
   3599              }
   \                     ??CrossCallReturnLabel_134:
   \   000028   A3           INC     DPTR
   \   000029   12....       LCALL   ?PUSH_XSTACK8_X_TWO
   \   00002C   7402         MOV     A,#0x2
   \   00002E   12....       LCALL   ?XSTACK_DISP0_8
   \   000031   12....       LCALL   ?Subroutine111 & 0xFFFF
   \                     ??CrossCallReturnLabel_555:
   \   000034   7402         MOV     A,#0x2
   \   000036   12....       LCALL   ?DEALLOC_XSTACK8
   \                     ??zclRevertWriteUndividedCmd_2:
   \   000039   05..         INC     ?V0 + 0
   \                     ??zclRevertWriteUndividedCmd_0:
   \   00003B   85....       MOV     ?V0 + 8,?V0 + 0
   \   00003E   C3           CLR     C
   \   00003F   E5..         MOV     A,?V0 + 8
   \   000041   95..         SUBB    A,?V0 + 4
   \   000043   E4           CLR     A
   \   000044   95..         SUBB    A,?V0 + 5
   \   000046   5076         JNC     ??zclRevertWriteUndividedCmd_3
   \   000048   E5..         MOV     A,?V0 + 0
   \   00004A   75F005       MOV     B,#0x5
   \   00004D   A4           MUL     AB
   \   00004E   F8           MOV     R0,A
   \   00004F   A9F0         MOV     R1,B
   \   000051   E5..         MOV     A,?V0 + 6
   \   000053   28           ADD     A,R0
   \   000054   FE           MOV     R6,A
   \   000055   E5..         MOV     A,?V0 + 7
   \   000057   39           ADDC    A,R1
   \   000058   FF           MOV     R7,A
   \   000059   85..82       MOV     DPL,?V0 + 2
   \   00005C   85..83       MOV     DPH,?V0 + 3
   \   00005F   12....       LCALL   ??Subroutine248_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_483:
   \   000062   88..         MOV     ?V0 + 8,R0
   \   000064                ; Setup parameters for call to function zclFindAttrRec
   \   000064   85..82       MOV     DPL,?XSP + 0
   \   000067   85..83       MOV     DPH,?XSP + 1
   \   00006A   8582..       MOV     ?V0 + 10,DPL
   \   00006D   8583..       MOV     ?V0 + 11,DPH
   \   000070   78..         MOV     R0,#?V0 + 10
   \   000072   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000075   8E82         MOV     DPL,R6
   \   000077   8F83         MOV     DPH,R7
   \   000079   12....       LCALL   ?Subroutine54 & 0xFFFF
   \                     ??CrossCallReturnLabel_61:
   \   00007C   12....       LCALL   ?DEALLOC_XSTACK8
   \   00007F   E9           MOV     A,R1
   \   000080   603C         JZ      ??zclRevertWriteUndividedCmd_3
   \   000082   7406         MOV     A,#0x6
   \   000084   12....       LCALL   ?XSTACK_DISP0_8
   \   000087   12....       LCALL   ??Subroutine258_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_548:
   \   00008A   6093         JZ      ??zclRevertWriteUndividedCmd_1
   \   00008C   12....       LCALL   ?Subroutine145 & 0xFFFF
   \                     ??CrossCallReturnLabel_217:
   \   00008F                ; Setup parameters for call to function zclGetAttrDataLength
   \   00008F   8E82         MOV     DPL,R6
   \   000091   8F83         MOV     DPH,R7
   \   000093   12....       LCALL   ??Subroutine234_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_401:
   \   000096   7404         MOV     A,#0x4
   \   000098   12....       LCALL   ?XSTACK_DISP0_8
   \   00009B   12....       LCALL   ??Subroutine214_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_323:
   \   00009E   8A..         MOV     ?V0 + 8,R2
   \   0000A0   8B..         MOV     ?V0 + 9,R3
   \   0000A2   AC..         MOV     R4,?V0 + 8
   \   0000A4   AD..         MOV     R5,?V0 + 9
   \   0000A6                ; Setup parameters for call to function osal_memcpy
   \   0000A6   8E82         MOV     DPL,R6
   \   0000A8   8F83         MOV     DPH,R7
   \   0000AA   12....       LCALL   ?Subroutine70 & 0xFFFF
   3600            } // for loop
   \                     ??CrossCallReturnLabel_99:
   \   0000AD   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   0000B0   7409         MOV     A,#0x9
   \   0000B2   12....       LCALL   ?XSTACK_DISP0_8
   \   0000B5   12....       LCALL   ?Subroutine93 & 0xFFFF
   \                     ??CrossCallReturnLabel_140:
   \   0000B8   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000BB   02....       LJMP    ??zclRevertWriteUndividedCmd_2 & 0xFFFF
   3601          }
   \                     ??zclRevertWriteUndividedCmd_3:
   \   0000BE   7408         MOV     A,#0x8
   \   0000C0   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000C3   02....       LJMP    ??Subroutine231_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine111:
   \   000000   AC82         MOV     R4,DPL
   \   000002   AD83         MOV     R5,DPH
   \   000004   E8           MOV     A,R0
   \   000005   2406         ADD     A,#0x6
   \   000007   FA           MOV     R2,A
   \   000008   E9           MOV     A,R1
   \   000009   3400         ADDC    A,#0x0
   \   00000B   FB           MOV     R3,A
   \   00000C   E8           MOV     A,R0
   \   00000D   12....       LCALL   ??Subroutine264_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_578:
   \   000010   E9           MOV     A,R1
   \   000011                REQUIRE ??Subroutine259_0
   \   000011                ; // Fall through to label ??Subroutine259_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine54:
   \   000000   12....       LCALL   ?Subroutine184 & 0xFFFF
   \                     ??CrossCallReturnLabel_272:
   \   000003   8983         MOV     DPH,R1
   \   000005   12....       LCALL   ?Subroutine171 & 0xFFFF
   \                     ??CrossCallReturnLabel_257:
   \   000008   E9           MOV     A,R1
   \   000009   12....       LCALL   ?Subroutine188 & 0xFFFF
   \                     ??CrossCallReturnLabel_582:
   \   00000C   22           RET
   3602          
   3603          /*********************************************************************
   3604           * @fn      zclProcessInWriteUndividedCmd
   3605           *
   3606           * @brief   Process the "Profile" Write Undivided Command
   3607           *
   3608           * @param   pInMsg - incoming message to process
   3609           *
   3610           * @return  TRUE if command processed. FALSE, otherwise.
   3611           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine90:
   \   000000   85..82       MOV     DPL,?V0 + 4
   \   000003   85..83       MOV     DPH,?V0 + 5
   \   000006                REQUIRE ??Subroutine248_0
   \   000006                ; // Fall through to label ??Subroutine248_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine79:
   \   000000   85..82       MOV     DPL,?V0 + 4
   \   000003   85..83       MOV     DPH,?V0 + 5
   \   000006                REQUIRE ??Subroutine255_0
   \   000006                ; // Fall through to label ??Subroutine255_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3612          static uint8 zclProcessInWriteUndividedCmd( zclIncoming_t *pInMsg )
   \                     zclProcessInWriteUndividedCmd:
   3613          {
   \   000000   74E8         MOV     A,#-0x18
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 24
   \   000005                ; Auto size: 12
   \   000005   74F4         MOV     A,#-0xc
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   8A..         MOV     ?V0 + 4,R2
   \   00000C   8B..         MOV     ?V0 + 5,R3
   3614            zclWriteCmd_t *writeCmd;
   3615            zclWriteRspCmd_t *writeRspCmd;
   3616            zclAttrRec_t attrRec;
   3617            uint16 dataLen;
   3618            uint16 curLen = 0;
   \   00000E   75..00       MOV     ?V0 + 6,#0x0
   \   000011   75..00       MOV     ?V0 + 7,#0x0
   3619            uint8 j = 0;
   \   000014   12....       LCALL   ?Subroutine132 & 0xFFFF
   3620          
   3621            writeCmd = (zclWriteCmd_t *)pInMsg->attrCmd;
   \                     ??CrossCallReturnLabel_593:
   \   000017   12....       LCALL   ??Subroutine248_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_484:
   \   00001A   7402         MOV     A,#0x2
   \   00001C   12....       LCALL   ?XSTACK_DISP0_8
   \   00001F   12....       LCALL   ??Subroutine256_0 & 0xFFFF
   3622          
   3623            // Allocate space for Write Response Command
   3624            writeRspCmd = (zclWriteRspCmd_t *)osal_mem_alloc( sizeof( zclWriteRspCmd_t )
   3625                             + sizeof( zclWriteRspStatus_t )* writeCmd->numAttr );
   \                     ??CrossCallReturnLabel_538:
   \   000022                ; Setup parameters for call to function osal_mem_alloc
   \   000022   7402         MOV     A,#0x2
   \   000024   12....       LCALL   ?XSTACK_DISP0_8
   \   000027   12....       LCALL   ?Subroutine83 & 0xFFFF
   \                     ??CrossCallReturnLabel_123:
   \   00002A   12....       LCALL   ?Subroutine66 & 0xFFFF
   3626            if ( writeRspCmd == NULL )
   \                     ??CrossCallReturnLabel_87:
   \   00002D   7005         JNZ     ??zclProcessInWriteUndividedCmd_0
   3627            {
   3628              return FALSE; // EMBEDDED RETURN
   \                     ??zclProcessInWriteUndividedCmd_1:
   \   00002F   7900         MOV     R1,#0x0
   \   000031   02....       LJMP    ??zclProcessInWriteUndividedCmd_2 & 0xFFFF
   3629            }
   3630          
   3631            // If any attribute cannot be written, no attribute values are changed. Hence,
   3632            // make sure all the attributes are supported and writable
   3633            for ( uint8 i = 0; i < writeCmd->numAttr; i++ )
   \                     ??zclProcessInWriteUndividedCmd_0:
   \   000034   7F00         MOV     R7,#0x0
   \   000036   8041         SJMP    ??zclProcessInWriteUndividedCmd_3
   3634            {
   3635              zclWriteRec_t *statusRec = &(writeCmd->attrList[i]);
   3636          
   3637              if ( !zclFindAttrRec( pInMsg->msg->endPoint, pInMsg->msg->clusterId,
   3638                                    statusRec->attrID, &attrRec ) )
   3639              {
   3640                // Attribute is not supported - stop here
   3641                writeRspCmd->attrList[j].status = ZCL_STATUS_UNSUPPORTED_ATTRIBUTE;
   3642                writeRspCmd->attrList[j++].attrID = statusRec->attrID;
   3643                break;
   3644              }
   3645          
   3646              if ( statusRec->dataType != attrRec.attr.dataType )
   3647              {
   3648                // Attribute data type is incorrect - stope here
   3649                writeRspCmd->attrList[j].status = ZCL_STATUS_INVALID_DATA_TYPE;
   3650                writeRspCmd->attrList[j++].attrID = statusRec->attrID;
   3651                break;
   3652              }
   3653          
   3654              if ( !zcl_AccessCtrlWrite( attrRec.attr.accessControl ) )
   3655              {
   3656                // Attribute is not writable - stop here
   3657                writeRspCmd->attrList[j].status = ZCL_STATUS_READ_ONLY;
   3658                writeRspCmd->attrList[j++].attrID = statusRec->attrID;
   3659                break;
   3660              }
   3661          
   3662              if ( zcl_AccessCtrlAuthWrite( attrRec.attr.accessControl ) )
   3663              {
   3664                // Not authorized to write - stop here
   3665                writeRspCmd->attrList[j].status = ZCL_STATUS_NOT_AUTHORIZED;
   3666                writeRspCmd->attrList[j++].attrID = statusRec->attrID;
   3667                break;
   3668              }
   3669          
   3670              // Attribute Data length
   3671              if ( attrRec.attr.dataPtr != NULL )
   3672              {
   3673                dataLen = zclGetAttrDataLength( attrRec.attr.dataType, attrRec.attr.dataPtr );
   3674              }
   3675              else // Use CB
   3676              {
   3677                dataLen = zclGetAttrDataLengthUsingCB( pInMsg->msg->endPoint, pInMsg->msg->clusterId,
   3678                                                       statusRec->attrID );
   \                     ??zclProcessInWriteUndividedCmd_4:
   \   000038   12....       LCALL   ?Subroutine90 & 0xFFFF
   3679              }
   \                     ??CrossCallReturnLabel_489:
   \   00003B                ; Setup parameters for call to function zclGetAttrDataLengthUsingCB
   \   00003B   12....       LCALL   ?Subroutine88 & 0xFFFF
   \                     ??CrossCallReturnLabel_428:
   \   00003E   8882         MOV     DPL,R0
   \   000040   8983         MOV     DPH,R1
   \   000042   12....       LCALL   ??Subroutine232_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_408:
   \   000045   E8           MOV     A,R0
   \   000046   12....       LCALL   ??Subroutine264_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_576:
   \   000049   E9           MOV     A,R1
   \   00004A   12....       LCALL   ??Subroutine263_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_565:
   \   00004D   12....       LCALL   ??zclGetAttrDataLengthUsingCB?relay
   \                     ??zclProcessInWriteUndividedCmd_5:
   \   000050   85..82       MOV     DPL,?XSP + 0
   \   000053   85..83       MOV     DPH,?XSP + 1
   \   000056   12....       LCALL   ??Subroutine267_0 & 0xFFFF
   3680          
   3681              // add padding if needed
   3682              if ( PADDING_NEEDED( dataLen ) )
   \                     ??CrossCallReturnLabel_588:
   \   000059   85..82       MOV     DPL,?XSP + 0
   \   00005C   85..83       MOV     DPH,?XSP + 1
   \   00005F   E0           MOVX    A,@DPTR
   \   000060   A2E0         MOV     C,0xE0 /* A   */.0
   \   000062   5003         JNC     ??CrossCallReturnLabel_218
   3683              {
   3684                dataLen++;
   \   000064   12....       LCALL   ?Subroutine146 & 0xFFFF
   3685              }
   3686          
   3687              curLen += dataLen;
   \                     ??CrossCallReturnLabel_218:
   \   000067   85..82       MOV     DPL,?XSP + 0
   \   00006A   85..83       MOV     DPH,?XSP + 1
   \   00006D   E0           MOVX    A,@DPTR
   \   00006E   25..         ADD     A,?V0 + 6
   \   000070   F5..         MOV     ?V0 + 6,A
   \   000072   A3           INC     DPTR
   \   000073   E0           MOVX    A,@DPTR
   \   000074   35..         ADDC    A,?V0 + 7
   \   000076   F5..         MOV     ?V0 + 7,A
   \   000078   0F           INC     R7
   \                     ??zclProcessInWriteUndividedCmd_3:
   \   000079   7402         MOV     A,#0x2
   \   00007B   12....       LCALL   ?XSTACK_DISP0_8
   \   00007E   12....       LCALL   ?Subroutine82 & 0xFFFF
   \                     ??CrossCallReturnLabel_120:
   \   000081   5057         JNC     ??zclProcessInWriteUndividedCmd_6
   \   000083   EF           MOV     A,R7
   \   000084   75F005       MOV     B,#0x5
   \   000087   A4           MUL     AB
   \   000088   F8           MOV     R0,A
   \   000089   A9F0         MOV     R1,B
   \   00008B   7402         MOV     A,#0x2
   \   00008D   12....       LCALL   ?XSTACK_DISP0_8
   \   000090   12....       LCALL   ?Subroutine91 & 0xFFFF
   \                     ??CrossCallReturnLabel_135:
   \   000093   8582..       MOV     ?V0 + 2,DPL
   \   000096   8583..       MOV     ?V0 + 3,DPH
   \   000099   12....       LCALL   ?Subroutine90 & 0xFFFF
   \                     ??CrossCallReturnLabel_490:
   \   00009C   88..         MOV     ?V0 + 8,R0
   \   00009E                ; Setup parameters for call to function zclFindAttrRec
   \   00009E   7404         MOV     A,#0x4
   \   0000A0   12....       LCALL   ?XSTACK_DISP0_8
   \   0000A3   8582..       MOV     ?V0 + 10,DPL
   \   0000A6   8583..       MOV     ?V0 + 11,DPH
   \   0000A9   78..         MOV     R0,#?V0 + 10
   \   0000AB   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000AE   85..82       MOV     DPL,?V0 + 2
   \   0000B1   85..83       MOV     DPH,?V0 + 3
   \   0000B4   12....       LCALL   ?Subroutine54 & 0xFFFF
   \                     ??CrossCallReturnLabel_62:
   \   0000B7   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000BA   E9           MOV     A,R1
   \   0000BB   704C         JNZ     ??zclProcessInWriteUndividedCmd_7
   \   0000BD   85..82       MOV     DPL,?V0 + 0
   \   0000C0   85..83       MOV     DPH,?V0 + 1
   \   0000C3   A3           INC     DPTR
   \   0000C4   7486         MOV     A,#-0x7a
   \                     ??zclProcessInWriteUndividedCmd_8:
   \   0000C6   F0           MOVX    @DPTR,A
   \   0000C7   85..82       MOV     DPL,?V0 + 2
   \   0000CA   85..83       MOV     DPH,?V0 + 3
   \   0000CD   12....       LCALL   ??Subroutine248_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_485:
   \   0000D0   85..82       MOV     DPL,?V0 + 0
   \   0000D3   85..83       MOV     DPH,?V0 + 1
   \   0000D6   12....       LCALL   ?Subroutine45 & 0xFFFF
   \                     ??CrossCallReturnLabel_540:
   \   0000D9   0E           INC     R6
   3688            } // for loop
   3689          
   3690            writeRspCmd->numAttr = j;
   \                     ??zclProcessInWriteUndividedCmd_6:
   \   0000DA   EE           MOV     A,R6
   \   0000DB   85..82       MOV     DPL,?V0 + 0
   \   0000DE   85..83       MOV     DPH,?V0 + 1
   \   0000E1   F0           MOVX    @DPTR,A
   3691            if ( writeRspCmd->numAttr == 0 ) // All attributes can be written
   \   0000E2   6003         JZ      $+5
   \   0000E4   02....       LJMP    ??zclProcessInWriteUndividedCmd_9 & 0xFFFF
   3692            {
   3693              uint8 *curDataPtr;
   3694              zclWriteRec_t *curWriteRec;
   3695          
   3696              // calculate the length of the current data header
   3697              uint8 hdrLen = j * sizeof( zclWriteRec_t );
   \   0000E7   75F005       MOV     B,#0x5
   \   0000EA   A4           MUL     AB
   \   0000EB   FF           MOV     R7,A
   3698          
   3699              // Allocate space to keep a copy of the current data
   3700              curWriteRec = (zclWriteRec_t *) osal_mem_alloc( hdrLen + curLen );
   \   0000EC                ; Setup parameters for call to function osal_mem_alloc
   \   0000EC   25..         ADD     A,?V0 + 6
   \   0000EE   FA           MOV     R2,A
   \   0000EF   E4           CLR     A
   \   0000F0   35..         ADDC    A,?V0 + 7
   \   0000F2   FB           MOV     R3,A
   \   0000F3   12....       LCALL   ??osal_mem_alloc?relay
   \   0000F6   8A..         MOV     ?V0 + 14,R2
   \   0000F8   8B..         MOV     ?V0 + 15,R3
   3701              if ( curWriteRec == NULL )
   \   0000FA   EA           MOV     A,R2
   \   0000FB   45..         ORL     A,?V0 + 15
   \   0000FD   706D         JNZ     ??zclProcessInWriteUndividedCmd_10
   3702              {
   3703                osal_mem_free(writeRspCmd );
   \   0000FF                ; Setup parameters for call to function osal_mem_free
   \   0000FF   AA..         MOV     R2,?V0 + 0
   \   000101   AB..         MOV     R3,?V0 + 1
   \   000103   12....       LCALL   ??osal_mem_free?relay
   3704                return FALSE; // EMBEDDED RETURN
   \   000106   02....       LJMP    ??zclProcessInWriteUndividedCmd_1 & 0xFFFF
   3705              }
   \                     ??zclProcessInWriteUndividedCmd_7:
   \   000109   85..82       MOV     DPL,?V0 + 2
   \   00010C   85..83       MOV     DPH,?V0 + 3
   \   00010F   A3           INC     DPTR
   \   000110   A3           INC     DPTR
   \   000111   E0           MOVX    A,@DPTR
   \   000112   F8           MOV     R0,A
   \   000113   7408         MOV     A,#0x8
   \   000115   12....       LCALL   ?XSTACK_DISP0_8
   \   000118   E0           MOVX    A,@DPTR
   \   000119   68           XRL     A,R0
   \   00011A   600B         JZ      ??zclProcessInWriteUndividedCmd_11
   \   00011C   85..82       MOV     DPL,?V0 + 0
   \   00011F   85..83       MOV     DPH,?V0 + 1
   \   000122   A3           INC     DPTR
   \   000123   748D         MOV     A,#-0x73
   \   000125   809F         SJMP    ??zclProcessInWriteUndividedCmd_8
   \                     ??zclProcessInWriteUndividedCmd_11:
   \   000127   7409         MOV     A,#0x9
   \   000129   12....       LCALL   ?XSTACK_DISP0_8
   \   00012C   E0           MOVX    A,@DPTR
   \   00012D   A2E1         MOV     C,0xE0 /* A   */.1
   \   00012F   400B         JC      ??zclProcessInWriteUndividedCmd_12
   \   000131   85..82       MOV     DPL,?V0 + 0
   \   000134   85..83       MOV     DPH,?V0 + 1
   \   000137   A3           INC     DPTR
   \   000138   7488         MOV     A,#-0x78
   \   00013A   808A         SJMP    ??zclProcessInWriteUndividedCmd_8
   \                     ??zclProcessInWriteUndividedCmd_12:
   \   00013C   A2E5         MOV     C,0xE0 /* A   */.5
   \   00013E   500C         JNC     ??zclProcessInWriteUndividedCmd_13
   \   000140   85..82       MOV     DPL,?V0 + 0
   \   000143   85..83       MOV     DPH,?V0 + 1
   \   000146   A3           INC     DPTR
   \   000147   747E         MOV     A,#0x7e
   \   000149   02....       LJMP    ??zclProcessInWriteUndividedCmd_8 & 0xFFFF
   \                     ??zclProcessInWriteUndividedCmd_13:
   \   00014C   740A         MOV     A,#0xa
   \   00014E   12....       LCALL   ?XSTACK_DISP0_8
   \   000151   12....       LCALL   ??Subroutine258_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_549:
   \   000154   7003         JNZ     $+5
   \   000156   02....       LJMP    ??zclProcessInWriteUndividedCmd_4 & 0xFFFF
   \   000159                ; Setup parameters for call to function zclGetAttrDataLength
   \   000159   740A         MOV     A,#0xa
   \   00015B   12....       LCALL   ?XSTACK_DISP0_8
   \   00015E   12....       LCALL   ??Subroutine234_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_402:
   \   000161   7408         MOV     A,#0x8
   \   000163   12....       LCALL   ?XSTACK_DISP0_8
   \   000166   12....       LCALL   ??Subroutine214_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_324:
   \   000169   02....       LJMP    ??zclProcessInWriteUndividedCmd_5 & 0xFFFF
   3706          
   3707              curDataPtr = (uint8 *)((uint8 *)curWriteRec + hdrLen);
   \                     ??zclProcessInWriteUndividedCmd_10:
   \   00016C   8F..         MOV     ?V0 + 2,R7
   \   00016E   EA           MOV     A,R2
   \   00016F   25..         ADD     A,?V0 + 2
   \   000171   F5..         MOV     ?V0 + 2,A
   \   000173   EB           MOV     A,R3
   \   000174   3400         ADDC    A,#0x0
   \   000176   F5..         MOV     ?V0 + 3,A
   3708          
   3709              // Write the new data over
   3710              for ( uint8 i = 0; i < writeCmd->numAttr; i++ )
   \   000178   7F00         MOV     R7,#0x0
   \   00017A   8022         SJMP    ??zclProcessInWriteUndividedCmd_14
   3711              {
   3712                uint8 status;
   3713                zclWriteRec_t *statusRec = &(writeCmd->attrList[i]);
   3714                zclWriteRec_t *curStatusRec = &(curWriteRec[i]);
   3715          
   3716                if ( !zclFindAttrRec( pInMsg->msg->endPoint, pInMsg->msg->clusterId,
   3717                                      statusRec->attrID, &attrRec ) )
   3718                {
   3719                  break; // should never happen
   3720                }
   3721          
   3722                // Keep a copy of the current data before before writing the new data over
   3723                curStatusRec->attrID = statusRec->attrID;
   3724                curStatusRec->attrData = curDataPtr;
   3725          
   3726                if ( attrRec.attr.dataPtr != NULL )
   3727                {
   3728                  // Read the current value
   3729                  zclReadAttrData( curDataPtr, &attrRec, &dataLen );
   3730          
   3731                  // Write the new attribute value
   3732                  status = zclWriteAttrData( pInMsg->msg->endPoint, &(pInMsg->msg->srcAddr),
   3733                                             &attrRec, statusRec );
   3734                }
   3735                else // Use CBs
   3736                {
   3737                  // Read the current value
   3738                  zclReadAttrDataUsingCB( pInMsg->msg->endPoint, pInMsg->msg->clusterId,
   3739                                          statusRec->attrID, curDataPtr, &dataLen );
   3740                  // Write the new attribute value
   3741                  status = zclWriteAttrDataUsingCB( pInMsg->msg->endPoint, &(pInMsg->msg->srcAddr),
   3742                                                    &attrRec, statusRec->attrData );
   3743                }
   3744          
   3745                // If successful, a write attribute status record shall NOT be generated
   3746                if ( status != ZCL_STATUS_SUCCESS )
   3747                {
   3748                  writeRspCmd->attrList[j].status = status;
   3749                  writeRspCmd->attrList[j++].attrID = statusRec->attrID;
   3750          
   3751                  // Since this write failed, we need to revert all the pervious writes
   3752                  zclRevertWriteUndividedCmd( pInMsg, curWriteRec, i);
   3753                  break;
   3754                }
   3755          
   3756                // add padding if needed
   3757                if ( PADDING_NEEDED( dataLen ) )
   \                     ??zclProcessInWriteUndividedCmd_15:
   \   00017C   85..82       MOV     DPL,?XSP + 0
   \   00017F   85..83       MOV     DPH,?XSP + 1
   \   000182   E0           MOVX    A,@DPTR
   \   000183   A2E0         MOV     C,0xE0 /* A   */.0
   \   000185   5003         JNC     ??CrossCallReturnLabel_219
   3758                {
   3759                  dataLen++;
   \   000187   12....       LCALL   ?Subroutine146 & 0xFFFF
   3760                }
   3761          
   3762                curDataPtr += dataLen;
   \                     ??CrossCallReturnLabel_219:
   \   00018A   85..82       MOV     DPL,?XSP + 0
   \   00018D   85..83       MOV     DPH,?XSP + 1
   \   000190   12....       LCALL   ??Subroutine248_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_486:
   \   000193   E5..         MOV     A,?V0 + 2
   \   000195   28           ADD     A,R0
   \   000196   F5..         MOV     ?V0 + 2,A
   \   000198   E5..         MOV     A,?V0 + 3
   \   00019A   39           ADDC    A,R1
   \   00019B   F5..         MOV     ?V0 + 3,A
   \   00019D   0F           INC     R7
   \                     ??zclProcessInWriteUndividedCmd_14:
   \   00019E   7402         MOV     A,#0x2
   \   0001A0   12....       LCALL   ?XSTACK_DISP0_8
   \   0001A3   12....       LCALL   ?Subroutine82 & 0xFFFF
   \                     ??CrossCallReturnLabel_121:
   \   0001A6   4003         JC      $+5
   \   0001A8   02....       LJMP    ??zclProcessInWriteUndividedCmd_16 & 0xFFFF
   \   0001AB   EF           MOV     A,R7
   \   0001AC   75F005       MOV     B,#0x5
   \   0001AF   A4           MUL     AB
   \   0001B0   F8           MOV     R0,A
   \   0001B1   A9F0         MOV     R1,B
   \   0001B3   7402         MOV     A,#0x2
   \   0001B5   12....       LCALL   ?XSTACK_DISP0_8
   \   0001B8   12....       LCALL   ?Subroutine91 & 0xFFFF
   \                     ??CrossCallReturnLabel_136:
   \   0001BB   8582..       MOV     ?V0 + 6,DPL
   \   0001BE   8583..       MOV     ?V0 + 7,DPH
   \   0001C1   E5..         MOV     A,?V0 + 14
   \   0001C3   28           ADD     A,R0
   \   0001C4   F5..         MOV     ?V0 + 12,A
   \   0001C6   E5..         MOV     A,?V0 + 15
   \   0001C8   39           ADDC    A,R1
   \   0001C9   F5..         MOV     ?V0 + 13,A
   \   0001CB   12....       LCALL   ?Subroutine79 & 0xFFFF
   \                     ??CrossCallReturnLabel_527:
   \   0001CE                ; Setup parameters for call to function zclFindAttrRec
   \   0001CE   7404         MOV     A,#0x4
   \   0001D0   12....       LCALL   ?XSTACK_DISP0_8
   \   0001D3   8582..       MOV     ?V0 + 10,DPL
   \   0001D6   8583..       MOV     ?V0 + 11,DPH
   \   0001D9   78..         MOV     R0,#?V0 + 10
   \   0001DB   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0001DE   85..82       MOV     DPL,?V0 + 6
   \   0001E1   85..83       MOV     DPH,?V0 + 7
   \   0001E4   12....       LCALL   ?Subroutine53 & 0xFFFF
   \                     ??CrossCallReturnLabel_60:
   \   0001E7   12....       LCALL   ?DEALLOC_XSTACK8
   \   0001EA   E9           MOV     A,R1
   \   0001EB   7003         JNZ     $+5
   \   0001ED   02....       LJMP    ??zclProcessInWriteUndividedCmd_16 & 0xFFFF
   \   0001F0   85..82       MOV     DPL,?V0 + 6
   \   0001F3   85..83       MOV     DPH,?V0 + 7
   \   0001F6   12....       LCALL   ??Subroutine248_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_487:
   \   0001F9   85..82       MOV     DPL,?V0 + 12
   \   0001FC   85..83       MOV     DPH,?V0 + 13
   \   0001FF   E8           MOV     A,R0
   \   000200   F0           MOVX    @DPTR,A
   \   000201   A3           INC     DPTR
   \   000202   E9           MOV     A,R1
   \   000203   12....       LCALL   ?Subroutine40 & 0xFFFF
   \                     ??CrossCallReturnLabel_44:
   \   000206   E5..         MOV     A,?V0 + 2
   \   000208   F0           MOVX    @DPTR,A
   \   000209   A3           INC     DPTR
   \   00020A   E5..         MOV     A,?V0 + 3
   \   00020C   F0           MOVX    @DPTR,A
   \   00020D   740A         MOV     A,#0xa
   \   00020F   12....       LCALL   ?XSTACK_DISP0_8
   \   000212   12....       LCALL   ??Subroutine258_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_550:
   \   000215   603F         JZ      ??zclProcessInWriteUndividedCmd_17
   \   000217                ; Setup parameters for call to function zclReadAttrData
   \   000217   85..82       MOV     DPL,?XSP + 0
   \   00021A   85..83       MOV     DPH,?XSP + 1
   \   00021D   8582..       MOV     ?V0 + 8,DPL
   \   000220   8583..       MOV     ?V0 + 9,DPH
   \   000223   78..         MOV     R0,#?V0 + 8
   \   000225   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000228   7406         MOV     A,#0x6
   \   00022A   12....       LCALL   ?XSTACK_DISP0_8
   \   00022D   AC82         MOV     R4,DPL
   \   00022F   AD83         MOV     R5,DPH
   \   000231   AA..         MOV     R2,?V0 + 2
   \   000233   AB..         MOV     R3,?V0 + 3
   \   000235   12....       LCALL   ??zclReadAttrData?relay
   \   000238   7402         MOV     A,#0x2
   \   00023A   12....       LCALL   ?DEALLOC_XSTACK8
   \   00023D   12....       LCALL   ?Subroutine79 & 0xFFFF
   \                     ??CrossCallReturnLabel_528:
   \   000240                ; Setup parameters for call to function zclWriteAttrData
   \   000240   78..         MOV     R0,#?V0 + 6
   \   000242   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000245   7406         MOV     A,#0x6
   \   000247   12....       LCALL   ?XSTACK_DISP0_8
   \   00024A   AC82         MOV     R4,DPL
   \   00024C   AD83         MOV     R5,DPH
   \   00024E   12....       LCALL   ?Subroutine128 & 0xFFFF
   \                     ??CrossCallReturnLabel_197:
   \   000251   12....       LCALL   ??zclWriteAttrData?relay
   \   000254   8046         SJMP    ??CrossCallReturnLabel_556
   \                     ??zclProcessInWriteUndividedCmd_17:
   \   000256   85..82       MOV     DPL,?V0 + 4
   \   000259   85..83       MOV     DPH,?V0 + 5
   \   00025C   12....       LCALL   ?Subroutine71 & 0xFFFF
   \                     ??CrossCallReturnLabel_101:
   \   00025F   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000262   78..         MOV     R0,#?V0 + 2
   \   000264   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000267   85..82       MOV     DPL,?V0 + 6
   \   00026A   85..83       MOV     DPH,?V0 + 7
   \   00026D   12....       LCALL   ??Subroutine235_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_425:
   \   000270   12....       LCALL   ?Subroutine98 & 0xFFFF
   \                     ??CrossCallReturnLabel_410:
   \   000273   E5..         MOV     A,?V0 + 8
   \   000275   12....       LCALL   ??Subroutine264_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_577:
   \   000278   E5..         MOV     A,?V0 + 9
   \   00027A   12....       LCALL   ??Subroutine263_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_566:
   \   00027D   12....       LCALL   ??zclReadAttrDataUsingCB?relay
   \   000280   7404         MOV     A,#0x4
   \   000282   12....       LCALL   ?DEALLOC_XSTACK8
   \   000285   12....       LCALL   ?Subroutine90 & 0xFFFF
   \                     ??CrossCallReturnLabel_491:
   \   000288                ; Setup parameters for call to function zclWriteAttrDataUsingCB
   \   000288   85..82       MOV     DPL,?V0 + 6
   \   00028B   85..83       MOV     DPH,?V0 + 7
   \   00028E   A3           INC     DPTR
   \   00028F   A3           INC     DPTR
   \   000290   A3           INC     DPTR
   \   000291   12....       LCALL   ?PUSH_XSTACK8_X_TWO
   \   000294   7406         MOV     A,#0x6
   \   000296   12....       LCALL   ?XSTACK_DISP0_8
   \   000299   12....       LCALL   ?Subroutine111 & 0xFFFF
   \                     ??CrossCallReturnLabel_556:
   \   00029C   7402         MOV     A,#0x2
   \   00029E   12....       LCALL   ?DEALLOC_XSTACK8
   \   0002A1   E9           MOV     A,R1
   \   0002A2   FB           MOV     R3,A
   \   0002A3   EB           MOV     A,R3
   \   0002A4   7003         JNZ     $+5
   \   0002A6   02....       LJMP    ??zclProcessInWriteUndividedCmd_15 & 0xFFFF
   \   0002A9   12....       LCALL   ?Subroutine143 & 0xFFFF
   \                     ??CrossCallReturnLabel_213:
   \   0002AC   F0           MOVX    @DPTR,A
   \   0002AD   85..82       MOV     DPL,?V0 + 6
   \   0002B0   85..83       MOV     DPH,?V0 + 7
   \   0002B3   12....       LCALL   ?Subroutine49 & 0xFFFF
   \                     ??CrossCallReturnLabel_591:
   \   0002B6   0E           INC     R6
   \   0002B7                ; Setup parameters for call to function zclRevertWriteUndividedCmd
   \   0002B7   8F..         MOV     ?V0 + 2,R7
   \   0002B9   75..00       MOV     ?V0 + 3,#0x0
   \   0002BC   78..         MOV     R0,#?V0 + 2
   \   0002BE   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0002C1   AC..         MOV     R4,?V0 + 14
   \   0002C3   AD..         MOV     R5,?V0 + 15
   \   0002C5   AA..         MOV     R2,?V0 + 4
   \   0002C7   AB..         MOV     R3,?V0 + 5
   \   0002C9   12....       LCALL   ??zclRevertWriteUndividedCmd?relay
   \   0002CC   7402         MOV     A,#0x2
   \   0002CE   12....       LCALL   ?DEALLOC_XSTACK8
   3763              } // for loop
   3764          
   3765              writeRspCmd->numAttr = j;
   \                     ??zclProcessInWriteUndividedCmd_16:
   \   0002D1   EE           MOV     A,R6
   \   0002D2   85..82       MOV     DPL,?V0 + 0
   \   0002D5   85..83       MOV     DPH,?V0 + 1
   \   0002D8   F0           MOVX    @DPTR,A
   3766              if ( writeRspCmd->numAttr  == 0 )
   \   0002D9   7003         JNZ     ??CrossCallReturnLabel_53
   3767              {
   3768                // Since all records were written successful, include a single status record
   3769                // in the resonse command with the status field set to SUCCESS and the
   3770                // attribute ID field omitted.
   3771                writeRspCmd->attrList[0].status = ZCL_STATUS_SUCCESS;
   \   0002DB   12....       LCALL   ?Subroutine48 & 0xFFFF
   3772                writeRspCmd->numAttr = 1;
   3773              }
   3774          
   3775              osal_mem_free( curWriteRec );
   \                     ??CrossCallReturnLabel_53:
   \   0002DE                ; Setup parameters for call to function osal_mem_free
   \   0002DE   AA..         MOV     R2,?V0 + 14
   \   0002E0   AB..         MOV     R3,?V0 + 15
   \   0002E2   12....       LCALL   ??osal_mem_free?relay
   3776            }
   3777          
   3778            zcl_SendWriteRsp( pInMsg->msg->endPoint, &(pInMsg->msg->srcAddr),
   3779                              pInMsg->msg->clusterId, writeRspCmd, ZCL_FRAME_SERVER_CLIENT_DIR,
   3780                              true, pInMsg->hdr.transSeqNum );
   \                     ??zclProcessInWriteUndividedCmd_9:
   \   0002E5   12....       LCALL   ?Subroutine67 & 0xFFFF
   \                     ??CrossCallReturnLabel_89:
   \   0002E8   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0002EB   75..01       MOV     ?V0 + 2,#0x1
   \   0002EE   78..         MOV     R0,#?V0 + 2
   \   0002F0   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0002F3   78..         MOV     R0,#?V0 + 2
   \   0002F5   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0002F8   78..         MOV     R0,#?V0 + 0
   \   0002FA   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0002FD   12....       LCALL   ?Subroutine59 & 0xFFFF
   \                     ??CrossCallReturnLabel_77:
   \   000300   12....       LCALL   ?DEALLOC_XSTACK8
   3781            osal_mem_free( writeRspCmd );
   \   000303                ; Setup parameters for call to function osal_mem_free
   \   000303   AA..         MOV     R2,?V0 + 0
   \   000305   AB..         MOV     R3,?V0 + 1
   \   000307   12....       LCALL   ??osal_mem_free?relay
   3782          
   3783            return TRUE;
   \   00030A   7901         MOV     R1,#0x1
   \                     ??zclProcessInWriteUndividedCmd_2:
   \   00030C   740C         MOV     A,#0xc
   \   00030E                REQUIRE ?Subroutine4
   \   00030E                ; // Fall through to label ?Subroutine4
   3784          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine146:
   \   000000   2401         ADD     A,#0x1
   \   000002   F0           MOVX    @DPTR,A
   \   000003   A3           INC     DPTR
   \   000004   E0           MOVX    A,@DPTR
   \   000005   3400         ADDC    A,#0x0
   \   000007   F0           MOVX    @DPTR,A
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine91:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   28           ADD     A,R0
   \   000002   FA           MOV     R2,A
   \   000003   A3           INC     DPTR
   \   000004   E0           MOVX    A,@DPTR
   \   000005   39           ADDC    A,R1
   \   000006   8A82         MOV     DPL,R2
   \   000008   F583         MOV     DPH,A
   \   00000A   A3           INC     DPTR
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine82:
   \   000000   12....       LCALL   ?Subroutine164 & 0xFFFF
   \                     ??CrossCallReturnLabel_245:
   \   000003   E0           MOVX    A,@DPTR
   \   000004   F8           MOV     R0,A
   \   000005   EF           MOV     A,R7
   \   000006   C3           CLR     C
   \   000007   98           SUBB    A,R0
   \   000008   22           RET
   3785          #endif // ZCL_WRITE
   3786          
   3787          #ifdef ZCL_DISCOVER
   3788          /*********************************************************************
   3789           * @fn      zclProcessInDiscCmd
   3790           *
   3791           * @brief   Process the "Profile" Discover Command
   3792           *
   3793           * @param   pInMsg - incoming message to process
   3794           *
   3795           * @return  TRUE if command processed. FALSE, otherwise.
   3796           */
   3797          static uint8 zclProcessInDiscCmd( zclIncoming_t *pInMsg )
   3798          {
   3799            zclDiscoverCmd_t *discoverCmd;
   3800            zclDiscoverRspCmd_t *discoverRspCmd;
   3801            uint8 discComplete = TRUE;
   3802            zclAttrRec_t attrRec;
   3803            uint16 attrID;
   3804            uint8 i;
   3805          
   3806            discoverCmd = (zclDiscoverCmd_t *)pInMsg->attrCmd;
   3807          
   3808            // Find out the number of attributes supported within the specified range
   3809            for ( i = 0, attrID = discoverCmd->startAttr; i < discoverCmd->maxAttrIDs; i++, attrID++ )
   3810            {
   3811              if ( !zclFindNextAttrRec( pInMsg->msg->endPoint, pInMsg->msg->clusterId, &attrID, &attrRec ) )
   3812              {
   3813                break;
   3814              }
   3815            }
   3816          
   3817            // Allocate space for the response command
   3818            discoverRspCmd = (zclDiscoverRspCmd_t *)osal_mem_alloc( sizeof (zclDiscoverRspCmd_t)
   3819                                                                   + sizeof ( zclDiscoverInfo_t ) * i );
   3820            if ( discoverRspCmd == NULL )
   3821            {
   3822              return FALSE; // EMEDDED RETURN
   3823            }
   3824          
   3825            discoverRspCmd->numAttr = i;
   3826            if ( discoverRspCmd->numAttr != 0 )
   3827            {
   3828              for ( i = 0, attrID = discoverCmd->startAttr; i < discoverRspCmd->numAttr; i++, attrID++ )
   3829              {
   3830                if ( !zclFindNextAttrRec( pInMsg->msg->endPoint, pInMsg->msg->clusterId, &attrID, &attrRec ) )
   3831                {
   3832                  break; // Attribute not supported
   3833                }
   3834          
   3835                discoverRspCmd->attrList[i].attrID = attrRec.attr.attrId;
   3836                discoverRspCmd->attrList[i].dataType = attrRec.attr.dataType;
   3837              }
   3838          
   3839              // Are there more attributes to be discovered?
   3840              if ( zclFindNextAttrRec( pInMsg->msg->endPoint, pInMsg->msg->clusterId, &attrID, &attrRec ) )
   3841              {
   3842                discComplete = FALSE;
   3843              }
   3844            }
   3845          
   3846            discoverRspCmd->discComplete = discComplete;
   3847            zcl_SendDiscoverRspCmd( pInMsg->msg->endPoint, &pInMsg->msg->srcAddr,
   3848                                    pInMsg->msg->clusterId, discoverRspCmd, ZCL_FRAME_SERVER_CLIENT_DIR,
   3849                                    true, pInMsg->hdr.transSeqNum );
   3850            osal_mem_free( discoverRspCmd );
   3851          
   3852            return TRUE;
   3853          }
   3854          #endif // ZCL_DISCOVER
   3855          
   3856          /*********************************************************************
   3857           * @fn      zclSendMsg
   3858           *
   3859           * @brief   Send an incoming message to the Application
   3860           *
   3861           * @param   pInMsg - incoming message to process
   3862           *
   3863           * @return  TRUE
   3864           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3865          static uint8 zclSendMsg( zclIncoming_t *pInMsg )
   \                     zclSendMsg:
   3866          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
   3867            zclIncomingMsg_t *pCmd;
   3868          
   3869            if ( zcl_RegisteredMsgTaskID == TASK_NO_TASK )
   \   000009   90....       MOV     DPTR,#zcl_RegisteredMsgTaskID
   \   00000C   E0           MOVX    A,@DPTR
   \   00000D   F4           CPL     A
   \   00000E   7005         JNZ     ??zclSendMsg_0
   3870            {
   3871              return ( TRUE );
   \                     ??zclSendMsg_1:
   \   000010   7901         MOV     R1,#0x1
   \   000012   02....       LJMP    ?Subroutine8 & 0xFFFF
   3872            }
   3873          
   3874            pCmd = (zclIncomingMsg_t *)osal_msg_allocate( sizeof ( zclIncomingMsg_t ) );
   \                     ??zclSendMsg_0:
   \   000015                ; Setup parameters for call to function osal_msg_allocate
   \   000015   7A19         MOV     R2,#0x19
   \   000017   7B00         MOV     R3,#0x0
   \   000019   12....       LCALL   ??osal_msg_allocate?relay
   3875            if ( pCmd != NULL )
   \   00001C   EA           MOV     A,R2
   \   00001D   4B           ORL     A,R3
   \   00001E   60F0         JZ      ??zclSendMsg_1
   3876            {
   3877              // fill in the message
   3878              pCmd->hdr.event = ZCL_INCOMING_MSG;
   \   000020   8A82         MOV     DPL,R2
   \   000022   8B83         MOV     DPH,R3
   \   000024   7434         MOV     A,#0x34
   \   000026   12....       LCALL   ??Subroutine227_0 & 0xFFFF
   3879              pCmd->zclHdr    = pInMsg->hdr;
   \                     ??CrossCallReturnLabel_372:
   \   000029   A3           INC     DPTR
   \   00002A   EA           MOV     A,R2
   \   00002B   2402         ADD     A,#0x2
   \   00002D   FC           MOV     R4,A
   \   00002E   EB           MOV     A,R3
   \   00002F   3400         ADDC    A,#0x0
   \   000031   FD           MOV     R5,A
   \   000032   7406         MOV     A,#0x6
   \   000034   12....       LCALL   ?MOVE_LONG8_XDATA_XDATA
   3880              pCmd->clusterId = pInMsg->msg->clusterId;
   \   000037   8E82         MOV     DPL,R6
   \   000039   8F83         MOV     DPH,R7
   \   00003B   12....       LCALL   ?Subroutine83 & 0xFFFF
   \                     ??CrossCallReturnLabel_124:
   \   00003E   A3           INC     DPTR
   \   00003F   A3           INC     DPTR
   \   000040   A3           INC     DPTR
   \   000041   A3           INC     DPTR
   \   000042   12....       LCALL   ??Subroutine248_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_488:
   \   000045   8A82         MOV     DPL,R2
   \   000047   8B83         MOV     DPH,R3
   \   000049   A3           INC     DPTR
   \   00004A   A3           INC     DPTR
   \   00004B   A3           INC     DPTR
   \   00004C   A3           INC     DPTR
   \   00004D   A3           INC     DPTR
   \   00004E   A3           INC     DPTR
   \   00004F   A3           INC     DPTR
   \   000050   A3           INC     DPTR
   \   000051   E8           MOV     A,R0
   \   000052   12....       LCALL   ?Subroutine29 & 0xFFFF
   3881              pCmd->srcAddr   = pInMsg->msg->srcAddr;
   \                     ??CrossCallReturnLabel_28:
   \   000055   F8           MOV     R0,A
   \   000056   12....       LCALL   ??Subroutine208_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_295:
   \   000059   A3           INC     DPTR
   \   00005A   A3           INC     DPTR
   \   00005B   A3           INC     DPTR
   \   00005C   A3           INC     DPTR
   \   00005D   A3           INC     DPTR
   \   00005E   EA           MOV     A,R2
   \   00005F   240A         ADD     A,#0xa
   \   000061   FC           MOV     R4,A
   \   000062   EB           MOV     A,R3
   \   000063   3400         ADDC    A,#0x0
   \   000065   FD           MOV     R5,A
   \   000066   740C         MOV     A,#0xc
   \   000068   12....       LCALL   ?MOVE_LONG8_XDATA_XDATA
   3882              pCmd->endPoint  = pInMsg->msg->endPoint;
   \   00006B   8E82         MOV     DPL,R6
   \   00006D   8F83         MOV     DPH,R7
   \   00006F   E0           MOVX    A,@DPTR
   \   000070   2414         ADD     A,#0x14
   \   000072   12....       LCALL   ??Subroutine271_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_605:
   \   000075   C0E0         PUSH    A
   \   000077   EA           MOV     A,R2
   \   000078   2416         ADD     A,#0x16
   \   00007A   12....       LCALL   ??Subroutine269_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_601:
   \   00007D   D0E0         POP     A
   \   00007F   F0           MOVX    @DPTR,A
   3883              pCmd->attrCmd   = pInMsg->attrCmd;
   \   000080   EE           MOV     A,R6
   \   000081   240C         ADD     A,#0xc
   \   000083   12....       LCALL   ?Subroutine131 & 0xFFFF
   \                     ??CrossCallReturnLabel_360:
   \   000086   12....       LCALL   ??Subroutine235_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_426:
   \   000089   EA           MOV     A,R2
   \   00008A   2417         ADD     A,#0x17
   \   00008C   12....       LCALL   ??Subroutine269_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_602:
   \   00008F   EC           MOV     A,R4
   \   000090   F0           MOVX    @DPTR,A
   \   000091   A3           INC     DPTR
   \   000092   ED           MOV     A,R5
   \   000093   F0           MOVX    @DPTR,A
   3884          
   3885              // Application will free the attrCmd buffer
   3886              pInMsg->attrCmd = NULL;
   \   000094   8882         MOV     DPL,R0
   \   000096   8983         MOV     DPH,R1
   \   000098   E4           CLR     A
   \   000099   F0           MOVX    @DPTR,A
   \   00009A   A3           INC     DPTR
   \   00009B   F0           MOVX    @DPTR,A
   3887          
   3888              /* send message through task message */
   3889              osal_msg_send( zcl_RegisteredMsgTaskID, (uint8 *)pCmd );
   \   00009C                ; Setup parameters for call to function osal_msg_send
   \   00009C   90....       MOV     DPTR,#zcl_RegisteredMsgTaskID
   \   00009F   E0           MOVX    A,@DPTR
   \   0000A0   F9           MOV     R1,A
   \   0000A1   12....       LCALL   ??osal_msg_send?relay
   \   0000A4   02....       LJMP    ??zclSendMsg_1 & 0xFFFF
   3890            }
   3891          
   3892            return ( TRUE );
   3893          }

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for zcl_RegisteredMsgTaskID>`:
   \   000000   FF           DB 255

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zcl_Init?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zcl_Init

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zcl_event_loop?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zcl_event_loop

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zcl_getRawAFMsg?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zcl_getRawAFMsg

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zcl_registerPlugin?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zcl_registerPlugin

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zcl_registerAttrList?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zcl_registerAttrList

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zcl_registerClusterOptionList?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zcl_registerClusterOptionList

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zcl_registerValidateAttrData?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zcl_registerValidateAttrData

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zcl_registerReadWriteCB?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zcl_registerReadWriteCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zcl_registerForMsg?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zcl_registerForMsg

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zcl_DeviceOperational?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zcl_DeviceOperational

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zcl_SendCommand?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zcl_SendCommand

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zcl_SendRead?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zcl_SendRead

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zcl_SendReadRsp?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zcl_SendReadRsp

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zcl_SendWriteRequest?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zcl_SendWriteRequest

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zcl_SendWriteRsp?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zcl_SendWriteRsp

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zcl_SendConfigReportCmd?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zcl_SendConfigReportCmd

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zcl_SendConfigReportRspCmd?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zcl_SendConfigReportRspCmd

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zcl_SendReadReportCfgCmd?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zcl_SendReadReportCfgCmd

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zcl_SendReadReportCfgRspCmd?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zcl_SendReadReportCfgRspCmd

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zcl_SendReportCmd?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zcl_SendReportCmd

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zcl_SendDefaultRspCmd?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zcl_SendDefaultRspCmd

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zclProcessMessageMSG?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclProcessMessageMSG

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zclParseHdr?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclParseHdr

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zclBuildHdr?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclBuildHdr

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zclFindAttrRecsList?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclFindAttrRecsList

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zclFindAttrRec?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclFindAttrRec

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zclGetReadWriteCB?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclGetReadWriteCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zclGetAuthorizeCB?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclGetAuthorizeCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zclFindClusterOption?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclFindClusterOption

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zclGetClusterOption?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclGetClusterOption

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zclSetSecurityOption?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclSetSecurityOption

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zclSerializeData?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclSerializeData

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zclAnalogDataType?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclAnalogDataType

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zcl_BuildAnalogData?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zcl_BuildAnalogData

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zclGetDataTypeLength?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclGetDataTypeLength

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zclGetAttrDataLength?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclGetAttrDataLength

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zclReadAttrData?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclReadAttrData

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zclGetAttrDataLengthUsingCB?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclGetAttrDataLengthUsingCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zclReadAttrDataUsingCB?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclReadAttrDataUsingCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zclWriteAttrData?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclWriteAttrData

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zclWriteAttrDataUsingCB?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclWriteAttrDataUsingCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zclAuthorizeWrite?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclAuthorizeWrite

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zclParseInReadCmd?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclParseInReadCmd

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zclParseInReadRspCmd?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclParseInReadRspCmd

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zclParseInWriteCmd?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclParseInWriteCmd

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zclParseInWriteRspCmd?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclParseInWriteRspCmd

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zclParseInConfigReportCmd?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclParseInConfigReportCmd

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zclParseInConfigReportRspCmd?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclParseInConfigReportRspCmd

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zclParseInReadReportCfgCmd?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclParseInReadReportCfgCmd

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zclParseInReadReportCfgRspCmd?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclParseInReadReportCfgRspCmd

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zclParseInReportCmd?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclParseInReportCmd

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zclParseInDefaultRspCmd?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclParseInDefaultRspCmd

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zclProcessInReadCmd?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclProcessInReadCmd

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zclProcessInWriteCmd?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclProcessInWriteCmd

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zclRevertWriteUndividedCmd?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclRevertWriteUndividedCmd

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zclProcessInWriteUndividedCmd?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclProcessInWriteUndividedCmd

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zclSendMsg?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclSendMsg
   3894          
   3895          /*********************************************************************
   3896          *********************************************************************/

   Maximum stack usage in bytes:

     Function                       ISTACK PSTACK XSTACK
     --------                       ------ ------ ------
     zclAnalogDataType                  2      0     27
     zclAuthorizeWrite                  0      0     30
       -> zclGetAuthorizeCB             0      0     28
     zclBuildHdr                        1      0     42
     zclFindAttrRec                     0      0     56
       -> zclFindAttrRecsList           0      0     36
     zclFindAttrRecsList                2      0     18
     zclFindClusterOption               0      0     19
     zclGetAttrDataLength               0      0     45
       -> zclGetDataTypeLength          0      0     18
     zclGetAttrDataLengthUsingCB        0      0     58
       -> zclGetReadWriteCB             0      0     36
     zclGetAuthorizeCB                  0      0     40
       -> zclFindAttrRecsList           0      0     20
     zclGetClusterOption                0      0     43
       -> zclFindClusterOption          0      0     20
     zclGetDataTypeLength               2      0     27
     zclGetReadWriteCB                  0      0     30
       -> zclFindAttrRecsList           0      0     20
     zclParseHdr                        1      0     45
       -> osal_memset                   0      0     24
     zclParseInConfigReportCmd          1      0     20
       -> zclAnalogDataType             0      0     40
       -> zclGetDataTypeLength          0      0     40
       -> osal_mem_alloc                0      0     40
       -> osal_memset                   0      0     40
       -> zclAnalogDataType             0      0     40
       -> zcl_BuildAnalogData           0      0     40
       -> zclGetDataTypeLength          0      0     40
     zclParseInConfigReportRspCmd       1      0     11
       -> osal_mem_alloc                0      0     22
     zclParseInDefaultRspCmd            1      0     10
       -> osal_mem_alloc                0      0     20
     zclParseInReadCmd                  1      0     12
       -> osal_mem_alloc                0      0     24
     zclParseInReadReportCfgCmd         1      0     12
       -> osal_mem_alloc                0      0     24
     zclParseInReadReportCfgRspCmd      1      0     20
       -> zclAnalogDataType             0      0     40
       -> zclGetDataTypeLength          0      0     40
       -> osal_mem_alloc                0      0     40
       -> zclAnalogDataType             0      0     40
       -> zcl_BuildAnalogData           0      0     40
       -> zclGetDataTypeLength          0      0     40
     zclParseInReadRspCmd               1      0     25
       -> zclGetAttrDataLength          0      0     44
       -> osal_mem_alloc                0      0     44
       -> zclGetAttrDataLength          0      0     44
       -> osal_memcpy                   0      0     50
     zclParseInReportCmd                1      0     25
       -> zclGetAttrDataLength          0      0     44
       -> osal_mem_alloc                0      0     44
       -> zclGetAttrDataLength          0      0     44
       -> osal_memcpy                   0      0     50
     zclParseInWriteCmd                 1      0     25
       -> zclGetAttrDataLength          0      0     44
       -> osal_mem_alloc                0      0     44
       -> zclGetAttrDataLength          0      0     44
       -> osal_memcpy                   0      0     50
     zclParseInWriteRspCmd              1      0     14
       -> osal_mem_alloc                0      0     28
     zclProcessInReadCmd                1      0     35
       -> osal_mem_alloc                0      0     60
       -> zclFindAttrRec                0      0     64
       -> zclGetAuthorizeCB             0      0     60
       -> zcl_SendReadRsp               0      0     70
       -> osal_mem_free                 0      0     60
     zclProcessInWriteCmd               1      0     35
       -> osal_mem_alloc                0      0     60
       -> zclFindAttrRec                0      0     64
       -> zclWriteAttrData              0      0     64
       -> zclWriteAttrDataUsingCB       0      0     64
       -> zcl_SendWriteRsp              0      0     70
       -> osal_mem_free                 0      0     60
     zclProcessInWriteUndividedCmd      1      0     41
       -> osal_mem_alloc                0      0     72
       -> zclGetAttrDataLengthUsingCB
                                        0      0     72
       -> zclFindAttrRec                0      0     76
       -> osal_mem_alloc                0      0     72
       -> osal_mem_free                 0      0     72
       -> zclGetAttrDataLength          0      0     72
       -> zclFindAttrRec                0      0     76
       -> zclReadAttrData               0      0     76
       -> zclWriteAttrData              0      0     76
       -> zclReadAttrDataUsingCB        0      0     80
       -> zclWriteAttrDataUsingCB       0      0     76
       -> zclRevertWriteUndividedCmd
                                        0      0     76
       -> osal_mem_free                 0      0     72
       -> zcl_SendWriteRsp              0      0     82
       -> osal_mem_free                 0      0     72
     zclProcessMessageMSG               1      0     52
       -> zclParseHdr                   0      0     66
       -> afFindEndPointDesc            0      0     66
       -> zcl_DeviceOperational         0      0     70
       -> StubAPS_InterPan              0      0     66
       -> zclGetClusterOption           0      0     66
       -> zclSetSecurityOption          0      0     66
       -> zcl_SendDefaultRspCmd         0      0     80
       -> zclSetSecurityOption          0      0     66
       -> osal_mem_free                 0      0     66
       -> zcl_SendDefaultRspCmd         0      0     80
     zclReadAttrData                    0      0     60
       -> zclGetAttrDataLength          0      0     38
       -> osal_memcpy                   0      0     44
     zclReadAttrDataUsingCB             0      0     64
       -> zclGetReadWriteCB             0      0     40
     zclRevertWriteUndividedCmd         0      0     69
       -> zclWriteAttrDataUsingCB       0      0     60
       -> zclFindAttrRec                0      0     60
       -> zclGetAttrDataLength          0      0     56
       -> osal_memcpy                   0      0     62
     zclSendMsg                         1      0     10
       -> osal_msg_allocate             0      0     20
       -> osal_msg_send                 0      0     20
     zclSerializeData                   1      0     48
       -> osal_buffer_uint32            0      0     40
       -> osal_memcpy                   0      0     38
       -> osal_memcpy                   0      0     38
       -> osal_memcpy                   0      0     38
       -> osal_memcpy                   0      0     38
       -> osal_memcpy                   0      0     38
       -> osal_memcpy                   0      0     38
     zclSetSecurityOption               0      0     43
       -> zclFindClusterOption          0      0     20
     zclWriteAttrData                   0      0     56
       -> zclAuthorizeWrite             0      0     30
       -> zclGetAttrDataLength          0      0     30
       -> osal_memcpy                   0      0     36
     zclWriteAttrDataUsingCB            0      0     58
       -> zclAuthorizeWrite             0      0     32
       -> zclGetReadWriteCB             0      0     32
     zcl_BuildAnalogData                1      0     29
       -> osal_build_uint32             0      0     18
       -> osal_build_uint32             0      0     18
     zcl_DeviceOperational              0      0     57
       -> zclFindAttrRec                0      0     44
       -> zclReadAttrData               0      0     44
     zcl_Init                           2      0      0
     zcl_SendCommand                    1      0     78
       -> afFindEndPointDesc            0      0     60
       -> StubAPS_InterPan              0      0     60
       -> zclGetClusterOption           0      0     60
       -> osal_memset                   0      0     60
       -> zcl_DeviceOperational         0      0     64
       -> osal_mem_alloc                0      0     60
       -> zclBuildHdr                   0      0     66
       -> osal_memcpy                   0      0     66
       -> AF_DataRequest                0      0     78
       -> osal_mem_free                 0      0     60
     zcl_SendConfigReportCmd            1      0     43
       -> zclAnalogDataType             0      0     54
       -> zclGetDataTypeLength          0      0     54
       -> osal_mem_alloc                0      0     54
       -> zclAnalogDataType             0      0     54
       -> zclSerializeData              0      0     54
       -> zcl_SendCommand               0      0     76
       -> osal_mem_free                 0      0     54
     zcl_SendConfigReportRspCmd         1      0     38
       -> osal_mem_alloc                0      0     44
       -> zcl_SendCommand               0      0     66
       -> osal_mem_free                 0      0     44
     zcl_SendDefaultRspCmd              1      0     67
       -> zcl_SendCommand               0      0     54
     zcl_SendRead                       1      0     38
       -> osal_mem_alloc                0      0     44
       -> zcl_SendCommand               0      0     66
       -> osal_mem_free                 0      0     44
     zcl_SendReadReportCfgCmd           1      0     38
       -> osal_mem_alloc                0      0     44
       -> zcl_SendCommand               0      0     66
       -> osal_mem_free                 0      0     44
     zcl_SendReadReportCfgRspCmd        1      0     43
       -> zclAnalogDataType             0      0     54
       -> zclGetDataTypeLength          0      0     54
       -> osal_mem_alloc                0      0     54
       -> zclAnalogDataType             0      0     54
       -> zclSerializeData              0      0     54
       -> zcl_SendCommand               0      0     76
       -> osal_mem_free                 0      0     54
     zcl_SendReadRsp                    1      0     74
       -> zclGetAttrDataLengthUsingCB
                                        0      0     56
       -> zclGetAttrDataLength          0      0     56
       -> osal_mem_alloc                0      0     56
       -> zclReadAttrDataUsingCB        0      0     64
       -> zclSerializeData              0      0     56
       -> zcl_SendCommand               0      0     78
       -> osal_mem_free                 0      0     56
     zcl_SendReportCmd                  1      0     40
       -> zclGetAttrDataLength          0      0     48
       -> osal_mem_alloc                0      0     48
       -> zclSerializeData              0      0     48
       -> zcl_SendCommand               0      0     70
       -> osal_mem_free                 0      0     48
     zcl_SendWriteRequest               1      0     41
       -> zclGetAttrDataLength          0      0     48
       -> osal_mem_alloc                0      0     48
       -> zclSerializeData              0      0     48
       -> zcl_SendCommand               0      0     70
       -> osal_mem_free                 0      0     48
     zcl_SendWriteRsp                   1      0     74
       -> osal_mem_alloc                0      0     44
       -> zcl_SendCommand               0      0     66
       -> osal_mem_free                 0      0     44
     zcl_event_loop                     0      0     12
       -> osal_msg_receive              0      0     24
       -> zclProcessMessageMSG          0      0     24
       -> osal_msg_deallocate           0      0     24
       -> osal_msg_receive              0      0     24
       -> osal_msg_send                 0      0     24
     zcl_getRawAFMsg                    2      0      0
     zcl_registerAttrList               1      0     12
       -> osal_mem_alloc                0      0     24
     zcl_registerClusterOptionList      1      0     12
       -> osal_mem_alloc                0      0     24
     zcl_registerForMsg                 2      0      0
     zcl_registerPlugin                 0      0     16
       -> osal_mem_alloc                0      0     28
     zcl_registerReadWriteCB            0      0     14
       -> zclFindAttrRecsList           0      0     28
     zcl_registerValidateAttrData       2      0      0


   Segment part sizes:

     Function/Label                             Bytes
     --------------                             -----
     zcl_TaskID                                    1
     zcl_RegisteredMsgTaskID                       1
     zcl_ValidateAttrDataCB                        2
     zcl_SeqNum                                    1
     plugins                                       2
     attrList                                      2
     clusterOptionList                             2
     zcl_TransID                                   1
     rawAFMsg                                      2
     zclCmdTable                                  56
     zcl_Init                                     31
     ?Subroutine0                                  7
     zcl_event_loop                              110
     ?Subroutine1                                  5
     ??Subroutine234_0                             4
     ?Subroutine172                                6
     zcl_getRawAFMsg                              13
     zcl_registerPlugin                          100
     ?Subroutine37                                 2
     ??Subroutine207_0                             4
     ?Subroutine160                                7
     ?Subroutine57                                16
     ?Subroutine44                                 8
     ?Subroutine155                               15
     ?Subroutine201                                7
     ?Subroutine2                                  5
     ??Subroutine230_0                             6
     ??Subroutine236_0                             6
     ??Subroutine240_0                             4
     ??Subroutine253_0                             6
     ??Subroutine266_0                             2
     ??Subroutine267_0                             6
     zcl_registerAttrList                         71
     ?Subroutine36                                 7
     ?Subroutine120                               16
     ?Subroutine24                                11
     zcl_registerClusterOptionList                62
     zcl_registerValidateAttrData                 14
     zcl_registerReadWriteCB                      59
     zcl_registerForMsg                           21
     zcl_DeviceOperational                       129
     ?Subroutine3                                  5
     ??Subroutine265_0                             6
     zcl_SendCommand                             482
     ?Subroutine104                                3
     ??Subroutine208_0                             8
     ?Subroutine97                                 8
     ?Subroutine70                                 9
     ??Subroutine235_0                             4
     ??Subroutine238_0                             6
     ??Subroutine251_0                             5
     ?Subroutine122                               12
     ?Subroutine173                                8
     ??Subroutine258_0                             6
     ??Subroutine260_0                             6
     ?Subroutine4                                  3
     ??Subroutine261_0                             5
     ?Subroutine40                                11
     zcl_SendRead                                197
     ?Subroutine165                                1
     ??Subroutine209_0                            11
     ??Subroutine210_0                             6
     ??Subroutine211_0                             6
     ?Subroutine12                                 4
     ??Subroutine219_0                             4
     ?Subroutine106                                6
     ?Subroutine69                                 6
     ??Subroutine222_0                             5
     ?Subroutine186                               12
     ?Subroutine174                               12
     ?Subroutine169                                8
     ?Subroutine139                               12
     zcl_SendReadRsp                             422
     ?Subroutine182                                3
     ??Subroutine212_0                             6
     ?Subroutine140                                3
     ??Subroutine213_0                            15
     ?Subroutine94                                 3
     ??Subroutine214_0                             6
     ?Subroutine87                                10
     ?Subroutine50                                 4
     ?Subroutine161                               16
     ?Subroutine30                                11
     ??Subroutine215_0                             7
     ??Subroutine223_0                             4
     ?Subroutine191                                8
     ?Subroutine205                                5
     ?Subroutine103                                6
     ?Subroutine65                                 4
     ?Subroutine98                                 6
     ??Subroutine232_0                             1
     ??Subroutine233_0                             3
     ??Subroutine248_0                             4
     ??Subroutine257_0                             2
     ?Subroutine145                               11
     zcl_SendWriteRequest                        182
     ?Subroutine13                                 5
     ?Subroutine60                                 6
     ?Subroutine117                                3
     ?Subroutine108                               10
     ?Subroutine100                                6
     ?Subroutine55                                34
     ?Subroutine167                                3
     ??Subroutine225_0                            10
     ?Subroutine14                                49
     ?Subroutine192                                9
     ?Subroutine204                               15
     ?Subroutine166                                9
     ??Subroutine228_0                             6
     ?Subroutine157                               11
     ?Subroutine136                                4
     zcl_SendWriteRsp                            169
     ?Subroutine61                                17
     ?Subroutine180                               10
     ?Subroutine16                                50
     zcl_SendConfigReportCmd                     281
     ?Subroutine6                                 12
     ?Subroutine176                                3
     ??Subroutine216_0                             7
     ?Subroutine107                                6
     ??Subroutine217_0                             7
     ?Subroutine31                                 9
     ??Subroutine218_0                             5
     ?Subroutine141                                6
     ?Subroutine119                               19
     ?Subroutine101                                6
     ?Subroutine95                                14
     ?Subroutine85                                13
     ?Subroutine84                                11
     ?Subroutine35                                12
     ?Subroutine190                                8
     ?Subroutine162                                4
     ?Subroutine25                                21
     ?Subroutine21                                 9
     ?Subroutine151                               11
     ?Subroutine20                                 6
     ?Subroutine19                                 9
     ?Subroutine17                                13
     ?Subroutine152                               19
     ?Subroutine198                                1
     ??Subroutine224_0                            16
     ?Subroutine130                                4
     ??Subroutine250_0                             4
     zcl_SendConfigReportRspCmd                  241
     ?Subroutine46                                 1
     ??Subroutine220_0                             1
     ??Subroutine221_0                            10
     ?Subroutine58                                11
     ?Subroutine109                               10
     zcl_SendReadReportCfgCmd                    156
     zcl_SendReadReportCfgRspCmd                 296
     ?Subroutine131                                2
     ?Subroutine78                                16
     zcl_SendReportCmd                           176
     zcl_SendDefaultRspCmd                       168
     zclProcessMessageMSG                       1080
     ?Subroutine125                               15
     ?Subroutine124                               15
     ?Subroutine92                                12
     ?Subroutine76                                 9
     ?Subroutine73                                13
     ?Subroutine56                                15
     ?Subroutine189                                6
     ??Subroutine226_0                             7
     ?Subroutine134                               10
     ?Subroutine185                                4
     ??Subroutine256_0                             6
     ?Subroutine51                                 9
     ?Subroutine129                                3
     ??Subroutine262_0                             3
     ??Subroutine263_0                             4
     ??Subroutine264_0                             5
     ?Subroutine83                                 4
     ?Subroutine164                                9
     ??Subroutine270_0                             5
     ?Subroutine74                                 9
     ??Subroutine271_0                             4
     ?Subroutine181                               12
     zclParseHdr                                 212
     ?Subroutine43                                 3
     ??Subroutine227_0                             5
     ?Subroutine41                                 4
     ?Subroutine158                                4
     ?Subroutine200                               11
     ?Subroutine156                                5
     ?Subroutine68                                 5
     ??Subroutine246_0                             2
     ??Subroutine247_0                             4
     ?Subroutine153                                7
     ?Subroutine177                               12
     ?Subroutine202                                6
     ?Subroutine199                                5
     ?Subroutine206                               10
     ?Subroutine26                                11
     ?Subroutine29                                 8
     zclBuildHdr                                  88
     ?Subroutine96                                 4
     ?Subroutine203                                4
     ?Subroutine47                                 7
     ??Subroutine229_0                             7
     ?Subroutine39                                 4
     ?Subroutine7                                  5
     zclFindAttrRecsList                          37
     zclFindAttrRec                              179
     ?Subroutine86                                25
     zclGetReadWriteCB                            22
     ?Subroutine121                               12
     ?Subroutine8                                  5
     zclGetAuthorizeCB                            23
     zclFindClusterOption                        122
     zclGetClusterOption                          20
     ?Subroutine150                               12
     zclSetSecurityOption                         28
     zclSerializeData                            331
     ?Subroutine9                                  5
     ?Subroutine38                                11
     ?Subroutine115                                6
     ?Subroutine179                                7
     ?Subroutine110                                4
     ??Subroutine254_0                             6
     zclAnalogDataType                            33
     zcl_BuildAnalogData                         110
     zclGetDataTypeLength                        160
     zclGetAttrDataLength                         62
     zclReadAttrData                             104
     zclGetAttrDataLengthUsingCB                 108
     zclReadAttrDataUsingCB                       97
     ??Subroutine231_0                             5
     ??Subroutine255_0                             4
     ?Subroutine77                                 8
     zclWriteAttrData                            144
     ?Subroutine102                                4
     ?Subroutine93                                 9
     zclWriteAttrDataUsingCB                     111
     zclAuthorizeWrite                            60
     zclParseInReadCmd                           100
     ?Subroutine105                                9
     ?Subroutine75                                10
     ?Subroutine193                                9
     ?Subroutine168                                4
     ??Subroutine252_0                             3
     zclParseInReadRspCmd                        244
     ?Subroutine11                                 7
     ?Subroutine147                                2
     ??Subroutine237_0                             4
     ?Subroutine196                                4
     ??Subroutine239_0                             3
     ??Subroutine241_0                            12
     ??Subroutine242_0                            14
     ??Subroutine243_0                             7
     ?Subroutine163                               16
     ?Subroutine187                               25
     ?Subroutine195                               21
     ?Subroutine183                                9
     ?Subroutine170                               37
     ?Subroutine137                                8
     zclParseInWriteCmd                           76
     ?Subroutine118                               15
     ?Subroutine22                                15
     ?Subroutine127                               13
     ?Subroutine126                               15
     ?Subroutine80                                17
     ?Subroutine64                                19
     ?Subroutine63                                25
     ?Subroutine194                               12
     ?Subroutine62                                18
     ?Subroutine15                                27
     ?Subroutine175                                1
     zclParseInWriteRspCmd                        83
     ?Subroutine81                                 4
     ?Subroutine27                                14
     ??Subroutine244_0                            11
     ??Subroutine245_0                             4
     ?Subroutine52                                19
     ?Subroutine10                                 4
     zclParseInConfigReportCmd                   287
     ?Subroutine34                                 6
     ?Subroutine149                               12
     ?Subroutine148                               13
     ?Subroutine142                               21
     ?Subroutine138                               19
     ?Subroutine123                               12
     ?Subroutine116                               13
     ?Subroutine112                               13
     ?Subroutine99                                 4
     ?Subroutine72                                21
     ?Subroutine159                                9
     ?Subroutine33                                 6
     ?Subroutine28                                 8
     ?Subroutine154                                3
     ??Subroutine249_0                             4
     ?Subroutine23                                 7
     ?Subroutine178                               12
     ?Subroutine18                                22
     zclParseInConfigReportRspCmd                110
     ?Subroutine135                                4
     ?Subroutine114                               12
     ?Subroutine32                                11
     ?Subroutine42                                 4
     zclParseInReadReportCfgCmd                   69
     ?Subroutine113                                4
     zclParseInReadReportCfgRspCmd               289
     zclParseInReportCmd                          76
     zclParseInDefaultRspCmd                      33
     ?Subroutine5                                  5
     zclProcessInReadCmd                         391
     ?Subroutine45                                 2
     ?Subroutine89                                10
     ?Subroutine128                               21
     ?Subroutine71                                18
     ?Subroutine53                                15
     ?Subroutine188                                6
     ?Subroutine184                                9
     ?Subroutine171                               16
     ??Subroutine268_0                             3
     ??Subroutine269_0                             3
     ?Subroutine88                                 6
     zclProcessInWriteCmd                        357
     ?Subroutine144                               22
     ?Subroutine133                               20
     ??Subroutine259_0                             7
     ?Subroutine143                               23
     ?Subroutine197                                2
     ?Subroutine67                                27
     ?Subroutine66                                16
     ?Subroutine59                                24
     ?Subroutine49                                 3
     ?Subroutine48                                12
     ?Subroutine132                                2
     zclRevertWriteUndividedCmd                  198
     ?Subroutine111                               17
     ?Subroutine54                                13
     ?Subroutine90                                 6
     ?Subroutine79                                 6
     zclProcessInWriteUndividedCmd               782
     ?Subroutine146                                9
     ?Subroutine91                                12
     ?Subroutine82                                 9
     zclSendMsg                                  167
     ?<Initializer for zcl_RegisteredMsgTaskID>    1
     ??zcl_Init?relay                              6
     ??zcl_event_loop?relay                        6
     ??zcl_getRawAFMsg?relay                       6
     ??zcl_registerPlugin?relay                    6
     ??zcl_registerAttrList?relay                  6
     ??zcl_registerClusterOptionList?relay         6
     ??zcl_registerValidateAttrData?relay          6
     ??zcl_registerReadWriteCB?relay               6
     ??zcl_registerForMsg?relay                    6
     ??zcl_DeviceOperational?relay                 6
     ??zcl_SendCommand?relay                       6
     ??zcl_SendRead?relay                          6
     ??zcl_SendReadRsp?relay                       6
     ??zcl_SendWriteRequest?relay                  6
     ??zcl_SendWriteRsp?relay                      6
     ??zcl_SendConfigReportCmd?relay               6
     ??zcl_SendConfigReportRspCmd?relay            6
     ??zcl_SendReadReportCfgCmd?relay              6
     ??zcl_SendReadReportCfgRspCmd?relay           6
     ??zcl_SendReportCmd?relay                     6
     ??zcl_SendDefaultRspCmd?relay                 6
     ??zclProcessMessageMSG?relay                  6
     ??zclParseHdr?relay                           6
     ??zclBuildHdr?relay                           6
     ??zclFindAttrRecsList?relay                   6
     ??zclFindAttrRec?relay                        6
     ??zclGetReadWriteCB?relay                     6
     ??zclGetAuthorizeCB?relay                     6
     ??zclFindClusterOption?relay                  6
     ??zclGetClusterOption?relay                   6
     ??zclSetSecurityOption?relay                  6
     ??zclSerializeData?relay                      6
     ??zclAnalogDataType?relay                     6
     ??zcl_BuildAnalogData?relay                   6
     ??zclGetDataTypeLength?relay                  6
     ??zclGetAttrDataLength?relay                  6
     ??zclReadAttrData?relay                       6
     ??zclGetAttrDataLengthUsingCB?relay           6
     ??zclReadAttrDataUsingCB?relay                6
     ??zclWriteAttrData?relay                      6
     ??zclWriteAttrDataUsingCB?relay               6
     ??zclAuthorizeWrite?relay                     6
     ??zclParseInReadCmd?relay                     6
     ??zclParseInReadRspCmd?relay                  6
     ??zclParseInWriteCmd?relay                    6
     ??zclParseInWriteRspCmd?relay                 6
     ??zclParseInConfigReportCmd?relay             6
     ??zclParseInConfigReportRspCmd?relay          6
     ??zclParseInReadReportCfgCmd?relay            6
     ??zclParseInReadReportCfgRspCmd?relay         6
     ??zclParseInReportCmd?relay                   6
     ??zclParseInDefaultRspCmd?relay               6
     ??zclProcessInReadCmd?relay                   6
     ??zclProcessInWriteCmd?relay                  6
     ??zclRevertWriteUndividedCmd?relay            6
     ??zclProcessInWriteUndividedCmd?relay         6
     ??zclSendMsg?relay                            6

 
 12 278 bytes in segment BANKED_CODE
    342 bytes in segment BANK_RELAYS
     56 bytes in segment CODE_C
      1 byte  in segment XDATA_I
      1 byte  in segment XDATA_ID
     13 bytes in segment XDATA_Z
 
 12 677 bytes of CODE  memory
     14 bytes of XDATA memory

Errors: none
Warnings: none
