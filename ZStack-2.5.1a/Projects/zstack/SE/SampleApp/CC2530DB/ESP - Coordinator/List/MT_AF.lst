###############################################################################
#                                                                             #
# IAR C/C++ Compiler V8.10.3.10338/W32 for 8051         05/Aug/2016  10:43:00 #
# Copyright 2004-2011 IAR Systems AB.                                         #
#                                                                             #
#    Core               =  plain                                              #
#    Code model         =  banked                                             #
#    Data model         =  large                                              #
#    Calling convention =  xdata reentrant                                    #
#    Constant location  =  data_rom                                           #
#    Dptr setup         =  1,16                                               #
#    Source file        =  G:\»ªÖÚÎÞÏß\12.´®¿ÚÍ¸´«Ö®ÎÞÏßQQ\ZStack-2.5.1a\Comp #
#                          onents\mt\MT_AF.c                                  #
#    Command line       =  -f G:\»ªÖÚÎÞÏß\12.´®¿ÚÍ¸´«Ö®ÎÞÏßQQ\ZStack-2.5.1a\P #
#                          rojects\zstack\SE\SampleApp\CC2530DB\..\..\..\Tool #
#                          s\CC2530DB\f8wCoord.cfg (-DCPU32MHZ                #
#                          -DROOT=__near_func -DMAC_CFG_APP_PENDING_QUEUE=TRU #
#                          E -DMAC_CFG_TX_DATA_MAX=5 -DMAC_CFG_TX_MAX=8       #
#                          -DMAC_CFG_RX_MAX=5 -DZDO_COORDINATOR -DRTR_NWK)    #
#                          -f G:\»ªÖÚÎÞÏß\12.´®¿ÚÍ¸´«Ö®ÎÞÏßQQ\ZStack-2.5.1a\P #
#                          rojects\zstack\SE\SampleApp\CC2530DB\..\..\..\Tool #
#                          s\CC2530DB\f8wConfig.cfg (-DZIGBEEPRO -DSECURE=0   #
#                          -DZG_SECURE_DYNAMIC=0 -DREFLECTOR                  #
#                          -DDEFAULT_CHANLIST=0x02000000                      #
#                          -DZDAPP_CONFIG_PAN_ID=0x1688                       #
#                          -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MA #
#                          SK=0x007F -DBEACON_REQUEST_DELAY=100               #
#                          -DBEACON_REQ_DELAY_MASK=0x00FF                     #
#                          -DLINK_STATUS_JITTER_MASK=0x007F                   #
#                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_PO #
#                          LLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7             #
#                          -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3    #
#                          -DNWK_MAX_DATA_RETRIES=2                           #
#                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9         #
#                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40           #
#                          -DNWK_MAX_BINDING_ENTRIES=4                        #
#                          -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01,  #
#                          0x03, 0x05, 0x07, 0x09, 0x0B, 0x0D, 0x0F, 0x00,    #
#                          0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C, 0x0D}"         #
#                          -DMAC_MAX_FRAME_SIZE=116                           #
#                          -DZDNWKMGR_MIN_TRANSMISSIONS=20 "-DCONST=const     #
#                          __code" -DGENERIC=__generic                        #
#                          -DRFD_RCVC_ALWAYS_ON=FALSE -DPOLL_RATE=1000        #
#                          -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100    #
#                          -DREJOIN_POLL_RATE=440) -f                         #
#                          G:\»ªÖÚÎÞÏß\12.´®¿ÚÍ¸´«Ö®ÎÞÏßQQ\ZStack-2.5.1a\Proj #
#                          ects\zstack\SE\SampleApp\CC2530DB\..\..\..\Tools\C #
#                          C2530DB\f8wZCL.cfg (-DZCL_READ -DZCL_WRITE         #
#                          -DZCL_BASIC -DZCL_IDENTIFY -DZCL_ON_OFF            #
#                          -DZCL_KEY_ESTABLISH -DZCL_KEY_ESTABLISHMENT_KEY_GE #
#                          NERATE_TIMEOUT=4 -DZCL_KEY_ESTABLISHMENT_MAC_GENER #
#                          ATE_TIMEOUT=10 -DZCL_KEY_ESTABLISHMENT_EKEY_GENERA #
#                          TE_TIMEOUT=10 -DZCL_LOAD_CONTROL                   #
#                          -DZCL_SIMPLE_METERING -DZCL_PRICING -DZCL_MESSAGE  #
#                          -DZCL_TUNNELING -DZCL_TOU) -DZCL_DEVICE_MGMT       #
#                          G:\»ªÖÚÎÞÏß\12.´®¿ÚÍ¸´«Ö®ÎÞÏßQQ\ZStack-2.5.1a\Comp #
#                          onents\mt\MT_AF.c -D TC_LINKKEY_JOIN -D ZTOOL_P1   #
#                          -D MT_TASK -D MT_APP_FUNC -D MT_SYS_FUNC -D        #
#                          LCD_SUPPORTED -D INT_HEAP_LEN=2450 -D NV_INIT -D   #
#                          xNV_RESTORE -D ZCL_REPORT -D INTER_PAN -D          #
#                          ZDSECMGR_TC_DEVICE_MAX=16 -D TEST_CERT_DATA -lC    #
#                          "G:\»ªÖÚÎÞÏß\12.´®¿ÚÍ¸´«Ö®ÎÞÏßQQ\ZStack-2.5.1a\Pro #
#                          jects\zstack\SE\SampleApp\CC2530DB\ESP -           #
#                          Coordinator\List\" -lA "G:\»ªÖÚÎÞÏß\12.´®¿ÚÍ¸´«Ö®Î #
#                          ÞÏßQQ\ZStack-2.5.1a\Projects\zstack\SE\SampleApp\C #
#                          C2530DB\ESP - Coordinator\List\" --diag_suppress   #
#                          Pe001,Pa010 -o "G:\»ªÖÚÎÞÏß\12.´®¿ÚÍ¸´«Ö®ÎÞÏßQQ\ZS #
#                          tack-2.5.1a\Projects\zstack\SE\SampleApp\CC2530DB\ #
#                          ESP - Coordinator\Obj\" -e --no_code_motion        #
#                          --debug --core=plain --dptr=16,1                   #
#                          --data_model=large --code_model=banked             #
#                          --calling_convention=xdata_reentrant               #
#                          --place_constants=data_rom --nr_virtual_regs 16    #
#                          -I G:\»ªÖÚÎÞÏß\12.´®¿ÚÍ¸´«Ö®ÎÞÏßQQ\ZStack-2.5.1a\P #
#                          rojects\zstack\SE\SampleApp\CC2530DB\ -I           #
#                          G:\»ªÖÚÎÞÏß\12.´®¿ÚÍ¸´«Ö®ÎÞÏßQQ\ZStack-2.5.1a\Proj #
#                          ects\zstack\SE\SampleApp\CC2530DB\..\Source\ -I    #
#                          G:\»ªÖÚÎÞÏß\12.´®¿ÚÍ¸´«Ö®ÎÞÏßQQ\ZStack-2.5.1a\Proj #
#                          ects\zstack\SE\SampleApp\CC2530DB\..\..\Source\    #
#                          -I G:\»ªÖÚÎÞÏß\12.´®¿ÚÍ¸´«Ö®ÎÞÏßQQ\ZStack-2.5.1a\P #
#                          rojects\zstack\SE\SampleApp\CC2530DB\..\..\..\ZMai #
#                          n\TI2530DB\ -I G:\»ªÖÚÎÞÏß\12.´®¿ÚÍ¸´«Ö®ÎÞÏßQQ\ZSt #
#                          ack-2.5.1a\Projects\zstack\SE\SampleApp\CC2530DB\. #
#                          .\..\..\..\..\Components\hal\include\ -I           #
#                          G:\»ªÖÚÎÞÏß\12.´®¿ÚÍ¸´«Ö®ÎÞÏßQQ\ZStack-2.5.1a\Proj #
#                          ects\zstack\SE\SampleApp\CC2530DB\..\..\..\..\..\C #
#                          omponents\hal\target\CC2530EB\ -I                  #
#                          G:\»ªÖÚÎÞÏß\12.´®¿ÚÍ¸´«Ö®ÎÞÏßQQ\ZStack-2.5.1a\Proj #
#                          ects\zstack\SE\SampleApp\CC2530DB\..\..\..\..\..\C #
#                          omponents\mac\include\ -I                          #
#                          G:\»ªÖÚÎÞÏß\12.´®¿ÚÍ¸´«Ö®ÎÞÏßQQ\ZStack-2.5.1a\Proj #
#                          ects\zstack\SE\SampleApp\CC2530DB\..\..\..\..\..\C #
#                          omponents\mac\high_level\ -I                       #
#                          G:\»ªÖÚÎÞÏß\12.´®¿ÚÍ¸´«Ö®ÎÞÏßQQ\ZStack-2.5.1a\Proj #
#                          ects\zstack\SE\SampleApp\CC2530DB\..\..\..\..\..\C #
#                          omponents\mac\low_level\srf04\ -I                  #
#                          G:\»ªÖÚÎÞÏß\12.´®¿ÚÍ¸´«Ö®ÎÞÏßQQ\ZStack-2.5.1a\Proj #
#                          ects\zstack\SE\SampleApp\CC2530DB\..\..\..\..\..\C #
#                          omponents\mac\low_level\srf04\single_chip\ -I      #
#                          G:\»ªÖÚÎÞÏß\12.´®¿ÚÍ¸´«Ö®ÎÞÏßQQ\ZStack-2.5.1a\Proj #
#                          ects\zstack\SE\SampleApp\CC2530DB\..\..\..\..\..\C #
#                          omponents\mt\ -I G:\»ªÖÚÎÞÏß\12.´®¿ÚÍ¸´«Ö®ÎÞÏßQQ\Z #
#                          Stack-2.5.1a\Projects\zstack\SE\SampleApp\CC2530DB #
#                          \..\..\..\..\..\Components\osal\include\ -I        #
#                          G:\»ªÖÚÎÞÏß\12.´®¿ÚÍ¸´«Ö®ÎÞÏßQQ\ZStack-2.5.1a\Proj #
#                          ects\zstack\SE\SampleApp\CC2530DB\..\..\..\..\..\C #
#                          omponents\services\saddr\ -I                       #
#                          G:\»ªÖÚÎÞÏß\12.´®¿ÚÍ¸´«Ö®ÎÞÏßQQ\ZStack-2.5.1a\Proj #
#                          ects\zstack\SE\SampleApp\CC2530DB\..\..\..\..\..\C #
#                          omponents\services\sdata\ -I                       #
#                          G:\»ªÖÚÎÞÏß\12.´®¿ÚÍ¸´«Ö®ÎÞÏßQQ\ZStack-2.5.1a\Proj #
#                          ects\zstack\SE\SampleApp\CC2530DB\..\..\..\..\..\C #
#                          omponents\stack\af\ -I G:\»ªÖÚÎÞÏß\12.´®¿ÚÍ¸´«Ö®ÎÞ #
#                          ÏßQQ\ZStack-2.5.1a\Projects\zstack\SE\SampleApp\CC #
#                          2530DB\..\..\..\..\..\Components\stack\nwk\ -I     #
#                          G:\»ªÖÚÎÞÏß\12.´®¿ÚÍ¸´«Ö®ÎÞÏßQQ\ZStack-2.5.1a\Proj #
#                          ects\zstack\SE\SampleApp\CC2530DB\..\..\..\..\..\C #
#                          omponents\stack\sapi\ -I                           #
#                          G:\»ªÖÚÎÞÏß\12.´®¿ÚÍ¸´«Ö®ÎÞÏßQQ\ZStack-2.5.1a\Proj #
#                          ects\zstack\SE\SampleApp\CC2530DB\..\..\..\..\..\C #
#                          omponents\stack\sec\ -I G:\»ªÖÚÎÞÏß\12.´®¿ÚÍ¸´«Ö®Î #
#                          ÞÏßQQ\ZStack-2.5.1a\Projects\zstack\SE\SampleApp\C #
#                          C2530DB\..\..\..\..\..\Components\stack\sys\ -I    #
#                          G:\»ªÖÚÎÞÏß\12.´®¿ÚÍ¸´«Ö®ÎÞÏßQQ\ZStack-2.5.1a\Proj #
#                          ects\zstack\SE\SampleApp\CC2530DB\..\..\..\..\..\C #
#                          omponents\stack\zcl\ -I G:\»ªÖÚÎÞÏß\12.´®¿ÚÍ¸´«Ö®Î #
#                          ÞÏßQQ\ZStack-2.5.1a\Projects\zstack\SE\SampleApp\C #
#                          C2530DB\..\..\..\..\..\Components\stack\zdo\ -I    #
#                          G:\»ªÖÚÎÞÏß\12.´®¿ÚÍ¸´«Ö®ÎÞÏßQQ\ZStack-2.5.1a\Proj #
#                          ects\zstack\SE\SampleApp\CC2530DB\..\..\..\..\..\C #
#                          omponents\zmac\ -I G:\»ªÖÚÎÞÏß\12.´®¿ÚÍ¸´«Ö®ÎÞÏßQQ #
#                          \ZStack-2.5.1a\Projects\zstack\SE\SampleApp\CC2530 #
#                          DB\..\..\..\..\..\Components\zmac\f8w\ -Ohz        #
#                          --require_prototypes                               #
#    List file          =  G:\»ªÖÚÎÞÏß\12.´®¿ÚÍ¸´«Ö®ÎÞÏßQQ\ZStack-2.5.1a\Proj #
#                          ects\zstack\SE\SampleApp\CC2530DB\ESP -            #
#                          Coordinator\List\MT_AF.lst                         #
#    Object file        =  G:\»ªÖÚÎÞÏß\12.´®¿ÚÍ¸´«Ö®ÎÞÏßQQ\ZStack-2.5.1a\Proj #
#                          ects\zstack\SE\SampleApp\CC2530DB\ESP -            #
#                          Coordinator\Obj\MT_AF.r51                          #
#                                                                             #
#                                                                             #
###############################################################################

G:\»ªÖÚÎÞÏß\12.´®¿ÚÍ¸´«Ö®ÎÞÏßQQ\ZStack-2.5.1a\Components\mt\MT_AF.c
      1          /**************************************************************************************************
      2            Filename:       MT_AF.c
      3            Revised:        $Date: 2011-05-27 16:00:27 -0700 (Fri, 27 May 2011) $
      4            Revision:       $Revision: 26145 $
      5          
      6          
      7            Description:    MonitorTest functions for the AF layer.
      8          
      9          
     10            Copyright 2007-2011 Texas Instruments Incorporated. All rights reserved.
     11          
     12            IMPORTANT: Your use of this Software is limited to those specific rights
     13            granted under the terms of a software license agreement between the user
     14            who downloaded the software, his/her employer (which must be your employer)
     15            and Texas Instruments Incorporated (the "License").  You may not use this
     16            Software unless you agree to abide by the terms of the License. The License
     17            limits your use, and you acknowledge, that the Software may not be modified,
     18            copied or distributed unless embedded on a Texas Instruments microcontroller
     19            or used solely and exclusively in conjunction with a Texas Instruments radio
     20            frequency transceiver, which is integrated into your product.  Other than for
     21            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     22            works of, modify, distribute, perform, display or sell this Software and/or
     23            its documentation for any purpose.
     24          
     25            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     26            PROVIDED AS IS WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     27            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     28            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     29            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     30            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     31            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     32            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     33            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     34            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     35            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     36          
     37            Should you have any questions regarding your right to use this Software,
     38            contact Texas Instruments Incorporated at www.TI.com.
     39          
     40          **************************************************************************************************/
     41          
     42          /* ------------------------------------------------------------------------------------------------
     43           *                                          Includes
     44           * ------------------------------------------------------------------------------------------------
     45           */
     46          #include "ZComDef.h"
     47          #include "OSAL.h"
     48          #include "MT.h"
     49          #include "MT_AF.h"
     50          #include "MT_ZDO.h"
     51          #include "nwk.h"
     52          #include "OnBoard.h"
     53          #include "MT_UART.h"
     54          
     55          #if defined INTER_PAN
     56          #include "stub_aps.h"
     57          #endif
     58          
     59          /* ------------------------------------------------------------------------------------------------
     60           *                                          Constants
     61           * ------------------------------------------------------------------------------------------------
     62           */
     63          
     64          #if !defined MT_AF_EXEC_CNT
     65          #define MT_AF_EXEC_CNT  15
     66          #endif
     67          
     68          #if !defined MT_AF_EXEC_DLY
     69          #define MT_AF_EXEC_DLY  1000
     70          #endif
     71          
     72          /* ------------------------------------------------------------------------------------------------
     73           *                                           Typedefs
     74           * ------------------------------------------------------------------------------------------------
     75           */
     76          
     77          typedef struct
     78          {
     79            uint8 *data;
     80            afAddrType_t dstAddr;
     81            endPointDesc_t *epDesc;
     82            uint16 cId;
     83            uint16 dataLen;
     84            uint8 transId;
     85            uint8 txOpts;
     86            uint8 radius;
     87            uint8 tick;
     88          } mtAfDataReq_t;
     89          
     90          typedef struct _mtAfInMsgList_t
     91          {
     92            struct _mtAfInMsgList_t *next;
     93            uint8 *data;
     94            uint32 timestamp;         // Receipt timestamp from MAC.
     95            uint8 tick;
     96          } mtAfInMsgList_t;
     97          
     98          /* ------------------------------------------------------------------------------------------------
     99           *                                        Local Variables
    100           * ------------------------------------------------------------------------------------------------
    101           */
    102          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    103          mtAfInMsgList_t *pMtAfInMsgList = NULL;
   \                     pMtAfInMsgList:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    104          mtAfDataReq_t *pMtAfDataReq = NULL;
   \                     pMtAfDataReq:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z
    105          
    106          /* ------------------------------------------------------------------------------------------------
    107           *                                        Global Variables
    108           * ------------------------------------------------------------------------------------------------
    109           */
    110          
    111          #if defined ( MT_AF_CB_FUNC )
    112          uint16 _afCallbackSub;
    113          #endif
    114          
    115          /* ------------------------------------------------------------------------------------------------
    116           *                                        Local Functions
    117           * ------------------------------------------------------------------------------------------------
    118           */
    119          
    120          void MT_AfRegister(uint8 *pBuf);
    121          void MT_AfDataRequest(uint8 *pBuf);
    122          
    123          #if defined ( ZIGBEE_SOURCE_ROUTING )
    124          void MT_AfDataRequestSrcRtg(uint8 *pBuf);
    125          #endif
    126          
    127          #if defined INTER_PAN
    128          static void MT_AfInterPanCtl(uint8 *pBuf);
    129          #endif
    130          
    131          static void MT_AfDataRetrieve(uint8 *pBuf);
    132          static void MT_AfDataStore(uint8 *pBuf);
    133          static void MT_AfAPSF_ConfigSet(uint8 *pBuf);
    134          
    135          /**************************************************************************************************
    136           * @fn          MT_AfExec
    137           *
    138           * @brief       This function is invoked by an MT timer event.
    139           *
    140           * input parameters
    141           *
    142           * None.
    143           *
    144           * output parameters
    145           *
    146           * None.
    147           *
    148           * @return      None.
    149           **************************************************************************************************
    150           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    151          void MT_AfExec(void)
   \                     MT_AfExec:
    152          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
    153            mtAfInMsgList_t *pPrev, *pItem = pMtAfInMsgList;
   \                     ??MT_AfExec_0:
   \   000005   90....       MOV     DPTR,#pMtAfInMsgList
   \   000008   8008         SJMP    ??MT_AfExec_1
    154          
    155            while (pItem != NULL)
    156            {
    157              if (--(pItem->tick) == 0)
    158              {
    159                if (pMtAfInMsgList == pItem)
    160                {
    161                  pMtAfInMsgList = pItem->next;
    162                  (void)osal_mem_free(pItem);
    163                  pItem = pMtAfInMsgList;
    164                }
    165                else
    166                {
    167                  pPrev->next = pItem->next;
    168                  (void)osal_mem_free(pItem);
    169                  pItem = pPrev->next;
    170                }
    171              }
    172              else
    173              {
    174                pPrev = pItem;
   \                     ??MT_AfExec_2:
   \   00000A   EA           MOV     A,R2
   \   00000B   FE           MOV     R6,A
   \   00000C   EB           MOV     A,R3
   \   00000D   FF           MOV     R7,A
    175                pItem = pItem->next;
   \   00000E   8A82         MOV     DPL,R2
   \   000010   8B83         MOV     DPH,R3
   \                     ??MT_AfExec_1:
   \   000012   E0           MOVX    A,@DPTR
   \   000013   FA           MOV     R2,A
   \   000014   A3           INC     DPTR
   \   000015   E0           MOVX    A,@DPTR
   \   000016   FB           MOV     R3,A
    176              }
   \   000017   EA           MOV     A,R2
   \   000018   4B           ORL     A,R3
   \   000019   6031         JZ      ??MT_AfExec_3
   \   00001B   EA           MOV     A,R2
   \   00001C   2408         ADD     A,#0x8
   \   00001E   12....       LCALL   ?Subroutine21 & 0xFFFF
   \                     ??CrossCallReturnLabel_74:
   \   000021   14           DEC     A
   \   000022   F0           MOVX    @DPTR,A
   \   000023   70E5         JNZ     ??MT_AfExec_2
   \   000025   12....       LCALL   ?Subroutine16 & 0xFFFF
   \                     ??CrossCallReturnLabel_136:
   \   000028   EA           MOV     A,R2
   \   000029   68           XRL     A,R0
   \   00002A   7002         JNZ     ??MT_AfExec_4
   \   00002C   EB           MOV     A,R3
   \   00002D   69           XRL     A,R1
   \                     ??MT_AfExec_4:
   \   00002E   8A82         MOV     DPL,R2
   \   000030   8B83         MOV     DPH,R3
   \   000032   7008         JNZ     ??MT_AfExec_5
   \   000034   12....       LCALL   ?Subroutine15 & 0xFFFF
   \                     ??CrossCallReturnLabel_21:
   \   000037   12....       LCALL   ?Subroutine32 & 0xFFFF
   \                     ??CrossCallReturnLabel_50:
   \   00003A   80C9         SJMP    ??MT_AfExec_0
   \                     ??MT_AfExec_5:
   \   00003C   12....       LCALL   ??Subroutine59_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_134:
   \   00003F   8E82         MOV     DPL,R6
   \   000041   8F83         MOV     DPH,R7
   \   000043   12....       LCALL   ?Subroutine32 & 0xFFFF
   \                     ??CrossCallReturnLabel_51:
   \   000046   8E82         MOV     DPL,R6
   \   000048   8F83         MOV     DPH,R7
   \   00004A   80C6         SJMP    ??MT_AfExec_1
    177            }
    178          
    179            if (pMtAfDataReq != NULL)
   \                     ??MT_AfExec_3:
   \   00004C   12....       LCALL   ?Subroutine3 & 0xFFFF
   \                     ??CrossCallReturnLabel_92:
   \   00004F   600E         JZ      ??MT_AfExec_6
    180            {
    181              if (--(pMtAfDataReq->tick) == 0)
   \   000051   12....       LCALL   ?Subroutine4 & 0xFFFF
   \                     ??CrossCallReturnLabel_80:
   \   000054   14           DEC     A
   \   000055   F0           MOVX    @DPTR,A
   \   000056   12....       LCALL   ?Subroutine4 & 0xFFFF
   \                     ??CrossCallReturnLabel_81:
   \   000059   7004         JNZ     ??MT_AfExec_6
    182              {
    183                (void)osal_mem_free(pMtAfDataReq);
   \   00005B                ; Setup parameters for call to function osal_mem_free
   \   00005B   12....       LCALL   ?Subroutine9 & 0xFFFF
    184                pMtAfDataReq = NULL;
    185              }
    186            }
   \                     ??CrossCallReturnLabel_9:
   \   00005E   F0           MOVX    @DPTR,A
    187          
    188            if ((pMtAfInMsgList != NULL) || (pMtAfDataReq != NULL))
   \                     ??MT_AfExec_6:
   \   00005F   90....       MOV     DPTR,#pMtAfInMsgList
   \   000062   12....       LCALL   ??Subroutine52_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_91:
   \   000065   7005         JNZ     ??MT_AfExec_7
   \   000067   12....       LCALL   ?Subroutine3 & 0xFFFF
   \                     ??CrossCallReturnLabel_93:
   \   00006A   6008         JZ      ??CrossCallReturnLabel_23
    189            {
    190              if (ZSuccess != osal_start_timerEx(MT_TaskID, MT_AF_EXEC_EVT, MT_AF_EXEC_DLY))
   \                     ??MT_AfExec_7:
   \   00006C                ; Setup parameters for call to function osal_start_timerEx
   \   00006C   12....       LCALL   ??Subroutine51_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_90:
   \   00006F   6003         JZ      ??CrossCallReturnLabel_23
    191              {
    192                osal_set_event(MT_TaskID, MT_AF_EXEC_EVT);
   \   000071                ; Setup parameters for call to function osal_set_event
   \   000071   12....       LCALL   ?Subroutine17 & 0xFFFF
    193              }
    194            }
    195          }
   \                     ??CrossCallReturnLabel_23:
   \   000074                REQUIRE ?Subroutine0
   \   000074                ; // Fall through to label ?Subroutine0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   7F01         MOV     R7,#0x1
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine32:
   \   000000   E8           MOV     A,R0
   \   000001   F0           MOVX    @DPTR,A
   \   000002   A3           INC     DPTR
   \   000003   E9           MOV     A,R1
   \   000004   F0           MOVX    @DPTR,A
   \   000005                ; Setup parameters for call to function osal_mem_free
   \   000005                ; Setup parameters for call to function osal_mem_free
   \   000005   12....       LCALL   ??osal_mem_free?relay
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine21:
   \   000000   F582         MOV     DPL,A
   \   000002   EB           MOV     A,R3
   \   000003                REQUIRE ??Subroutine47_0
   \   000003                ; // Fall through to label ??Subroutine47_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine47_0:
   \   000000   12....       LCALL   ??Subroutine55_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_111:
   \   000003   E0           MOVX    A,@DPTR
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine4:
   \   000000   90....       MOV     DPTR,#pMtAfDataReq
   \   000003   E0           MOVX    A,@DPTR
   \   000004   2417         ADD     A,#0x17
   \   000006                REQUIRE ??Subroutine48_0
   \   000006                ; // Fall through to label ??Subroutine48_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine48_0:
   \   000000   12....       LCALL   ?Subroutine39 & 0xFFFF
   \                     ??CrossCallReturnLabel_148:
   \   000003   E0           MOVX    A,@DPTR
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine17:
   \   000000   7A08         MOV     R2,#0x8
   \   000002   7B00         MOV     R3,#0x0
   \   000004   90....       MOV     DPTR,#MT_TaskID
   \   000007   E0           MOVX    A,@DPTR
   \   000008   F9           MOV     R1,A
   \   000009   12....       LCALL   ??osal_set_event?relay
   \   00000C   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine51_0:
   \   000000   7CE8         MOV     R4,#-0x18
   \   000002   7D03         MOV     R5,#0x3
   \   000004   7A08         MOV     R2,#0x8
   \   000006   7B00         MOV     R3,#0x0
   \   000008   90....       MOV     DPTR,#MT_TaskID
   \   00000B   E0           MOVX    A,@DPTR
   \   00000C   F9           MOV     R1,A
   \   00000D   12....       LCALL   ??osal_start_timerEx?relay
   \   000010   E9           MOV     A,R1
   \   000011   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine3:
   \   000000   90....       MOV     DPTR,#pMtAfDataReq
   \   000003                REQUIRE ??Subroutine52_0
   \   000003                ; // Fall through to label ??Subroutine52_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine52_0:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F8           MOV     R0,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   F9           MOV     R1,A
   \   000005   E8           MOV     A,R0
   \   000006   49           ORL     A,R1
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine55_0:
   \   000000   3400         ADDC    A,#0x0
   \   000002   F583         MOV     DPH,A
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine16:
   \   000000   90....       MOV     DPTR,#pMtAfInMsgList
   \   000003                REQUIRE ??Subroutine59_0
   \   000003                ; // Fall through to label ??Subroutine59_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine59_0:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F8           MOV     R0,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   F9           MOV     R1,A
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine15:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F8           MOV     R0,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   F9           MOV     R1,A
   \   000005   90....       MOV     DPTR,#pMtAfInMsgList
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine9:
   \   000000   90....       MOV     DPTR,#pMtAfDataReq
   \   000003   E0           MOVX    A,@DPTR
   \   000004   FA           MOV     R2,A
   \   000005   A3           INC     DPTR
   \   000006   E0           MOVX    A,@DPTR
   \   000007   FB           MOV     R3,A
   \   000008   12....       LCALL   ??osal_mem_free?relay
   \   00000B   90....       MOV     DPTR,#pMtAfDataReq
   \   00000E   E4           CLR     A
   \   00000F   F0           MOVX    @DPTR,A
   \   000010   A3           INC     DPTR
   \   000011   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine39:
   \   000000   F8           MOV     R0,A
   \   000001   A3           INC     DPTR
   \   000002   E0           MOVX    A,@DPTR
   \   000003   12....       LCALL   ?Subroutine46 & 0xFFFF
   \                     ??CrossCallReturnLabel_152:
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine46:
   \   000000   3400         ADDC    A,#0x0
   \   000002   F9           MOV     R1,A
   \   000003   8882         MOV     DPL,R0
   \   000005   8983         MOV     DPH,R1
   \   000007   22           RET
    196          
    197          /***************************************************************************************************
    198           * @fn      MT_AfCommandProcessing
    199           *
    200           * @brief   Process all the AF commands that are issued by test tool
    201           *
    202           * @param   pBuf - pointer to the received buffer
    203           *
    204           * @return  status
    205           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    206          uint8 MT_AfCommandProcessing(uint8 *pBuf)
   \                     MT_AfCommandProcessing:
    207          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 3
   \   000005   74FD         MOV     A,#-0x3
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   EA           MOV     A,R2
   \   00000B   F8           MOV     R0,A
   \   00000C   EB           MOV     A,R3
   \   00000D   F9           MOV     R1,A
    208            uint8 status = MT_RPC_SUCCESS;
   \   00000E   7E00         MOV     R6,#0x0
    209          
    210            switch (pBuf[MT_RPC_POS_CMD1])
   \   000010   8882         MOV     DPL,R0
   \   000012   8983         MOV     DPH,R1
   \   000014   A3           INC     DPTR
   \   000015   A3           INC     DPTR
   \   000016   E0           MOVX    A,@DPTR
   \   000017   6018         JZ      ??MT_AfCommandProcessing_0
   \   000019   14           DEC     A
   \   00001A   601A         JZ      ??MT_AfCommandProcessing_1
   \   00001C   14           DEC     A
   \   00001D   6017         JZ      ??MT_AfCommandProcessing_1
   \   00001F   14           DEC     A
   \   000020   6019         JZ      ??MT_AfCommandProcessing_2
   \   000022   24F3         ADD     A,#-0xd
   \   000024   601A         JZ      ??MT_AfCommandProcessing_3
   \   000026   14           DEC     A
   \   000027   6021         JZ      ??MT_AfCommandProcessing_4
   \   000029   14           DEC     A
   \   00002A   6019         JZ      ??MT_AfCommandProcessing_5
   \   00002C   14           DEC     A
   \   00002D   6020         JZ      ??MT_AfCommandProcessing_6
   \   00002F   8071         SJMP    ??MT_AfCommandProcessing_7
    211            {
    212              case MT_AF_REGISTER:
    213                MT_AfRegister(pBuf);
   \                     ??MT_AfCommandProcessing_0:
   \   000031                ; Setup parameters for call to function MT_AfRegister
   \   000031   12....       LCALL   ??MT_AfRegister?relay
    214                break;
   \   000034   806E         SJMP    ??MT_AfCommandProcessing_8
    215          
    216              case MT_AF_DATA_REQUEST:
    217              case MT_AF_DATA_REQUEST_EXT:
    218                MT_AfDataRequest(pBuf);
   \                     ??MT_AfCommandProcessing_1:
   \   000036                ; Setup parameters for call to function MT_AfDataRequest
   \   000036   12....       LCALL   ??MT_AfDataRequest?relay
    219                break;
   \   000039   8069         SJMP    ??MT_AfCommandProcessing_8
    220          
    221          #if defined ( ZIGBEE_SOURCE_ROUTING )
    222              case MT_AF_DATA_REQUEST_SRCRTG:
    223                MT_AfDataRequestSrcRtg(pBuf);
   \                     ??MT_AfCommandProcessing_2:
   \   00003B                ; Setup parameters for call to function MT_AfDataRequestSrcRtg
   \   00003B   12....       LCALL   ??MT_AfDataRequestSrcRtg?relay
    224                break;
   \   00003E   8064         SJMP    ??MT_AfCommandProcessing_8
    225          #endif
    226          
    227          #if defined INTER_PAN
    228              case MT_AF_INTER_PAN_CTL:
    229                MT_AfInterPanCtl(pBuf);
   \                     ??MT_AfCommandProcessing_3:
   \   000040                ; Setup parameters for call to function MT_AfInterPanCtl
   \   000040   12....       LCALL   ??MT_AfInterPanCtl?relay
    230                break;
   \   000043   805F         SJMP    ??MT_AfCommandProcessing_8
    231          #endif
    232          
    233              case MT_AF_DATA_RETRIEVE:
    234                MT_AfDataRetrieve(pBuf);
   \                     ??MT_AfCommandProcessing_5:
   \   000045                ; Setup parameters for call to function MT_AfDataRetrieve
   \   000045   12....       LCALL   ??MT_AfDataRetrieve?relay
    235                break;
   \   000048   805A         SJMP    ??MT_AfCommandProcessing_8
    236          
    237              case MT_AF_DATA_STORE:
    238                MT_AfDataStore(pBuf);
   \                     ??MT_AfCommandProcessing_4:
   \   00004A                ; Setup parameters for call to function MT_AfDataStore
   \   00004A   12....       LCALL   ??MT_AfDataStore?relay
    239                break;
   \   00004D   8055         SJMP    ??MT_AfCommandProcessing_8
    240          
    241              case MT_AF_APSF_CONFIG_SET:
    242                MT_AfAPSF_ConfigSet(pBuf);
   \                     ??MT_AfCommandProcessing_6:
   \   00004F   8882         MOV     DPL,R0
   \   000051   8983         MOV     DPH,R1
   \   000053   A3           INC     DPTR
   \   000054   A3           INC     DPTR
   \   000055   A3           INC     DPTR
   \   000056   A3           INC     DPTR
   \   000057   E0           MOVX    A,@DPTR
   \   000058   C0E0         PUSH    A
   \   00005A   7401         MOV     A,#0x1
   \   00005C   12....       LCALL   ?XSTACK_DISP0_8
   \   00005F   D0E0         POP     A
   \   000061   F0           MOVX    @DPTR,A
   \   000062   8882         MOV     DPL,R0
   \   000064   8983         MOV     DPH,R1
   \   000066   A3           INC     DPTR
   \   000067   A3           INC     DPTR
   \   000068   A3           INC     DPTR
   \   000069   A3           INC     DPTR
   \   00006A   A3           INC     DPTR
   \   00006B   E0           MOVX    A,@DPTR
   \   00006C   C0E0         PUSH    A
   \   00006E   7402         MOV     A,#0x2
   \   000070   12....       LCALL   ?XSTACK_DISP0_8
   \   000073   D0E0         POP     A
   \   000075   F0           MOVX    @DPTR,A
   \   000076                ; Setup parameters for call to function afAPSF_ConfigSet
   \   000076   7401         MOV     A,#0x1
   \   000078   12....       LCALL   ?XSTACK_DISP0_8
   \   00007B   AA82         MOV     R2,DPL
   \   00007D   AB83         MOV     R3,DPH
   \   00007F   8882         MOV     DPL,R0
   \   000081   8983         MOV     DPH,R1
   \   000083   A3           INC     DPTR
   \   000084   A3           INC     DPTR
   \   000085   A3           INC     DPTR
   \   000086   E0           MOVX    A,@DPTR
   \   000087   F9           MOV     R1,A
   \   000088   12....       LCALL   ??afAPSF_ConfigSet?relay
   \   00008B   E9           MOV     A,R1
   \   00008C   85..82       MOV     DPL,?XSP + 0
   \   00008F   85..83       MOV     DPH,?XSP + 1
   \   000092   F0           MOVX    @DPTR,A
   \   000093                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   000093   AC82         MOV     R4,DPL
   \   000095   AD83         MOV     R5,DPH
   \   000097   7B01         MOV     R3,#0x1
   \   000099   7A13         MOV     R2,#0x13
   \   00009B   7964         MOV     R1,#0x64
   \   00009D   12....       LCALL   ??MT_BuildAndSendZToolResponse?relay
    243                break;
   \   0000A0   8002         SJMP    ??MT_AfCommandProcessing_8
    244          
    245              default:
    246                status = MT_RPC_ERR_COMMAND_ID;
   \                     ??MT_AfCommandProcessing_7:
   \   0000A2   0E           INC     R6
   \   0000A3   0E           INC     R6
    247                break;
    248            }
    249          
    250            return status;
   \                     ??MT_AfCommandProcessing_8:
   \   0000A4   EE           MOV     A,R6
   \   0000A5   F9           MOV     R1,A
   \   0000A6   7403         MOV     A,#0x3
   \   0000A8   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000AB   02....       LJMP    ?Subroutine0 & 0xFFFF
    251          }
    252          
    253          /***************************************************************************************************
    254           * @fn      MT_AfRegister
    255           *
    256           * @brief   Process AF Register command
    257           *
    258           * @param   pBuf - pointer to the received buffer
    259           *
    260           * @return  none
    261           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    262          void MT_AfRegister(uint8 *pBuf)
   \                     MT_AfRegister:
    263          {
   \   000000   74F2         MOV     A,#-0xe
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV     A,#-0x1
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   8A..         MOV     ?V0 + 0,R2
   \   00000C   8B..         MOV     ?V0 + 1,R3
    264            uint8 cmdId;
    265            uint8 retValue = ZMemError;
   \   00000E   85..82       MOV     DPL,?XSP + 0
   \   000011   85..83       MOV     DPH,?XSP + 1
   \   000014   7410         MOV     A,#0x10
   \   000016   12....       LCALL   ?Subroutine34 & 0xFFFF
    266            endPointDesc_t *epDesc;
    267          
    268            /* parse header */
    269            cmdId = pBuf[MT_RPC_POS_CMD1];
   \                     ??CrossCallReturnLabel_59:
   \   000019   F5..         MOV     ?V0 + 2,A
    270            pBuf += MT_RPC_FRAME_HDR_SZ;
    271          
    272            epDesc = (endPointDesc_t *)osal_mem_alloc(sizeof(endPointDesc_t));
   \   00001B                ; Setup parameters for call to function osal_mem_alloc
   \   00001B   7A06         MOV     R2,#0x6
   \   00001D   7B00         MOV     R3,#0x0
   \   00001F   12....       LCALL   ??osal_mem_alloc?relay
   \   000022   8A..         MOV     ?V0 + 4,R2
   \   000024   8B..         MOV     ?V0 + 5,R3
   \   000026   AE..         MOV     R6,?V0 + 4
   \   000028   AF..         MOV     R7,?V0 + 5
    273            if ( epDesc )
   \   00002A   EE           MOV     A,R6
   \   00002B   4F           ORL     A,R7
   \   00002C   6040         JZ      ??MT_AfRegister_0
    274            {
    275              epDesc->task_id = &MT_TaskID;
   \   00002E   8E82         MOV     DPL,R6
   \   000030   8F83         MOV     DPH,R7
   \   000032   A3           INC     DPTR
   \   000033   74..         MOV     A,#MT_TaskID & 0xff
   \   000035   F0           MOVX    @DPTR,A
   \   000036   A3           INC     DPTR
   \   000037   74..         MOV     A,#(MT_TaskID >> 8) & 0xff
   \   000039   F0           MOVX    @DPTR,A
    276              retValue = MT_BuildEndpointDesc( pBuf, epDesc );
   \   00003A                ; Setup parameters for call to function MT_BuildEndpointDesc
   \   00003A   EE           MOV     A,R6
   \   00003B   FC           MOV     R4,A
   \   00003C   EF           MOV     A,R7
   \   00003D   FD           MOV     R5,A
   \   00003E   E5..         MOV     A,?V0 + 0
   \   000040   2403         ADD     A,#0x3
   \   000042   FA           MOV     R2,A
   \   000043   E5..         MOV     A,?V0 + 1
   \   000045   3400         ADDC    A,#0x0
   \   000047   FB           MOV     R3,A
   \   000048   12....       LCALL   ??MT_BuildEndpointDesc?relay
   \   00004B   E9           MOV     A,R1
   \   00004C   85..82       MOV     DPL,?XSP + 0
   \   00004F   85..83       MOV     DPH,?XSP + 1
   \   000052   F0           MOVX    @DPTR,A
    277              if ( retValue == ZSuccess )
   \   000053   700F         JNZ     ??MT_AfRegister_1
    278              {
    279                retValue = afRegister( epDesc );
   \   000055                ; Setup parameters for call to function afRegister
   \   000055   EE           MOV     A,R6
   \   000056   FA           MOV     R2,A
   \   000057   EF           MOV     A,R7
   \   000058   FB           MOV     R3,A
   \   000059   12....       LCALL   ??afRegister?relay
   \   00005C   E9           MOV     A,R1
   \   00005D   85..82       MOV     DPL,?XSP + 0
   \   000060   85..83       MOV     DPH,?XSP + 1
   \   000063   F0           MOVX    @DPTR,A
    280              }
    281          
    282              if ( retValue != ZSuccess )
   \                     ??MT_AfRegister_1:
   \   000064   E0           MOVX    A,@DPTR
   \   000065   6007         JZ      ??MT_AfRegister_0
    283              {
    284                osal_mem_free( epDesc );
   \   000067                ; Setup parameters for call to function osal_mem_free
   \   000067   EE           MOV     A,R6
   \   000068   FA           MOV     R2,A
   \   000069   EF           MOV     A,R7
   \   00006A   FB           MOV     R3,A
   \   00006B   12....       LCALL   ??osal_mem_free?relay
    285              }
    286            }
    287          
    288            /* Build and send back the response */
    289            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_AF), cmdId, 1, &retValue);
   \                     ??MT_AfRegister_0:
   \   00006E                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   00006E   85..82       MOV     DPL,?XSP + 0
   \   000071   85..83       MOV     DPH,?XSP + 1
   \   000074   AC82         MOV     R4,DPL
   \   000076   AD83         MOV     R5,DPH
   \   000078   7B01         MOV     R3,#0x1
   \   00007A   AA..         MOV     R2,?V0 + 2
   \   00007C   7964         MOV     R1,#0x64
   \   00007E   12....       LCALL   ??MT_BuildAndSendZToolResponse?relay
    290          }
   \   000081   7401         MOV     A,#0x1
   \   000083   12....       LCALL   ?DEALLOC_XSTACK8
   \   000086   7F06         MOV     R7,#0x6
   \   000088   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine40:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   8A82         MOV     DPL,R2
   \   000003   8B83         MOV     DPH,R3
   \   000005   A3           INC     DPTR
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine34:
   \   000000   12....       LCALL   ?Subroutine40 & 0xFFFF
   \                     ??CrossCallReturnLabel_68:
   \   000003   A3           INC     DPTR
   \   000004   E0           MOVX    A,@DPTR
   \   000005   22           RET
    291          
    292          /***************************************************************************************************
    293           * @fn      MT_AfDataRequest
    294           *
    295           * @brief   Process AF Register command
    296           *
    297           * @param   pBuf - pointer to the received buffer
    298           *
    299           * @return  none
    300           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    301          void MT_AfDataRequest(uint8 *pBuf)
   \                     MT_AfDataRequest:
    302          {
   \   000000   74EA         MOV     A,#-0x16
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 22
   \   000005                ; Auto size: 14
   \   000005   74F2         MOV     A,#-0xe
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
    303            #define MT_AF_REQ_MSG_LEN  10
    304            #define MT_AF_REQ_MSG_EXT  10
    305          
    306            endPointDesc_t *epDesc;
    307            afAddrType_t dstAddr;
    308            cId_t cId;
    309            uint8 transId, txOpts, radius;
    310            uint8 cmd0, cmd1;
    311            uint8 retValue = ZFailure;
   \   00000A   85..82       MOV     DPL,?XSP + 0
   \   00000D   85..83       MOV     DPH,?XSP + 1
   \   000010   7401         MOV     A,#0x1
   \   000012   12....       LCALL   ?Subroutine40 & 0xFFFF
    312            uint16 dataLen, tempLen;
    313          
    314            /* Parse header */
    315            cmd0 = pBuf[MT_RPC_POS_CMD0];
   \                     ??CrossCallReturnLabel_66:
   \   000015   E0           MOVX    A,@DPTR
   \   000016   F5..         MOV     ?V0 + 10,A
    316            cmd1 = pBuf[MT_RPC_POS_CMD1];
   \   000018   8A82         MOV     DPL,R2
   \   00001A   8B83         MOV     DPH,R3
   \   00001C   A3           INC     DPTR
   \   00001D   A3           INC     DPTR
   \   00001E   E0           MOVX    A,@DPTR
   \   00001F   F5..         MOV     ?V0 + 7,A
    317            pBuf += MT_RPC_FRAME_HDR_SZ;
   \   000021   EA           MOV     A,R2
   \   000022   2403         ADD     A,#0x3
   \   000024   F5..         MOV     ?V0 + 4,A
   \   000026   EB           MOV     A,R3
   \   000027   3400         ADDC    A,#0x0
   \   000029   F5..         MOV     ?V0 + 5,A
    318          
    319            if (cmd1 == MT_AF_DATA_REQUEST_EXT)
   \   00002B   7402         MOV     A,#0x2
   \   00002D   65..         XRL     A,?V0 + 7
   \   00002F   7066         JNZ     ??MT_AfDataRequest_0
    320            {
    321              dstAddr.addrMode = (afAddrMode_t)*pBuf++;
   \   000031   85..82       MOV     DPL,?V0 + 4
   \   000034   85..83       MOV     DPH,?V0 + 5
   \   000037   E0           MOVX    A,@DPTR
   \   000038   F8           MOV     R0,A
   \   000039   740A         MOV     A,#0xa
   \   00003B   12....       LCALL   ?XSTACK_DISP0_8
   \   00003E   E8           MOV     A,R0
   \   00003F   12....       LCALL   ?Subroutine27 & 0xFFFF
    322          
    323              if (dstAddr.addrMode == afAddr64Bit)
   \                     ??CrossCallReturnLabel_34:
   \   000042   7403         MOV     A,#0x3
   \   000044   68           XRL     A,R0
   \   000045   7023         JNZ     ??MT_AfDataRequest_1
    324              {
    325                (void)osal_memcpy(dstAddr.addr.extAddr, pBuf, Z_EXTADDR_LEN);
   \   000047                ; Setup parameters for call to function osal_memcpy
   \   000047   85....       MOV     ?V0 + 0,?V0 + 4
   \   00004A   85....       MOV     ?V0 + 1,?V0 + 5
   \   00004D   75..00       MOV     ?V0 + 2,#0x0
   \   000050   78..         MOV     R0,#?V0 + 0
   \   000052   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   000055   7C08         MOV     R4,#0x8
   \   000057   7D00         MOV     R5,#0x0
   \   000059   7405         MOV     A,#0x5
   \   00005B   12....       LCALL   ?XSTACK_DISP0_8
   \   00005E   AA82         MOV     R2,DPL
   \   000060   AB83         MOV     R3,DPH
   \   000062   12....       LCALL   ??Subroutine58_0 & 0xFFFF
    326              }
   \                     ??CrossCallReturnLabel_130:
   \   000065   12....       LCALL   ?DEALLOC_XSTACK8
   \   000068   8009         SJMP    ??CrossCallReturnLabel_52
    327              else
    328              {
    329                dstAddr.addr.shortAddr = BUILD_UINT16(pBuf[0], pBuf[1]);
   \                     ??MT_AfDataRequest_1:
   \   00006A   12....       LCALL   ?Subroutine7 & 0xFFFF
    330              }
   \                     ??CrossCallReturnLabel_4:
   \   00006D   12....       LCALL   ?XSTACK_DISP0_8
   \   000070   12....       LCALL   ?Subroutine33 & 0xFFFF
    331              pBuf += Z_EXTADDR_LEN;
   \                     ??CrossCallReturnLabel_52:
   \   000073   E5..         MOV     A,?V0 + 4
   \   000075   2408         ADD     A,#0x8
   \   000077   12....       LCALL   ??Subroutine50_0 & 0xFFFF
    332          
    333              dstAddr.endPoint = *pBuf++;
   \                     ??CrossCallReturnLabel_87:
   \   00007A   C0E0         PUSH    A
   \   00007C   740B         MOV     A,#0xb
   \   00007E   12....       LCALL   ?XSTACK_DISP0_8
   \   000081   D0E0         POP     A
   \   000083   12....       LCALL   ?Subroutine27 & 0xFFFF
    334              dstAddr.panId = BUILD_UINT16(pBuf[0], pBuf[1]);
   \                     ??CrossCallReturnLabel_35:
   \   000086   12....       LCALL   ?Subroutine38 & 0xFFFF
   \                     ??CrossCallReturnLabel_63:
   \   000089   F8           MOV     R0,A
   \   00008A   740C         MOV     A,#0xc
   \   00008C   12....       LCALL   ?XSTACK_DISP0_8
   \   00008F   12....       LCALL   ?Subroutine33 & 0xFFFF
    335              pBuf += 2;
   \                     ??CrossCallReturnLabel_53:
   \   000092   12....       LCALL   ?Subroutine36 & 0xFFFF
    336            }
   \                     ??CrossCallReturnLabel_61:
   \   000095   802F         SJMP    ??MT_AfDataRequest_2
    337            else
    338            {
    339              /* Destination address */
    340              dstAddr.addrMode = afAddr16Bit;
   \                     ??MT_AfDataRequest_0:
   \   000097   740A         MOV     A,#0xa
   \   000099   12....       LCALL   ?XSTACK_DISP0_8
   \   00009C   7402         MOV     A,#0x2
   \   00009E   F0           MOVX    @DPTR,A
    341              dstAddr.addr.shortAddr = BUILD_UINT16(pBuf[0], pBuf[1]);
   \   00009F   85..82       MOV     DPL,?V0 + 4
   \   0000A2   85..83       MOV     DPH,?V0 + 5
   \   0000A5   12....       LCALL   ?Subroutine7 & 0xFFFF
   \                     ??CrossCallReturnLabel_5:
   \   0000A8   12....       LCALL   ?XSTACK_DISP0_8
   \   0000AB   12....       LCALL   ?Subroutine33 & 0xFFFF
    342              pBuf += 2;
   \                     ??CrossCallReturnLabel_54:
   \   0000AE   12....       LCALL   ?Subroutine19 & 0xFFFF
    343          
    344              /* Destination endpoint */
    345              dstAddr.endPoint = *pBuf++;
   \                     ??CrossCallReturnLabel_85:
   \   0000B1   C0E0         PUSH    A
   \   0000B3   740B         MOV     A,#0xb
   \   0000B5   12....       LCALL   ?XSTACK_DISP0_8
   \   0000B8   D0E0         POP     A
   \   0000BA   12....       LCALL   ?Subroutine27 & 0xFFFF
    346              dstAddr.panId = 0;
   \                     ??CrossCallReturnLabel_36:
   \   0000BD   740C         MOV     A,#0xc
   \   0000BF   12....       LCALL   ?XSTACK_DISP0_8
   \   0000C2   E4           CLR     A
   \   0000C3   F0           MOVX    @DPTR,A
   \   0000C4   A3           INC     DPTR
   \   0000C5   F0           MOVX    @DPTR,A
    347            }
    348          
    349            /* Source endpoint */
    350            epDesc = afFindEndPointDesc(*pBuf++);
   \                     ??MT_AfDataRequest_2:
   \   0000C6                ; Setup parameters for call to function afFindEndPointDesc
   \   0000C6   85..82       MOV     DPL,?V0 + 4
   \   0000C9   85..83       MOV     DPH,?V0 + 5
   \   0000CC   E0           MOVX    A,@DPTR
   \   0000CD   F9           MOV     R1,A
   \   0000CE   12....       LCALL   ??afFindEndPointDesc?relay
   \   0000D1   8A..         MOV     ?V0 + 8,R2
   \   0000D3   8B..         MOV     ?V0 + 9,R3
   \   0000D5   85..82       MOV     DPL,?V0 + 4
   \   0000D8   85..83       MOV     DPH,?V0 + 5
   \   0000DB   A3           INC     DPTR
   \   0000DC   8582..       MOV     ?V0 + 4,DPL
   \   0000DF   8583..       MOV     ?V0 + 5,DPH
    351          
    352            /* ClusterId */
    353            cId = BUILD_UINT16(pBuf[0], pBuf[1]);
   \   0000E2   12....       LCALL   ?Subroutine6 & 0xFFFF
   \                     ??CrossCallReturnLabel_0:
   \   0000E5   F5..         MOV     ?V0 + 0,A
   \   0000E7   E4           CLR     A
   \   0000E8   39           ADDC    A,R1
   \   0000E9   F5..         MOV     ?V0 + 1,A
    354            pBuf +=2;
   \   0000EB   12....       LCALL   ?Subroutine19 & 0xFFFF
    355          
    356            /* TransId */
    357            transId = *pBuf++;
   \                     ??CrossCallReturnLabel_86:
   \   0000EE   C0E0         PUSH    A
   \   0000F0   7401         MOV     A,#0x1
   \   0000F2   12....       LCALL   ?XSTACK_DISP0_8
   \   0000F5   D0E0         POP     A
   \   0000F7   12....       LCALL   ?Subroutine42 & 0xFFFF
    358          
    359            /* TxOption */
    360            txOpts = *pBuf++;
   \                     ??CrossCallReturnLabel_69:
   \   0000FA   12....       LCALL   ?Subroutine11 & 0xFFFF
    361          
    362            /* Radius */
    363            radius = *pBuf++;
   \                     ??CrossCallReturnLabel_14:
   \   0000FD   A3           INC     DPTR
   \   0000FE   8582..       MOV     ?V0 + 4,DPL
   \   000101   8583..       MOV     ?V0 + 5,DPH
    364          
    365            /* Length */
    366            if (cmd1 == MT_AF_DATA_REQUEST_EXT)
   \   000104   7402         MOV     A,#0x2
   \   000106   65..         XRL     A,?V0 + 7
   \   000108   7014         JNZ     ??MT_AfDataRequest_3
    367            {
    368              dataLen = BUILD_UINT16(pBuf[0], pBuf[1]);
   \   00010A   12....       LCALL   ?Subroutine6 & 0xFFFF
   \                     ??CrossCallReturnLabel_1:
   \   00010D   FE           MOV     R6,A
   \   00010E   E4           CLR     A
   \   00010F   39           ADDC    A,R1
   \   000110   FF           MOV     R7,A
    369              tempLen = dataLen + MT_AF_REQ_MSG_LEN + MT_AF_REQ_MSG_EXT;
   \   000111   EE           MOV     A,R6
   \   000112   2414         ADD     A,#0x14
   \   000114   F8           MOV     R0,A
   \   000115   EF           MOV     A,R7
   \   000116   3400         ADDC    A,#0x0
   \   000118   F9           MOV     R1,A
    370              pBuf += 2;
   \   000119   12....       LCALL   ?Subroutine36 & 0xFFFF
    371            }
   \                     ??CrossCallReturnLabel_62:
   \   00011C   8012         SJMP    ??MT_AfDataRequest_4
    372            else
    373            {
    374              dataLen = *pBuf++;
   \                     ??MT_AfDataRequest_3:
   \   00011E   E0           MOVX    A,@DPTR
   \   00011F   FE           MOV     R6,A
   \   000120   7F00         MOV     R7,#0x0
   \   000122   A3           INC     DPTR
   \   000123   8582..       MOV     ?V0 + 4,DPL
   \   000126   8583..       MOV     ?V0 + 5,DPH
    375              tempLen = dataLen + MT_AF_REQ_MSG_LEN;
   \   000129   240A         ADD     A,#0xa
   \   00012B   F8           MOV     R0,A
   \   00012C   E4           CLR     A
   \   00012D   3400         ADDC    A,#0x0
   \   00012F   F9           MOV     R1,A
    376            }
    377          
    378            if ( epDesc == NULL )
   \                     ??MT_AfDataRequest_4:
   \   000130   E5..         MOV     A,?V0 + 8
   \   000132   45..         ORL     A,?V0 + 9
   \   000134   700B         JNZ     ??MT_AfDataRequest_5
    379            {
    380              retValue = afStatus_INVALID_PARAMETER;
   \                     ??MT_AfDataRequest_6:
   \   000136   85..82       MOV     DPL,?XSP + 0
   \   000139   85..83       MOV     DPH,?XSP + 1
   \   00013C   7402         MOV     A,#0x2
   \   00013E   02....       LJMP    ??MT_AfDataRequest_7 & 0xFFFF
    381            }
    382            else if (tempLen > (uint16)MT_RPC_DATA_MAX)
   \                     ??MT_AfDataRequest_5:
   \   000141   C3           CLR     C
   \   000142   E8           MOV     A,R0
   \   000143   94FB         SUBB    A,#-0x5
   \   000145   E9           MOV     A,R1
   \   000146   9400         SUBB    A,#0x0
   \   000148   5003         JNC     $+5
   \   00014A   02....       LJMP    ??MT_AfDataRequest_8 & 0xFFFF
    383            {
    384              if (pMtAfDataReq != NULL)
   \   00014D   12....       LCALL   ?Subroutine3 & 0xFFFF
   \                     ??CrossCallReturnLabel_94:
   \   000150   70E4         JNZ     ??MT_AfDataRequest_6
    385              {
    386                retValue = afStatus_INVALID_PARAMETER;
    387              }
    388              else if ((pMtAfDataReq = osal_mem_alloc(sizeof(mtAfDataReq_t) + dataLen)) == NULL)
   \   000152                ; Setup parameters for call to function osal_mem_alloc
   \   000152   EE           MOV     A,R6
   \   000153   2418         ADD     A,#0x18
   \   000155   12....       LCALL   ?Subroutine23 & 0xFFFF
   \                     ??CrossCallReturnLabel_82:
   \   000158   90....       MOV     DPTR,#pMtAfDataReq
   \   00015B   EA           MOV     A,R2
   \   00015C   F0           MOVX    @DPTR,A
   \   00015D   A3           INC     DPTR
   \   00015E   EB           MOV     A,R3
   \   00015F   F0           MOVX    @DPTR,A
   \   000160   12....       LCALL   ?Subroutine3 & 0xFFFF
   \                     ??CrossCallReturnLabel_95:
   \   000163   85..82       MOV     DPL,?XSP + 0
   \   000166   85..83       MOV     DPH,?XSP + 1
   \   000169   7005         JNZ     ??MT_AfDataRequest_9
    389              {
    390                retValue = afStatus_MEM_FAIL;
   \   00016B   7410         MOV     A,#0x10
   \   00016D   02....       LJMP    ??MT_AfDataRequest_7 & 0xFFFF
    391              }
    392              else
    393              {
    394                retValue = afStatus_SUCCESS;
   \                     ??MT_AfDataRequest_9:
   \   000170   E4           CLR     A
   \   000171   12....       LCALL   ?Subroutine29 & 0xFFFF
    395          
    396                pMtAfDataReq->data = (uint8 *)(pMtAfDataReq+1);
   \                     ??CrossCallReturnLabel_40:
   \   000174   2418         ADD     A,#0x18
   \   000176   FA           MOV     R2,A
   \   000177   A3           INC     DPTR
   \   000178   E0           MOVX    A,@DPTR
   \   000179   3400         ADDC    A,#0x0
   \   00017B   FB           MOV     R3,A
   \   00017C   12....       LCALL   ?Subroutine10 & 0xFFFF
   \                     ??CrossCallReturnLabel_11:
   \   00017F   EA           MOV     A,R2
   \   000180   F0           MOVX    @DPTR,A
   \   000181   A3           INC     DPTR
   \   000182   EB           MOV     A,R3
   \   000183   F0           MOVX    @DPTR,A
    397                (void)osal_memcpy(&(pMtAfDataReq->dstAddr), &dstAddr, sizeof(afAddrType_t));
   \   000184                ; Setup parameters for call to function osal_memcpy
   \   000184   7402         MOV     A,#0x2
   \   000186   12....       LCALL   ?XSTACK_DISP0_8
   \   000189   A982         MOV     R1,DPL
   \   00018B   AA83         MOV     R2,DPH
   \   00018D   89..         MOV     ?V0 + 4,R1
   \   00018F   8A..         MOV     ?V0 + 5,R2
   \   000191   75..00       MOV     ?V0 + 6,#0x0
   \   000194   78..         MOV     R0,#?V0 + 4
   \   000196   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   000199   7C0C         MOV     R4,#0xc
   \   00019B   7D00         MOV     R5,#0x0
   \   00019D   12....       LCALL   ?Subroutine13 & 0xFFFF
   \                     ??CrossCallReturnLabel_17:
   \   0001A0   12....       LCALL   ??Subroutine58_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_131:
   \   0001A3   12....       LCALL   ?DEALLOC_XSTACK8
    398                pMtAfDataReq->epDesc = epDesc;
   \   0001A6   90....       MOV     DPTR,#pMtAfDataReq
   \   0001A9   E0           MOVX    A,@DPTR
   \   0001AA   240E         ADD     A,#0xe
   \   0001AC   12....       LCALL   ??Subroutine60_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_139:
   \   0001AF   E5..         MOV     A,?V0 + 8
   \   0001B1   F0           MOVX    @DPTR,A
   \   0001B2   A3           INC     DPTR
   \   0001B3   E5..         MOV     A,?V0 + 9
   \   0001B5   F0           MOVX    @DPTR,A
    399                pMtAfDataReq->cId = cId;
   \   0001B6   12....       LCALL   ?Subroutine5 & 0xFFFF
   \                     ??CrossCallReturnLabel_146:
   \   0001B9   E5..         MOV     A,?V0 + 0
   \   0001BB   F0           MOVX    @DPTR,A
   \   0001BC   A3           INC     DPTR
   \   0001BD   E5..         MOV     A,?V0 + 1
   \   0001BF   12....       LCALL   ?Subroutine29 & 0xFFFF
    400                pMtAfDataReq->dataLen = dataLen;
   \                     ??CrossCallReturnLabel_41:
   \   0001C2   2412         ADD     A,#0x12
   \   0001C4   12....       LCALL   ??Subroutine60_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_140:
   \   0001C7   EE           MOV     A,R6
   \   0001C8   F0           MOVX    @DPTR,A
   \   0001C9   A3           INC     DPTR
   \   0001CA   EF           MOV     A,R7
   \   0001CB   F0           MOVX    @DPTR,A
    401                pMtAfDataReq->transId = transId;
   \   0001CC   7401         MOV     A,#0x1
   \   0001CE   12....       LCALL   ?XSTACK_DISP0_8
   \   0001D1   E0           MOVX    A,@DPTR
   \   0001D2   C0E0         PUSH    A
   \   0001D4   90....       MOV     DPTR,#pMtAfDataReq
   \   0001D7   E0           MOVX    A,@DPTR
   \   0001D8   2414         ADD     A,#0x14
   \   0001DA   12....       LCALL   ??Subroutine60_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_141:
   \   0001DD   D0E0         POP     A
   \   0001DF   12....       LCALL   ?Subroutine29 & 0xFFFF
    402                pMtAfDataReq->txOpts = txOpts;
   \                     ??CrossCallReturnLabel_42:
   \   0001E2   2415         ADD     A,#0x15
   \   0001E4   12....       LCALL   ??Subroutine60_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_142:
   \   0001E7   E5..         MOV     A,?V0 + 2
   \   0001E9   12....       LCALL   ?Subroutine29 & 0xFFFF
    403                pMtAfDataReq->radius = radius;
   \                     ??CrossCallReturnLabel_43:
   \   0001EC   2416         ADD     A,#0x16
   \   0001EE   12....       LCALL   ??Subroutine60_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_143:
   \   0001F1   E5..         MOV     A,?V0 + 3
   \   0001F3   12....       LCALL   ?Subroutine29 & 0xFFFF
    404          
    405                // Setup to time-out the huge outgoing item if host does not MT_AF_DATA_STORE it.
    406                pMtAfDataReq->tick = MT_AF_EXEC_CNT;
   \                     ??CrossCallReturnLabel_44:
   \   0001F6   2417         ADD     A,#0x17
   \   0001F8   12....       LCALL   ??Subroutine60_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_144:
   \   0001FB   12....       LCALL   ?Subroutine12 & 0xFFFF
    407                if (ZSuccess != osal_start_timerEx(MT_TaskID, MT_AF_EXEC_EVT, MT_AF_EXEC_DLY))
   \                     ??CrossCallReturnLabel_88:
   \   0001FE   604C         JZ      ??MT_AfDataRequest_10
    408                {
    409                  (void)osal_set_event(MT_TaskID, MT_AF_EXEC_EVT);
   \   000200                ; Setup parameters for call to function osal_set_event
   \   000200   12....       LCALL   ?Subroutine17 & 0xFFFF
    410                }
    411              }
    412            }
   \                     ??CrossCallReturnLabel_24:
   \   000203   8047         SJMP    ??MT_AfDataRequest_10
    413            else
    414            {
    415              retValue = AF_DataRequest(&dstAddr, epDesc, cId, dataLen, pBuf, &transId, txOpts, radius);
   \                     ??MT_AfDataRequest_8:
   \   000205                ; Setup parameters for call to function AF_DataRequest
   \   000205   78..         MOV     R0,#?V0 + 3
   \   000207   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00020A   7402         MOV     A,#0x2
   \   00020C   12....       LCALL   ?XSTACK_DISP0_8
   \   00020F   8582..       MOV     ?V0 + 12,DPL
   \   000212   8583..       MOV     ?V0 + 13,DPH
   \   000215   78..         MOV     R0,#?V0 + 12
   \   000217   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00021A   78..         MOV     R0,#?V0 + 4
   \   00021C   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00021F   8E..         MOV     ?V0 + 4,R6
   \   000221   8F..         MOV     ?V0 + 5,R7
   \   000223   78..         MOV     R0,#?V0 + 4
   \   000225   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000228   78..         MOV     R0,#?V0 + 0
   \   00022A   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00022D   A9..         MOV     R1,?V0 + 2
   \   00022F   AC..         MOV     R4,?V0 + 8
   \   000231   AD..         MOV     R5,?V0 + 9
   \   000233   740B         MOV     A,#0xb
   \   000235   12....       LCALL   ?XSTACK_DISP0_8
   \   000238   AA82         MOV     R2,DPL
   \   00023A   AB83         MOV     R3,DPH
   \   00023C   12....       LCALL   ??AF_DataRequest?relay
   \   00023F   7409         MOV     A,#0x9
   \   000241   12....       LCALL   ?DEALLOC_XSTACK8
   \   000244   E9           MOV     A,R1
   \   000245   85..82       MOV     DPL,?XSP + 0
   \   000248   85..83       MOV     DPH,?XSP + 1
   \                     ??MT_AfDataRequest_7:
   \   00024B   F0           MOVX    @DPTR,A
    416            }
    417          
    418            if (MT_RPC_CMD_SREQ == (cmd0 & MT_RPC_CMD_TYPE_MASK))
   \                     ??MT_AfDataRequest_10:
   \   00024C   74E0         MOV     A,#-0x20
   \   00024E   55..         ANL     A,?V0 + 10
   \   000250   6420         XRL     A,#0x20
   \   000252   7013         JNZ     ??MT_AfDataRequest_11
    419            {
    420              MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP|(uint8)MT_RPC_SYS_AF), cmd1, 1, &retValue);
   \   000254                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   000254   85..82       MOV     DPL,?XSP + 0
   \   000257   85..83       MOV     DPH,?XSP + 1
   \   00025A   AC82         MOV     R4,DPL
   \   00025C   AD83         MOV     R5,DPH
   \   00025E   7B01         MOV     R3,#0x1
   \   000260   AA..         MOV     R2,?V0 + 7
   \   000262   7964         MOV     R1,#0x64
   \   000264   12....       LCALL   ??MT_BuildAndSendZToolResponse?relay
    421            }
    422          }
   \                     ??MT_AfDataRequest_11:
   \   000267   740E         MOV     A,#0xe
   \   000269   12....       LCALL   ?DEALLOC_XSTACK8
   \   00026C   7F0E         MOV     R7,#0xe
   \   00026E   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine36:
   \   000000   E5..         MOV     A,?V0 + 4
   \   000002   2402         ADD     A,#0x2
   \   000004   F5..         MOV     ?V0 + 4,A
   \   000006   E5..         MOV     A,?V0 + 5
   \   000008   3400         ADDC    A,#0x0
   \   00000A   F5..         MOV     ?V0 + 5,A
   \   00000C   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine29:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   90....       MOV     DPTR,#pMtAfDataReq
   \   000004   E0           MOVX    A,@DPTR
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine27:
   \   000000   12....       LCALL   ?Subroutine42 & 0xFFFF
   \                     ??CrossCallReturnLabel_70:
   \   000003   8582..       MOV     ?V0 + 4,DPL
   \   000006   8583..       MOV     ?V0 + 5,DPH
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine42:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   85..82       MOV     DPL,?V0 + 4
   \   000004   85..83       MOV     DPH,?V0 + 5
   \   000007   A3           INC     DPTR
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine23:
   \   000000   FA           MOV     R2,A
   \   000001   EF           MOV     A,R7
   \   000002                REQUIRE ??Subroutine49_0
   \   000002                ; // Fall through to label ??Subroutine49_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine49_0:
   \   000000   3400         ADDC    A,#0x0
   \   000002   FB           MOV     R3,A
   \   000003   12....       LCALL   ??osal_mem_alloc?relay
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine19:
   \   000000   E5..         MOV     A,?V0 + 4
   \   000002   2402         ADD     A,#0x2
   \   000004                REQUIRE ??Subroutine50_0
   \   000004                ; // Fall through to label ??Subroutine50_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine50_0:
   \   000000   F5..         MOV     ?V0 + 4,A
   \   000002   E5..         MOV     A,?V0 + 5
   \   000004   3400         ADDC    A,#0x0
   \   000006   F5..         MOV     ?V0 + 5,A
   \   000008   85..82       MOV     DPL,?V0 + 4
   \   00000B   F583         MOV     DPH,A
   \   00000D   E0           MOVX    A,@DPTR
   \   00000E   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine12:
   \   000000   740F         MOV     A,#0xf
   \   000002   F0           MOVX    @DPTR,A
   \   000003                ; Setup parameters for call to function osal_start_timerEx
   \   000003                ; Setup parameters for call to function osal_start_timerEx
   \   000003                REQUIRE ??Subroutine51_0
   \   000003                ; // Fall through to label ??Subroutine51_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine7:
   \   000000   12....       LCALL   ?Subroutine38 & 0xFFFF
   \                     ??CrossCallReturnLabel_65:
   \   000003   F8           MOV     R0,A
   \   000004   7402         MOV     A,#0x2
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine38:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   FA           MOV     R2,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   F9           MOV     R1,A
   \   000005   EA           MOV     A,R2
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine6:
   \   000000   12....       LCALL   ?Subroutine38 & 0xFFFF
   \                     ??CrossCallReturnLabel_64:
   \   000003   2400         ADD     A,#0x0
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine33:
   \   000000   E8           MOV     A,R0
   \   000001   F0           MOVX    @DPTR,A
   \   000002   A3           INC     DPTR
   \   000003   E9           MOV     A,R1
   \   000004   F0           MOVX    @DPTR,A
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine58_0:
   \   000000   12....       LCALL   ??osal_memcpy?relay
   \   000003   7403         MOV     A,#0x3
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine11:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F5..         MOV     ?V0 + 2,A
   \   000003   A3           INC     DPTR
   \   000004   E0           MOVX    A,@DPTR
   \   000005   F5..         MOV     ?V0 + 3,A
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine13:
   \   000000   90....       MOV     DPTR,#pMtAfDataReq
   \   000003   E0           MOVX    A,@DPTR
   \   000004   2402         ADD     A,#0x2
   \   000006   FA           MOV     R2,A
   \   000007   A3           INC     DPTR
   \   000008   E0           MOVX    A,@DPTR
   \   000009   3400         ADDC    A,#0x0
   \   00000B   FB           MOV     R3,A
   \   00000C   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine10:
   \   000000   90....       MOV     DPTR,#pMtAfDataReq
   \   000003   E0           MOVX    A,@DPTR
   \   000004   F8           MOV     R0,A
   \   000005   A3           INC     DPTR
   \   000006   E0           MOVX    A,@DPTR
   \   000007   F583         MOV     DPH,A
   \   000009   8882         MOV     DPL,R0
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine5:
   \   000000   90....       MOV     DPTR,#pMtAfDataReq
   \   000003   E0           MOVX    A,@DPTR
   \   000004   2410         ADD     A,#0x10
   \   000006                REQUIRE ??Subroutine60_0
   \   000006                ; // Fall through to label ??Subroutine60_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine60_0:
   \   000000   12....       LCALL   ?Subroutine39 & 0xFFFF
   \                     ??CrossCallReturnLabel_149:
   \   000003   22           RET
    423          
    424          #if defined ( ZIGBEE_SOURCE_ROUTING )
    425          
    426          /***************************************************************************************************
    427           * @fn      MT_AfDataRequestSrcRtg
    428           *
    429           * @brief   Process AF Register command
    430           *
    431           * @param   pBuf - pointer to the received buffer
    432           *
    433           * @return  none
    434           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    435          void MT_AfDataRequestSrcRtg(uint8 *pBuf)
   \                     MT_AfDataRequestSrcRtg:
    436          {
   \   000000   74EC         MOV     A,#-0x14
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 20
   \   000005                ; Auto size: 14
   \   000005   74F2         MOV     A,#-0xe
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   EA           MOV     A,R2
   \   00000B   FE           MOV     R6,A
   \   00000C   EB           MOV     A,R3
   \   00000D   FF           MOV     R7,A
    437            uint8 cmdId, dataLen = 0;
    438            uint8 retValue = ZFailure;
   \   00000E   85..82       MOV     DPL,?XSP + 0
   \   000011   85..83       MOV     DPH,?XSP + 1
   \   000014   7401         MOV     A,#0x1
   \   000016   12....       LCALL   ?Subroutine31 & 0xFFFF
    439            endPointDesc_t *epDesc;
    440            byte transId;
    441            afAddrType_t dstAddr;
    442            cId_t cId;
    443            byte txOpts, radius, srcEP, relayCnt;
    444            uint16 *pRelayList;
    445            uint8 i;
    446          
    447            /* parse header */
    448            cmdId = pBuf[MT_RPC_POS_CMD1];
   \                     ??CrossCallReturnLabel_47:
   \   000019   A3           INC     DPTR
   \   00001A   E0           MOVX    A,@DPTR
   \   00001B   F5..         MOV     ?V0 + 4,A
    449            pBuf += MT_RPC_FRAME_HDR_SZ;
   \   00001D   EE           MOV     A,R6
   \   00001E   2403         ADD     A,#0x3
   \   000020   0E           INC     R6
   \   000021   0E           INC     R6
   \   000022   0E           INC     R6
   \   000023   EF           MOV     A,R7
   \   000024   3400         ADDC    A,#0x0
   \   000026   FF           MOV     R7,A
    450          
    451            /* Destination address */
    452            /* Initialize the panID field to zero to avoid inter-pan */
    453            osal_memset( &dstAddr, 0, sizeof(afAddrType_t) );
   \   000027                ; Setup parameters for call to function osal_memset
   \   000027   7C0C         MOV     R4,#0xc
   \   000029   7D00         MOV     R5,#0x0
   \   00002B   7900         MOV     R1,#0x0
   \   00002D   7402         MOV     A,#0x2
   \   00002F   12....       LCALL   ?XSTACK_DISP0_8
   \   000032   AA82         MOV     R2,DPL
   \   000034   AB83         MOV     R3,DPH
   \   000036   12....       LCALL   ??osal_memset?relay
    454            dstAddr.addrMode = afAddr16Bit;
   \   000039   740A         MOV     A,#0xa
   \   00003B   12....       LCALL   ?XSTACK_DISP0_8
   \   00003E   7402         MOV     A,#0x2
   \   000040   F0           MOVX    @DPTR,A
    455            dstAddr.addr.shortAddr = BUILD_UINT16(pBuf[0], pBuf[1]);
   \   000041   8E82         MOV     DPL,R6
   \   000043   8F83         MOV     DPH,R7
   \   000045   12....       LCALL   ?Subroutine7 & 0xFFFF
   \                     ??CrossCallReturnLabel_6:
   \   000048   12....       LCALL   ?XSTACK_DISP0_8
   \   00004B   12....       LCALL   ?Subroutine33 & 0xFFFF
    456            pBuf += 2;
   \                     ??CrossCallReturnLabel_55:
   \   00004E   12....       LCALL   ?Subroutine25 & 0xFFFF
    457          
    458            /* Destination endpoint */
    459            dstAddr.endPoint = *pBuf++;
   \                     ??CrossCallReturnLabel_32:
   \   000051   C0E0         PUSH    A
   \   000053   740B         MOV     A,#0xb
   \   000055   12....       LCALL   ?XSTACK_DISP0_8
   \   000058   D0E0         POP     A
   \   00005A   12....       LCALL   ?Subroutine31 & 0xFFFF
    460          
    461            /* Source endpoint */
    462            srcEP = *pBuf++;
   \                     ??CrossCallReturnLabel_48:
   \   00005D   E0           MOVX    A,@DPTR
   \   00005E   F9           MOV     R1,A
   \   00005F   A3           INC     DPTR
   \   000060   AE82         MOV     R6,DPL
   \   000062   AF83         MOV     R7,DPH
    463            epDesc = afFindEndPointDesc( srcEP );
   \   000064                ; Setup parameters for call to function afFindEndPointDesc
   \   000064   12....       LCALL   ??afFindEndPointDesc?relay
   \   000067   8A..         MOV     ?V0 + 2,R2
   \   000069   8B..         MOV     ?V0 + 3,R3
    464          
    465            /* ClusterId */
    466            cId = BUILD_UINT16(pBuf[0], pBuf[1]);
   \   00006B   8E82         MOV     DPL,R6
   \   00006D   8F83         MOV     DPH,R7
   \   00006F   12....       LCALL   ?Subroutine6 & 0xFFFF
   \                     ??CrossCallReturnLabel_2:
   \   000072   F5..         MOV     ?V0 + 6,A
   \   000074   E4           CLR     A
   \   000075   39           ADDC    A,R1
   \   000076   F5..         MOV     ?V0 + 7,A
    467            pBuf +=2;
   \   000078   12....       LCALL   ?Subroutine25 & 0xFFFF
    468          
    469            /* TransId */
    470            transId = *pBuf++;
   \                     ??CrossCallReturnLabel_33:
   \   00007B   C0E0         PUSH    A
   \   00007D   7401         MOV     A,#0x1
   \   00007F   12....       LCALL   ?XSTACK_DISP0_8
   \   000082   D0E0         POP     A
   \   000084   12....       LCALL   ?Subroutine31 & 0xFFFF
    471          
    472            /* TxOption */
    473            txOpts = *pBuf++;
   \                     ??CrossCallReturnLabel_49:
   \   000087   E0           MOVX    A,@DPTR
   \   000088   F5..         MOV     ?V0 + 5,A
   \   00008A   A3           INC     DPTR
    474          
    475            /* Radius */
    476            radius = *pBuf++;
   \   00008B   E0           MOVX    A,@DPTR
   \   00008C   F5..         MOV     ?V0 + 10,A
   \   00008E   A3           INC     DPTR
    477          
    478            /* Source route relay count */
    479            relayCnt = *pBuf++;
   \   00008F   E0           MOVX    A,@DPTR
   \   000090   F5..         MOV     ?V0 + 11,A
   \   000092   A3           INC     DPTR
   \   000093   AE82         MOV     R6,DPL
   \   000095   AF83         MOV     R7,DPH
    480          
    481            /* Convert the source route relay list */
    482            if( (pRelayList = osal_mem_alloc( relayCnt * sizeof( uint16 ))) != NULL )
   \   000097                ; Setup parameters for call to function osal_mem_alloc
   \   000097   C3           CLR     C
   \   000098   33           RLC     A
   \   000099   FA           MOV     R2,A
   \   00009A   E4           CLR     A
   \   00009B   33           RLC     A
   \   00009C   FB           MOV     R3,A
   \   00009D   12....       LCALL   ??osal_mem_alloc?relay
   \   0000A0   8A..         MOV     ?V0 + 0,R2
   \   0000A2   8B..         MOV     ?V0 + 1,R3
   \   0000A4   EA           MOV     A,R2
   \   0000A5   45..         ORL     A,?V0 + 1
   \   0000A7   7003         JNZ     $+5
   \   0000A9   02....       LJMP    ??MT_AfDataRequestSrcRtg_0 & 0xFFFF
    483            {
    484              for( i = 0; i < relayCnt; i++ )
   \   0000AC   7C00         MOV     R4,#0x0
   \   0000AE   8023         SJMP    ??MT_AfDataRequestSrcRtg_1
    485              {
    486                pRelayList[i]  = BUILD_UINT16( pBuf[0], pBuf[1] );
   \                     ??MT_AfDataRequestSrcRtg_2:
   \   0000B0   FA           MOV     R2,A
   \   0000B1   A3           INC     DPTR
   \   0000B2   E0           MOVX    A,@DPTR
   \   0000B3   F9           MOV     R1,A
   \   0000B4   EA           MOV     A,R2
   \   0000B5   2400         ADD     A,#0x0
   \   0000B7   E4           CLR     A
   \   0000B8   39           ADDC    A,R1
   \   0000B9   FB           MOV     R3,A
   \   0000BA   EC           MOV     A,R4
   \   0000BB   33           RLC     A
   \   0000BC   F8           MOV     R0,A
   \   0000BD   E4           CLR     A
   \   0000BE   33           RLC     A
   \   0000BF   F9           MOV     R1,A
   \   0000C0   E5..         MOV     A,?V0 + 0
   \   0000C2   28           ADD     A,R0
   \   0000C3   F582         MOV     DPL,A
   \   0000C5   E5..         MOV     A,?V0 + 1
   \   0000C7   39           ADDC    A,R1
   \   0000C8   F583         MOV     DPH,A
   \   0000CA   EA           MOV     A,R2
   \   0000CB   F0           MOVX    @DPTR,A
   \   0000CC   A3           INC     DPTR
   \   0000CD   EB           MOV     A,R3
   \   0000CE   F0           MOVX    @DPTR,A
    487                pBuf += 2;
   \   0000CF   12....       LCALL   ?Subroutine44 & 0xFFFF
    488              }
   \                     ??CrossCallReturnLabel_71:
   \   0000D2   0C           INC     R4
   \                     ??MT_AfDataRequestSrcRtg_1:
   \   0000D3   EC           MOV     A,R4
   \   0000D4   C3           CLR     C
   \   0000D5   95..         SUBB    A,?V0 + 11
   \   0000D7   8E82         MOV     DPL,R6
   \   0000D9   8F83         MOV     DPH,R7
   \   0000DB   E0           MOVX    A,@DPTR
   \   0000DC   40D2         JC      ??MT_AfDataRequestSrcRtg_2
    489          
    490              /* Data payload Length */
    491              dataLen = *pBuf++;
   \   0000DE   F9           MOV     R1,A
   \   0000DF   A3           INC     DPTR
   \   0000E0   AE82         MOV     R6,DPL
   \   0000E2   AF83         MOV     R7,DPH
    492          
    493              if ( epDesc == NULL )
   \   0000E4   E5..         MOV     A,?V0 + 2
   \   0000E6   45..         ORL     A,?V0 + 3
   \   0000E8   700A         JNZ     ??MT_AfDataRequestSrcRtg_3
    494              {
    495                retValue = afStatus_INVALID_PARAMETER;
   \   0000EA   85..82       MOV     DPL,?XSP + 0
   \   0000ED   85..83       MOV     DPH,?XSP + 1
   \   0000F0   7402         MOV     A,#0x2
   \   0000F2   805D         SJMP    ??MT_AfDataRequestSrcRtg_4
    496              }
    497              else
    498              {
    499                retValue = AF_DataRequestSrcRtg( &dstAddr, epDesc, cId, dataLen, pBuf,
    500                                               &transId, txOpts, radius, relayCnt, pRelayList );
   \                     ??MT_AfDataRequestSrcRtg_3:
   \   0000F4                ; Setup parameters for call to function AF_DataRequestSrcRtg
   \   0000F4   78..         MOV     R0,#?V0 + 0
   \   0000F6   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000F9   E5..         MOV     A,?V0 + 11
   \   0000FB   F5..         MOV     ?V0 + 8,A
   \   0000FD   78..         MOV     R0,#?V0 + 8
   \   0000FF   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000102   E5..         MOV     A,?V0 + 10
   \   000104   F5..         MOV     ?V0 + 8,A
   \   000106   78..         MOV     R0,#?V0 + 8
   \   000108   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00010B   7405         MOV     A,#0x5
   \   00010D   12....       LCALL   ?XSTACK_DISP0_8
   \   000110   8582..       MOV     ?V0 + 8,DPL
   \   000113   8583..       MOV     ?V0 + 9,DPH
   \   000116   78..         MOV     R0,#?V0 + 8
   \   000118   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00011B   8E..         MOV     ?V0 + 8,R6
   \   00011D   8F..         MOV     ?V0 + 9,R7
   \   00011F   78..         MOV     R0,#?V0 + 8
   \   000121   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000124   89..         MOV     ?V0 + 8,R1
   \   000126   75..00       MOV     ?V0 + 9,#0x0
   \   000129   78..         MOV     R0,#?V0 + 8
   \   00012B   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00012E   78..         MOV     R0,#?V0 + 6
   \   000130   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000133   A9..         MOV     R1,?V0 + 5
   \   000135   AC..         MOV     R4,?V0 + 2
   \   000137   AD..         MOV     R5,?V0 + 3
   \   000139   740E         MOV     A,#0xe
   \   00013B   12....       LCALL   ?XSTACK_DISP0_8
   \   00013E   AA82         MOV     R2,DPL
   \   000140   AB83         MOV     R3,DPH
   \   000142   12....       LCALL   ??AF_DataRequestSrcRtg?relay
   \   000145   740C         MOV     A,#0xc
   \   000147   12....       LCALL   ?DEALLOC_XSTACK8
   \   00014A   E9           MOV     A,R1
   \   00014B   85..82       MOV     DPL,?XSP + 0
   \   00014E   85..83       MOV     DPH,?XSP + 1
   \                     ??MT_AfDataRequestSrcRtg_4:
   \   000151   F0           MOVX    @DPTR,A
    501              }
    502          
    503              /* Free the memory allocated */
    504              osal_mem_free( pRelayList );
   \   000152                ; Setup parameters for call to function osal_mem_free
   \   000152   AA..         MOV     R2,?V0 + 0
   \   000154   AB..         MOV     R3,?V0 + 1
   \   000156   12....       LCALL   ??osal_mem_free?relay
   \   000159   8009         SJMP    ??MT_AfDataRequestSrcRtg_5
    505            }
    506            else
    507            {
    508              retValue = afStatus_MEM_FAIL;
   \                     ??MT_AfDataRequestSrcRtg_0:
   \   00015B   85..82       MOV     DPL,?XSP + 0
   \   00015E   85..83       MOV     DPH,?XSP + 1
   \   000161   7410         MOV     A,#0x10
   \   000163   F0           MOVX    @DPTR,A
    509            }
    510          
    511          
    512            /* Build and send back the response */
    513            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_AF), cmdId, 1, &retValue);
   \                     ??MT_AfDataRequestSrcRtg_5:
   \   000164                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   000164   85..82       MOV     DPL,?XSP + 0
   \   000167   85..83       MOV     DPH,?XSP + 1
   \   00016A   AC82         MOV     R4,DPL
   \   00016C   AD83         MOV     R5,DPH
   \   00016E   7B01         MOV     R3,#0x1
   \   000170   AA..         MOV     R2,?V0 + 4
   \   000172   7964         MOV     R1,#0x64
   \   000174   12....       LCALL   ??MT_BuildAndSendZToolResponse?relay
    514          }
   \   000177   740E         MOV     A,#0xe
   \   000179   12....       LCALL   ?DEALLOC_XSTACK8
   \   00017C   7F0C         MOV     R7,#0xc
   \   00017E   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine31:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   8E82         MOV     DPL,R6
   \   000003   8F83         MOV     DPH,R7
   \   000005   A3           INC     DPTR
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine25:
   \   000000   12....       LCALL   ?Subroutine44 & 0xFFFF
   \                     ??CrossCallReturnLabel_72:
   \   000003   8E82         MOV     DPL,R6
   \   000005   8F83         MOV     DPH,R7
   \   000007   E0           MOVX    A,@DPTR
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine44:
   \   000000   EE           MOV     A,R6
   \   000001   2402         ADD     A,#0x2
   \   000003   0E           INC     R6
   \   000004   0E           INC     R6
   \   000005   EF           MOV     A,R7
   \   000006   3400         ADDC    A,#0x0
   \   000008   FF           MOV     R7,A
   \   000009   22           RET
    515          #endif
    516          
    517          #if defined INTER_PAN
    518          /***************************************************************************************************
    519           * @fn      MT_AfInterPanCtl
    520           *
    521           * @brief   Process the AF Inter Pan control command.
    522           *
    523           * @param   pBuf - pointer to the received buffer
    524           *
    525           * @return  none
    526           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    527          static void MT_AfInterPanCtl(uint8 *pBuf)
   \                     MT_AfInterPanCtl:
    528          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 2
   \   000005   74FE         MOV     A,#-0x2
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
    529            uint8 cmd, rtrn;
    530            uint16 panId;
    531            endPointDesc_t *pEP;
    532          
    533            cmd = pBuf[MT_RPC_POS_CMD1];
   \   00000A   8A82         MOV     DPL,R2
   \   00000C   8B83         MOV     DPH,R3
   \   00000E   A3           INC     DPTR
   \   00000F   A3           INC     DPTR
   \   000010   E0           MOVX    A,@DPTR
   \   000011   FE           MOV     R6,A
    534            pBuf += MT_RPC_FRAME_HDR_SZ;
    535          
    536            switch (*pBuf++)  // Inter-pan request parameter.
   \   000012   EA           MOV     A,R2
   \   000013   2403         ADD     A,#0x3
   \   000015   F8           MOV     R0,A
   \   000016   EB           MOV     A,R3
   \   000017   12....       LCALL   ??Subroutine54_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_102:
   \   00001A   A3           INC     DPTR
   \   00001B   AA82         MOV     R2,DPL
   \   00001D   AB83         MOV     R3,DPH
   \   00001F   8882         MOV     DPL,R0
   \   000021   8983         MOV     DPH,R1
   \   000023   E0           MOVX    A,@DPTR
   \   000024   600B         JZ      ??MT_AfInterPanCtl_0
   \   000026   14           DEC     A
   \   000027   6014         JZ      ??MT_AfInterPanCtl_1
   \   000029   14           DEC     A
   \   00002A   601C         JZ      ??MT_AfInterPanCtl_2
   \   00002C   14           DEC     A
   \   00002D   603C         JZ      ??MT_AfInterPanCtl_3
   \   00002F   8066         SJMP    ??MT_AfInterPanCtl_4
    537            {
    538            case InterPanClr:
    539              rtrn = StubAPS_SetIntraPanChannel();           // Switch channel back to the NIB channel.
   \                     ??MT_AfInterPanCtl_0:
   \   000031                ; Setup parameters for call to function StubAPS_SetIntraPanChannel
   \   000031   12....       LCALL   ??StubAPS_SetIntraPanChannel?relay
   \                     ??MT_AfInterPanCtl_5:
   \   000034   E9           MOV     A,R1
   \                     ??MT_AfInterPanCtl_6:
   \   000035   85..82       MOV     DPL,?XSP + 0
   \   000038   85..83       MOV     DPH,?XSP + 1
   \   00003B   8062         SJMP    ??MT_AfInterPanCtl_7
    540              break;
    541          
    542            case InterPanSet:
    543              rtrn = StubAPS_SetInterPanChannel(*pBuf);      // Set channel for inter-pan communication.
   \                     ??MT_AfInterPanCtl_1:
   \   00003D                ; Setup parameters for call to function StubAPS_SetInterPanChannel
   \   00003D   8A82         MOV     DPL,R2
   \   00003F   8B83         MOV     DPH,R3
   \   000041   E0           MOVX    A,@DPTR
   \   000042   F9           MOV     R1,A
   \   000043   12....       LCALL   ??StubAPS_SetInterPanChannel?relay
   \   000046   80EC         SJMP    ??MT_AfInterPanCtl_5
    544              break;
    545          
    546            case InterPanReg:
    547              if ((pEP = afFindEndPointDesc(*pBuf)))
   \                     ??MT_AfInterPanCtl_2:
   \   000048                ; Setup parameters for call to function afFindEndPointDesc
   \   000048   8A82         MOV     DPL,R2
   \   00004A   8B83         MOV     DPH,R3
   \   00004C   E0           MOVX    A,@DPTR
   \   00004D   F9           MOV     R1,A
   \   00004E   12....       LCALL   ??afFindEndPointDesc?relay
   \   000051   EA           MOV     A,R2
   \   000052   4B           ORL     A,R3
   \   000053   600C         JZ      ??MT_AfInterPanCtl_8
    548              {
    549                StubAPS_RegisterApp(pEP);
   \   000055                ; Setup parameters for call to function StubAPS_RegisterApp
   \   000055   12....       LCALL   ??StubAPS_RegisterApp?relay
    550                rtrn = SUCCESS;
   \   000058   85..82       MOV     DPL,?XSP + 0
   \   00005B   85..83       MOV     DPH,?XSP + 1
   \   00005E   E4           CLR     A
   \   00005F   803E         SJMP    ??MT_AfInterPanCtl_7
    551              }
    552              else
    553              {
    554                rtrn = FAILURE;
   \                     ??MT_AfInterPanCtl_8:
   \   000061   85..82       MOV     DPL,?XSP + 0
   \   000064   85..83       MOV     DPH,?XSP + 1
   \   000067   7401         MOV     A,#0x1
   \   000069   8034         SJMP    ??MT_AfInterPanCtl_7
    555              }
    556              break;
    557          
    558            case InterPanChk:
    559              panId = BUILD_UINT16(pBuf[0], pBuf[1]);
    560              rtrn = (StubAPS_InterPan(panId, pBuf[2])) ? ZSuccess : ZFailure;
   \                     ??MT_AfInterPanCtl_3:
   \   00006B                ; Setup parameters for call to function StubAPS_InterPan
   \   00006B   8A82         MOV     DPL,R2
   \   00006D   8B83         MOV     DPH,R3
   \   00006F   A3           INC     DPTR
   \   000070   A3           INC     DPTR
   \   000071   E0           MOVX    A,@DPTR
   \   000072   F9           MOV     R1,A
   \   000073   8A82         MOV     DPL,R2
   \   000075   8B83         MOV     DPH,R3
   \   000077   E0           MOVX    A,@DPTR
   \   000078   FC           MOV     R4,A
   \   000079   A3           INC     DPTR
   \   00007A   E0           MOVX    A,@DPTR
   \   00007B   FB           MOV     R3,A
   \   00007C   EC           MOV     A,R4
   \   00007D   FA           MOV     R2,A
   \   00007E   12....       LCALL   ??StubAPS_InterPan?relay
   \   000081   E9           MOV     A,R1
   \   000082   6008         JZ      ??MT_AfInterPanCtl_9
   \   000084   7401         MOV     A,#0x1
   \   000086   12....       LCALL   ?XSTACK_DISP0_8
   \   000089   E4           CLR     A
   \   00008A   8007         SJMP    ??MT_AfInterPanCtl_10
   \                     ??MT_AfInterPanCtl_9:
   \   00008C   7401         MOV     A,#0x1
   \   00008E   12....       LCALL   ?XSTACK_DISP0_8
   \   000091   7401         MOV     A,#0x1
   \                     ??MT_AfInterPanCtl_10:
   \   000093   F0           MOVX    @DPTR,A
   \   000094   E0           MOVX    A,@DPTR
   \   000095   809E         SJMP    ??MT_AfInterPanCtl_6
    561              break;
    562          
    563            default:
    564              rtrn = afStatus_INVALID_PARAMETER;
   \                     ??MT_AfInterPanCtl_4:
   \   000097   85..82       MOV     DPL,?XSP + 0
   \   00009A   85..83       MOV     DPH,?XSP + 1
   \   00009D   7402         MOV     A,#0x2
   \                     ??MT_AfInterPanCtl_7:
   \   00009F   F0           MOVX    @DPTR,A
    565              break;
    566            }
    567          
    568            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_AF), cmd, 1, &rtrn);
   \   0000A0                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   0000A0   AC82         MOV     R4,DPL
   \   0000A2   AD83         MOV     R5,DPH
   \   0000A4   7B01         MOV     R3,#0x1
   \   0000A6   EE           MOV     A,R6
   \   0000A7   FA           MOV     R2,A
   \   0000A8   7964         MOV     R1,#0x64
   \   0000AA   12....       LCALL   ??MT_BuildAndSendZToolResponse?relay
    569          }
   \   0000AD   7402         MOV     A,#0x2
   \   0000AF   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000B2   7F02         MOV     R7,#0x2
   \   0000B4   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine54_0:
   \   000000   12....       LCALL   ?Subroutine46 & 0xFFFF
   \                     ??CrossCallReturnLabel_150:
   \   000003   22           RET
    570          #endif
    571          
    572          /***************************************************************************************************
    573           * @fn      MT_AfDataConfirm
    574           *
    575           * @brief   Process
    576           *
    577           * @param   pBuf - pointer to the received buffer
    578           *
    579           * @return  none
    580           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    581          void MT_AfDataConfirm(afDataConfirm_t *pMsg)
   \                     MT_AfDataConfirm:
    582          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 3
   \   000004   74FD         MOV     A,#-0x3
   \   000006   12....       LCALL   ?ALLOC_XSTACK8
    583            uint8 retArray[3];
    584          
    585            retArray[0] = pMsg->hdr.status;
   \   000009   8A82         MOV     DPL,R2
   \   00000B   8B83         MOV     DPH,R3
   \   00000D   A3           INC     DPTR
   \   00000E   E0           MOVX    A,@DPTR
   \   00000F   85..82       MOV     DPL,?XSP + 0
   \   000012   85..83       MOV     DPH,?XSP + 1
   \   000015   12....       LCALL   ?Subroutine34 & 0xFFFF
    586            retArray[1] = pMsg->endpoint;
   \                     ??CrossCallReturnLabel_60:
   \   000018   C0E0         PUSH    A
   \   00001A   7401         MOV     A,#0x1
   \   00001C   12....       LCALL   ?XSTACK_DISP0_8
   \   00001F   D0E0         POP     A
   \   000021   12....       LCALL   ?Subroutine40 & 0xFFFF
    587            retArray[2] = pMsg->transID;
   \                     ??CrossCallReturnLabel_67:
   \   000024   A3           INC     DPTR
   \   000025   A3           INC     DPTR
   \   000026   E0           MOVX    A,@DPTR
   \   000027   C0E0         PUSH    A
   \   000029   7402         MOV     A,#0x2
   \   00002B   12....       LCALL   ?XSTACK_DISP0_8
   \   00002E   D0E0         POP     A
   \   000030   12....       LCALL   ?Subroutine30 & 0xFFFF
    588          
    589            /* Build and send back the response */
    590            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_AREQ | (uint8)MT_RPC_SYS_AF), MT_AF_DATA_CONFIRM, 3, retArray);
   \                     ??CrossCallReturnLabel_45:
   \   000033   7B03         MOV     R3,#0x3
   \   000035   7A80         MOV     R2,#-0x80
   \   000037   7944         MOV     R1,#0x44
   \   000039   12....       LCALL   ??MT_BuildAndSendZToolResponse?relay
    591          }
   \   00003C   7403         MOV     A,#0x3
   \   00003E   12....       LCALL   ?DEALLOC_XSTACK8
   \   000041   D083         POP     DPH
   \   000043   D082         POP     DPL
   \   000045   02....       LJMP    ?BRET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine30:
   \   000000   F0           MOVX    @DPTR,A
   \   000001                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   000001                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   000001   85..82       MOV     DPL,?XSP + 0
   \   000004   85..83       MOV     DPH,?XSP + 1
   \   000007   AC82         MOV     R4,DPL
   \   000009   AD83         MOV     R5,DPH
   \   00000B   22           RET
    592          
    593          /***************************************************************************************************
    594           * @fn          MT_AfIncomingMsg
    595           *
    596           * @brief       Process the callback subscription for AF Incoming data.
    597           *
    598           * @param       pkt - Incoming AF data.
    599           *
    600           * @return      none
    601           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    602          void MT_AfIncomingMsg(afIncomingMSGPacket_t *pMsg)
   \                     MT_AfIncomingMsg:
    603          {
   \   000000   74E9         MOV     A,#-0x17
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 23
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV     ?V0 + 8,R2
   \   000007   8B..         MOV     ?V0 + 9,R3
    604            #define MT_AF_INC_MSG_LEN  17
    605            #define MT_AF_INC_MSG_EXT  10
    606          
    607            uint16 dataLen = pMsg->cmd.DataLength;  // Length of the data section in the response packet.
   \   000009   EA           MOV     A,R2
   \   00000A   2420         ADD     A,#0x20
   \   00000C   12....       LCALL   ?Subroutine21 & 0xFFFF
   \                     ??CrossCallReturnLabel_75:
   \   00000F   FE           MOV     R6,A
   \   000010   A3           INC     DPTR
   \   000011   E0           MOVX    A,@DPTR
   \   000012   FF           MOV     R7,A
    608            uint16 respLen = MT_AF_INC_MSG_LEN + dataLen;
   \   000013   EE           MOV     A,R6
   \   000014   2411         ADD     A,#0x11
   \   000016   F5..         MOV     ?V0 + 0,A
   \   000018   EF           MOV     A,R7
   \   000019   3400         ADDC    A,#0x0
   \   00001B   F5..         MOV     ?V0 + 1,A
    609            uint8 cmd = MT_AF_INCOMING_MSG;
   \   00001D   75..81       MOV     ?V0 + 14,#-0x7f
    610            uint8 *pRsp, *pTmp;
    611            mtAfInMsgList_t *pItem = NULL;
   \   000020   75..00       MOV     ?V0 + 10,#0x0
   \   000023   75..00       MOV     ?V0 + 11,#0x0
    612          
    613          #if defined INTER_PAN
    614            if (StubAPS_InterPan(pMsg->srcAddr.panId, pMsg->srcAddr.endPoint))
   \   000026                ; Setup parameters for call to function StubAPS_InterPan
   \   000026   EA           MOV     A,R2
   \   000027   240F         ADD     A,#0xf
   \   000029   12....       LCALL   ?Subroutine21 & 0xFFFF
   \                     ??CrossCallReturnLabel_76:
   \   00002C   F9           MOV     R1,A
   \   00002D   EA           MOV     A,R2
   \   00002E   2410         ADD     A,#0x10
   \   000030   12....       LCALL   ?Subroutine21 & 0xFFFF
   \                     ??CrossCallReturnLabel_77:
   \   000033   FA           MOV     R2,A
   \   000034   A3           INC     DPTR
   \   000035   E0           MOVX    A,@DPTR
   \   000036   FB           MOV     R3,A
   \   000037   12....       LCALL   ??StubAPS_InterPan?relay
   \   00003A   E9           MOV     A,R1
   \   00003B   6011         JZ      ??MT_AfIncomingMsg_0
    615            {
    616              cmd = MT_AF_INCOMING_MSG_EXT;
   \                     ??MT_AfIncomingMsg_1:
   \   00003D   75..82       MOV     ?V0 + 14,#-0x7e
    617            }
    618            else
    619          #endif
    620            if ((pMsg->srcAddr.addrMode == afAddr64Bit) ||
    621                (respLen > (uint16)(MT_RPC_DATA_MAX - MT_AF_INC_MSG_EXT)))
    622            {
    623              cmd = MT_AF_INCOMING_MSG_EXT;
    624            }
    625          
    626            if (cmd == MT_AF_INCOMING_MSG_EXT)
    627            {
    628              respLen += MT_AF_INC_MSG_EXT;
   \   000040   E5..         MOV     A,?V0 + 0
   \   000042   240A         ADD     A,#0xa
   \   000044   F5..         MOV     ?V0 + 0,A
   \   000046   E5..         MOV     A,?V0 + 1
   \   000048   3400         ADDC    A,#0x0
   \   00004A   F5..         MOV     ?V0 + 1,A
   \   00004C   801A         SJMP    ??MT_AfIncomingMsg_2
    629            }
   \                     ??MT_AfIncomingMsg_0:
   \   00004E   E5..         MOV     A,?V0 + 8
   \   000050   240E         ADD     A,#0xe
   \   000052   F582         MOV     DPL,A
   \   000054   E5..         MOV     A,?V0 + 9
   \   000056   12....       LCALL   ??Subroutine47_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_73:
   \   000059   6403         XRL     A,#0x3
   \   00005B   60E0         JZ      ??MT_AfIncomingMsg_1
   \   00005D   C3           CLR     C
   \   00005E   E5..         MOV     A,?V0 + 0
   \   000060   94F1         SUBB    A,#-0xf
   \   000062   E5..         MOV     A,?V0 + 1
   \   000064   9400         SUBB    A,#0x0
   \   000066   50D5         JNC     ??MT_AfIncomingMsg_1
    630          
    631            if (respLen > (uint16)MT_RPC_DATA_MAX)
   \                     ??MT_AfIncomingMsg_2:
   \   000068   C3           CLR     C
   \   000069   E5..         MOV     A,?V0 + 0
   \   00006B   94FB         SUBB    A,#-0x5
   \   00006D   E5..         MOV     A,?V0 + 1
   \   00006F   9400         SUBB    A,#0x0
   \   000071   402E         JC      ??MT_AfIncomingMsg_3
    632            {
    633              if ((pItem = (mtAfInMsgList_t *)osal_mem_alloc(sizeof(mtAfInMsgList_t) + dataLen)) == NULL)
   \   000073                ; Setup parameters for call to function osal_mem_alloc
   \   000073   EE           MOV     A,R6
   \   000074   2409         ADD     A,#0x9
   \   000076   12....       LCALL   ?Subroutine23 & 0xFFFF
   \                     ??CrossCallReturnLabel_83:
   \   000079   8A..         MOV     ?V0 + 10,R2
   \   00007B   8B..         MOV     ?V0 + 11,R3
   \   00007D   EA           MOV     A,R2
   \   00007E   45..         ORL     A,?V0 + 11
   \   000080   7003         JNZ     $+5
   \   000082   02....       LJMP    ??MT_AfIncomingMsg_4 & 0xFFFF
    634              {
    635                return;  // If cannot hold a huge message, cannot give indication at all.
    636              }
    637          
    638              pItem->data = (uint8 *)(pItem+1);
   \   000085   EA           MOV     A,R2
   \   000086   2409         ADD     A,#0x9
   \   000088   F8           MOV     R0,A
   \   000089   EB           MOV     A,R3
   \   00008A   3400         ADDC    A,#0x0
   \   00008C   F9           MOV     R1,A
   \   00008D   8A82         MOV     DPL,R2
   \   00008F   8B83         MOV     DPH,R3
   \   000091   A3           INC     DPTR
   \   000092   A3           INC     DPTR
   \   000093   12....       LCALL   ?Subroutine33 & 0xFFFF
    639              respLen -= dataLen;  // Zero data bytes are sent with an over-sized incoming indication.
   \                     ??CrossCallReturnLabel_56:
   \   000096   C3           CLR     C
   \   000097   E5..         MOV     A,?V0 + 0
   \   000099   9E           SUBB    A,R6
   \   00009A   F5..         MOV     ?V0 + 0,A
   \   00009C   E5..         MOV     A,?V0 + 1
   \   00009E   9F           SUBB    A,R7
   \   00009F   F5..         MOV     ?V0 + 1,A
    640            }
    641          
    642            // Attempt to allocate memory for the response packet.
    643            if ((pRsp = osal_mem_alloc(respLen)) == NULL)
   \                     ??MT_AfIncomingMsg_3:
   \   0000A1                ; Setup parameters for call to function osal_mem_alloc
   \   0000A1   AA..         MOV     R2,?V0 + 0
   \   0000A3   AB..         MOV     R3,?V0 + 1
   \   0000A5   12....       LCALL   ??osal_mem_alloc?relay
   \   0000A8   8A..         MOV     ?V0 + 12,R2
   \   0000AA   8B..         MOV     ?V0 + 13,R3
   \   0000AC   EA           MOV     A,R2
   \   0000AD   45..         ORL     A,?V0 + 13
   \   0000AF   7010         JNZ     ??MT_AfIncomingMsg_5
    644            {
    645              if (pItem != NULL)
   \   0000B1   E5..         MOV     A,?V0 + 10
   \   0000B3   45..         ORL     A,?V0 + 11
   \   0000B5   7003         JNZ     $+5
   \   0000B7   02....       LJMP    ??MT_AfIncomingMsg_4 & 0xFFFF
    646              {
    647                (void)osal_mem_free(pItem);
   \   0000BA                ; Setup parameters for call to function osal_mem_free
   \   0000BA   AA..         MOV     R2,?V0 + 10
   \   0000BC   AB..         MOV     R3,?V0 + 11
   \   0000BE   02....       LJMP    ??MT_AfIncomingMsg_6 & 0xFFFF
    648              }
    649              return;
    650            }
    651            pTmp = pRsp;
    652          
    653            /* Group ID */
    654            *pTmp++ = LO_UINT16(pMsg->groupId);
   \                     ??MT_AfIncomingMsg_5:
   \   0000C1   E5..         MOV     A,?V0 + 8
   \   0000C3   2402         ADD     A,#0x2
   \   0000C5   12....       LCALL   ?Subroutine20 & 0xFFFF
   \                     ??CrossCallReturnLabel_103:
   \   0000C8   E0           MOVX    A,@DPTR
   \   0000C9   8A82         MOV     DPL,R2
   \   0000CB   8B83         MOV     DPH,R3
   \   0000CD   12....       LCALL   ?Subroutine28 & 0xFFFF
    655            *pTmp++ = HI_UINT16(pMsg->groupId);
   \                     ??CrossCallReturnLabel_37:
   \   0000D0   8882         MOV     DPL,R0
   \   0000D2   8983         MOV     DPH,R1
   \   0000D4   A3           INC     DPTR
   \   0000D5   12....       LCALL   ??Subroutine57_0 & 0xFFFF
    656          
    657            /* Cluster ID */
    658            *pTmp++ = LO_UINT16(pMsg->clusterId);
   \                     ??CrossCallReturnLabel_120:
   \   0000D8   2404         ADD     A,#0x4
   \   0000DA   12....       LCALL   ?Subroutine2 & 0xFFFF
    659            *pTmp++ = HI_UINT16(pMsg->clusterId);
   \                     ??CrossCallReturnLabel_112:
   \   0000DD   12....       LCALL   ?Subroutine8 & 0xFFFF
    660          
    661            if (cmd == MT_AF_INCOMING_MSG_EXT)
   \                     ??CrossCallReturnLabel_7:
   \   0000E0   7482         MOV     A,#-0x7e
   \   0000E2   65..         XRL     A,?V0 + 14
   \   0000E4   706A         JNZ     ??MT_AfIncomingMsg_7
    662            {
    663              *pTmp++ = pMsg->srcAddr.addrMode;
   \   0000E6   E5..         MOV     A,?V0 + 8
   \   0000E8   240E         ADD     A,#0xe
   \   0000EA   12....       LCALL   ?Subroutine20 & 0xFFFF
   \                     ??CrossCallReturnLabel_104:
   \   0000ED   12....       LCALL   ?Subroutine8 & 0xFFFF
    664          
    665              if (pMsg->srcAddr.addrMode == afAddr64Bit)
   \                     ??CrossCallReturnLabel_8:
   \   0000F0   8882         MOV     DPL,R0
   \   0000F2   8983         MOV     DPH,R1
   \   0000F4   E0           MOVX    A,@DPTR
   \   0000F5   6403         XRL     A,#0x3
   \   0000F7   7024         JNZ     ??MT_AfIncomingMsg_8
    666              {
    667                (void)osal_memcpy(pTmp, pMsg->srcAddr.addr.extAddr, Z_EXTADDR_LEN);
   \   0000F9                ; Setup parameters for call to function osal_memcpy
   \   0000F9   E5..         MOV     A,?V0 + 8
   \   0000FB   2406         ADD     A,#0x6
   \   0000FD   F5..         MOV     ?V0 + 4,A
   \   0000FF   E5..         MOV     A,?V0 + 9
   \   000101   3400         ADDC    A,#0x0
   \   000103   F5..         MOV     ?V0 + 5,A
   \   000105   75..00       MOV     ?V0 + 6,#0x0
   \   000108   78..         MOV     R0,#?V0 + 4
   \   00010A   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   00010D   7C08         MOV     R4,#0x8
   \   00010F   7D00         MOV     R5,#0x0
   \   000111   AA..         MOV     R2,?V0 + 2
   \   000113   AB..         MOV     R3,?V0 + 3
   \   000115   12....       LCALL   ??Subroutine58_0 & 0xFFFF
    668              }
   \                     ??CrossCallReturnLabel_132:
   \   000118   12....       LCALL   ?DEALLOC_XSTACK8
   \   00011B   8018         SJMP    ??MT_AfIncomingMsg_9
    669              else
    670              {
    671                pTmp[0] = LO_UINT16(pMsg->srcAddr.addr.shortAddr);
   \                     ??MT_AfIncomingMsg_8:
   \   00011D   E5..         MOV     A,?V0 + 8
   \   00011F   2406         ADD     A,#0x6
   \   000121   12....       LCALL   ?Subroutine20 & 0xFFFF
   \                     ??CrossCallReturnLabel_105:
   \   000124   12....       LCALL   ?Subroutine18 & 0xFFFF
    672                pTmp[1] = HI_UINT16(pMsg->srcAddr.addr.shortAddr);
   \                     ??CrossCallReturnLabel_26:
   \   000127   8882         MOV     DPL,R0
   \   000129   8983         MOV     DPH,R1
   \   00012B   A3           INC     DPTR
   \   00012C   E0           MOVX    A,@DPTR
   \   00012D   85..82       MOV     DPL,?V0 + 2
   \   000130   85..83       MOV     DPH,?V0 + 3
   \   000133   A3           INC     DPTR
   \   000134   F0           MOVX    @DPTR,A
    673              }
    674              pTmp += Z_EXTADDR_LEN;
   \                     ??MT_AfIncomingMsg_9:
   \   000135   E5..         MOV     A,?V0 + 2
   \   000137   2408         ADD     A,#0x8
   \   000139   F5..         MOV     ?V0 + 2,A
   \   00013B   E5..         MOV     A,?V0 + 3
   \   00013D   3400         ADDC    A,#0x0
   \   00013F   F5..         MOV     ?V0 + 3,A
    675          
    676              *pTmp++ = pMsg->srcAddr.endPoint;
   \   000141   E5..         MOV     A,?V0 + 8
   \   000143   240F         ADD     A,#0xf
   \   000145   12....       LCALL   ?Subroutine1 & 0xFFFF
    677          #if defined INTER_PAN
    678              *pTmp++ = LO_UINT16(pMsg->srcAddr.panId);
    679              *pTmp++ = HI_UINT16(pMsg->srcAddr.panId);
    680          #else
    681              *pTmp++ = 0;
    682              *pTmp++ = 0;
    683          #endif
    684            }
   \                     ??CrossCallReturnLabel_115:
   \   000148   2410         ADD     A,#0x10
   \   00014A   F8           MOV     R0,A
   \   00014B   12....       LCALL   ??Subroutine56_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_114:
   \   00014E   800F         SJMP    ??CrossCallReturnLabel_106
    685            else
    686            {
    687              /* Source Address */
    688              *pTmp++ = LO_UINT16(pMsg->srcAddr.addr.shortAddr);
   \                     ??MT_AfIncomingMsg_7:
   \   000150   E5..         MOV     A,?V0 + 8
   \   000152   2406         ADD     A,#0x6
   \   000154   12....       LCALL   ?Subroutine2 & 0xFFFF
    689              *pTmp++ = HI_UINT16(pMsg->srcAddr.addr.shortAddr);
    690          
    691              /* Source EP */
    692              *pTmp++ = pMsg->srcAddr.endPoint;
    693            }
   \                     ??CrossCallReturnLabel_113:
   \   000157   12....       LCALL   ??Subroutine57_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_121:
   \   00015A   240F         ADD     A,#0xf
   \   00015C   12....       LCALL   ?Subroutine43 & 0xFFFF
   \                     ??CrossCallReturnLabel_106:
   \   00015F   12....       LCALL   ??Subroutine57_0 & 0xFFFF
    694          
    695            /* Destination EP */
    696            *pTmp++ = pMsg->endPoint;
   \                     ??CrossCallReturnLabel_122:
   \   000162   2414         ADD     A,#0x14
   \   000164   12....       LCALL   ?Subroutine1 & 0xFFFF
    697          
    698            /* WasBroadCast */
    699            *pTmp++ = pMsg->wasBroadcast;
   \                     ??CrossCallReturnLabel_116:
   \   000167   2415         ADD     A,#0x15
   \   000169   12....       LCALL   ?Subroutine1 & 0xFFFF
    700          
    701            /* LinkQuality */
    702            *pTmp++ = pMsg->LinkQuality;
   \                     ??CrossCallReturnLabel_117:
   \   00016C   2416         ADD     A,#0x16
   \   00016E   12....       LCALL   ?Subroutine1 & 0xFFFF
    703          
    704            /* SecurityUse */
    705            *pTmp++ = pMsg->SecurityUse;
   \                     ??CrossCallReturnLabel_118:
   \   000171   2419         ADD     A,#0x19
   \   000173   12....       LCALL   ?Subroutine1 & 0xFFFF
    706          
    707            /* Timestamp */
    708            *pTmp++ = BREAK_UINT32(pMsg->timestamp, 0);
   \                     ??CrossCallReturnLabel_119:
   \   000176   241A         ADD     A,#0x1a
   \   000178   FA           MOV     R2,A
   \   000179   E5..         MOV     A,?V0 + 9
   \   00017B   3400         ADDC    A,#0x0
   \   00017D   FB           MOV     R3,A
   \   00017E   8A82         MOV     DPL,R2
   \   000180   8B83         MOV     DPH,R3
   \   000182   78..         MOV     R0,#?V0 + 4
   \   000184   12....       LCALL   ?L_MOV_X
   \   000187   12....       LCALL   ?Subroutine26 & 0xFFFF
    709            *pTmp++ = BREAK_UINT32(pMsg->timestamp, 1);
   \                     ??CrossCallReturnLabel_97:
   \   00018A   12....       LCALL   ?L_MOV_X
   \   00018D   E5..         MOV     A,?V0 + 5
   \   00018F   85..82       MOV     DPL,?V0 + 2
   \   000192   85..83       MOV     DPH,?V0 + 3
   \   000195   12....       LCALL   ??Subroutine53_0 & 0xFFFF
    710            *pTmp++ = BREAK_UINT32(pMsg->timestamp, 2);
   \                     ??CrossCallReturnLabel_99:
   \   000198   12....       LCALL   ?L_MOV_X
   \   00019B   7410         MOV     A,#0x10
   \   00019D   78..         MOV     R0,#?V0 + 4
   \   00019F   12....       LCALL   ?UL_SHR
   \   0001A2   12....       LCALL   ?Subroutine26 & 0xFFFF
    711            *pTmp++ = BREAK_UINT32(pMsg->timestamp, 3);
   \                     ??CrossCallReturnLabel_98:
   \   0001A5   12....       LCALL   ?L_MOV_X
   \   0001A8   7418         MOV     A,#0x18
   \   0001AA   78..         MOV     R0,#?V0 + 4
   \   0001AC   12....       LCALL   ?UL_SHR
   \   0001AF   85..82       MOV     DPL,?V0 + 2
   \   0001B2   85..83       MOV     DPH,?V0 + 3
   \   0001B5   E5..         MOV     A,?V0 + 4
   \   0001B7   12....       LCALL   ?Subroutine28 & 0xFFFF
    712          
    713          
    714            /* Data Length */
    715            if (cmd == MT_AF_INCOMING_MSG_EXT)
   \                     ??CrossCallReturnLabel_38:
   \   0001BA   7482         MOV     A,#-0x7e
   \   0001BC   65..         XRL     A,?V0 + 14
   \   0001BE   7009         JNZ     ??MT_AfIncomingMsg_10
    716            {
    717              /* Z-Tool apparently takes the last Byte before the data buffer as the dynamic length and
    718               * ignores the bigger UInt16 length of an EXT incoming message. But no data bytes will be sent
    719               * with a huge message, so it's necessary to work-around and fake-out Z-Tool with a zero here.
    720               */
    721              *pTmp++ = 0;  // TODO - workaround Z-Tool shortcoming; should be: = pMsg->cmd.TransSeqNumber;
   \   0001C0   E4           CLR     A
   \   0001C1   F0           MOVX    @DPTR,A
   \   0001C2   A3           INC     DPTR
    722              *pTmp++ = LO_UINT16(dataLen);
   \   0001C3   EE           MOV     A,R6
   \   0001C4   F0           MOVX    @DPTR,A
   \   0001C5   A3           INC     DPTR
    723              *pTmp++ = HI_UINT16(dataLen);
   \   0001C6   EF           MOV     A,R7
   \   0001C7   800C         SJMP    ??MT_AfIncomingMsg_11
    724            }
    725            else
    726            {
    727              *pTmp++ = pMsg->cmd.TransSeqNumber;
   \                     ??MT_AfIncomingMsg_10:
   \   0001C9   E5..         MOV     A,?V0 + 8
   \   0001CB   241F         ADD     A,#0x1f
   \   0001CD   12....       LCALL   ?Subroutine43 & 0xFFFF
   \                     ??CrossCallReturnLabel_107:
   \   0001D0   12....       LCALL   ?Subroutine18 & 0xFFFF
   \                     ??CrossCallReturnLabel_27:
   \   0001D3   A3           INC     DPTR
    728              *pTmp++ = dataLen;
   \   0001D4   EE           MOV     A,R6
    729            }
   \                     ??MT_AfIncomingMsg_11:
   \   0001D5   12....       LCALL   ?Subroutine28 & 0xFFFF
    730          
    731            /* Data */
    732            if (pItem != NULL)
   \                     ??CrossCallReturnLabel_39:
   \   0001D8   E5..         MOV     A,?V0 + 10
   \   0001DA   45..         ORL     A,?V0 + 11
   \   0001DC   605B         JZ      ??MT_AfIncomingMsg_12
    733            {
    734              // Enqueue the new huge incoming item.
    735              pItem->next = pMtAfInMsgList;
   \   0001DE   12....       LCALL   ?Subroutine16 & 0xFFFF
   \                     ??CrossCallReturnLabel_137:
   \   0001E1   85..82       MOV     DPL,?V0 + 10
   \   0001E4   85..83       MOV     DPH,?V0 + 11
   \   0001E7   12....       LCALL   ?Subroutine33 & 0xFFFF
    736              pMtAfInMsgList = pItem;
   \                     ??CrossCallReturnLabel_57:
   \   0001EA   90....       MOV     DPTR,#pMtAfInMsgList
   \   0001ED   E5..         MOV     A,?V0 + 10
   \   0001EF   F0           MOVX    @DPTR,A
   \   0001F0   A3           INC     DPTR
   \   0001F1   E5..         MOV     A,?V0 + 11
   \   0001F3   F0           MOVX    @DPTR,A
    737          
    738              // Setup to time-out the huge incoming item if host does not MT_AF_DATA_RETRIEVE it.
    739              pItem->tick = MT_AF_EXEC_CNT;
   \   0001F4   85..82       MOV     DPL,?V0 + 10
   \   0001F7   F583         MOV     DPH,A
   \   0001F9   A3           INC     DPTR
   \   0001FA   A3           INC     DPTR
   \   0001FB   A3           INC     DPTR
   \   0001FC   A3           INC     DPTR
   \   0001FD   A3           INC     DPTR
   \   0001FE   A3           INC     DPTR
   \   0001FF   A3           INC     DPTR
   \   000200   A3           INC     DPTR
   \   000201   12....       LCALL   ?Subroutine12 & 0xFFFF
    740              if (ZSuccess != osal_start_timerEx(MT_TaskID, MT_AF_EXEC_EVT, MT_AF_EXEC_DLY))
   \                     ??CrossCallReturnLabel_89:
   \   000204   6003         JZ      ??CrossCallReturnLabel_25
    741              {
    742                (void)osal_set_event(MT_TaskID, MT_AF_EXEC_EVT);
   \   000206                ; Setup parameters for call to function osal_set_event
   \   000206   12....       LCALL   ?Subroutine17 & 0xFFFF
    743              }
    744          
    745              pItem->timestamp = pMsg->timestamp;
   \                     ??CrossCallReturnLabel_25:
   \   000209   E5..         MOV     A,?V0 + 8
   \   00020B   241A         ADD     A,#0x1a
   \   00020D   12....       LCALL   ?Subroutine43 & 0xFFFF
   \                     ??CrossCallReturnLabel_108:
   \   000210   12....       LCALL   ?XLOAD_R2345
   \   000213   85..82       MOV     DPL,?V0 + 10
   \   000216   85..83       MOV     DPH,?V0 + 11
   \   000219   A3           INC     DPTR
   \   00021A   A3           INC     DPTR
   \   00021B   A3           INC     DPTR
   \   00021C   A3           INC     DPTR
   \   00021D   12....       LCALL   ?XSTORE_R2345
    746              (void)osal_memcpy(pItem->data, pMsg->cmd.Data, dataLen);
   \   000220                ; Setup parameters for call to function osal_memcpy
   \   000220   12....       LCALL   ?Subroutine14 & 0xFFFF
    747            }
   \                     ??CrossCallReturnLabel_19:
   \   000223   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   000226   EE           MOV     A,R6
   \   000227   FC           MOV     R4,A
   \   000228   EF           MOV     A,R7
   \   000229   FD           MOV     R5,A
   \   00022A   85..82       MOV     DPL,?V0 + 10
   \   00022D   85..83       MOV     DPH,?V0 + 11
   \   000230   A3           INC     DPTR
   \   000231   A3           INC     DPTR
   \   000232   E0           MOVX    A,@DPTR
   \   000233   FA           MOV     R2,A
   \   000234   A3           INC     DPTR
   \   000235   E0           MOVX    A,@DPTR
   \   000236   FB           MOV     R3,A
   \   000237   800E         SJMP    ??MT_AfIncomingMsg_13
    748            else
    749            {
    750              (void)osal_memcpy(pTmp, pMsg->cmd.Data, dataLen);
   \                     ??MT_AfIncomingMsg_12:
   \   000239                ; Setup parameters for call to function osal_memcpy
   \   000239   12....       LCALL   ?Subroutine14 & 0xFFFF
    751            }
   \                     ??CrossCallReturnLabel_20:
   \   00023C   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   00023F   EE           MOV     A,R6
   \   000240   FC           MOV     R4,A
   \   000241   EF           MOV     A,R7
   \   000242   FD           MOV     R5,A
   \   000243   AA..         MOV     R2,?V0 + 2
   \   000245   AB..         MOV     R3,?V0 + 3
   \                     ??MT_AfIncomingMsg_13:
   \   000247   12....       LCALL   ??Subroutine58_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_133:
   \   00024A   12....       LCALL   ?DEALLOC_XSTACK8
    752          
    753            /* Build and send back the response */
    754            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_AREQ|(uint8)MT_RPC_SYS_AF), cmd, respLen, pRsp);
   \   00024D                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   00024D   AC..         MOV     R4,?V0 + 12
   \   00024F   AD..         MOV     R5,?V0 + 13
   \   000251   AB..         MOV     R3,?V0 + 0
   \   000253   AA..         MOV     R2,?V0 + 14
   \   000255   7944         MOV     R1,#0x44
   \   000257   12....       LCALL   ??MT_BuildAndSendZToolResponse?relay
    755          
    756            (void)osal_mem_free(pRsp);
   \   00025A                ; Setup parameters for call to function osal_mem_free
   \   00025A   AA..         MOV     R2,?V0 + 12
   \   00025C   AB..         MOV     R3,?V0 + 13
   \                     ??MT_AfIncomingMsg_6:
   \   00025E   12....       LCALL   ??osal_mem_free?relay
    757          }
   \                     ??MT_AfIncomingMsg_4:
   \   000261   7F0F         MOV     R7,#0xf
   \   000263   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine28:
   \   000000   12....       LCALL   ?Subroutine41 & 0xFFFF
   \                     ??CrossCallReturnLabel_100:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine41:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   A3           INC     DPTR
   \   000002   8582..       MOV     ?V0 + 2,DPL
   \   000005   8583..       MOV     ?V0 + 3,DPH
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine26:
   \   000000   85..82       MOV     DPL,?V0 + 2
   \   000003   85..83       MOV     DPH,?V0 + 3
   \   000006   E5..         MOV     A,?V0 + 4
   \   000008                REQUIRE ??Subroutine53_0
   \   000008                ; // Fall through to label ??Subroutine53_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine53_0:
   \   000000   12....       LCALL   ?Subroutine41 & 0xFFFF
   \                     ??CrossCallReturnLabel_101:
   \   000003   8A82         MOV     DPL,R2
   \   000005   8B83         MOV     DPH,R3
   \   000007   78..         MOV     R0,#?V0 + 4
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine20:
   \   000000   F8           MOV     R0,A
   \   000001   E5..         MOV     A,?V0 + 9
   \   000003                REQUIRE ??Subroutine54_0
   \   000003                ; // Fall through to label ??Subroutine54_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine18:
   \   000000   12....       LCALL   ?Subroutine45 & 0xFFFF
   \                     ??CrossCallReturnLabel_126:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine45:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   85..82       MOV     DPL,?V0 + 2
   \   000004   85..83       MOV     DPH,?V0 + 3
   \   000007   F0           MOVX    @DPTR,A
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine14:
   \   000000   E5..         MOV     A,?V0 + 8
   \   000002   2422         ADD     A,#0x22
   \   000004   12....       LCALL   ?Subroutine43 & 0xFFFF
   \                     ??CrossCallReturnLabel_110:
   \   000007   E0           MOVX    A,@DPTR
   \   000008   F5..         MOV     ?V0 + 4,A
   \   00000A   A3           INC     DPTR
   \   00000B   E0           MOVX    A,@DPTR
   \   00000C   F5..         MOV     ?V0 + 5,A
   \   00000E   78..         MOV     R0,#?V0 + 4
   \   000010   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine43:
   \   000000   F582         MOV     DPL,A
   \   000002   E5..         MOV     A,?V0 + 9
   \   000004                REQUIRE ??Subroutine55_0
   \   000004                ; // Fall through to label ??Subroutine55_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine8:
   \   000000   12....       LCALL   ?Subroutine37 & 0xFFFF
   \                     ??CrossCallReturnLabel_123:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine37:
   \   000000   12....       LCALL   ?Subroutine45 & 0xFFFF
   \                     ??CrossCallReturnLabel_127:
   \   000003   A3           INC     DPTR
   \   000004   8582..       MOV     ?V0 + 2,DPL
   \   000007   8583..       MOV     ?V0 + 3,DPH
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine2:
   \   000000   08           INC     R0
   \   000001   08           INC     R0
   \   000002                REQUIRE ??Subroutine56_0
   \   000002                ; // Fall through to label ??Subroutine56_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine56_0:
   \   000000   E5..         MOV     A,?V0 + 9
   \   000002   12....       LCALL   ?Subroutine46 & 0xFFFF
   \                     ??CrossCallReturnLabel_151:
   \   000005   12....       LCALL   ?Subroutine37 & 0xFFFF
   \                     ??CrossCallReturnLabel_124:
   \   000008   8882         MOV     DPL,R0
   \   00000A   8983         MOV     DPH,R1
   \   00000C   A3           INC     DPTR
   \   00000D   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000   12....       LCALL   ?Subroutine43 & 0xFFFF
   \                     ??CrossCallReturnLabel_109:
   \   000003                REQUIRE ??Subroutine57_0
   \   000003                ; // Fall through to label ??Subroutine57_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine57_0:
   \   000000   12....       LCALL   ?Subroutine37 & 0xFFFF
   \                     ??CrossCallReturnLabel_125:
   \   000003   E5..         MOV     A,?V0 + 8
   \   000005   22           RET
    758          
    759          /**************************************************************************************************
    760           * @fn          MT_AfDataRetrieve
    761           *
    762           * @brief   Process AF Data Retrieve command to incrementally read out a very large
    763           *          incoming AF message.
    764           *
    765           * input parameters
    766           *
    767           * @param pBuf - pointer to the received buffer
    768           *
    769           * output parameters
    770           *
    771           * @param rtrn - AF-Status of the operation.
    772           *
    773           * @return      None.
    774           **************************************************************************************************
    775           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    776          void MT_AfDataRetrieve(uint8 *pBuf)
   \                     MT_AfDataRetrieve:
    777          {
   \   000000   74EB         MOV     A,#-0x15
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 21
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV     ?V0 + 0,R2
    778            #define MT_AF_RTV_HDR_SZ  2
    779          
    780            uint32 timestamp;
    781            mtAfInMsgList_t *pPrev, *pItem = pMtAfInMsgList;
   \   000007   90....       MOV     DPTR,#pMtAfInMsgList
   \   00000A   12....       LCALL   ?Subroutine11 & 0xFFFF
    782            uint8 rtrn = afStatus_FAILED;
   \                     ??CrossCallReturnLabel_15:
   \   00000D   7A01         MOV     R2,#0x1
    783            uint8 len = 0;
   \   00000F   75..00       MOV     ?V0 + 12,#0x0
    784          
    785            pBuf += MT_RPC_FRAME_HDR_SZ;
   \   000012   E5..         MOV     A,?V0 + 0
   \   000014   2403         ADD     A,#0x3
   \   000016   F5..         MOV     ?V0 + 0,A
   \   000018   EB           MOV     A,R3
   \   000019   12....       LCALL   ?Subroutine24 & 0xFFFF
    786            timestamp = BUILD_UINT32(pBuf[0], pBuf[1], pBuf[2], pBuf[3]);
   \                     ??CrossCallReturnLabel_30:
   \   00001C   E0           MOVX    A,@DPTR
   \   00001D   F5..         MOV     ?V0 + 4,A
   \   00001F   E4           CLR     A
   \   000020   F5..         MOV     ?V0 + 5,A
   \   000022   F5..         MOV     ?V0 + 6,A
   \   000024   F5..         MOV     ?V0 + 7,A
   \   000026   A3           INC     DPTR
   \   000027   E0           MOVX    A,@DPTR
   \   000028   F5..         MOV     ?V0 + 8,A
   \   00002A   E4           CLR     A
   \   00002B   F5..         MOV     ?V0 + 9,A
   \   00002D   F5..         MOV     ?V0 + 10,A
   \   00002F   F5..         MOV     ?V0 + 11,A
   \   000031   7408         MOV     A,#0x8
   \   000033   78..         MOV     R0,#?V0 + 8
   \   000035   12....       LCALL   ?L_SHL
   \   000038   78..         MOV     R0,#?V0 + 4
   \   00003A   79..         MOV     R1,#?V0 + 8
   \   00003C   12....       LCALL   ?L_ADD
   \   00003F   85..82       MOV     DPL,?V0 + 0
   \   000042   85..83       MOV     DPH,?V0 + 1
   \   000045   A3           INC     DPTR
   \   000046   A3           INC     DPTR
   \   000047   E0           MOVX    A,@DPTR
   \   000048   F5..         MOV     ?V0 + 8,A
   \   00004A   E4           CLR     A
   \   00004B   F5..         MOV     ?V0 + 9,A
   \   00004D   7410         MOV     A,#0x10
   \   00004F   78..         MOV     R0,#?V0 + 8
   \   000051   12....       LCALL   ?L_SHL
   \   000054   78..         MOV     R0,#?V0 + 4
   \   000056   79..         MOV     R1,#?V0 + 8
   \   000058   12....       LCALL   ?L_ADD
   \   00005B   85..82       MOV     DPL,?V0 + 0
   \   00005E   85..83       MOV     DPH,?V0 + 1
   \   000061   A3           INC     DPTR
   \   000062   A3           INC     DPTR
   \   000063   A3           INC     DPTR
   \   000064   E0           MOVX    A,@DPTR
   \   000065   F5..         MOV     ?V0 + 8,A
   \   000067   E4           CLR     A
   \   000068   F5..         MOV     ?V0 + 10,A
   \   00006A   7418         MOV     A,#0x18
   \   00006C   78..         MOV     R0,#?V0 + 8
   \   00006E   12....       LCALL   ?L_SHL
   \   000071   78..         MOV     R0,#?V0 + 4
   \   000073   79..         MOV     R1,#?V0 + 8
   \   000075   12....       LCALL   ?L_ADD
   \   000078   8007         SJMP    ??CrossCallReturnLabel_16
    787          
    788            while (pItem != NULL)
    789            {
    790              pPrev = pItem;
    791              if (pItem->timestamp == timestamp)
    792              {
    793                break;
    794              }
    795              pItem = pItem->next;
   \                     ??MT_AfDataRetrieve_0:
   \   00007A   8C82         MOV     DPL,R4
   \   00007C   8D83         MOV     DPH,R5
   \   00007E   12....       LCALL   ?Subroutine11 & 0xFFFF
   \                     ??CrossCallReturnLabel_16:
   \   000081   E5..         MOV     A,?V0 + 2
   \   000083   45..         ORL     A,?V0 + 3
   \   000085   605B         JZ      ??MT_AfDataRetrieve_1
   \   000087   AC..         MOV     R4,?V0 + 2
   \   000089   AD..         MOV     R5,?V0 + 3
   \   00008B   8C82         MOV     DPL,R4
   \   00008D   8D83         MOV     DPH,R5
   \   00008F   A3           INC     DPTR
   \   000090   A3           INC     DPTR
   \   000091   A3           INC     DPTR
   \   000092   A3           INC     DPTR
   \   000093   78..         MOV     R0,#?V0 + 4
   \   000095   12....       LCALL   ?L_EQ_X
   \   000098   70E0         JNZ     ??MT_AfDataRetrieve_0
    796            }
    797          
    798            if (pItem != NULL)
    799            {
    800              uint16 idx;
    801              uint8 *pRsp;
    802          
    803              pBuf += 4;
   \   00009A   E5..         MOV     A,?V0 + 0
   \   00009C   2404         ADD     A,#0x4
   \   00009E   F5..         MOV     ?V0 + 0,A
   \   0000A0   E5..         MOV     A,?V0 + 1
   \   0000A2   12....       LCALL   ?Subroutine24 & 0xFFFF
    804              idx = BUILD_UINT16(pBuf[0], pBuf[1]);
   \                     ??CrossCallReturnLabel_31:
   \   0000A5   12....       LCALL   ?Subroutine6 & 0xFFFF
   \                     ??CrossCallReturnLabel_3:
   \   0000A8   F5..         MOV     ?V0 + 4,A
   \   0000AA   E4           CLR     A
   \   0000AB   39           ADDC    A,R1
   \   0000AC   F5..         MOV     ?V0 + 5,A
    805              len = pBuf[2];
   \   0000AE   85..82       MOV     DPL,?V0 + 0
   \   0000B1   85..83       MOV     DPH,?V0 + 1
   \   0000B4   A3           INC     DPTR
   \   0000B5   A3           INC     DPTR
   \   0000B6   E0           MOVX    A,@DPTR
   \   0000B7   F5..         MOV     ?V0 + 12,A
    806          
    807              if (len == 0)  // Indication to delete the afIncomingMSGPacket.
   \   0000B9   7045         JNZ     ??MT_AfDataRetrieve_2
    808              {
    809                if (pMtAfInMsgList == pItem)
   \   0000BB   12....       LCALL   ?Subroutine16 & 0xFFFF
   \                     ??CrossCallReturnLabel_138:
   \   0000BE   EC           MOV     A,R4
   \   0000BF   68           XRL     A,R0
   \   0000C0   7002         JNZ     ??MT_AfDataRetrieve_3
   \   0000C2   ED           MOV     A,R5
   \   0000C3   69           XRL     A,R1
   \                     ??MT_AfDataRetrieve_3:
   \   0000C4   8C82         MOV     DPL,R4
   \   0000C6   8D83         MOV     DPH,R5
   \   0000C8   7005         JNZ     ??MT_AfDataRetrieve_4
    810                {
    811                  pMtAfInMsgList = pItem->next;
   \   0000CA   12....       LCALL   ?Subroutine15 & 0xFFFF
    812                }
   \                     ??CrossCallReturnLabel_22:
   \   0000CD   8007         SJMP    ??MT_AfDataRetrieve_5
    813                else
    814                {
    815                  pPrev->next = pItem->next;
   \                     ??MT_AfDataRetrieve_4:
   \   0000CF   12....       LCALL   ??Subroutine59_0 & 0xFFFF
    816                }
   \                     ??CrossCallReturnLabel_135:
   \   0000D2   8C82         MOV     DPL,R4
   \   0000D4   8D83         MOV     DPH,R5
   \                     ??MT_AfDataRetrieve_5:
   \   0000D6   12....       LCALL   ?Subroutine33 & 0xFFFF
    817                (void)osal_mem_free(pItem);
   \                     ??CrossCallReturnLabel_58:
   \   0000D9                ; Setup parameters for call to function osal_mem_free
   \   0000D9   AA..         MOV     R2,?V0 + 2
   \   0000DB   AB..         MOV     R3,?V0 + 3
   \   0000DD   12....       LCALL   ??osal_mem_free?relay
    818                rtrn = afStatus_SUCCESS;
   \   0000E0   7A00         MOV     R2,#0x0
    819              }
    820              else if ((pRsp = osal_mem_alloc(len + MT_AF_RTV_HDR_SZ)) == NULL)
    821              {
    822                rtrn = afStatus_MEM_FAIL;
    823                len = 0;
    824              }
    825              else
    826              {
    827                pRsp[0] = ZSuccess;
    828                pRsp[1] = len;
    829                (void)osal_memcpy(pRsp + MT_AF_RTV_HDR_SZ, pItem->data+idx, len);
    830                MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_AF),
    831                                                     MT_AF_DATA_RETRIEVE, len + MT_AF_RTV_HDR_SZ, pRsp);
    832                (void)osal_mem_free(pRsp);
    833                return;
    834              }
    835            }
    836          
    837            pBuf[0] = rtrn;
   \                     ??MT_AfDataRetrieve_1:
   \   0000E2   EA           MOV     A,R2
   \   0000E3   85..82       MOV     DPL,?V0 + 0
   \   0000E6   85..83       MOV     DPH,?V0 + 1
   \   0000E9   F0           MOVX    @DPTR,A
    838            pBuf[1] = len;
   \   0000EA   A3           INC     DPTR
   \   0000EB   E5..         MOV     A,?V0 + 12
   \   0000ED   F0           MOVX    @DPTR,A
    839            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_AF),
    840                                                 MT_AF_DATA_RETRIEVE, MT_AF_RTV_HDR_SZ, pBuf);
   \   0000EE                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   0000EE   AC..         MOV     R4,?V0 + 0
   \   0000F0   AD..         MOV     R5,?V0 + 1
   \   0000F2   7B02         MOV     R3,#0x2
   \   0000F4   7A12         MOV     R2,#0x12
   \   0000F6   7964         MOV     R1,#0x64
   \   0000F8   12....       LCALL   ??MT_BuildAndSendZToolResponse?relay
    841          }
   \                     ??MT_AfDataRetrieve_6:
   \   0000FB   7F0D         MOV     R7,#0xd
   \   0000FD   02....       LJMP    ?BANKED_LEAVE_XDATA
   \                     ??MT_AfDataRetrieve_2:
   \   000100                ; Setup parameters for call to function osal_mem_alloc
   \   000100   2402         ADD     A,#0x2
   \   000102   FA           MOV     R2,A
   \   000103   E4           CLR     A
   \   000104   12....       LCALL   ??Subroutine49_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_84:
   \   000107   8A..         MOV     ?V0 + 6,R2
   \   000109   8B..         MOV     ?V0 + 7,R3
   \   00010B   AE..         MOV     R6,?V0 + 6
   \   00010D   AF..         MOV     R7,?V0 + 7
   \   00010F   EE           MOV     A,R6
   \   000110   4F           ORL     A,R7
   \   000111   7007         JNZ     ??MT_AfDataRetrieve_7
   \   000113   7A10         MOV     R2,#0x10
   \   000115   75..00       MOV     ?V0 + 12,#0x0
   \   000118   80C8         SJMP    ??MT_AfDataRetrieve_1
   \                     ??MT_AfDataRetrieve_7:
   \   00011A   8E82         MOV     DPL,R6
   \   00011C   8F83         MOV     DPH,R7
   \   00011E   E4           CLR     A
   \   00011F   F0           MOVX    @DPTR,A
   \   000120   A3           INC     DPTR
   \   000121   E5..         MOV     A,?V0 + 12
   \   000123   F0           MOVX    @DPTR,A
   \   000124                ; Setup parameters for call to function osal_memcpy
   \   000124   85..82       MOV     DPL,?V0 + 2
   \   000127   85..83       MOV     DPH,?V0 + 3
   \   00012A   A3           INC     DPTR
   \   00012B   A3           INC     DPTR
   \   00012C   E0           MOVX    A,@DPTR
   \   00012D   25..         ADD     A,?V0 + 4
   \   00012F   F5..         MOV     ?V0 + 0,A
   \   000131   A3           INC     DPTR
   \   000132   E0           MOVX    A,@DPTR
   \   000133   35..         ADDC    A,?V0 + 5
   \   000135   F5..         MOV     ?V0 + 1,A
   \   000137   75..00       MOV     ?V0 + 2,#0x0
   \   00013A   78..         MOV     R0,#?V0 + 0
   \   00013C   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   00013F   85....       MOV     ?V0 + 0,?V0 + 12
   \   000142   AC..         MOV     R4,?V0 + 0
   \   000144   7D00         MOV     R5,#0x0
   \   000146   EE           MOV     A,R6
   \   000147   2402         ADD     A,#0x2
   \   000149   0A           INC     R2
   \   00014A   0A           INC     R2
   \   00014B   EF           MOV     A,R7
   \   00014C   3400         ADDC    A,#0x0
   \   00014E   12....       LCALL   ?Subroutine35 & 0xFFFF
   \                     ??CrossCallReturnLabel_128:
   \   000151   12....       LCALL   ?DEALLOC_XSTACK8
   \   000154                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   000154   EE           MOV     A,R6
   \   000155   FC           MOV     R4,A
   \   000156   EF           MOV     A,R7
   \   000157   FD           MOV     R5,A
   \   000158   7402         MOV     A,#0x2
   \   00015A   25..         ADD     A,?V0 + 12
   \   00015C   FB           MOV     R3,A
   \   00015D   7A12         MOV     R2,#0x12
   \   00015F   7964         MOV     R1,#0x64
   \   000161   12....       LCALL   ??MT_BuildAndSendZToolResponse?relay
   \   000164                ; Setup parameters for call to function osal_mem_free
   \   000164   EE           MOV     A,R6
   \   000165   FA           MOV     R2,A
   \   000166   EF           MOV     A,R7
   \   000167   FB           MOV     R3,A
   \   000168   12....       LCALL   ??osal_mem_free?relay
   \   00016B   808E         SJMP    ??MT_AfDataRetrieve_6

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine35:
   \   000000   FB           MOV     R3,A
   \   000001                REQUIRE ??Subroutine58_0
   \   000001                ; // Fall through to label ??Subroutine58_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine24:
   \   000000   3400         ADDC    A,#0x0
   \   000002   F5..         MOV     ?V0 + 1,A
   \   000004   85..82       MOV     DPL,?V0 + 0
   \   000007   F583         MOV     DPH,A
   \   000009   22           RET
    842          
    843          /**************************************************************************************************
    844           * @fn          MT_AfDataStore
    845           *
    846           * @brief   Process AF Data Store command to incrementally store the data buffer for very large
    847           *          outgoing AF message.
    848           *
    849           * input parameters
    850           *
    851           * @param pBuf - pointer to the received buffer
    852           *
    853           * output parameters
    854           *
    855           * @param rtrn - AF-Status of the operation.
    856           *
    857           * @return      None.
    858           **************************************************************************************************
    859           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    860          void MT_AfDataStore(uint8 *pBuf)
   \                     MT_AfDataStore:
    861          {
   \   000000   74F5         MOV     A,#-0xb
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 11
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV     A,#-0x1
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
    862            uint16 idx;
    863            uint8 len, rtrn = afStatus_FAILED;
   \   00000A   85..82       MOV     DPL,?XSP + 0
   \   00000D   85..83       MOV     DPH,?XSP + 1
   \   000010   7401         MOV     A,#0x1
   \   000012   F0           MOVX    @DPTR,A
    864          
    865            pBuf += MT_RPC_FRAME_HDR_SZ;
   \   000013   EA           MOV     A,R2
   \   000014   2403         ADD     A,#0x3
   \   000016   0A           INC     R2
   \   000017   0A           INC     R2
   \   000018   0A           INC     R2
   \   000019   EB           MOV     A,R3
   \   00001A   12....       LCALL   ?Subroutine22 & 0xFFFF
    866            idx = BUILD_UINT16(pBuf[0], pBuf[1]);
   \                     ??CrossCallReturnLabel_28:
   \   00001D   F9           MOV     R1,A
   \   00001E   EC           MOV     A,R4
   \   00001F   2400         ADD     A,#0x0
   \   000021   FE           MOV     R6,A
   \   000022   E4           CLR     A
   \   000023   39           ADDC    A,R1
   \   000024   FF           MOV     R7,A
    867            len = pBuf[2];
   \   000025   8A82         MOV     DPL,R2
   \   000027   8B83         MOV     DPH,R3
   \   000029   A3           INC     DPTR
   \   00002A   A3           INC     DPTR
   \   00002B   E0           MOVX    A,@DPTR
   \   00002C   FC           MOV     R4,A
    868            pBuf += 3;
   \   00002D   EA           MOV     A,R2
   \   00002E   2403         ADD     A,#0x3
   \   000030   0A           INC     R2
   \   000031   0A           INC     R2
   \   000032   0A           INC     R2
   \   000033   EB           MOV     A,R3
   \   000034   3400         ADDC    A,#0x0
   \   000036   FB           MOV     R3,A
    869          
    870            if (pMtAfDataReq == NULL)
   \   000037   12....       LCALL   ?Subroutine3 & 0xFFFF
   \                     ??CrossCallReturnLabel_96:
   \   00003A   700B         JNZ     ??MT_AfDataStore_0
    871            {
    872              rtrn = afStatus_MEM_FAIL;
   \   00003C   85..82       MOV     DPL,?XSP + 0
   \   00003F   85..83       MOV     DPH,?XSP + 1
   \   000042   7410         MOV     A,#0x10
   \   000044   02....       LJMP    ??MT_AfDataStore_1 & 0xFFFF
    873            }
    874            else if (len == 0)  // Indication to send the message.
   \                     ??MT_AfDataStore_0:
   \   000047   EC           MOV     A,R4
   \   000048   706A         JNZ     ??MT_AfDataStore_2
    875            {
    876              rtrn = AF_DataRequest(&(pMtAfDataReq->dstAddr), pMtAfDataReq->epDesc, pMtAfDataReq->cId,
    877                                      pMtAfDataReq->dataLen,  pMtAfDataReq->data,
    878                                    &(pMtAfDataReq->transId), pMtAfDataReq->txOpts, pMtAfDataReq->radius);
   \   00004A                ; Setup parameters for call to function AF_DataRequest
   \   00004A   90....       MOV     DPTR,#pMtAfDataReq
   \   00004D   E0           MOVX    A,@DPTR
   \   00004E   2416         ADD     A,#0x16
   \   000050   12....       LCALL   ??Subroutine48_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_78:
   \   000053   F5..         MOV     ?V0 + 0,A
   \   000055   78..         MOV     R0,#?V0 + 0
   \   000057   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00005A   90....       MOV     DPTR,#pMtAfDataReq
   \   00005D   E0           MOVX    A,@DPTR
   \   00005E   2414         ADD     A,#0x14
   \   000060   F5..         MOV     ?V0 + 0,A
   \   000062   A3           INC     DPTR
   \   000063   E0           MOVX    A,@DPTR
   \   000064   3400         ADDC    A,#0x0
   \   000066   F5..         MOV     ?V0 + 1,A
   \   000068   78..         MOV     R0,#?V0 + 0
   \   00006A   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00006D   12....       LCALL   ?Subroutine10 & 0xFFFF
   \                     ??CrossCallReturnLabel_12:
   \   000070   12....       LCALL   ?PUSH_XSTACK8_X_TWO
   \   000073   90....       MOV     DPTR,#pMtAfDataReq
   \   000076   E0           MOVX    A,@DPTR
   \   000077   2412         ADD     A,#0x12
   \   000079   12....       LCALL   ??Subroutine60_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_145:
   \   00007C   12....       LCALL   ?PUSH_XSTACK8_X_TWO
   \   00007F   12....       LCALL   ?Subroutine5 & 0xFFFF
   \                     ??CrossCallReturnLabel_147:
   \   000082   12....       LCALL   ?PUSH_XSTACK8_X_TWO
   \   000085   90....       MOV     DPTR,#pMtAfDataReq
   \   000088   E0           MOVX    A,@DPTR
   \   000089   2415         ADD     A,#0x15
   \   00008B   12....       LCALL   ??Subroutine48_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_79:
   \   00008E   F9           MOV     R1,A
   \   00008F   90....       MOV     DPTR,#pMtAfDataReq
   \   000092   E0           MOVX    A,@DPTR
   \   000093   240E         ADD     A,#0xe
   \   000095   FA           MOV     R2,A
   \   000096   A3           INC     DPTR
   \   000097   E0           MOVX    A,@DPTR
   \   000098   12....       LCALL   ?Subroutine22 & 0xFFFF
   \                     ??CrossCallReturnLabel_29:
   \   00009B   FD           MOV     R5,A
   \   00009C   12....       LCALL   ?Subroutine13 & 0xFFFF
   \                     ??CrossCallReturnLabel_18:
   \   00009F   12....       LCALL   ??AF_DataRequest?relay
   \   0000A2   7409         MOV     A,#0x9
   \   0000A4   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000A7   E9           MOV     A,R1
   \   0000A8   85..82       MOV     DPL,?XSP + 0
   \   0000AB   85..83       MOV     DPH,?XSP + 1
   \   0000AE   F0           MOVX    @DPTR,A
    879              (void)osal_mem_free(pMtAfDataReq);
   \   0000AF                ; Setup parameters for call to function osal_mem_free
   \   0000AF   12....       LCALL   ?Subroutine9 & 0xFFFF
    880              pMtAfDataReq = NULL;
    881            }
   \                     ??CrossCallReturnLabel_10:
   \   0000B2   8024         SJMP    ??MT_AfDataStore_1
    882            else
    883            {
    884              (void)osal_memcpy(pMtAfDataReq->data+idx, pBuf, len);
   \                     ??MT_AfDataStore_2:
   \   0000B4                ; Setup parameters for call to function osal_memcpy
   \   0000B4   8A..         MOV     ?V0 + 0,R2
   \   0000B6   8B..         MOV     ?V0 + 1,R3
   \   0000B8   75..00       MOV     ?V0 + 2,#0x0
   \   0000BB   78..         MOV     R0,#?V0 + 0
   \   0000BD   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   0000C0   7D00         MOV     R5,#0x0
   \   0000C2   12....       LCALL   ?Subroutine10 & 0xFFFF
   \                     ??CrossCallReturnLabel_13:
   \   0000C5   E0           MOVX    A,@DPTR
   \   0000C6   2E           ADD     A,R6
   \   0000C7   FA           MOV     R2,A
   \   0000C8   A3           INC     DPTR
   \   0000C9   E0           MOVX    A,@DPTR
   \   0000CA   3F           ADDC    A,R7
   \   0000CB   12....       LCALL   ?Subroutine35 & 0xFFFF
   \                     ??CrossCallReturnLabel_129:
   \   0000CE   12....       LCALL   ?DEALLOC_XSTACK8
    885              rtrn = afStatus_SUCCESS;
   \   0000D1   85..82       MOV     DPL,?XSP + 0
   \   0000D4   85..83       MOV     DPH,?XSP + 1
   \   0000D7   E4           CLR     A
    886            }
   \                     ??MT_AfDataStore_1:
   \   0000D8   12....       LCALL   ?Subroutine30 & 0xFFFF
    887          
    888            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_AF),
    889                                                                          MT_AF_DATA_STORE, 1, &rtrn);
   \                     ??CrossCallReturnLabel_46:
   \   0000DB   7B01         MOV     R3,#0x1
   \   0000DD   7A11         MOV     R2,#0x11
   \   0000DF   7964         MOV     R1,#0x64
   \   0000E1   12....       LCALL   ??MT_BuildAndSendZToolResponse?relay
    890          }
   \   0000E4   7401         MOV     A,#0x1
   \   0000E6   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000E9   7F03         MOV     R7,#0x3
   \   0000EB   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine22:
   \   000000   3400         ADDC    A,#0x0
   \   000002   FB           MOV     R3,A
   \   000003   8A82         MOV     DPL,R2
   \   000005   8B83         MOV     DPH,R3
   \   000007   E0           MOVX    A,@DPTR
   \   000008   FC           MOV     R4,A
   \   000009   A3           INC     DPTR
   \   00000A   E0           MOVX    A,@DPTR
   \   00000B   22           RET

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??MT_AfExec?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_AfExec

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??MT_AfCommandProcessing?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_AfCommandProcessing

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??MT_AfRegister?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_AfRegister

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??MT_AfDataRequest?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_AfDataRequest

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??MT_AfDataRequestSrcRtg?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_AfDataRequestSrcRtg

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??MT_AfInterPanCtl?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_AfInterPanCtl

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??MT_AfDataConfirm?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_AfDataConfirm

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??MT_AfIncomingMsg?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_AfIncomingMsg

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??MT_AfDataRetrieve?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_AfDataRetrieve

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??MT_AfDataStore?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_AfDataStore
    891          
    892          /**************************************************************************************************
    893           * @fn          MT_AfAPSF_ConfigSet
    894           *
    895           * @brief       This function is the MT proxy for afAPSF_ConfigSet().
    896           *
    897           * input parameters
    898           *
    899           * @param       pBuf - Pointer to the received buffer.
    900           *
    901           * output parameters
    902           *
    903           * None.
    904           *
    905           * @return      None.
    906           */
    907          static void MT_AfAPSF_ConfigSet(uint8 *pBuf)
    908          {
    909            afAPSF_Config_t cfg = { pBuf[MT_RPC_POS_DAT0+1], pBuf[MT_RPC_POS_DAT0+2] };
    910            afStatus_t rtrn = afAPSF_ConfigSet(pBuf[MT_RPC_POS_DAT0], &cfg);
    911          
    912            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_AF),
    913                                                 MT_AF_APSF_CONFIG_SET, 1, (uint8 *)&rtrn);
    914          }
    915          
    916          /***************************************************************************************************
    917          ***************************************************************************************************/

   Maximum stack usage in bytes:

     Function                       ISTACK PSTACK XSTACK
     --------                       ------ ------ ------
     MT_AfCommandProcessing             1      0     12
       -> MT_AfRegister                 0      0     24
       -> MT_AfDataRequest              0      0     24
       -> MT_AfDataRequestSrcRtg        0      0     24
       -> MT_AfInterPanCtl              0      0     24
       -> MT_AfDataRetrieve             0      0     24
       -> MT_AfDataStore                0      0     24
       -> afAPSF_ConfigSet              0      0     24
       -> MT_BuildAndSendZToolResponse
                                        0      0     24
     MT_AfDataConfirm                   3      0      3
       -> MT_BuildAndSendZToolResponse
                                        4      0      6
     MT_AfDataRequest                   1      0     57
       -> osal_memcpy                   0      0     78
       -> afFindEndPointDesc            0      0     72
       -> osal_mem_alloc                0      0     72
       -> osal_memcpy                   0      0     78
       -> osal_start_timerEx            0      0     72
       -> osal_set_event                0      0     72
       -> AF_DataRequest                0      0     90
       -> MT_BuildAndSendZToolResponse
                                        0      0     72
     MT_AfDataRequestSrcRtg             1      0     58
       -> osal_memset                   0      0     68
       -> afFindEndPointDesc            0      0     68
       -> osal_mem_alloc                0      0     68
       -> AF_DataRequestSrcRtg          0      0     92
       -> osal_mem_free                 0      0     68
       -> MT_BuildAndSendZToolResponse
                                        0      0     68
     MT_AfDataRetrieve                  1      0     36
       -> osal_mem_free                 0      0     42
       -> MT_BuildAndSendZToolResponse
                                        0      0     42
       -> osal_mem_alloc                0      0     42
       -> osal_memcpy                   0      0     48
       -> MT_BuildAndSendZToolResponse
                                        0      0     42
       -> osal_mem_free                 0      0     42
     MT_AfDataStore                     1      0     33
       -> AF_DataRequest                0      0     42
       -> osal_mem_free                 0      0     24
       -> osal_memcpy                   0      0     30
       -> MT_BuildAndSendZToolResponse
                                        0      0     24
     MT_AfExec                          0      0      9
       -> osal_mem_free                 0      0     18
       -> osal_mem_free                 0      0     18
       -> osal_mem_free                 0      0     18
       -> osal_start_timerEx            0      0     18
       -> osal_set_event                0      0     18
     MT_AfIncomingMsg                   1      0     26
       -> StubAPS_InterPan              0      0     46
       -> osal_mem_alloc                0      0     46
       -> osal_mem_alloc                0      0     46
       -> osal_mem_free                 0      0     46
       -> osal_memcpy                   0      0     52
       -> osal_start_timerEx            0      0     46
       -> osal_set_event                0      0     46
       -> osal_memcpy                   0      0     52
       -> osal_memcpy                   0      0     52
       -> MT_BuildAndSendZToolResponse
                                        0      0     46
       -> osal_mem_free                 0      0     46
     MT_AfInterPanCtl                   1      0     24
       -> StubAPS_SetIntraPanChannel
                                        0      0     24
       -> StubAPS_SetInterPanChannel
                                        0      0     24
       -> afFindEndPointDesc            0      0     24
       -> StubAPS_RegisterApp           0      0     24
       -> StubAPS_InterPan              0      0     24
       -> MT_BuildAndSendZToolResponse
                                        0      0     24
     MT_AfRegister                      1      0     27
       -> osal_mem_alloc                0      0     30
       -> MT_BuildEndpointDesc          0      0     30
       -> afRegister                    0      0     30
       -> osal_mem_free                 0      0     30
       -> MT_BuildAndSendZToolResponse
                                        0      0     30


   Segment part sizes:

     Function/Label                 Bytes
     --------------                 -----
     pMtAfInMsgList                    2
     pMtAfDataReq                      2
     MT_AfExec                       116
     ?Subroutine0                      5
     ?Subroutine32                     9
     ?Subroutine21                     3
     ??Subroutine47_0                  5
     ?Subroutine4                      6
     ??Subroutine48_0                  5
     ?Subroutine17                    13
     ??Subroutine51_0                 18
     ?Subroutine3                      3
     ??Subroutine52_0                  8
     ??Subroutine55_0                  5
     ?Subroutine16                     3
     ??Subroutine59_0                  6
     ?Subroutine15                     9
     ?Subroutine9                     18
     ?Subroutine39                     7
     ?Subroutine46                     8
     MT_AfCommandProcessing          174
     MT_AfRegister                   139
     ?Subroutine40                     7
     ?Subroutine34                     6
     MT_AfDataRequest                625
     ?Subroutine36                    13
     ?Subroutine29                     6
     ?Subroutine27                    10
     ?Subroutine42                     9
     ?Subroutine23                     2
     ??Subroutine49_0                  7
     ?Subroutine19                     4
     ??Subroutine50_0                 15
     ?Subroutine12                     3
     ?Subroutine7                      7
     ?Subroutine38                     7
     ?Subroutine6                      6
     ?Subroutine33                     6
     ??Subroutine58_0                  6
     ?Subroutine11                     8
     ?Subroutine13                    13
     ?Subroutine10                    12
     ?Subroutine5                      6
     ??Subroutine60_0                  4
     MT_AfDataRequestSrcRtg          385
     ?Subroutine31                     7
     ?Subroutine25                     9
     ?Subroutine44                    10
     MT_AfInterPanCtl                183
     ??Subroutine54_0                  4
     MT_AfDataConfirm                 72
     ?Subroutine30                    12
     MT_AfIncomingMsg                614
     ?Subroutine28                     4
     ?Subroutine41                     9
     ?Subroutine26                     8
     ??Subroutine53_0                 10
     ?Subroutine20                     3
     ?Subroutine18                     4
     ?Subroutine45                     9
     ?Subroutine14                    17
     ?Subroutine43                     4
     ?Subroutine8                      4
     ?Subroutine37                    11
     ?Subroutine2                      2
     ??Subroutine56_0                 14
     ?Subroutine1                      3
     ??Subroutine57_0                  6
     MT_AfDataRetrieve               365
     ?Subroutine35                     1
     ?Subroutine24                    10
     MT_AfDataStore                  238
     ?Subroutine22                    12
     ??MT_AfExec?relay                 6
     ??MT_AfCommandProcessing?relay    6
     ??MT_AfRegister?relay             6
     ??MT_AfDataRequest?relay          6
     ??MT_AfDataRequestSrcRtg?relay    6
     ??MT_AfInterPanCtl?relay          6
     ??MT_AfDataConfirm?relay          6
     ??MT_AfIncomingMsg?relay          6
     ??MT_AfDataRetrieve?relay         6
     ??MT_AfDataStore?relay            6

 
 3 372 bytes in segment BANKED_CODE
    60 bytes in segment BANK_RELAYS
     4 bytes in segment XDATA_Z
 
 3 432 bytes of CODE  memory
     4 bytes of XDATA memory

Errors: none
Warnings: none
