###############################################################################
#                                                                             #
# IAR C/C++ Compiler V8.10.3.10338/W32 for 8051         05/Aug/2016  10:44:46 #
# Copyright 2004-2011 IAR Systems AB.                                         #
#                                                                             #
#    Core               =  plain                                              #
#    Code model         =  banked                                             #
#    Data model         =  large                                              #
#    Calling convention =  xdata reentrant                                    #
#    Constant location  =  data_rom                                           #
#    Dptr setup         =  1,16                                               #
#    Source file        =  G:\»ªÖÚÎÞÏß\12.´®¿ÚÍ¸´«Ö®ÎÞÏßQQ\ZStack-2.5.1a\Comp #
#                          onents\stack\zcl\zcl_se.c                          #
#    Command line       =  -f G:\»ªÖÚÎÞÏß\12.´®¿ÚÍ¸´«Ö®ÎÞÏßQQ\ZStack-2.5.1a\P #
#                          rojects\zstack\SE\SampleApp\CC2530DB\..\..\..\Tool #
#                          s\CC2530DB\f8wCoord.cfg (-DCPU32MHZ                #
#                          -DROOT=__near_func -DMAC_CFG_APP_PENDING_QUEUE=TRU #
#                          E -DMAC_CFG_TX_DATA_MAX=5 -DMAC_CFG_TX_MAX=8       #
#                          -DMAC_CFG_RX_MAX=5 -DZDO_COORDINATOR -DRTR_NWK)    #
#                          -f G:\»ªÖÚÎÞÏß\12.´®¿ÚÍ¸´«Ö®ÎÞÏßQQ\ZStack-2.5.1a\P #
#                          rojects\zstack\SE\SampleApp\CC2530DB\..\..\..\Tool #
#                          s\CC2530DB\f8wConfig.cfg (-DZIGBEEPRO -DSECURE=0   #
#                          -DZG_SECURE_DYNAMIC=0 -DREFLECTOR                  #
#                          -DDEFAULT_CHANLIST=0x02000000                      #
#                          -DZDAPP_CONFIG_PAN_ID=0x1688                       #
#                          -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MA #
#                          SK=0x007F -DBEACON_REQUEST_DELAY=100               #
#                          -DBEACON_REQ_DELAY_MASK=0x00FF                     #
#                          -DLINK_STATUS_JITTER_MASK=0x007F                   #
#                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_PO #
#                          LLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7             #
#                          -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3    #
#                          -DNWK_MAX_DATA_RETRIES=2                           #
#                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9         #
#                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40           #
#                          -DNWK_MAX_BINDING_ENTRIES=4                        #
#                          -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01,  #
#                          0x03, 0x05, 0x07, 0x09, 0x0B, 0x0D, 0x0F, 0x00,    #
#                          0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C, 0x0D}"         #
#                          -DMAC_MAX_FRAME_SIZE=116                           #
#                          -DZDNWKMGR_MIN_TRANSMISSIONS=20 "-DCONST=const     #
#                          __code" -DGENERIC=__generic                        #
#                          -DRFD_RCVC_ALWAYS_ON=FALSE -DPOLL_RATE=1000        #
#                          -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100    #
#                          -DREJOIN_POLL_RATE=440) -f                         #
#                          G:\»ªÖÚÎÞÏß\12.´®¿ÚÍ¸´«Ö®ÎÞÏßQQ\ZStack-2.5.1a\Proj #
#                          ects\zstack\SE\SampleApp\CC2530DB\..\..\..\Tools\C #
#                          C2530DB\f8wZCL.cfg (-DZCL_READ -DZCL_WRITE         #
#                          -DZCL_BASIC -DZCL_IDENTIFY -DZCL_ON_OFF            #
#                          -DZCL_KEY_ESTABLISH -DZCL_KEY_ESTABLISHMENT_KEY_GE #
#                          NERATE_TIMEOUT=4 -DZCL_KEY_ESTABLISHMENT_MAC_GENER #
#                          ATE_TIMEOUT=10 -DZCL_KEY_ESTABLISHMENT_EKEY_GENERA #
#                          TE_TIMEOUT=10 -DZCL_LOAD_CONTROL                   #
#                          -DZCL_SIMPLE_METERING -DZCL_PRICING -DZCL_MESSAGE  #
#                          -DZCL_TUNNELING -DZCL_TOU) -DZCL_DEVICE_MGMT       #
#                          G:\»ªÖÚÎÞÏß\12.´®¿ÚÍ¸´«Ö®ÎÞÏßQQ\ZStack-2.5.1a\Comp #
#                          onents\stack\zcl\zcl_se.c -D TC_LINKKEY_JOIN -D    #
#                          ZTOOL_P1 -D MT_TASK -D MT_APP_FUNC -D MT_SYS_FUNC  #
#                          -D LCD_SUPPORTED -D INT_HEAP_LEN=2450 -D NV_INIT   #
#                          -D xNV_RESTORE -D ZCL_REPORT -D INTER_PAN -D       #
#                          ZDSECMGR_TC_DEVICE_MAX=16 -D TEST_CERT_DATA -lC    #
#                          "G:\»ªÖÚÎÞÏß\12.´®¿ÚÍ¸´«Ö®ÎÞÏßQQ\ZStack-2.5.1a\Pro #
#                          jects\zstack\SE\SampleApp\CC2530DB\ESP -           #
#                          Coordinator\List\" -lA "G:\»ªÖÚÎÞÏß\12.´®¿ÚÍ¸´«Ö®Î #
#                          ÞÏßQQ\ZStack-2.5.1a\Projects\zstack\SE\SampleApp\C #
#                          C2530DB\ESP - Coordinator\List\" --diag_suppress   #
#                          Pe001,Pa010 -o "G:\»ªÖÚÎÞÏß\12.´®¿ÚÍ¸´«Ö®ÎÞÏßQQ\ZS #
#                          tack-2.5.1a\Projects\zstack\SE\SampleApp\CC2530DB\ #
#                          ESP - Coordinator\Obj\" -e --no_code_motion        #
#                          --debug --core=plain --dptr=16,1                   #
#                          --data_model=large --code_model=banked             #
#                          --calling_convention=xdata_reentrant               #
#                          --place_constants=data_rom --nr_virtual_regs 16    #
#                          -I G:\»ªÖÚÎÞÏß\12.´®¿ÚÍ¸´«Ö®ÎÞÏßQQ\ZStack-2.5.1a\P #
#                          rojects\zstack\SE\SampleApp\CC2530DB\ -I           #
#                          G:\»ªÖÚÎÞÏß\12.´®¿ÚÍ¸´«Ö®ÎÞÏßQQ\ZStack-2.5.1a\Proj #
#                          ects\zstack\SE\SampleApp\CC2530DB\..\Source\ -I    #
#                          G:\»ªÖÚÎÞÏß\12.´®¿ÚÍ¸´«Ö®ÎÞÏßQQ\ZStack-2.5.1a\Proj #
#                          ects\zstack\SE\SampleApp\CC2530DB\..\..\Source\    #
#                          -I G:\»ªÖÚÎÞÏß\12.´®¿ÚÍ¸´«Ö®ÎÞÏßQQ\ZStack-2.5.1a\P #
#                          rojects\zstack\SE\SampleApp\CC2530DB\..\..\..\ZMai #
#                          n\TI2530DB\ -I G:\»ªÖÚÎÞÏß\12.´®¿ÚÍ¸´«Ö®ÎÞÏßQQ\ZSt #
#                          ack-2.5.1a\Projects\zstack\SE\SampleApp\CC2530DB\. #
#                          .\..\..\..\..\Components\hal\include\ -I           #
#                          G:\»ªÖÚÎÞÏß\12.´®¿ÚÍ¸´«Ö®ÎÞÏßQQ\ZStack-2.5.1a\Proj #
#                          ects\zstack\SE\SampleApp\CC2530DB\..\..\..\..\..\C #
#                          omponents\hal\target\CC2530EB\ -I                  #
#                          G:\»ªÖÚÎÞÏß\12.´®¿ÚÍ¸´«Ö®ÎÞÏßQQ\ZStack-2.5.1a\Proj #
#                          ects\zstack\SE\SampleApp\CC2530DB\..\..\..\..\..\C #
#                          omponents\mac\include\ -I                          #
#                          G:\»ªÖÚÎÞÏß\12.´®¿ÚÍ¸´«Ö®ÎÞÏßQQ\ZStack-2.5.1a\Proj #
#                          ects\zstack\SE\SampleApp\CC2530DB\..\..\..\..\..\C #
#                          omponents\mac\high_level\ -I                       #
#                          G:\»ªÖÚÎÞÏß\12.´®¿ÚÍ¸´«Ö®ÎÞÏßQQ\ZStack-2.5.1a\Proj #
#                          ects\zstack\SE\SampleApp\CC2530DB\..\..\..\..\..\C #
#                          omponents\mac\low_level\srf04\ -I                  #
#                          G:\»ªÖÚÎÞÏß\12.´®¿ÚÍ¸´«Ö®ÎÞÏßQQ\ZStack-2.5.1a\Proj #
#                          ects\zstack\SE\SampleApp\CC2530DB\..\..\..\..\..\C #
#                          omponents\mac\low_level\srf04\single_chip\ -I      #
#                          G:\»ªÖÚÎÞÏß\12.´®¿ÚÍ¸´«Ö®ÎÞÏßQQ\ZStack-2.5.1a\Proj #
#                          ects\zstack\SE\SampleApp\CC2530DB\..\..\..\..\..\C #
#                          omponents\mt\ -I G:\»ªÖÚÎÞÏß\12.´®¿ÚÍ¸´«Ö®ÎÞÏßQQ\Z #
#                          Stack-2.5.1a\Projects\zstack\SE\SampleApp\CC2530DB #
#                          \..\..\..\..\..\Components\osal\include\ -I        #
#                          G:\»ªÖÚÎÞÏß\12.´®¿ÚÍ¸´«Ö®ÎÞÏßQQ\ZStack-2.5.1a\Proj #
#                          ects\zstack\SE\SampleApp\CC2530DB\..\..\..\..\..\C #
#                          omponents\services\saddr\ -I                       #
#                          G:\»ªÖÚÎÞÏß\12.´®¿ÚÍ¸´«Ö®ÎÞÏßQQ\ZStack-2.5.1a\Proj #
#                          ects\zstack\SE\SampleApp\CC2530DB\..\..\..\..\..\C #
#                          omponents\services\sdata\ -I                       #
#                          G:\»ªÖÚÎÞÏß\12.´®¿ÚÍ¸´«Ö®ÎÞÏßQQ\ZStack-2.5.1a\Proj #
#                          ects\zstack\SE\SampleApp\CC2530DB\..\..\..\..\..\C #
#                          omponents\stack\af\ -I G:\»ªÖÚÎÞÏß\12.´®¿ÚÍ¸´«Ö®ÎÞ #
#                          ÏßQQ\ZStack-2.5.1a\Projects\zstack\SE\SampleApp\CC #
#                          2530DB\..\..\..\..\..\Components\stack\nwk\ -I     #
#                          G:\»ªÖÚÎÞÏß\12.´®¿ÚÍ¸´«Ö®ÎÞÏßQQ\ZStack-2.5.1a\Proj #
#                          ects\zstack\SE\SampleApp\CC2530DB\..\..\..\..\..\C #
#                          omponents\stack\sapi\ -I                           #
#                          G:\»ªÖÚÎÞÏß\12.´®¿ÚÍ¸´«Ö®ÎÞÏßQQ\ZStack-2.5.1a\Proj #
#                          ects\zstack\SE\SampleApp\CC2530DB\..\..\..\..\..\C #
#                          omponents\stack\sec\ -I G:\»ªÖÚÎÞÏß\12.´®¿ÚÍ¸´«Ö®Î #
#                          ÞÏßQQ\ZStack-2.5.1a\Projects\zstack\SE\SampleApp\C #
#                          C2530DB\..\..\..\..\..\Components\stack\sys\ -I    #
#                          G:\»ªÖÚÎÞÏß\12.´®¿ÚÍ¸´«Ö®ÎÞÏßQQ\ZStack-2.5.1a\Proj #
#                          ects\zstack\SE\SampleApp\CC2530DB\..\..\..\..\..\C #
#                          omponents\stack\zcl\ -I G:\»ªÖÚÎÞÏß\12.´®¿ÚÍ¸´«Ö®Î #
#                          ÞÏßQQ\ZStack-2.5.1a\Projects\zstack\SE\SampleApp\C #
#                          C2530DB\..\..\..\..\..\Components\stack\zdo\ -I    #
#                          G:\»ªÖÚÎÞÏß\12.´®¿ÚÍ¸´«Ö®ÎÞÏßQQ\ZStack-2.5.1a\Proj #
#                          ects\zstack\SE\SampleApp\CC2530DB\..\..\..\..\..\C #
#                          omponents\zmac\ -I G:\»ªÖÚÎÞÏß\12.´®¿ÚÍ¸´«Ö®ÎÞÏßQQ #
#                          \ZStack-2.5.1a\Projects\zstack\SE\SampleApp\CC2530 #
#                          DB\..\..\..\..\..\Components\zmac\f8w\ -Ohz        #
#                          --require_prototypes                               #
#    List file          =  G:\»ªÖÚÎÞÏß\12.´®¿ÚÍ¸´«Ö®ÎÞÏßQQ\ZStack-2.5.1a\Proj #
#                          ects\zstack\SE\SampleApp\CC2530DB\ESP -            #
#                          Coordinator\List\zcl_se.lst                        #
#    Object file        =  G:\»ªÖÚÎÞÏß\12.´®¿ÚÍ¸´«Ö®ÎÞÏßQQ\ZStack-2.5.1a\Proj #
#                          ects\zstack\SE\SampleApp\CC2530DB\ESP -            #
#                          Coordinator\Obj\zcl_se.r51                         #
#                                                                             #
#                                                                             #
###############################################################################

G:\»ªÖÚÎÞÏß\12.´®¿ÚÍ¸´«Ö®ÎÞÏßQQ\ZStack-2.5.1a\Components\stack\zcl\zcl_se.c
      1          /**************************************************************************************************
      2            Filename:       zcl_se.c
      3            Revised:        $Date: 2012-03-11 00:25:21 -0800 (Sun, 11 Mar 2012) $
      4            Revision:       $Revision: 29708 $
      5          
      6            Description:    Zigbee Cluster Library - SE (Smart Energy) Profile.
      7          
      8          
      9            Copyright 2007-2012 Texas Instruments Incorporated. All rights reserved.
     10          
     11            IMPORTANT: Your use of this Software is limited to those specific rights
     12            granted under the terms of a software license agreement between the user
     13            who downloaded the software, his/her employer (which must be your employer)
     14            and Texas Instruments Incorporated (the "License").  You may not use this
     15            Software unless you agree to abide by the terms of the License. The License
     16            limits your use, and you acknowledge, that the Software may not be modified,
     17            copied or distributed unless embedded on a Texas Instruments microcontroller
     18            or used solely and exclusively in conjunction with a Texas Instruments radio
     19            frequency transceiver, which is integrated into your product.  Other than for
     20            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     21            works of, modify, distribute, perform, display or sell this Software and/or
     22            its documentation for any purpose.
     23          
     24            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     25            PROVIDED AS IS WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     26            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     27            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     28            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     29            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     30            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     31            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     32            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     33            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     34            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     35          
     36            Should you have any questions regarding your right to use this Software,
     37            contact Texas Instruments Incorporated at www.TI.com.
     38          **************************************************************************************************/
     39          
     40          
     41          /*********************************************************************
     42           * INCLUDES
     43           */
     44          #include "ZComDef.h"
     45          #include "OSAL.h"
     46          #include "zcl.h"
     47          #include "zcl_general.h"
     48          #include "zcl_se.h"
     49          #include "DebugTrace.h"
     50          
     51          #if defined ( INTER_PAN )
     52            #include "stub_aps.h"
     53          #endif
     54          
     55          
     56          #include "zcl_key_establish.h"
     57          
     58          
     59          /*********************************************************************
     60           * MACROS
     61           */
     62          // Clusters that are supported thru Inter-PAN communication
     63          #define INTER_PAN_CLUSTER( id )  ( (id) == ZCL_CLUSTER_ID_SE_PRICING || \
     64                                             (id) == ZCL_CLUSTER_ID_SE_MESSAGE )
     65          
     66          /*********************************************************************
     67           * CONSTANTS
     68           */
     69          
     70          /*********************************************************************
     71           * TYPEDEFS
     72           */
     73          typedef struct zclSECBRec
     74          {
     75            struct zclSECBRec          *next;
     76            uint8                       endpoint; // Used to link it into the endpoint descriptor
     77            zclSE_AppCallbacks_t       *CBs;     // Pointer to Callback function
     78          } zclSECBRec_t;
     79          
     80          /*********************************************************************
     81           * GLOBAL VARIABLES
     82           */
     83          
     84          /*********************************************************************
     85           * GLOBAL FUNCTIONS
     86           */
     87          
     88          /*********************************************************************
     89           * LOCAL VARIABLES
     90           */

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     91          static zclSECBRec_t *zclSECBs = (zclSECBRec_t *)NULL;
   \                     zclSECBs:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     92          static uint8 zclSEPluginRegisted = FALSE;
   \                     zclSEPluginRegisted:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
     93          
     94          /*********************************************************************
     95           * LOCAL FUNCTIONS
     96           */
     97          
     98          static ZStatus_t zclSE_HdlIncoming(  zclIncoming_t *pInMsg );
     99          static ZStatus_t zclSE_HdlInSpecificCommands( zclIncoming_t *pInMsg );
    100          
    101          #ifdef ZCL_SIMPLE_METERING
    102          static ZStatus_t zclSE_ProcessInSimpleMeteringCmds( zclIncoming_t *pInMsg, zclSE_AppCallbacks_t *pCBs );
    103          static ZStatus_t zclSE_ProcessInCmd_SimpleMeter_GetProfileCmd( zclIncoming_t *pInMsg, zclSE_AppCallbacks_t *pCBs );
    104          static ZStatus_t zclSE_ProcessInCmd_SimpleMeter_GetProfileRsp( zclIncoming_t *pInMsg, zclSE_AppCallbacks_t *pCBs );
    105          static ZStatus_t zclSE_ProcessInCmd_SimpleMeter_ReqMirrorCmd( zclIncoming_t *pInMsg, zclSE_AppCallbacks_t *pCBs );
    106          static ZStatus_t zclSE_ProcessInCmd_SimpleMeter_ReqMirrorRsp( zclIncoming_t *pInMsg, zclSE_AppCallbacks_t *pCBs );
    107          static ZStatus_t zclSE_ProcessInCmd_SimpleMeter_MirrorRemCmd( zclIncoming_t *pInMsg, zclSE_AppCallbacks_t *pCBs );
    108          static ZStatus_t zclSE_ProcessInCmd_SimpleMeter_MirrorRemRsp( zclIncoming_t *pInMsg, zclSE_AppCallbacks_t *pCBs );
    109          static ZStatus_t zclSE_ProcessInCmd_SimpleMeter_ReqFastPollModeCmd( zclIncoming_t *pInMsg, zclSE_AppCallbacks_t *pCBs );
    110          static ZStatus_t zclSE_ProcessInCmd_SimpleMeter_ReqFastPollModeRsp( zclIncoming_t *pInMsg, zclSE_AppCallbacks_t *pCBs );
    111          #ifdef SE_UK_EXT
    112          static ZStatus_t zclSE_ProcessInCmd_SimpleMeter_GetSnapshotCmd( zclIncoming_t *pInMsg, zclSE_AppCallbacks_t *pCBs );
    113          static ZStatus_t zclSE_ProcessInCmd_SimpleMeter_GetSnapshotRsp( zclIncoming_t *pInMsg, zclSE_AppCallbacks_t *pCBs );
    114          static ZStatus_t zclSE_ProcessInCmd_SimpleMeter_TakeSnapshotCmd( zclIncoming_t *pInMsg, zclSE_AppCallbacks_t *pCBs );
    115          static ZStatus_t zclSE_ProcessInCmd_SimpleMeter_MirrorReportAttrRsp( zclIncoming_t *pInMsg, zclSE_AppCallbacks_t *pCBs );
    116          #endif  // SE_UK_EXT
    117          #endif  // ZCL_SIMPLE_METERING
    118          
    119          #ifdef ZCL_PRICING
    120          static ZStatus_t zclSE_ProcessInPricingCmds( zclIncoming_t *pInMsg, zclSE_AppCallbacks_t *pCBs );
    121          static ZStatus_t zclSE_ProcessInCmd_Pricing_GetCurrentPrice( zclIncoming_t *pInMsg, zclSE_AppCallbacks_t *pCBs );
    122          static ZStatus_t zclSE_ProcessInCmd_Pricing_GetScheduledPrice( zclIncoming_t *pInMsg, zclSE_AppCallbacks_t *pCBs );
    123          static ZStatus_t zclSE_ProcessInCmd_Pricing_PublishPrice( zclIncoming_t *pInMsg, zclSE_AppCallbacks_t *pCBs );
    124          static ZStatus_t zclSE_ProcessInCmd_Pricing_PriceAcknowledgement( zclIncoming_t *pInMsg, zclSE_AppCallbacks_t *pCBs );
    125          static ZStatus_t zclSE_ProcessInCmd_Pricing_GetBlockPeriod( zclIncoming_t *pInMsg, zclSE_AppCallbacks_t *pCBs );
    126          static ZStatus_t zclSE_ProcessInCmd_Pricing_PublishBlockPeriod( zclIncoming_t *pInMsg, zclSE_AppCallbacks_t *pCBs );
    127          #ifdef SE_UK_EXT
    128          static ZStatus_t zclSE_ProcessInCmd_Pricing_PublishTariffInformation( zclIncoming_t *pInMsg, zclSE_AppCallbacks_t *pCBs );
    129          static ZStatus_t zclSE_ProcessInCmd_Pricing_PublishPriceMatrix( zclIncoming_t *pInMsg, zclSE_AppCallbacks_t *pCBs );
    130          static ZStatus_t zclSE_ProcessInCmd_Pricing_PublishBlockThreshold( zclIncoming_t *pInMsg, zclSE_AppCallbacks_t *pCBs );
    131          static ZStatus_t zclSE_ProcessInCmd_Pricing_PublishConversionFactor( zclIncoming_t *pInMsg, zclSE_AppCallbacks_t *pCBs );
    132          static ZStatus_t zclSE_ProcessInCmd_Pricing_PublishCalorificValue( zclIncoming_t *pInMsg, zclSE_AppCallbacks_t *pCBs );
    133          static ZStatus_t zclSE_ProcessInCmd_Pricing_PublishCO2Value( zclIncoming_t *pInMsg, zclSE_AppCallbacks_t *pCBs );
    134          static ZStatus_t zclSE_ProcessInCmd_Pricing_PublishCPPEvent( zclIncoming_t *pInMsg, zclSE_AppCallbacks_t *pCBs );
    135          static ZStatus_t zclSE_ProcessInCmd_Pricing_PublishBillingPeriod( zclIncoming_t *pInMsg, zclSE_AppCallbacks_t *pCBs );
    136          static ZStatus_t zclSE_ProcessInCmd_Pricing_PublishConsolidatedBill( zclIncoming_t *pInMsg, zclSE_AppCallbacks_t *pCBs );
    137          static ZStatus_t zclSE_ProcessInCmd_Pricing_PublishCreditPaymentInfo( zclIncoming_t *pInMsg, zclSE_AppCallbacks_t *pCBs );
    138          static ZStatus_t zclSE_ProcessInCmd_Pricing_GetTariffInformation( zclIncoming_t *pInMsg, zclSE_AppCallbacks_t *pCBs );
    139          static ZStatus_t zclSE_ProcessInCmd_Pricing_GetPriceMatrix( zclIncoming_t *pInMsg, zclSE_AppCallbacks_t *pCBs );
    140          static ZStatus_t zclSE_ProcessInCmd_Pricing_GetBlockThresholds( zclIncoming_t *pInMsg, zclSE_AppCallbacks_t *pCBs );
    141          static ZStatus_t zclSE_ProcessInCmd_Pricing_GetConversionFactor( zclIncoming_t *pInMsg, zclSE_AppCallbacks_t *pCBs );
    142          static ZStatus_t zclSE_ProcessInCmd_Pricing_GetCalorificValue( zclIncoming_t *pInMsg, zclSE_AppCallbacks_t *pCBs );
    143          static ZStatus_t zclSE_ProcessInCmd_Pricing_GetCO2Value( zclIncoming_t *pInMsg, zclSE_AppCallbacks_t *pCBs );
    144          static ZStatus_t zclSE_ProcessInCmd_Pricing_GetBillingPeriod( zclIncoming_t *pInMsg, zclSE_AppCallbacks_t *pCBs );
    145          static ZStatus_t zclSE_ProcessInCmd_Pricing_GetConsolidatedBill( zclIncoming_t *pInMsg, zclSE_AppCallbacks_t *pCBs );
    146          static ZStatus_t zclSE_ProcessInCmd_Pricing_CPPEventResponse( zclIncoming_t *pInMsg, zclSE_AppCallbacks_t *pCBs );
    147          #endif  // SE_UK_EXT
    148          #endif  // ZCL_PRICING
    149          
    150          #ifdef ZCL_MESSAGE
    151          static ZStatus_t zclSE_ProcessInMessageCmds( zclIncoming_t *pInMsg, zclSE_AppCallbacks_t *pCBs );
    152          static ZStatus_t zclSE_ProcessInCmd_Message_DisplayMessage( zclIncoming_t *pInMsg, zclSE_AppCallbacks_t *pCBs );
    153          static ZStatus_t zclSE_ProcessInCmd_Message_CancelMessage( zclIncoming_t *pInMsg, zclSE_AppCallbacks_t *pCBs );
    154          static ZStatus_t zclSE_ProcessInCmd_Message_GetLastMessage( zclIncoming_t *pInMsg, zclSE_AppCallbacks_t *pCBs );
    155          static ZStatus_t zclSE_ProcessInCmd_Message_MessageConfirmation( zclIncoming_t *pInMsg, zclSE_AppCallbacks_t *pCBs );
    156          #endif  // ZCL_MESSAGE
    157          
    158          #ifdef ZCL_LOAD_CONTROL
    159          static ZStatus_t zclSE_ProcessInLoadControlCmds( zclIncoming_t *pInMsg, zclSE_AppCallbacks_t *pCBs );
    160          static ZStatus_t zclSE_ProcessInCmd_LoadControl_LoadControlEvent( zclIncoming_t *pInMsg, zclSE_AppCallbacks_t *pCBs );
    161          static ZStatus_t zclSE_ProcessInCmd_LoadControl_CancelLoadControlEvent( zclIncoming_t *pInMsg, zclSE_AppCallbacks_t *pCBs );
    162          static ZStatus_t zclSE_ProcessInCmd_LoadControl_CancelAllLoadControlEvents( zclIncoming_t *pInMsg, zclSE_AppCallbacks_t *pCBs );
    163          static ZStatus_t zclSE_ProcessInCmd_LoadControl_ReportEventStatus( zclIncoming_t *pInMsg, zclSE_AppCallbacks_t *pCBs );
    164          static ZStatus_t zclSE_ProcessInCmd_LoadControl_GetScheduledEvents( zclIncoming_t *pInMsg,
    165                                                                              zclSE_AppCallbacks_t *pCBs );
    166          #endif  // ZCL_LOAD_CONTROL
    167          
    168          #ifdef ZCL_TUNNELING
    169          static ZStatus_t zclSE_ProcessInTunnelingCmds(zclIncoming_t *pInMsg, zclSE_AppCallbacks_t *pCBs);
    170          static ZStatus_t zclSE_ProcessInCmd_Tunneling_RequestTunnel(zclIncoming_t *pInMsg, zclSE_AppCallbacks_t *pCBs);
    171          static ZStatus_t zclSE_ProcessInCmd_Tunneling_ReqTunnelRsp(zclIncoming_t *pInMsg, zclSE_AppCallbacks_t *pCBs);
    172          static ZStatus_t zclSE_ProcessInCmd_Tunneling_CloseTunnel(zclIncoming_t *pInMsg, zclSE_AppCallbacks_t *pCBs);
    173          static ZStatus_t zclSE_ProcessInCmd_Tunneling_TransferData(zclIncoming_t *pInMsg, zclSE_AppCallbacks_t *pCBs);
    174          static ZStatus_t zclSE_ProcessInCmd_Tunneling_TransferDataError(zclIncoming_t *pInMsg, zclSE_AppCallbacks_t *pCBs);
    175          static ZStatus_t zclSE_ProcessInCmd_Tunneling_AckTransferData(zclIncoming_t *pInMsg, zclSE_AppCallbacks_t *pCBs);
    176          static ZStatus_t zclSE_ProcessInCmd_Tunneling_ReadyData(zclIncoming_t *pInMsg, zclSE_AppCallbacks_t *pCBs);
    177          #ifdef SE_UK_EXT
    178          static ZStatus_t zclSE_ProcessInCmd_Tunneling_GetSuppTunnelProt(zclIncoming_t *pInMsg, zclSE_AppCallbacks_t *pCBs);
    179          static ZStatus_t zclSE_ProcessInCmd_Tunneling_SuppTunnelProtRsp(zclIncoming_t *pInMsg, zclSE_AppCallbacks_t *pCBs);
    180          static ZStatus_t zclSE_ProcessInCmd_Tunneling_TunnelClosureNotification(zclIncoming_t *pInMsg, zclSE_AppCallbacks_t *pCBs);
    181          #endif  // SE_UK_EXT
    182          #endif  // ZCL_TUNNELING
    183          
    184          #ifdef ZCL_PREPAYMENT
    185          static ZStatus_t zclSE_ProcessInPrepaymentCmds( zclIncoming_t *pInMsg, zclSE_AppCallbacks_t *pCBs );
    186          static ZStatus_t zclSE_ProcessInCmd_Prepayment_SelAvailEmergencyCredit( zclIncoming_t *pInMsg, zclSE_AppCallbacks_t *pCBs);
    187          #ifndef SE_UK_EXT
    188          static ZStatus_t zclSE_ProcessInCmd_Prepayment_ChangeSupply( zclIncoming_t *pInMsg, zclSE_AppCallbacks_t *pCBs );
    189          static ZStatus_t zclSE_ProcessInCmd_Prepayment_SupplyStatusResponse( zclIncoming_t *pInMsg, zclSE_AppCallbacks_t *pCBs );
    190          #else // SE_UK_EXT
    191          static ZStatus_t zclSE_ProcessInCmd_Prepayment_ChangeDebt( zclIncoming_t *pInMsg, zclSE_AppCallbacks_t *pCBs );
    192          static ZStatus_t zclSE_ProcessInCmd_Prepayment_EmergencyCreditSetup( zclIncoming_t *pInMsg, zclSE_AppCallbacks_t *pCBs );
    193          static ZStatus_t zclSE_ProcessInCmd_Prepayment_ConsumerTopup( zclIncoming_t *pInMsg, zclSE_AppCallbacks_t *pCBs );
    194          static ZStatus_t zclSE_ProcessInCmd_Prepayment_CreditAdjustment( zclIncoming_t *pInMsg, zclSE_AppCallbacks_t *pCBs );
    195          static ZStatus_t zclSE_ProcessInCmd_Prepayment_ChangePaymentMode( zclIncoming_t *pInMsg, zclSE_AppCallbacks_t *pCBs );
    196          static ZStatus_t zclSE_ProcessInCmd_Prepayment_GetPrepaySnapshot( zclIncoming_t *pInMsg, zclSE_AppCallbacks_t *pCBs );
    197          static ZStatus_t zclSE_ProcessInCmd_Prepayment_GetTopupLog( zclIncoming_t *pInMsg, zclSE_AppCallbacks_t *pCBs );
    198          static ZStatus_t zclSE_ProcessInCmd_Prepayment_SetLowCreditWarningLevel( zclIncoming_t *pInMsg, zclSE_AppCallbacks_t *pCBs );
    199          static ZStatus_t zclSE_ProcessInCmd_Prepayment_GetDebtRepaymentLog( zclIncoming_t *pInMsg, zclSE_AppCallbacks_t *pCBs );
    200          static ZStatus_t zclSE_ProcessInCmd_Prepayment_GetPrepaySnapshotResponse( zclIncoming_t *pInMsg, zclSE_AppCallbacks_t *pCBs );
    201          static ZStatus_t zclSE_ProcessInCmd_Prepayment_ChangePaymentModeResponse( zclIncoming_t *pInMsg, zclSE_AppCallbacks_t *pCBs );
    202          static ZStatus_t zclSE_ProcessInCmd_Prepayment_ConsumerTopupResponse( zclIncoming_t *pInMsg, zclSE_AppCallbacks_t *pCBs );
    203          static ZStatus_t zclSE_ProcessInCmd_Prepayment_GetCommands( zclIncoming_t *pInMsg, zclSE_AppCallbacks_t *pCBs );
    204          static ZStatus_t zclSE_ProcessInCmd_Prepayment_PublishTopupLog( zclIncoming_t *pInMsg, zclSE_AppCallbacks_t *pCBs );
    205          static ZStatus_t zclSE_ProcessInCmd_Prepayment_PublishDebtLog( zclIncoming_t *pInMsg, zclSE_AppCallbacks_t *pCBs );
    206          #endif  // SE_UK_EXT
    207          #endif  // ZCL_PREPAYMENT
    208          
    209          #ifdef ZCL_TOU
    210          #ifdef SE_UK_EXT
    211          static ZStatus_t zclSE_ProcessInTouCmds( zclIncoming_t *pInMsg, zclSE_AppCallbacks_t *pCBs );
    212          static ZStatus_t zclSE_ProcessInCmd_Tou_PublishCalendar( zclIncoming_t *pInMsg, zclSE_AppCallbacks_t *pCBs );
    213          static ZStatus_t zclSE_ProcessInCmd_Tou_PublishDayProfile( zclIncoming_t *pInMsg, zclSE_AppCallbacks_t *pCBs );
    214          static ZStatus_t zclSE_ProcessInCmd_Tou_PublishWeekProfile( zclIncoming_t *pInMsg, zclSE_AppCallbacks_t *pCBs );
    215          static ZStatus_t zclSE_ProcessInCmd_Tou_PublishSeasons( zclIncoming_t *pInMsg, zclSE_AppCallbacks_t *pCBs );
    216          static ZStatus_t zclSE_ProcessInCmd_Tou_PublishSpecialDays( zclIncoming_t *pInMsg, zclSE_AppCallbacks_t *pCBs );
    217          static ZStatus_t zclSE_ProcessInCmd_Tou_GetCalendar( zclIncoming_t *pInMsg, zclSE_AppCallbacks_t *pCBs );
    218          static ZStatus_t zclSE_ProcessInCmd_Tou_GetDayProfiles( zclIncoming_t *pInMsg, zclSE_AppCallbacks_t *pCBs );
    219          static ZStatus_t zclSE_ProcessInCmd_Tou_GetWeekProfiles( zclIncoming_t *pInMsg, zclSE_AppCallbacks_t *pCBs );
    220          static ZStatus_t zclSE_ProcessInCmd_Tou_GetSeasons( zclIncoming_t *pInMsg, zclSE_AppCallbacks_t *pCBs );
    221          static ZStatus_t zclSE_ProcessInCmd_Tou_GetSpecialDays( zclIncoming_t *pInMsg, zclSE_AppCallbacks_t *pCBs );
    222          #endif  // SE_UK_EXT
    223          #endif  // ZCL_TOU
    224          
    225          #ifdef ZCL_DEVICE_MGMT
    226          #ifdef SE_UK_EXT
    227          static ZStatus_t zclSE_ProcessInDeviceMgmtCmds( zclIncoming_t *pInMsg, zclSE_AppCallbacks_t *pCBs );
    228          static ZStatus_t zclSE_ProcessInCmd_DeviceMgmt_GetChangeTenancy( zclIncoming_t *pInMsg, zclSE_AppCallbacks_t *pCBs );
    229          static ZStatus_t zclSE_ProcessInCmd_DeviceMgmt_GetChangeSupplier( zclIncoming_t *pInMsg, zclSE_AppCallbacks_t *pCBs );
    230          static ZStatus_t zclSE_ProcessInCmd_DeviceMgmt_GetChangeSupply( zclIncoming_t *pInMsg, zclSE_AppCallbacks_t *pCBs );
    231          static ZStatus_t zclSE_ProcessInCmd_DeviceMgmt_SupplyStatusResponse( zclIncoming_t *pInMsg, zclSE_AppCallbacks_t *pCBs );
    232          static ZStatus_t zclSE_ProcessInCmd_DeviceMgmt_GetPassword( zclIncoming_t *pInMsg, zclSE_AppCallbacks_t *pCBs );
    233          static ZStatus_t zclSE_ProcessInCmd_DeviceMgmt_PublishChangeTenancy( zclIncoming_t *pInMsg, zclSE_AppCallbacks_t *pCBs );
    234          static ZStatus_t zclSE_ProcessInCmd_DeviceMgmt_PublishChangeSupplier( zclIncoming_t *pInMsg, zclSE_AppCallbacks_t *pCBs );
    235          static ZStatus_t zclSE_ProcessInCmd_DeviceMgmt_ChangeSupply( zclIncoming_t *pInMsg, zclSE_AppCallbacks_t *pCBs );
    236          static ZStatus_t zclSE_ProcessInCmd_DeviceMgmt_ChangePassword( zclIncoming_t *pInMsg, zclSE_AppCallbacks_t *pCBs );
    237          static ZStatus_t zclSE_ProcessInCmd_DeviceMgmt_LocalChangeSupply( zclIncoming_t *pInMsg, zclSE_AppCallbacks_t *pCBs );
    238          #endif  // SE_UK_EXT
    239          #endif  // ZCL_DEVICE_MGMT
    240          
    241          #ifdef SE_UK_EXT
    242          static uint8 zclSE_Parse_UTF8String( uint8 *pBuf, UTF8String_t *pString, uint8 maxLen );
    243          #endif  // SE_UK_EXT
    244          
    245          #ifdef ZCL_SIMPLE_METERING
    246          /*********************************************************************
    247           * @fn      zclSE_SimpleMetering_Send_GetProfileCmd
    248           *
    249           * @brief   Call to send out a Get Profile Command
    250           *
    251           * @param   srcEP - Sending application's endpoint
    252           * @param   dstAddr - where you want the message to go
    253           * @param   channel - returned inteval (delivered @ 0; received @ 1)
    254           * @param   endTime - UTC time for the starting time of requested interval
    255           * @param   numOfPeriods - number of periods requested
    256           * @param   disableDefaultRsp - disable default response
    257           * @param   seqNum - ZCL sequence number
    258           *
    259           * @return  ZStatus_t
    260           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    261          ZStatus_t zclSE_SimpleMetering_Send_GetProfileCmd( uint8 srcEP, afAddrType_t *dstAddr,
   \                     zclSE_SimpleMetering_Send_GetProfileCmd:
    262                                                                uint8 channel, uint32 endTime, uint8 numOfPeriods,
    263                                                                uint8 disableDefaultRsp, uint8 seqNum )
    264          {
   \   000000   74EF         MOV     A,#-0x11
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 17
   \   000005                ; Auto size: 6
   \   000005   74FA         MOV     A,#-0x6
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   89..         MOV     ?V0 + 4,R1
   \   00000C   8A..         MOV     ?V0 + 6,R2
   \   00000E   8B..         MOV     ?V0 + 7,R3
   \   000010   EC           MOV     A,R4
   \   000011   FE           MOV     R6,A
   \   000012   ED           MOV     A,R5
   \   000013   FF           MOV     R7,A
   \   000014   7417         MOV     A,#0x17
   \   000016   12....       LCALL   ?XSTACK_DISP0_8
   \   000019   78..         MOV     R0,#?V0 + 0
   \   00001B   12....       LCALL   ?L_MOV_X
   \   00001E   741B         MOV     A,#0x1b
   \   000020   12....       LCALL   ?XSTACK_DISP0_8
   \   000023   E0           MOVX    A,@DPTR
   \   000024   F5..         MOV     ?V0 + 5,A
   \   000026   741C         MOV     A,#0x1c
   \   000028   12....       LCALL   ?XSTACK_DISP0_8
   \   00002B   E0           MOVX    A,@DPTR
   \   00002C   F5..         MOV     ?V0 + 8,A
    265            uint8 buf[6];
    266          
    267            buf[0] = channel;
   \   00002E   EE           MOV     A,R6
   \   00002F   85..82       MOV     DPL,?XSP + 0
   \   000032   85..83       MOV     DPH,?XSP + 1
   \   000035   F0           MOVX    @DPTR,A
    268            osal_buffer_uint32( &buf[1], endTime );
   \   000036                ; Setup parameters for call to function osal_buffer_uint32
   \   000036   78..         MOV     R0,#?V0 + 0
   \   000038   12....       LCALL   ?PUSH_XSTACK_I_FOUR
   \   00003B   7405         MOV     A,#0x5
   \   00003D   12....       LCALL   ?XSTACK_DISP0_8
   \   000040   12....       LCALL   ?Subroutine81 & 0xFFFF
   \                     ??CrossCallReturnLabel_260:
   \   000043   12....       LCALL   ?DEALLOC_XSTACK8
    269            buf[5] = numOfPeriods;
   \   000046   7405         MOV     A,#0x5
   \   000048   12....       LCALL   ?XSTACK_DISP0_8
   \   00004B   EF           MOV     A,R7
   \   00004C   12....       LCALL   ??Subroutine151_0 & 0xFFFF
    270          
    271            return zcl_SendCommand( srcEP, dstAddr, ZCL_CLUSTER_ID_SE_SIMPLE_METERING,
    272                                    COMMAND_SE_GET_PROFILE_CMD, TRUE,
    273                                    ZCL_FRAME_CLIENT_SERVER_DIR, disableDefaultRsp, 0, seqNum, 6, buf );
   \                     ??CrossCallReturnLabel_234:
   \   00004F   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000052   75..06       MOV     ?V0 + 0,#0x6
   \   000055   75..00       MOV     ?V0 + 1,#0x0
   \   000058   78..         MOV     R0,#?V0 + 0
   \   00005A   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00005D   E5..         MOV     A,?V0 + 8
   \   00005F   F5..         MOV     ?V0 + 0,A
   \   000061   78..         MOV     R0,#?V0 + 0
   \   000063   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000066   E4           CLR     A
   \   000067   F5..         MOV     ?V0 + 0,A
   \   000069   78..         MOV     R0,#?V0 + 0
   \   00006B   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00006E   E5..         MOV     A,?V0 + 5
   \   000070   F5..         MOV     ?V0 + 0,A
   \   000072   78..         MOV     R0,#?V0 + 0
   \   000074   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000077   75..00       MOV     ?V0 + 0,#0x0
   \   00007A   78..         MOV     R0,#?V0 + 0
   \   00007C   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00007F   75..01       MOV     ?V0 + 0,#0x1
   \   000082   78..         MOV     R0,#?V0 + 0
   \   000084   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000087   75..00       MOV     ?V0 + 0,#0x0
   \   00008A   78..         MOV     R0,#?V0 + 0
   \   00008C   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00008F   7C02         MOV     R4,#0x2
   \   000091   7D07         MOV     R5,#0x7
   \   000093   AA..         MOV     R2,?V0 + 6
   \   000095   AB..         MOV     R3,?V0 + 7
   \   000097   A9..         MOV     R1,?V0 + 4
   \   000099   12....       LCALL   ??Subroutine160_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_313:
   \   00009C   12....       LCALL   ?DEALLOC_XSTACK8
   \   00009F   7406         MOV     A,#0x6
   \   0000A1   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000A4                REQUIRE ?Subroutine0
   \   0000A4                ; // Fall through to label ?Subroutine0
    274          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   7F09         MOV     R7,#0x9
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine151_0:
   \   000000   F0           MOVX    @DPTR,A
   \   000001                ; Setup parameters for call to function zcl_SendCommand
   \   000001                ; Setup parameters for call to function zcl_SendCommand
   \   000001                ; Setup parameters for call to function zcl_SendCommand
   \   000001                ; Setup parameters for call to function zcl_SendCommand
   \   000001                ; Setup parameters for call to function zcl_SendCommand
   \   000001                ; Setup parameters for call to function zcl_SendCommand
   \   000001                ; Setup parameters for call to function zcl_SendCommand
   \   000001                ; Setup parameters for call to function zcl_SendCommand
   \   000001                ; Setup parameters for call to function zcl_SendCommand
   \   000001   85..82       MOV     DPL,?XSP + 0
   \   000004   85..83       MOV     DPH,?XSP + 1
   \   000007   8582..       MOV     ?V0 + 0,DPL
   \   00000A   8583..       MOV     ?V0 + 1,DPH
   \   00000D   78..         MOV     R0,#?V0 + 0
   \   00000F   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine81:
   \   000000   AA82         MOV     R2,DPL
   \   000002   AB83         MOV     R3,DPH
   \   000004                REQUIRE ??Subroutine156_0
   \   000004                ; // Fall through to label ??Subroutine156_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine156_0:
   \   000000   12....       LCALL   ??osal_buffer_uint32?relay
   \   000003   7404         MOV     A,#0x4
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine160_0:
   \   000000   12....       LCALL   ??zcl_SendCommand?relay
   \   000003   740B         MOV     A,#0xb
   \   000005   22           RET
    275          
    276          /*********************************************************************
    277           * @fn      zclSE_SimpleMetering_Send_GetProfileRsp
    278           *
    279           * @brief   Call to send out a Get Profile Response
    280           *
    281           * @param   srcEP - Sending application's endpoint
    282           * @param   dstAddr - where you want the message to go
    283           * @param   endTime - UTC time for the starting time of requested interval
    284           * @param   intervals - data buffer holding an array of interval data captured
    285           *          using the period
    286           *          specified by the ProfileIntervalPeriod attribute. Data is organized
    287           *          in a reverse chronological order, the most recent interval is
    288           *          transmitted first and the oldest interval is transmitted last.
    289           *          Invalid intervals intervals should be marked as 0xFFFFFF
    290           * @param   len - length of the intervals buffer
    291           * @param   disableDefaultRsp - disable default response
    292           * @param   seqNum - ZCL sequence number
    293           *
    294           * @return  ZStatus_t
    295           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    296          ZStatus_t zclSE_SimpleMetering_Send_GetProfileRsp( uint8 srcEP, afAddrType_t *dstAddr,
   \                     zclSE_SimpleMetering_Send_GetProfileRsp:
    297                                                             uint32 endTime, uint8 rspStatus, uint8 profileIntervalPeriod,
    298                                                             uint8 numOfPeriodDelivered, uint24 *intervals,
    299                                                             uint8 disableDefaultRsp, uint8 seqNum )
    300          {
   \   000000   74E9         MOV     A,#-0x17
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 23
   \   000005                ; Auto size: 2
   \   000005   74FE         MOV     A,#-0x2
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   85..82       MOV     DPL,?XSP + 0
   \   00000D   85..83       MOV     DPH,?XSP + 1
   \   000010   EA           MOV     A,R2
   \   000011   F0           MOVX    @DPTR,A
   \   000012   A3           INC     DPTR
   \   000013   EB           MOV     A,R3
   \   000014   F0           MOVX    @DPTR,A
   \   000015   89..         MOV     ?V0 + 14,R1
   \   000017   8C..         MOV     ?V0 + 13,R4
   \   000019   8D..         MOV     ?V0 + 12,R5
   \   00001B   7419         MOV     A,#0x19
   \   00001D   12....       LCALL   ?XSTACK_DISP0_8
   \   000020   78..         MOV     R0,#?V0 + 4
   \   000022   12....       LCALL   ?L_MOV_X
   \   000025   741D         MOV     A,#0x1d
   \   000027   12....       LCALL   ?XSTACK_DISP0_8
   \   00002A   E0           MOVX    A,@DPTR
   \   00002B   F5..         MOV     ?V0 + 9,A
   \   00002D   741E         MOV     A,#0x1e
   \   00002F   12....       LCALL   ?XSTACK_DISP0_8
   \   000032   E0           MOVX    A,@DPTR
   \   000033   FE           MOV     R6,A
   \   000034   A3           INC     DPTR
   \   000035   E0           MOVX    A,@DPTR
   \   000036   FF           MOV     R7,A
   \   000037   7420         MOV     A,#0x20
   \   000039   12....       LCALL   ?XSTACK_DISP0_8
   \   00003C   E0           MOVX    A,@DPTR
   \   00003D   F5..         MOV     ?V0 + 2,A
   \   00003F   7421         MOV     A,#0x21
   \   000041   12....       LCALL   ?XSTACK_DISP0_8
   \   000044   E0           MOVX    A,@DPTR
   \   000045   F5..         MOV     ?V0 + 3,A
    301            uint8 *buf;
    302            uint8 *pBuf;
    303            uint8 i;
    304            uint8 len;
    305            ZStatus_t status;
    306          
    307            // endTime + status + profileIntervalPeriod + numOfEntry + array
    308            len = 4 + 1 + 1 + 1 + (3 * numOfPeriodDelivered);
   \   000047   75F003       MOV     B,#0x3
   \   00004A   E5..         MOV     A,?V0 + 9
   \   00004C   A4           MUL     AB
   \   00004D   2407         ADD     A,#0x7
   \   00004F   F5..         MOV     ?V0 + 8,A
    309            buf = osal_mem_alloc( len );
   \   000051                ; Setup parameters for call to function osal_mem_alloc
   \   000051   FA           MOV     R2,A
   \   000052   7B00         MOV     R3,#0x0
   \   000054   12....       LCALL   ??Subroutine161_0 & 0xFFFF
    310            if ( buf == NULL )
   \                     ??CrossCallReturnLabel_328:
   \   000057   7005         JNZ     ??zclSE_SimpleMetering_Send_GetProfileRsp_0
    311            {
    312              return ( ZMemError );
   \   000059   7910         MOV     R1,#0x10
   \   00005B   02....       LJMP    ??CrossCallReturnLabel_213 & 0xFFFF
    313            }
    314          
    315            osal_buffer_uint32( buf, endTime );
   \                     ??zclSE_SimpleMetering_Send_GetProfileRsp_0:
   \   00005E                ; Setup parameters for call to function osal_buffer_uint32
   \   00005E   78..         MOV     R0,#?V0 + 4
   \   000060   12....       LCALL   ?PUSH_XSTACK_I_FOUR
   \   000063   12....       LCALL   ??Subroutine156_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_267:
   \   000066   12....       LCALL   ?DEALLOC_XSTACK8
    316            buf[4] = rspStatus;
   \   000069   85..82       MOV     DPL,?V0 + 0
   \   00006C   85..83       MOV     DPH,?V0 + 1
   \   00006F   A3           INC     DPTR
   \   000070   A3           INC     DPTR
   \   000071   A3           INC     DPTR
   \   000072   A3           INC     DPTR
   \   000073   E5..         MOV     A,?V0 + 13
   \   000075   12....       LCALL   ?Subroutine120 & 0xFFFF
    317            buf[5] = profileIntervalPeriod;
   \                     ??CrossCallReturnLabel_177:
   \   000078   E5..         MOV     A,?V0 + 12
   \   00007A   12....       LCALL   ?Subroutine77 & 0xFFFF
    318          
    319            // Starting of the array of uint24
    320            buf[6] = numOfPeriodDelivered;   // Number of entries in the array
   \                     ??CrossCallReturnLabel_120:
   \   00007D   E5..         MOV     A,?V0 + 9
   \   00007F   F0           MOVX    @DPTR,A
    321            pBuf = &buf[7];
   \   000080   E5..         MOV     A,?V0 + 0
   \   000082   2407         ADD     A,#0x7
   \   000084   FA           MOV     R2,A
   \   000085   E5..         MOV     A,?V0 + 1
   \   000087   3400         ADDC    A,#0x0
   \   000089   FB           MOV     R3,A
    322            for ( i = 0; i < numOfPeriodDelivered; i++ )
   \   00008A   75..00       MOV     ?V0 + 6,#0x0
   \   00008D   8012         SJMP    ??zclSE_SimpleMetering_Send_GetProfileRsp_1
    323            {
    324              pBuf = osal_buffer_uint24( pBuf, *intervals++ );
   \                     ??zclSE_SimpleMetering_Send_GetProfileRsp_2:
   \   00008F                ; Setup parameters for call to function osal_buffer_uint24
   \   00008F   8E82         MOV     DPL,R6
   \   000091   8F83         MOV     DPH,R7
   \   000093   12....       LCALL   ?PUSH_XSTACK8_X_FOUR
   \   000096   12....       LCALL   ?Subroutine96 & 0xFFFF
    325            }
   \                     ??CrossCallReturnLabel_151:
   \   000099   12....       LCALL   ?DEALLOC_XSTACK8
   \   00009C   12....       LCALL   ?Subroutine95 & 0xFFFF
   \                     ??CrossCallReturnLabel_148:
   \   00009F   05..         INC     ?V0 + 6
   \                     ??zclSE_SimpleMetering_Send_GetProfileRsp_1:
   \   0000A1   E5..         MOV     A,?V0 + 6
   \   0000A3   C3           CLR     C
   \   0000A4   95..         SUBB    A,?V0 + 9
   \   0000A6   40E7         JC      ??zclSE_SimpleMetering_Send_GetProfileRsp_2
    326          
    327            status = zcl_SendCommand( srcEP, dstAddr, ZCL_CLUSTER_ID_SE_SIMPLE_METERING,
    328                                      COMMAND_SE_GET_PROFILE_RSP, TRUE,
    329                                      ZCL_FRAME_SERVER_CLIENT_DIR, disableDefaultRsp, 0, seqNum, len, buf );
   \   0000A8                ; Setup parameters for call to function zcl_SendCommand
   \   0000A8   78..         MOV     R0,#?V0 + 0
   \   0000AA   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000AD   75..00       MOV     ?V0 + 9,#0x0
   \   0000B0   78..         MOV     R0,#?V0 + 8
   \   0000B2   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000B5   78..         MOV     R0,#?V0 + 3
   \   0000B7   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000BA   E4           CLR     A
   \   0000BB   F5..         MOV     ?V0 + 4,A
   \   0000BD   F5..         MOV     ?V0 + 5,A
   \   0000BF   78..         MOV     R0,#?V0 + 4
   \   0000C1   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000C4   78..         MOV     R0,#?V0 + 2
   \   0000C6   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000C9   75..01       MOV     ?V0 + 2,#0x1
   \   0000CC   78..         MOV     R0,#?V0 + 2
   \   0000CE   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000D1   78..         MOV     R0,#?V0 + 2
   \   0000D3   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000D6   75..00       MOV     ?V0 + 2,#0x0
   \   0000D9   78..         MOV     R0,#?V0 + 2
   \   0000DB   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000DE   7C02         MOV     R4,#0x2
   \   0000E0   7D07         MOV     R5,#0x7
   \   0000E2   740B         MOV     A,#0xb
   \   0000E4   12....       LCALL   ?XSTACK_DISP0_8
   \   0000E7   12....       LCALL   ?Subroutine57 & 0xFFFF
   \                     ??CrossCallReturnLabel_74:
   \   0000EA   A9..         MOV     R1,?V0 + 14
   \   0000EC   12....       LCALL   ??Subroutine160_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_314:
   \   0000EF   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000F2   12....       LCALL   ?Subroutine94 & 0xFFFF
    330          
    331            osal_mem_free( buf );
    332          
    333            return status;
   \                     ??CrossCallReturnLabel_213:
   \   0000F5   7402         MOV     A,#0x2
   \   0000F7   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000FA   7F0F         MOV     R7,#0xf
   \   0000FC   02....       LJMP    ?BANKED_LEAVE_XDATA
    334          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine94:
   \   000000   E9           MOV     A,R1
   \   000001   FE           MOV     R6,A
   \   000002                ; Setup parameters for call to function osal_mem_free
   \   000002                ; Setup parameters for call to function osal_mem_free
   \   000002                ; Setup parameters for call to function osal_mem_free
   \   000002                ; Setup parameters for call to function osal_mem_free
   \   000002                ; Setup parameters for call to function osal_mem_free
   \   000002                ; Setup parameters for call to function osal_mem_free
   \   000002   AA..         MOV     R2,?V0 + 0
   \   000004   AB..         MOV     R3,?V0 + 1
   \   000006                REQUIRE ??Subroutine148_0
   \   000006                ; // Fall through to label ??Subroutine148_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine148_0:
   \   000000   12....       LCALL   ??osal_mem_free?relay
   \   000003   EE           MOV     A,R6
   \   000004   F9           MOV     R1,A
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine96:
   \   000000   12....       LCALL   ??osal_buffer_uint24?relay
   \   000003   7404         MOV     A,#0x4
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine161_0:
   \   000000   12....       LCALL   ??osal_mem_alloc?relay
   \   000003   8A..         MOV     ?V0 + 0,R2
   \   000005   8B..         MOV     ?V0 + 1,R3
   \   000007   EA           MOV     A,R2
   \   000008   45..         ORL     A,?V0 + 1
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine57:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   FA           MOV     R2,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   FB           MOV     R3,A
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine95:
   \   000000   EE           MOV     A,R6
   \   000001   2404         ADD     A,#0x4
   \   000003   FE           MOV     R6,A
   \   000004   EF           MOV     A,R7
   \   000005   3400         ADDC    A,#0x0
   \   000007   FF           MOV     R7,A
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine77:
   \   000000   12....       LCALL   ?Subroutine120 & 0xFFFF
   \                     ??CrossCallReturnLabel_178:
   \   000003   A3           INC     DPTR
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine120:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   85..82       MOV     DPL,?V0 + 0
   \   000004   85..83       MOV     DPH,?V0 + 1
   \   000007   A3           INC     DPTR
   \   000008   A3           INC     DPTR
   \   000009   A3           INC     DPTR
   \   00000A   A3           INC     DPTR
   \   00000B   A3           INC     DPTR
   \   00000C   22           RET
    335          
    336          /*********************************************************************
    337           * @fn      zclSE_SimpleMetering_Send_ReqMirrorRsp
    338           *
    339           * @brief   Call to send out a Request Mirror Response
    340           *
    341           * @param   srcEP - Sending application's endpoint
    342           * @param   dstAddr - where you want the message to go
    343           *
    344           * @return  ZStatus_t
    345           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    346          ZStatus_t zclSE_SimpleMetering_Send_ReqMirrorRsp( uint8 srcEP, afAddrType_t *dstAddr,
   \                     zclSE_SimpleMetering_Send_ReqMirrorRsp:
    347                                                                uint16 endpointId,
    348                                                                uint8 disableDefaultRsp, uint8 seqNum )
    349          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 2
   \   000005   74FE         MOV     A,#-0x2
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   E9           MOV     A,R1
   \   00000B   FE           MOV     R6,A
   \   00000C   740C         MOV     A,#0xc
   \   00000E   12....       LCALL   ?XSTACK_DISP0_8
   \   000011   E0           MOVX    A,@DPTR
   \   000012   F9           MOV     R1,A
   \   000013   740D         MOV     A,#0xd
   \   000015   12....       LCALL   ?XSTACK_DISP0_8
   \   000018   12....       LCALL   ?Subroutine52 & 0xFFFF
    350            ZStatus_t status;
    351            uint8 buf[2];
    352          
    353            buf[0] = (uint8) endpointId ;
    354            buf[1] = (uint8)( endpointId >> 8 );
   \                     ??CrossCallReturnLabel_64:
   \   00001B   12....       LCALL   ?XSTACK_DISP0_8
   \   00001E   12....       LCALL   ?Subroutine68 & 0xFFFF
    355          
    356            status = zcl_SendCommand( srcEP, dstAddr, ZCL_CLUSTER_ID_SE_SIMPLE_METERING,
    357                                      COMMAND_SE_REQ_MIRROR_RSP, TRUE,
    358                                      ZCL_FRAME_CLIENT_SERVER_DIR, disableDefaultRsp, 0, seqNum, 2, buf );
    359          
    360            return status ;
   \                     ??CrossCallReturnLabel_232:
   \   000021   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000024   75..02       MOV     ?V0 + 0,#0x2
   \   000027   75..00       MOV     ?V0 + 1,#0x0
   \   00002A   78..         MOV     R0,#?V0 + 0
   \   00002C   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00002F   EF           MOV     A,R7
   \   000030   F5..         MOV     ?V0 + 0,A
   \   000032   78..         MOV     R0,#?V0 + 0
   \   000034   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000037   E4           CLR     A
   \   000038   F5..         MOV     ?V0 + 0,A
   \   00003A   78..         MOV     R0,#?V0 + 0
   \   00003C   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00003F   E9           MOV     A,R1
   \   000040   F5..         MOV     ?V0 + 0,A
   \   000042   78..         MOV     R0,#?V0 + 0
   \   000044   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000047   75..00       MOV     ?V0 + 0,#0x0
   \   00004A   78..         MOV     R0,#?V0 + 0
   \   00004C   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00004F   75..01       MOV     ?V0 + 0,#0x1
   \   000052   78..         MOV     R0,#?V0 + 0
   \   000054   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000057   02....       LJMP    ?Subroutine1 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine52:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   FF           MOV     R7,A
   \   000002   EC           MOV     A,R4
   \   000003   85..82       MOV     DPL,?XSP + 0
   \   000006   85..83       MOV     DPH,?XSP + 1
   \   000009   F0           MOVX    @DPTR,A
   \   00000A   7401         MOV     A,#0x1
   \   00000C   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine68:
   \   000000   ED           MOV     A,R5
   \   000001                REQUIRE ??Subroutine151_0
   \   000001                ; // Fall through to label ??Subroutine151_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000   78..         MOV     R0,#?V0 + 0
   \   000002   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000005   7C02         MOV     R4,#0x2
   \   000007   7D07         MOV     R5,#0x7
   \   000009   EE           MOV     A,R6
   \   00000A   F9           MOV     R1,A
   \   00000B   12....       LCALL   ??Subroutine160_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_325:
   \   00000E   12....       LCALL   ?DEALLOC_XSTACK8
   \   000011   7402         MOV     A,#0x2
   \   000013                REQUIRE ??Subroutine182_0
   \   000013                ; // Fall through to label ??Subroutine182_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine182_0:
   \   000000   12....       LCALL   ?DEALLOC_XSTACK8
   \   000003                REQUIRE ??Subroutine183_0
   \   000003                ; // Fall through to label ??Subroutine183_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine183_0:
   \   000000   7F02         MOV     R7,#0x2
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA
    361          }
    362          
    363          /*********************************************************************
    364           * @fn      zclSE_SimpleMetering_Send_RemMirrorRsp
    365           *
    366           * @brief   Call to send out a Remove Mirror Response
    367           *
    368           * @param   srcEP - Sending application's endpoint
    369           * @param   dstAddr - where you want the message to go
    370           *
    371           * @return  ZStatus_t
    372           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    373          ZStatus_t zclSE_SimpleMetering_Send_RemMirrorRsp( uint8 srcEP, afAddrType_t *dstAddr,
   \                     zclSE_SimpleMetering_Send_RemMirrorRsp:
    374                                                                uint16 endpointId,
    375                                                                uint8 disableDefaultRsp, uint8 seqNum )
    376          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 2
   \   000005   74FE         MOV     A,#-0x2
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   E9           MOV     A,R1
   \   00000B   FE           MOV     R6,A
   \   00000C   740C         MOV     A,#0xc
   \   00000E   12....       LCALL   ?XSTACK_DISP0_8
   \   000011   E0           MOVX    A,@DPTR
   \   000012   F9           MOV     R1,A
   \   000013   740D         MOV     A,#0xd
   \   000015   12....       LCALL   ?XSTACK_DISP0_8
   \   000018   12....       LCALL   ?Subroutine52 & 0xFFFF
    377            ZStatus_t status;
    378            uint8 buf[2];
    379          
    380            buf[0] = (uint8) endpointId ;
    381            buf[1] = (uint8)( endpointId >> 8 );
   \                     ??CrossCallReturnLabel_65:
   \   00001B   12....       LCALL   ?XSTACK_DISP0_8
   \   00001E   12....       LCALL   ?Subroutine68 & 0xFFFF
    382          
    383            status = zcl_SendCommand( srcEP, dstAddr, ZCL_CLUSTER_ID_SE_SIMPLE_METERING,
    384                                      COMMAND_SE_MIRROR_REM_RSP, TRUE,
    385                                      ZCL_FRAME_CLIENT_SERVER_DIR, disableDefaultRsp, 0, seqNum, 2, buf );
    386          
    387            return status ;
   \                     ??CrossCallReturnLabel_233:
   \   000021   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000024   75..02       MOV     ?V0 + 0,#0x2
   \   000027   75..00       MOV     ?V0 + 1,#0x0
   \   00002A   78..         MOV     R0,#?V0 + 0
   \   00002C   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00002F   EF           MOV     A,R7
   \   000030   F5..         MOV     ?V0 + 0,A
   \   000032   78..         MOV     R0,#?V0 + 0
   \   000034   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000037   E4           CLR     A
   \   000038   F5..         MOV     ?V0 + 0,A
   \   00003A   78..         MOV     R0,#?V0 + 0
   \   00003C   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00003F   E9           MOV     A,R1
   \   000040   F5..         MOV     ?V0 + 0,A
   \   000042   78..         MOV     R0,#?V0 + 0
   \   000044   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000047   75..00       MOV     ?V0 + 0,#0x0
   \   00004A   78..         MOV     R0,#?V0 + 0
   \   00004C   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00004F   75..01       MOV     ?V0 + 0,#0x1
   \   000052   78..         MOV     R0,#?V0 + 0
   \   000054   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000057   75..02       MOV     ?V0 + 0,#0x2
   \   00005A   02....       LJMP    ?Subroutine1 & 0xFFFF
    388          }
    389          
    390          
    391          /*********************************************************************
    392           * @fn      zclSE_SimpleMetering_Send_ReqFastPollModeCmd
    393           *
    394           * @brief   Call to send out a Request Fast Poll Mode Command
    395           *
    396           * @param   srcEP - Sending application's endpoint
    397           * @param   dstAddr - where you want the message to go
    398           * @param   pCmd - zclCCReqFastPollModeCmd_t command
    399           * @param   disableDefaultRsp - disable default response
    400           * @param   seqNum - ZCL sequence number
    401           *
    402           * @return  ZStatus_t
    403           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    404          ZStatus_t zclSE_SimpleMetering_Send_ReqFastPollModeCmd( uint8 srcEP, afAddrType_t *dstAddr,
   \                     zclSE_SimpleMetering_Send_ReqFastPollModeCmd:
    405                                                                  zclCCReqFastPollModeCmd_t *pCmd,
    406                                                                  uint8 disableDefaultRsp, uint8 seqNum )
    407          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 2
   \   000005   74FE         MOV     A,#-0x2
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   E9           MOV     A,R1
   \   00000B   FE           MOV     R6,A
   \   00000C   740C         MOV     A,#0xc
   \   00000E   12....       LCALL   ?XSTACK_DISP0_8
   \   000011   E0           MOVX    A,@DPTR
   \   000012   F9           MOV     R1,A
   \   000013   740D         MOV     A,#0xd
   \   000015   12....       LCALL   ?XSTACK_DISP0_8
   \   000018   E0           MOVX    A,@DPTR
   \   000019   FF           MOV     R7,A
    408            ZStatus_t status;
    409            uint8 buf[PACKET_LEN_SE_METERING_FAST_POLLING_REQ];
    410          
    411            buf[0] = pCmd->fastPollUpdatePeriod;
   \   00001A   12....       LCALL   ??Subroutine162_0 & 0xFFFF
    412            buf[1] = pCmd->duration;
   \                     ??CrossCallReturnLabel_335:
   \   00001D   C0E0         PUSH    A
   \   00001F   7401         MOV     A,#0x1
   \   000021   12....       LCALL   ?XSTACK_DISP0_8
   \   000024   D0E0         POP     A
   \   000026   12....       LCALL   ??Subroutine151_0 & 0xFFFF
    413          
    414            status = zcl_SendCommand( srcEP, dstAddr, ZCL_CLUSTER_ID_SE_SIMPLE_METERING,
    415                                      COMMAND_SE_REQ_FAST_POLL_MODE_CMD, TRUE,
    416                                      ZCL_FRAME_CLIENT_SERVER_DIR, disableDefaultRsp, 0, seqNum,
    417                                      PACKET_LEN_SE_METERING_FAST_POLLING_REQ, buf );
    418          
    419            return status ;
   \                     ??CrossCallReturnLabel_235:
   \   000029   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00002C   75..02       MOV     ?V0 + 0,#0x2
   \   00002F   75..00       MOV     ?V0 + 1,#0x0
   \   000032   78..         MOV     R0,#?V0 + 0
   \   000034   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000037   EF           MOV     A,R7
   \   000038   F5..         MOV     ?V0 + 0,A
   \   00003A   78..         MOV     R0,#?V0 + 0
   \   00003C   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00003F   E4           CLR     A
   \   000040   F5..         MOV     ?V0 + 0,A
   \   000042   78..         MOV     R0,#?V0 + 0
   \   000044   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000047   E9           MOV     A,R1
   \   000048   F5..         MOV     ?V0 + 0,A
   \   00004A   78..         MOV     R0,#?V0 + 0
   \   00004C   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00004F   75..00       MOV     ?V0 + 0,#0x0
   \   000052   78..         MOV     R0,#?V0 + 0
   \   000054   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000057   75..01       MOV     ?V0 + 0,#0x1
   \   00005A   78..         MOV     R0,#?V0 + 0
   \   00005C   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00005F   75..03       MOV     ?V0 + 0,#0x3
   \   000062   02....       LJMP    ?Subroutine1 & 0xFFFF
    420          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine162_0:
   \   000000   8C82         MOV     DPL,R4
   \   000002   8D83         MOV     DPH,R5
   \   000004   12....       LCALL   ?Subroutine117 & 0xFFFF
   \                     ??CrossCallReturnLabel_383:
   \   000007   8C82         MOV     DPL,R4
   \   000009   8D83         MOV     DPH,R5
   \   00000B   A3           INC     DPTR
   \   00000C   E0           MOVX    A,@DPTR
   \   00000D   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine117:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   85..82       MOV     DPL,?XSP + 0
   \   000004   85..83       MOV     DPH,?XSP + 1
   \   000007   F0           MOVX    @DPTR,A
   \   000008   22           RET
    421          
    422          /*********************************************************************
    423           * @fn      zclSE_SimpleMetering_Send_ReqFastPollModeRsp
    424           *
    425           * @brief   Call to send out a Request Fast Poll Mode Response
    426           *
    427           * @param   srcEP - Sending application's endpoint
    428           * @param   dstAddr - where you want the message to go
    429           * @param   pCmd - zclCCReqFastPollModeRsp_t command
    430           * @param   disableDefaultRsp - disable default response
    431           * @param   seqNum - ZCL sequence number
    432           *
    433           * @return  ZStatus_t
    434           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    435          ZStatus_t zclSE_SimpleMetering_Send_ReqFastPollModeRsp( uint8 srcEP, afAddrType_t *dstAddr,
   \                     zclSE_SimpleMetering_Send_ReqFastPollModeRsp:
    436                                                                  zclCCReqFastPollModeRsp_t *pCmd,
    437                                                                  uint8 disableDefaultRsp, uint8 seqNum )
    438          {
   \   000000   74F3         MOV     A,#-0xd
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 13
   \   000005                ; Auto size: 5
   \   000005   74FB         MOV     A,#-0x5
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   89..         MOV     ?V0 + 2,R1
   \   00000C   EA           MOV     A,R2
   \   00000D   FE           MOV     R6,A
   \   00000E   EB           MOV     A,R3
   \   00000F   FF           MOV     R7,A
   \   000010   7412         MOV     A,#0x12
   \   000012   12....       LCALL   ?XSTACK_DISP0_8
   \   000015   12....       LCALL   ?Subroutine39 & 0xFFFF
   \                     ??CrossCallReturnLabel_43:
   \   000018   12....       LCALL   ?XSTACK_DISP0_8
   \   00001B   12....       LCALL   ?Subroutine31 & 0xFFFF
    439            ZStatus_t status;
    440            uint8 buf[PACKET_LEN_SE_METERING_FAST_POLLING_RSP];
    441          
    442            buf[0] = pCmd->appliedUpdatePeriod;
   \                     ??CrossCallReturnLabel_29:
   \   00001E   12....       LCALL   ??Subroutine174_0 & 0xFFFF
    443            osal_buffer_uint32( &buf[1], pCmd->fastPollModeEndTime );
   \                     ??CrossCallReturnLabel_379:
   \   000021                ; Setup parameters for call to function osal_buffer_uint32
   \   000021   8C82         MOV     DPL,R4
   \   000023   8D83         MOV     DPH,R5
   \   000025   A3           INC     DPTR
   \   000026   12....       LCALL   ?PUSH_XSTACK8_X_FOUR
   \   000029   7405         MOV     A,#0x5
   \   00002B   12....       LCALL   ?XSTACK_DISP0_8
   \   00002E   12....       LCALL   ?Subroutine81 & 0xFFFF
   \                     ??CrossCallReturnLabel_261:
   \   000031   12....       LCALL   ?DEALLOC_XSTACK8
    444          
    445            status = zcl_SendCommand( srcEP, dstAddr, ZCL_CLUSTER_ID_SE_SIMPLE_METERING,
    446                                      COMMAND_SE_REQ_FAST_POLL_MODE_RSP, TRUE,
    447                                      ZCL_FRAME_SERVER_CLIENT_DIR, disableDefaultRsp, 0, seqNum,
    448                                      PACKET_LEN_SE_METERING_FAST_POLLING_RSP, buf );
    449          
    450            return status ;
   \   000034                ; Setup parameters for call to function zcl_SendCommand
   \   000034   85..82       MOV     DPL,?XSP + 0
   \   000037   85..83       MOV     DPH,?XSP + 1
   \   00003A   8582..       MOV     ?V0 + 0,DPL
   \   00003D   8583..       MOV     ?V0 + 1,DPH
   \   000040   78..         MOV     R0,#?V0 + 0
   \   000042   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000045   75..05       MOV     ?V0 + 0,#0x5
   \   000048   75..00       MOV     ?V0 + 1,#0x0
   \   00004B   78..         MOV     R0,#?V0 + 0
   \   00004D   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000050   E5..         MOV     A,?V0 + 4
   \   000052   F5..         MOV     ?V0 + 0,A
   \   000054   78..         MOV     R0,#?V0 + 0
   \   000056   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000059   E4           CLR     A
   \   00005A   F5..         MOV     ?V0 + 0,A
   \   00005C   78..         MOV     R0,#?V0 + 0
   \   00005E   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000061   E5..         MOV     A,?V0 + 3
   \   000063   F5..         MOV     ?V0 + 0,A
   \   000065   78..         MOV     R0,#?V0 + 0
   \   000067   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00006A   75..01       MOV     ?V0 + 0,#0x1
   \   00006D   78..         MOV     R0,#?V0 + 0
   \   00006F   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000072   78..         MOV     R0,#?V0 + 0
   \   000074   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000077   75..03       MOV     ?V0 + 0,#0x3
   \   00007A   78..         MOV     R0,#?V0 + 0
   \   00007C   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00007F   7C02         MOV     R4,#0x2
   \   000081   02....       LJMP    ??Subroutine152_0 & 0xFFFF
    451          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine39:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F5..         MOV     ?V0 + 3,A
   \   000003   7413         MOV     A,#0x13
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine31:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F5..         MOV     ?V0 + 4,A
   \   000003                ; Setup parameters for call to function osal_buffer_uint32
   \   000003                ; Setup parameters for call to function osal_buffer_uint32
   \   000003                ; Setup parameters for call to function osal_buffer_uint32
   \   000003                ; Setup parameters for call to function osal_buffer_uint32
   \   000003                ; Setup parameters for call to function osal_buffer_uint32
   \   000003   8C82         MOV     DPL,R4
   \   000005   8D83         MOV     DPH,R5
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine152_0:
   \   000000   12....       LCALL   ??Subroutine159_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_310:
   \   000003   12....       LCALL   ?DEALLOC_XSTACK8
   \   000006   7405         MOV     A,#0x5
   \   000008                REQUIRE ??Subroutine153_0
   \   000008                ; // Fall through to label ??Subroutine153_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine153_0:
   \   000000   12....       LCALL   ?DEALLOC_XSTACK8
   \   000003   7F05         MOV     R7,#0x5
   \   000005   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine159_0:
   \   000000   7D07         MOV     R5,#0x7
   \   000002   EE           MOV     A,R6
   \   000003   FA           MOV     R2,A
   \   000004   EF           MOV     A,R7
   \   000005   FB           MOV     R3,A
   \   000006   A9..         MOV     R1,?V0 + 2
   \   000008                REQUIRE ??Subroutine160_0
   \   000008                ; // Fall through to label ??Subroutine160_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine174_0:
   \   000000   12....       LCALL   ?Subroutine117 & 0xFFFF
   \                     ??CrossCallReturnLabel_384:
   \   000003   22           RET
    452          
    453          #ifdef SE_UK_EXT
    454          /*********************************************************************
    455           * @fn      zclSE_SimpleMetering_Send_GetSnapshotCmd
    456           *
    457           * @brief   Call to send out a Get Snapshot Command
    458           *
    459           * @param   srcEP - Sending application's endpoint
    460           * @param   dstAddr - where you want the message to go
    461           * @param   pCmd - zclCCReqGetSnapshotCmd_t command
    462           * @param   disableDefaultRsp - disable default response
    463           * @param   seqNum - ZCL sequence number
    464           *
    465           * @return  ZStatus_t
    466           */
    467          ZStatus_t zclSE_SimpleMetering_Send_GetSnapshotCmd( uint8 srcEP, afAddrType_t *dstAddr,
    468                                                              zclCCReqGetSnapshotCmd_t *pCmd,
    469                                                              uint8 disableDefaultRsp, uint8 seqNum )
    470          {
    471            ZStatus_t status;
    472            uint8 buf[PACKET_LEN_SE_GET_SNAPSHOT_CMD];
    473          
    474            osal_buffer_uint32( &buf[0], pCmd->StartTime );
    475            buf[4] = pCmd->NumberOfSnapshots;
    476            buf[5] = LO_UINT16( pCmd->SnapshotCause );
    477            buf[6] = HI_UINT16( pCmd->SnapshotCause );
    478          
    479            status = zcl_SendCommand( srcEP, dstAddr, ZCL_CLUSTER_ID_SE_SIMPLE_METERING,
    480                                      COMMAND_SE_GET_SNAPSHOT_CMD, TRUE,
    481                                      ZCL_FRAME_CLIENT_SERVER_DIR, disableDefaultRsp, 0, seqNum,
    482                                      PACKET_LEN_SE_GET_SNAPSHOT_CMD, buf );
    483          
    484            return status;
    485          }
    486          
    487          /*********************************************************************
    488           * @fn      zclSE_SimpleMetering_Send_GetSnapshotRsp
    489           *
    490           * @brief   Call to send out a Get Snapshot Response
    491           *
    492           * @param   srcEP - Sending application's endpoint
    493           * @param   dstAddr - where you want the message to go
    494           * @param   pCmd - zclCCReqGetSnapshotRsp_t command
    495           * @param   disableDefaultRsp - disable default response
    496           * @param   seqNum - ZCL sequence number
    497           *
    498           * @return  ZStatus_t
    499           */
    500          ZStatus_t zclSE_SimpleMetering_Send_GetSnapshotRsp( uint8 srcEP, afAddrType_t *dstAddr,
    501                                                              zclCCReqGetSnapshotRsp_t *pCmd,
    502                                                              uint8 disableDefaultRsp, uint8 seqNum )
    503          {
    504            uint8 *buf;
    505            uint8 *pBuf;
    506            uint16 bufLen;
    507            ZStatus_t status;
    508            uint16 payloadLen;
    509          
    510            if ( pCmd->pSnapshotPayload )
    511            {
    512              switch( pCmd->SnapshotPayloadType )
    513              {
    514                case SE_SNAPSHOT_TYPE_CSD_AND_RCV_REGISTER:
    515                  payloadLen = SE_SNAPSHOT_CSD_AND_RCV_REGISTER_PAYLOAD_LEN;
    516                  break;
    517          
    518                case SE_SNAPSHOT_TYPE_TOU_INFO_RECEIVED:
    519                case SE_SNAPSHOT_TYPE_TOU_INFO_DELIVERED:
    520                  // Len in Bytes = (uint8) + (NumberOfTiersInUse * (48BitIntegers))
    521                  payloadLen = 1 + (pCmd->pSnapshotPayload[0] * 6);
    522                  break;
    523          
    524                case SE_SNAPSHOT_TYPE_BLOCK_INFO_RECEIVED:
    525                case SE_SNAPSHOT_TYPE_BLOCK_INFO_DELIVERED:
    526                  // Len in Bytes = (uint8) + (NumberOfTiersAndBlockThresholdsInUse * (32BitIntegers))
    527                  payloadLen = 1 + (pCmd->pSnapshotPayload[0] * 4);
    528                  break;
    529          
    530                default:
    531                  return ZInvalidParameter;
    532              }
    533          
    534              bufLen = PACKET_LEN_SE_GET_SNAPSHOT_RSP + payloadLen;
    535          
    536              buf = osal_mem_alloc( bufLen );
    537              if ( buf == NULL )
    538              {
    539                return ( ZMemError );
    540              }
    541          
    542              pBuf = osal_buffer_uint32( buf, pCmd->IssuerEventID );
    543              pBuf = osal_buffer_uint32( pBuf, pCmd->SnapshotTime );
    544              *pBuf++ = pCmd->CommandIndex;
    545              *pBuf++ = LO_UINT16( pCmd->SnapshotCause );
    546              *pBuf++ = HI_UINT16( pCmd->SnapshotCause );
    547              *pBuf++ = pCmd->SnapshotPayloadType;
    548          
    549              osal_memcpy(pBuf, pCmd->pSnapshotPayload, payloadLen);
    550          
    551              status = zcl_SendCommand( srcEP, dstAddr, ZCL_CLUSTER_ID_SE_SIMPLE_METERING,
    552                                        COMMAND_SE_GET_SNAPSHOT_RSP, TRUE,
    553                                        ZCL_FRAME_SERVER_CLIENT_DIR, disableDefaultRsp, 0, seqNum,
    554                                        bufLen, buf );
    555          
    556              osal_mem_free( buf );
    557          
    558              return status;
    559            }
    560            else
    561            {
    562              return ZInvalidParameter;
    563            }
    564          }
    565          
    566          /*********************************************************************
    567           * @fn      zclSE_SimpleMetering_Send_TakeSnapshot
    568           *
    569           * @brief   Call to send out a Take Snapshot
    570           *
    571           * @param   srcEP - Sending application's endpoint
    572           * @param   dstAddr - where you want the message to go
    573           * @param   disableDefaultRsp - disable default response
    574           * @param   seqNum - ZCL sequence number
    575           *
    576           * @return  ZStatus_t
    577           */
    578          ZStatus_t zclSE_SimpleMetering_Send_TakeSnapshot( uint8 srcEP, afAddrType_t *dstAddr,
    579                                                            uint8 disableDefaultRsp, uint8 seqNum )
    580          {
    581            return zcl_SendCommand( srcEP, dstAddr, ZCL_CLUSTER_ID_SE_SIMPLE_METERING,
    582                                    COMMAND_SE_TAKE_SNAPSHOT_CMD, TRUE,
    583                                    ZCL_FRAME_CLIENT_SERVER_DIR, disableDefaultRsp, 0, seqNum,
    584                                    0, NULL );
    585          }
    586          
    587          /*********************************************************************
    588           * @fn      zclSE_SimpleMetering_Send_MirrorReportAttrRsp
    589           *
    590           * @brief   Call to send out a Mirror Report Attribute Response
    591           *
    592           * @param   srcEP - Sending application's endpoint
    593           * @param   dstAddr - where you want the message to go
    594           * @param   pCmd - zclCCReqMirrorReportAttrRsp_t command
    595           * @param   disableDefaultRsp - disable default response
    596           * @param   seqNum - ZCL sequence number
    597           *
    598           * @return  ZStatus_t
    599           */
    600          ZStatus_t zclSE_SimpleMetering_Send_MirrorReportAttrRsp( uint8 srcEP, afAddrType_t *dstAddr,
    601                                                                   zclCCReqMirrorReportAttrRsp_t *pCmd,
    602                                                                   uint8 disableDefaultRsp, uint8 seqNum )
    603          {
    604            ZStatus_t status;
    605            uint8 buf[PACKET_LEN_SE_MIRROR_REPORT_ATTR_RSP];
    606          
    607            buf[0] = pCmd->NotificationFlags;
    608            buf[1] = LO_UINT16( pCmd->PriceNotificationFlags );
    609            buf[2] = HI_UINT16( pCmd->PriceNotificationFlags );
    610            buf[3] = pCmd->CalendarNotificationFlags;
    611            buf[4] = LO_UINT16( pCmd->PrePayNotificationFlags );
    612            buf[5] = HI_UINT16( pCmd->PrePayNotificationFlags );
    613            buf[6] = pCmd->DeviceMgmtNotificationFlags;
    614          
    615            status = zcl_SendCommand( srcEP, dstAddr, ZCL_CLUSTER_ID_SE_SIMPLE_METERING,
    616                                      COMMAND_SE_MIRROR_REPORT_ATTR_RSP, TRUE,
    617                                      ZCL_FRAME_CLIENT_SERVER_DIR, disableDefaultRsp, 0, seqNum,
    618                                      PACKET_LEN_SE_MIRROR_REPORT_ATTR_RSP, buf );
    619          
    620            return status;
    621          }
    622          #endif  // SE_UK_EXT
    623          #endif  // ZCL_SIMPLE_METERING
    624          
    625          #ifdef ZCL_PRICING
    626          /*********************************************************************
    627           * @fn      zclSE_Pricing_Send_GetScheduledPrice
    628           *
    629           * @brief   Call to send out a Get Scheduled Price Command
    630           *
    631           * @param   srcEP - Sending application's endpoint
    632           * @param   dstAddr - where you want the message to go
    633           * @param   pCmd - command payload
    634           * @param   disableDefaultRsp - disable default response
    635           * @param   seqNum - ZCL sequence number
    636           *
    637           * @return  ZStatus_t
    638           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    639          ZStatus_t zclSE_Pricing_Send_GetScheduledPrice( uint8 srcEP, afAddrType_t *dstAddr,
   \                     zclSE_Pricing_Send_GetScheduledPrice:
    640                                                      zclCCGetScheduledPrice_t *pCmd,
    641                                                      uint8 disableDefaultRsp, uint8 seqNum )
    642          {
   \   000000   74F3         MOV     A,#-0xd
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 13
   \   000005                ; Auto size: 5
   \   000005   74FB         MOV     A,#-0x5
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   89..         MOV     ?V0 + 2,R1
   \   00000C   EA           MOV     A,R2
   \   00000D   FE           MOV     R6,A
   \   00000E   EB           MOV     A,R3
   \   00000F   FF           MOV     R7,A
   \   000010   8C..         MOV     ?V0 + 0,R4
   \   000012   8D..         MOV     ?V0 + 1,R5
   \   000014   7412         MOV     A,#0x12
   \   000016   12....       LCALL   ?XSTACK_DISP0_8
   \   000019   12....       LCALL   ?Subroutine39 & 0xFFFF
   \                     ??CrossCallReturnLabel_44:
   \   00001C   12....       LCALL   ?XSTACK_DISP0_8
   \   00001F   12....       LCALL   ?Subroutine31 & 0xFFFF
    643            uint8 buf[5];
    644            ZStatus_t status;
    645          
    646            osal_buffer_uint32( buf, pCmd->startTime );
   \                     ??CrossCallReturnLabel_30:
   \   000022   12....       LCALL   ?PUSH_XSTACK8_X_FOUR
   \   000025   7404         MOV     A,#0x4
   \   000027   12....       LCALL   ?XSTACK_DISP0_8
   \   00002A   12....       LCALL   ?Subroutine81 & 0xFFFF
   \                     ??CrossCallReturnLabel_262:
   \   00002D   12....       LCALL   ?DEALLOC_XSTACK8
    647            buf[4] = pCmd->numEvents;
   \   000030   85..82       MOV     DPL,?V0 + 0
   \   000033   85..83       MOV     DPH,?V0 + 1
   \   000036   A3           INC     DPTR
   \   000037   A3           INC     DPTR
   \   000038   A3           INC     DPTR
   \   000039   A3           INC     DPTR
   \   00003A   E0           MOVX    A,@DPTR
   \   00003B   C0E0         PUSH    A
   \   00003D   7404         MOV     A,#0x4
   \   00003F   12....       LCALL   ?XSTACK_DISP0_8
   \   000042   D0E0         POP     A
   \   000044   12....       LCALL   ??Subroutine151_0 & 0xFFFF
    648          
    649            status = zcl_SendCommand( srcEP, dstAddr, ZCL_CLUSTER_ID_SE_PRICING,
    650                                      COMMAND_SE_GET_SCHEDULED_PRICE, TRUE,
    651                                      ZCL_FRAME_CLIENT_SERVER_DIR, disableDefaultRsp, 0,
    652                                      seqNum, 5, buf );
    653          
    654            return status;
   \                     ??CrossCallReturnLabel_236:
   \   000047   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00004A   75..05       MOV     ?V0 + 0,#0x5
   \   00004D   75..00       MOV     ?V0 + 1,#0x0
   \   000050   78..         MOV     R0,#?V0 + 0
   \   000052   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000055   E5..         MOV     A,?V0 + 4
   \   000057   F5..         MOV     ?V0 + 0,A
   \   000059   78..         MOV     R0,#?V0 + 0
   \   00005B   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00005E   E4           CLR     A
   \   00005F   F5..         MOV     ?V0 + 0,A
   \   000061   78..         MOV     R0,#?V0 + 0
   \   000063   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000066   E5..         MOV     A,?V0 + 3
   \   000068   F5..         MOV     ?V0 + 0,A
   \   00006A   78..         MOV     R0,#?V0 + 0
   \   00006C   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00006F   75..00       MOV     ?V0 + 0,#0x0
   \   000072   78..         MOV     R0,#?V0 + 0
   \   000074   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000077   75..01       MOV     ?V0 + 0,#0x1
   \   00007A   78..         MOV     R0,#?V0 + 0
   \   00007C   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00007F   02....       LJMP    ?Subroutine2 & 0xFFFF
    655          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine2:
   \   000000   78..         MOV     R0,#?V0 + 0
   \   000002   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000005   7C00         MOV     R4,#0x0
   \   000007                REQUIRE ??Subroutine152_0
   \   000007                ; // Fall through to label ??Subroutine152_0
    656          
    657          /*********************************************************************
    658           * @fn      zclSE_Pricing_Send_PublishPrice
    659           *
    660           * @brief   Call to send out a Publish Price Command
    661           *
    662           * @param   srcEP - Sending application's endpoint
    663           * @param   dstAddr - where you want the message to go
    664           * @param   pCmd - command payload
    665           * @param   disableDefaultRsp - disable default response
    666           * @param   seqNum - ZCL sequence number
    667           *
    668           * @return  ZStatus_t
    669           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    670          ZStatus_t zclSE_Pricing_Send_PublishPrice( uint8 srcEP, afAddrType_t *dstAddr,
   \                     zclSE_Pricing_Send_PublishPrice:
    671                                                      zclCCPublishPrice_t *pCmd,
    672                                                      uint8 disableDefaultRsp, uint8 seqNum )
    673          {
   \   000000   74EC         MOV     A,#-0x14
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 20
   \   000005                ; Auto size: 0
   \   000005   89..         MOV     ?V0 + 11,R1
   \   000007   8A..         MOV     ?V0 + 8,R2
   \   000009   8B..         MOV     ?V0 + 9,R3
   \   00000B   EC           MOV     A,R4
   \   00000C   FE           MOV     R6,A
   \   00000D   ED           MOV     A,R5
   \   00000E   FF           MOV     R7,A
   \   00000F   7414         MOV     A,#0x14
   \   000011   12....       LCALL   ?XSTACK_DISP0_8
   \   000014   E0           MOVX    A,@DPTR
   \   000015   F5..         MOV     ?V0 + 10,A
   \   000017   7415         MOV     A,#0x15
   \   000019   12....       LCALL   ?XSTACK_DISP0_8
   \   00001C   E0           MOVX    A,@DPTR
   \   00001D   F5..         MOV     ?V0 + 7,A
    674            uint8 *buf;
    675            uint8 *pBuf;
    676            uint16 bufLen;
    677            ZStatus_t status;
    678          
    679            bufLen = PACKET_LEN_SE_PUBLISH_PRICE + pCmd->rateLabel.strLen;
   \   00001F   8E82         MOV     DPL,R6
   \   000021   8F83         MOV     DPH,R7
   \   000023   A3           INC     DPTR
   \   000024   A3           INC     DPTR
   \   000025   A3           INC     DPTR
   \   000026   A3           INC     DPTR
   \   000027   E0           MOVX    A,@DPTR
   \   000028   242A         ADD     A,#0x2a
   \   00002A   12....       LCALL   ?Subroutine82 & 0xFFFF
    680            buf = osal_mem_alloc( bufLen );
    681            if ( buf == NULL )
   \                     ??CrossCallReturnLabel_326:
   \   00002D   7005         JNZ     ??zclSE_Pricing_Send_PublishPrice_0
    682            {
    683              return ( ZMemError );
   \   00002F   7910         MOV     R1,#0x10
   \   000031   02....       LJMP    ??CrossCallReturnLabel_214 & 0xFFFF
    684            }
    685          
    686            pBuf = osal_buffer_uint32( buf, pCmd->providerId );
   \                     ??zclSE_Pricing_Send_PublishPrice_0:
   \   000034                ; Setup parameters for call to function osal_buffer_uint32
   \   000034   8E82         MOV     DPL,R6
   \   000036   8F83         MOV     DPH,R7
   \   000038   12....       LCALL   ?PUSH_XSTACK8_X_FOUR
   \   00003B   12....       LCALL   ??Subroutine156_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_268:
   \   00003E   12....       LCALL   ?DEALLOC_XSTACK8
    687            *pBuf++ = pCmd->rateLabel.strLen;
   \   000041   EE           MOV     A,R6
   \   000042   2404         ADD     A,#0x4
   \   000044   FC           MOV     R4,A
   \   000045   EF           MOV     A,R7
   \   000046   3400         ADDC    A,#0x0
   \   000048   FD           MOV     R5,A
   \   000049   8C82         MOV     DPL,R4
   \   00004B   8D83         MOV     DPH,R5
   \   00004D   12....       LCALL   ??Subroutine154_0 & 0xFFFF
    688            pBuf = osal_memcpy( pBuf, pCmd->rateLabel.pStr, pCmd->rateLabel.strLen );
   \                     ??CrossCallReturnLabel_241:
   \   000050                ; Setup parameters for call to function osal_memcpy
   \   000050   8E82         MOV     DPL,R6
   \   000052   8F83         MOV     DPH,R7
   \   000054   A3           INC     DPTR
   \   000055   A3           INC     DPTR
   \   000056   A3           INC     DPTR
   \   000057   A3           INC     DPTR
   \   000058   A3           INC     DPTR
   \   000059   E0           MOVX    A,@DPTR
   \   00005A   F5..         MOV     ?V0 + 4,A
   \   00005C   A3           INC     DPTR
   \   00005D   E0           MOVX    A,@DPTR
   \   00005E   F5..         MOV     ?V0 + 5,A
   \   000060   75..00       MOV     ?V0 + 6,#0x0
   \   000063   78..         MOV     R0,#?V0 + 4
   \   000065   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   000068   12....       LCALL   ?Subroutine59 & 0xFFFF
   \                     ??CrossCallReturnLabel_79:
   \   00006B   12....       LCALL   ?DEALLOC_XSTACK8
    689            pBuf = osal_buffer_uint32( pBuf, pCmd->issuerEventId );
   \   00006E                ; Setup parameters for call to function osal_buffer_uint32
   \   00006E   8E82         MOV     DPL,R6
   \   000070   8F83         MOV     DPH,R7
   \   000072   A3           INC     DPTR
   \   000073   A3           INC     DPTR
   \   000074   A3           INC     DPTR
   \   000075   A3           INC     DPTR
   \   000076   A3           INC     DPTR
   \   000077   A3           INC     DPTR
   \   000078   A3           INC     DPTR
   \   000079   12....       LCALL   ?PUSH_XSTACK8_X_FOUR
   \   00007C   12....       LCALL   ??Subroutine156_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_269:
   \   00007F   12....       LCALL   ?DEALLOC_XSTACK8
    690            pBuf = osal_buffer_uint32( pBuf, pCmd->currentTime );
   \   000082                ; Setup parameters for call to function osal_buffer_uint32
   \   000082   EE           MOV     A,R6
   \   000083   240B         ADD     A,#0xb
   \   000085   F582         MOV     DPL,A
   \   000087   EF           MOV     A,R7
   \   000088   12....       LCALL   ??Subroutine193_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_502:
   \   00008B   12....       LCALL   ?PUSH_XSTACK8_X_FOUR
   \   00008E   12....       LCALL   ??Subroutine156_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_270:
   \   000091   12....       LCALL   ?DEALLOC_XSTACK8
    691            *pBuf++ = pCmd->unitOfMeasure;
   \   000094   EE           MOV     A,R6
   \   000095   240F         ADD     A,#0xf
   \   000097   12....       LCALL   ?Subroutine28 & 0xFFFF
    692            *pBuf++ = LO_UINT16( pCmd->currency );
   \                     ??CrossCallReturnLabel_20:
   \   00009A   2410         ADD     A,#0x10
   \   00009C   F8           MOV     R0,A
   \   00009D   EF           MOV     A,R7
   \   00009E   12....       LCALL   ?Subroutine90 & 0xFFFF
   \                     ??CrossCallReturnLabel_143:
   \   0000A1   12....       LCALL   ?Subroutine64 & 0xFFFF
   \                     ??CrossCallReturnLabel_89:
   \   0000A4   12....       LCALL   ??Subroutine149_0 & 0xFFFF
    693            *pBuf++ = HI_UINT16( pCmd->currency );
    694            *pBuf++ = pCmd->priceTrailingDigit;
   \                     ??CrossCallReturnLabel_226:
   \   0000A7   2412         ADD     A,#0x12
   \   0000A9   F582         MOV     DPL,A
   \   0000AB   EF           MOV     A,R7
   \   0000AC   12....       LCALL   ??Subroutine193_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_503:
   \   0000AF   12....       LCALL   ??Subroutine150_0 & 0xFFFF
    695            *pBuf++ = pCmd->numberOfPriceTiers;
   \                     ??CrossCallReturnLabel_227:
   \   0000B2   2413         ADD     A,#0x13
   \   0000B4   F582         MOV     DPL,A
   \   0000B6   EF           MOV     A,R7
   \   0000B7   12....       LCALL   ??Subroutine193_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_504:
   \   0000BA   12....       LCALL   ??Subroutine150_0 & 0xFFFF
    696            pBuf = osal_buffer_uint32( pBuf, pCmd->startTime );
   \                     ??CrossCallReturnLabel_228:
   \   0000BD   2414         ADD     A,#0x14
   \   0000BF   F582         MOV     DPL,A
   \   0000C1   EF           MOV     A,R7
   \   0000C2   12....       LCALL   ??Subroutine193_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_505:
   \   0000C5   12....       LCALL   ?PUSH_XSTACK8_X_FOUR
   \   0000C8   12....       LCALL   ??Subroutine156_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_271:
   \   0000CB   12....       LCALL   ?DEALLOC_XSTACK8
    697            *pBuf++ = LO_UINT16( pCmd->durationInMinutes );
   \   0000CE   EE           MOV     A,R6
   \   0000CF   2418         ADD     A,#0x18
   \   0000D1   12....       LCALL   ?Subroutine16 & 0xFFFF
    698            *pBuf++ = HI_UINT16( pCmd->durationInMinutes );
    699            pBuf = osal_buffer_uint32( pBuf, pCmd->price );
   \                     ??CrossCallReturnLabel_224:
   \   0000D4   241A         ADD     A,#0x1a
   \   0000D6   F582         MOV     DPL,A
   \   0000D8   EF           MOV     A,R7
   \   0000D9   12....       LCALL   ??Subroutine193_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_506:
   \   0000DC   12....       LCALL   ?PUSH_XSTACK8_X_FOUR
   \   0000DF   12....       LCALL   ??Subroutine156_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_272:
   \   0000E2   12....       LCALL   ?DEALLOC_XSTACK8
    700            *pBuf++ = pCmd->priceRatio;
   \   0000E5   EE           MOV     A,R6
   \   0000E6   241E         ADD     A,#0x1e
   \   0000E8   12....       LCALL   ?Subroutine28 & 0xFFFF
    701            pBuf = osal_buffer_uint32( pBuf, pCmd->generationPrice );
   \                     ??CrossCallReturnLabel_21:
   \   0000EB   241F         ADD     A,#0x1f
   \   0000ED   F582         MOV     DPL,A
   \   0000EF   EF           MOV     A,R7
   \   0000F0   12....       LCALL   ??Subroutine193_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_507:
   \   0000F3   12....       LCALL   ?PUSH_XSTACK8_X_FOUR
   \   0000F6   12....       LCALL   ??Subroutine156_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_273:
   \   0000F9   12....       LCALL   ?DEALLOC_XSTACK8
    702            *pBuf++ = pCmd->generationPriceRatio;
   \   0000FC   EE           MOV     A,R6
   \   0000FD   2423         ADD     A,#0x23
   \   0000FF   12....       LCALL   ?Subroutine28 & 0xFFFF
    703            pBuf = osal_buffer_uint32( pBuf, pCmd->alternateCostDelivered );
   \                     ??CrossCallReturnLabel_22:
   \   000102   2424         ADD     A,#0x24
   \   000104   F582         MOV     DPL,A
   \   000106   EF           MOV     A,R7
   \   000107   12....       LCALL   ??Subroutine193_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_508:
   \   00010A   12....       LCALL   ?PUSH_XSTACK8_X_FOUR
   \   00010D   12....       LCALL   ??Subroutine156_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_274:
   \   000110   12....       LCALL   ?DEALLOC_XSTACK8
    704            *pBuf++ = pCmd->alternateCostUnit;
   \   000113   EE           MOV     A,R6
   \   000114   2428         ADD     A,#0x28
   \   000116   12....       LCALL   ?Subroutine28 & 0xFFFF
    705            *pBuf++ = pCmd->alternateCostTrailingDigit;
   \                     ??CrossCallReturnLabel_23:
   \   000119   2429         ADD     A,#0x29
   \   00011B   F582         MOV     DPL,A
   \   00011D   EF           MOV     A,R7
   \   00011E   12....       LCALL   ??Subroutine193_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_509:
   \   000121   12....       LCALL   ??Subroutine150_0 & 0xFFFF
    706            *pBuf++ = pCmd->numberOfBlockThresholds;
   \                     ??CrossCallReturnLabel_229:
   \   000124   242A         ADD     A,#0x2a
   \   000126   F582         MOV     DPL,A
   \   000128   EF           MOV     A,R7
   \   000129   12....       LCALL   ??Subroutine193_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_510:
   \   00012C   12....       LCALL   ??Subroutine150_0 & 0xFFFF
    707            *pBuf = pCmd->priceControl;
   \                     ??CrossCallReturnLabel_230:
   \   00012F   242B         ADD     A,#0x2b
   \   000131   F582         MOV     DPL,A
   \   000133   EF           MOV     A,R7
   \   000134   12....       LCALL   ?Subroutine65 & 0xFFFF
    708          
    709            status = zcl_SendCommand( srcEP, dstAddr, ZCL_CLUSTER_ID_SE_PRICING,
    710                                      COMMAND_SE_PUBLISH_PRICE, TRUE,
    711                                      ZCL_FRAME_SERVER_CLIENT_DIR, disableDefaultRsp, 0,
    712                                      seqNum, bufLen, buf );
   \                     ??CrossCallReturnLabel_91:
   \   000137   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00013A   78..         MOV     R0,#?V0 + 2
   \   00013C   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00013F   E5..         MOV     A,?V0 + 7
   \   000141   F5..         MOV     ?V0 + 2,A
   \   000143   78..         MOV     R0,#?V0 + 2
   \   000145   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000148   E4           CLR     A
   \   000149   F5..         MOV     ?V0 + 2,A
   \   00014B   F5..         MOV     ?V0 + 3,A
   \   00014D   78..         MOV     R0,#?V0 + 2
   \   00014F   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000152   E5..         MOV     A,?V0 + 10
   \   000154   F5..         MOV     ?V0 + 2,A
   \   000156   78..         MOV     R0,#?V0 + 2
   \   000158   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00015B   75..01       MOV     ?V0 + 2,#0x1
   \   00015E   78..         MOV     R0,#?V0 + 2
   \   000160   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000163   78..         MOV     R0,#?V0 + 2
   \   000165   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000168   75..00       MOV     ?V0 + 2,#0x0
   \   00016B   78..         MOV     R0,#?V0 + 2
   \   00016D   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000170   7C00         MOV     R4,#0x0
   \   000172   7D07         MOV     R5,#0x7
   \   000174   AA..         MOV     R2,?V0 + 8
   \   000176   AB..         MOV     R3,?V0 + 9
   \   000178   A9..         MOV     R1,?V0 + 11
   \   00017A   12....       LCALL   ??Subroutine160_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_315:
   \   00017D   12....       LCALL   ?DEALLOC_XSTACK8
   \   000180   12....       LCALL   ?Subroutine94 & 0xFFFF
    713          
    714            osal_mem_free( buf );
    715          
    716            return status;
   \                     ??CrossCallReturnLabel_214:
   \   000183   7F0C         MOV     R7,#0xc
   \   000185   02....       LJMP    ?BANKED_LEAVE_XDATA
    717          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine28:
   \   000000   F582         MOV     DPL,A
   \   000002   EF           MOV     A,R7
   \   000003   12....       LCALL   ??Subroutine187_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_554:
   \   000006   12....       LCALL   ?Subroutine105 & 0xFFFF
   \                     ??CrossCallReturnLabel_246:
   \   000009                ; Setup parameters for call to function osal_buffer_uint32
   \   000009                ; Setup parameters for call to function osal_buffer_uint32
   \   000009   EE           MOV     A,R6
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine59:
   \   000000   8C82         MOV     DPL,R4
   \   000002   8D83         MOV     DPH,R5
   \   000004   E0           MOVX    A,@DPTR
   \   000005   FC           MOV     R4,A
   \   000006   7D00         MOV     R5,#0x0
   \   000008   12....       LCALL   ??Subroutine194_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_563:
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine16:
   \   000000   F8           MOV     R0,A
   \   000001   EF           MOV     A,R7
   \   000002   12....       LCALL   ?Subroutine128 & 0xFFFF
   \                     ??CrossCallReturnLabel_192:
   \   000005   12....       LCALL   ?Subroutine112 & 0xFFFF
   \                     ??CrossCallReturnLabel_167:
   \   000008   AA82         MOV     R2,DPL
   \   00000A                REQUIRE ??Subroutine149_0
   \   00000A                ; // Fall through to label ??Subroutine149_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine149_0:
   \   000000   AB83         MOV     R3,DPH
   \   000002   8882         MOV     DPL,R0
   \   000004   8983         MOV     DPH,R1
   \   000006   A3           INC     DPTR
   \   000007                REQUIRE ??Subroutine150_0
   \   000007                ; // Fall through to label ??Subroutine150_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine150_0:
   \   000000   12....       LCALL   ?Subroutine108 & 0xFFFF
   \                     ??CrossCallReturnLabel_295:
   \   000003                ; Setup parameters for call to function osal_buffer_uint32
   \   000003                ; Setup parameters for call to function osal_buffer_uint32
   \   000003                ; Setup parameters for call to function osal_memcpy
   \   000003   EE           MOV     A,R6
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine90:
   \   000000   12....       LCALL   ?Subroutine128 & 0xFFFF
   \                     ??CrossCallReturnLabel_194:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine128:
   \   000000   12....       LCALL   ?Subroutine142 & 0xFFFF
   \                     ??CrossCallReturnLabel_210:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine142:
   \   000000   3400         ADDC    A,#0x0
   \   000002   F9           MOV     R1,A
   \   000003   8882         MOV     DPL,R0
   \   000005   8983         MOV     DPH,R1
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine65:
   \   000000   12....       LCALL   ?Subroutine129 & 0xFFFF
   \                     ??CrossCallReturnLabel_195:
   \   000003                ; Setup parameters for call to function zcl_SendCommand
   \   000003                ; Setup parameters for call to function zcl_SendCommand
   \   000003   78..         MOV     R0,#?V0 + 0
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine154_0:
   \   000000   12....       LCALL   ?Subroutine105 & 0xFFFF
   \                     ??CrossCallReturnLabel_248:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine105:
   \   000000   12....       LCALL   ?Subroutine137 & 0xFFFF
   \                     ??CrossCallReturnLabel_251:
   \   000003   A3           INC     DPTR
   \   000004   AA82         MOV     R2,DPL
   \   000006   AB83         MOV     R3,DPH
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine108:
   \   000000   12....       LCALL   ?Subroutine135 & 0xFFFF
   \                     ??CrossCallReturnLabel_299:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine135:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   8A82         MOV     DPL,R2
   \   000003   8B83         MOV     DPH,R3
   \   000005   F0           MOVX    @DPTR,A
   \   000006   A3           INC     DPTR
   \   000007   0A           INC     R2
   \   000008   AB83         MOV     R3,DPH
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine129:
   \   000000   3400         ADDC    A,#0x0
   \   000002   F583         MOV     DPH,A
   \   000004   12....       LCALL   ?Subroutine137 & 0xFFFF
   \                     ??CrossCallReturnLabel_250:
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine137:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   8A82         MOV     DPL,R2
   \   000003   8B83         MOV     DPH,R3
   \   000005   F0           MOVX    @DPTR,A
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine112:
   \   000000   12....       LCALL   ?Subroutine137 & 0xFFFF
   \                     ??CrossCallReturnLabel_249:
   \   000003   A3           INC     DPTR
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine82:
   \   000000   F5..         MOV     ?V0 + 2,A
   \   000002   E4           CLR     A
   \   000003   3400         ADDC    A,#0x0
   \   000005   F5..         MOV     ?V0 + 3,A
   \   000007                ; Setup parameters for call to function osal_mem_alloc
   \   000007                ; Setup parameters for call to function osal_mem_alloc
   \   000007   AA..         MOV     R2,?V0 + 2
   \   000009   FB           MOV     R3,A
   \   00000A                REQUIRE ??Subroutine161_0
   \   00000A                ; // Fall through to label ??Subroutine161_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine64:
   \   000000   12....       LCALL   ?Subroutine112 & 0xFFFF
   \                     ??CrossCallReturnLabel_169:
   \   000003   0A           INC     R2
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine187_0:
   \   000000   3400         ADDC    A,#0x0
   \   000002   F583         MOV     DPH,A
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine193_0:
   \   000000   12....       LCALL   ??Subroutine187_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_560:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine194_0:
   \   000000   12....       LCALL   ??osal_memcpy?relay
   \   000003   7403         MOV     A,#0x3
   \   000005   22           RET
    718          
    719          /*********************************************************************
    720           * @fn      zclSE_Pricing_Send_PriceAcknowledgement
    721           *
    722           * @brief   Call to send out a Price Acknowledgement
    723           *
    724           * @param   srcEP - Sending application's endpoint
    725           * @param   dstAddr - where you want the message to go
    726           * @param   pCmd - command payload
    727           * @param   disableDefaultRsp - disable default response
    728           * @param   seqNum - ZCL sequence number
    729           *
    730           * @return  ZStatus_t
    731           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    732          ZStatus_t zclSE_Pricing_Send_PriceAcknowledgement( uint8 srcEP, afAddrType_t *dstAddr,
   \                     zclSE_Pricing_Send_PriceAcknowledgement:
    733                                                      zclCCPriceAcknowledgement_t *pCmd,
    734                                                      uint8 disableDefaultRsp, uint8 seqNum )
    735          {
   \   000000   74EE         MOV     A,#-0x12
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 18
   \   000005                ; Auto size: 0
   \   000005   89..         MOV     ?V0 + 2,R1
   \   000007   EA           MOV     A,R2
   \   000008   FE           MOV     R6,A
   \   000009   EB           MOV     A,R3
   \   00000A   FF           MOV     R7,A
   \   00000B   8C..         MOV     ?V0 + 0,R4
   \   00000D   8D..         MOV     ?V0 + 1,R5
   \   00000F   7412         MOV     A,#0x12
   \   000011   12....       LCALL   ?XSTACK_DISP0_8
   \   000014   12....       LCALL   ?Subroutine39 & 0xFFFF
   \                     ??CrossCallReturnLabel_45:
   \   000017   12....       LCALL   ?XSTACK_DISP0_8
   \   00001A   E0           MOVX    A,@DPTR
   \   00001B   F5..         MOV     ?V0 + 6,A
    736            uint8 *buf;
    737            uint8 *pBuf;
    738            ZStatus_t status;
    739          
    740            buf = osal_mem_alloc( PACKET_LEN_SE_PRICE_ACKNOWLEDGEMENT );
   \   00001D                ; Setup parameters for call to function osal_mem_alloc
   \   00001D   7A0D         MOV     R2,#0xd
   \   00001F   12....       LCALL   ?Subroutine84 & 0xFFFF
    741            if ( buf == NULL )
   \                     ??CrossCallReturnLabel_131:
   \   000022   7005         JNZ     ??zclSE_Pricing_Send_PriceAcknowledgement_0
    742            {
    743              return ( ZMemError );
   \   000024   7910         MOV     R1,#0x10
   \   000026   02....       LJMP    ??CrossCallReturnLabel_219 & 0xFFFF
    744            }
    745          
    746            pBuf = osal_buffer_uint32( buf, pCmd->providerId );
    747            pBuf = osal_buffer_uint32( pBuf, pCmd->issuerEventId );
    748            pBuf = osal_buffer_uint32( pBuf, pCmd->priceAckTime );
    749            *pBuf = pCmd->control;
   \                     ??zclSE_Pricing_Send_PriceAcknowledgement_0:
   \   000029   E5..         MOV     A,?V0 + 0
   \   00002B   240C         ADD     A,#0xc
   \   00002D   12....       LCALL   ?Subroutine92 & 0xFFFF
   \                     ??CrossCallReturnLabel_364:
   \   000030   C0E0         PUSH    A
   \   000032                ; Setup parameters for call to function osal_buffer_uint32
   \   000032   85..82       MOV     DPL,?V0 + 0
   \   000035   85..83       MOV     DPH,?V0 + 1
   \   000038   A3           INC     DPTR
   \   000039   A3           INC     DPTR
   \   00003A   A3           INC     DPTR
   \   00003B   A3           INC     DPTR
   \   00003C   A3           INC     DPTR
   \   00003D   A3           INC     DPTR
   \   00003E   A3           INC     DPTR
   \   00003F   A3           INC     DPTR
   \   000040   12....       LCALL   ?PUSH_XSTACK8_X_FOUR
   \   000043                ; Setup parameters for call to function osal_buffer_uint32
   \   000043   85..82       MOV     DPL,?V0 + 0
   \   000046   85..83       MOV     DPH,?V0 + 1
   \   000049   A3           INC     DPTR
   \   00004A   A3           INC     DPTR
   \   00004B   A3           INC     DPTR
   \   00004C   A3           INC     DPTR
   \   00004D   12....       LCALL   ?PUSH_XSTACK8_X_FOUR
   \   000050                ; Setup parameters for call to function osal_buffer_uint32
   \   000050   85..82       MOV     DPL,?V0 + 0
   \   000053   85..83       MOV     DPH,?V0 + 1
   \   000056   12....       LCALL   ?PUSH_XSTACK8_X_FOUR
   \   000059   12....       LCALL   ??Subroutine156_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_275:
   \   00005C   12....       LCALL   ?DEALLOC_XSTACK8
   \   00005F   12....       LCALL   ??Subroutine156_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_276:
   \   000062   12....       LCALL   ?DEALLOC_XSTACK8
   \   000065   12....       LCALL   ??Subroutine156_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_277:
   \   000068   12....       LCALL   ?DEALLOC_XSTACK8
   \   00006B   8A82         MOV     DPL,R2
   \   00006D   8B83         MOV     DPH,R3
   \   00006F   D0E0         POP     A
   \   000071   F0           MOVX    @DPTR,A
    750          
    751            status = zcl_SendCommand( srcEP, dstAddr, ZCL_CLUSTER_ID_SE_PRICING,
    752                                      COMMAND_SE_PRICE_ACKNOWLEDGEMENT, TRUE,
    753                                      ZCL_FRAME_CLIENT_SERVER_DIR, disableDefaultRsp, 0,
    754                                      seqNum, PACKET_LEN_SE_PRICE_ACKNOWLEDGEMENT, buf );
   \   000072                ; Setup parameters for call to function zcl_SendCommand
   \   000072   78..         MOV     R0,#?V0 + 4
   \   000074   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000077   75..0D       MOV     ?V0 + 0,#0xd
   \   00007A   75..00       MOV     ?V0 + 1,#0x0
   \   00007D   78..         MOV     R0,#?V0 + 0
   \   00007F   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000082   E5..         MOV     A,?V0 + 6
   \   000084   F5..         MOV     ?V0 + 0,A
   \   000086   78..         MOV     R0,#?V0 + 0
   \   000088   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00008B   E4           CLR     A
   \   00008C   F5..         MOV     ?V0 + 0,A
   \   00008E   78..         MOV     R0,#?V0 + 0
   \   000090   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000093   E5..         MOV     A,?V0 + 3
   \   000095   F5..         MOV     ?V0 + 0,A
   \   000097   78..         MOV     R0,#?V0 + 0
   \   000099   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00009C   75..00       MOV     ?V0 + 0,#0x0
   \   00009F   78..         MOV     R0,#?V0 + 0
   \   0000A1   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000A4   75..01       MOV     ?V0 + 0,#0x1
   \   0000A7   78..         MOV     R0,#?V0 + 0
   \   0000A9   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000AC   75..02       MOV     ?V0 + 0,#0x2
   \   0000AF   78..         MOV     R0,#?V0 + 0
   \   0000B1   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000B4   12....       LCALL   ?Subroutine83 & 0xFFFF
   \                     ??CrossCallReturnLabel_308:
   \   0000B7   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000BA   E9           MOV     A,R1
   \   0000BB   FE           MOV     R6,A
    755          
    756            osal_mem_free( buf );
   \   0000BC                ; Setup parameters for call to function osal_mem_free
   \   0000BC   AA..         MOV     R2,?V0 + 4
   \   0000BE   AB..         MOV     R3,?V0 + 5
   \   0000C0   12....       LCALL   ??Subroutine148_0 & 0xFFFF
    757          
    758            return status;
   \                     ??CrossCallReturnLabel_219:
   \   0000C3   02....       LJMP    ?Subroutine3 & 0xFFFF
    759          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine84:
   \   000000   7B00         MOV     R3,#0x0
   \   000002   12....       LCALL   ??osal_mem_alloc?relay
   \   000005   8A..         MOV     ?V0 + 4,R2
   \   000007   8B..         MOV     ?V0 + 5,R3
   \   000009   EA           MOV     A,R2
   \   00000A   45..         ORL     A,?V0 + 5
   \   00000C   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine3:
   \   000000   7F0A         MOV     R7,#0xa
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine83:
   \   000000   7C00         MOV     R4,#0x0
   \   000002                REQUIRE ??Subroutine159_0
   \   000002                ; // Fall through to label ??Subroutine159_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine92:
   \   000000   F582         MOV     DPL,A
   \   000002   E5..         MOV     A,?V0 + 1
   \   000004                REQUIRE ??Subroutine170_0
   \   000004                ; // Fall through to label ??Subroutine170_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine170_0:
   \   000000   12....       LCALL   ??Subroutine187_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_557:
   \   000003   E0           MOVX    A,@DPTR
   \   000004   22           RET
    760          
    761          /*********************************************************************
    762           * @fn      zclSE_Pricing_Send_GetBlockPeriod
    763           *
    764           * @brief   Call to send out a Get Block Period
    765           *
    766           * @param   srcEP - Sending application's endpoint
    767           * @param   dstAddr - where you want the message to go
    768           * @param   pCmd - command payload
    769           * @param   disableDefaultRsp - disable default response
    770           * @param   seqNum - ZCL sequence number
    771           *
    772           * @return  ZStatus_t
    773           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    774          ZStatus_t zclSE_Pricing_Send_GetBlockPeriod( uint8 srcEP, afAddrType_t *dstAddr,
   \                     zclSE_Pricing_Send_GetBlockPeriod:
    775                                                       zclCCGetBlockPeriod_t *pCmd,
    776                                                       uint8 disableDefaultRsp, uint8 seqNum )
    777          {
   \   000000   74F3         MOV     A,#-0xd
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 13
   \   000005                ; Auto size: 5
   \   000005   74FB         MOV     A,#-0x5
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   89..         MOV     ?V0 + 2,R1
   \   00000C   EA           MOV     A,R2
   \   00000D   FE           MOV     R6,A
   \   00000E   EB           MOV     A,R3
   \   00000F   FF           MOV     R7,A
   \   000010   8C..         MOV     ?V0 + 0,R4
   \   000012   8D..         MOV     ?V0 + 1,R5
   \   000014   7412         MOV     A,#0x12
   \   000016   12....       LCALL   ?XSTACK_DISP0_8
   \   000019   12....       LCALL   ?Subroutine39 & 0xFFFF
   \                     ??CrossCallReturnLabel_46:
   \   00001C   12....       LCALL   ?XSTACK_DISP0_8
   \   00001F   12....       LCALL   ?Subroutine31 & 0xFFFF
    778            uint8 buf[5];
    779            ZStatus_t status;
    780          
    781            osal_buffer_uint32( buf, pCmd->startTime );
   \                     ??CrossCallReturnLabel_31:
   \   000022   12....       LCALL   ?PUSH_XSTACK8_X_FOUR
   \   000025   7404         MOV     A,#0x4
   \   000027   12....       LCALL   ?XSTACK_DISP0_8
   \   00002A   12....       LCALL   ?Subroutine81 & 0xFFFF
   \                     ??CrossCallReturnLabel_263:
   \   00002D   12....       LCALL   ?DEALLOC_XSTACK8
    782            buf[4] = pCmd->numEvents;
   \   000030   85..82       MOV     DPL,?V0 + 0
   \   000033   85..83       MOV     DPH,?V0 + 1
   \   000036   A3           INC     DPTR
   \   000037   A3           INC     DPTR
   \   000038   A3           INC     DPTR
   \   000039   A3           INC     DPTR
   \   00003A   E0           MOVX    A,@DPTR
   \   00003B   C0E0         PUSH    A
   \   00003D   7404         MOV     A,#0x4
   \   00003F   12....       LCALL   ?XSTACK_DISP0_8
   \   000042   D0E0         POP     A
   \   000044   12....       LCALL   ??Subroutine151_0 & 0xFFFF
    783          
    784            status = zcl_SendCommand( srcEP, dstAddr, ZCL_CLUSTER_ID_SE_PRICING,
    785                                      COMMAND_SE_GET_BLOCK_PERIOD, TRUE,
    786                                      ZCL_FRAME_CLIENT_SERVER_DIR, disableDefaultRsp, 0,
    787                                      seqNum, 5, buf );
    788          
    789            return status;
   \                     ??CrossCallReturnLabel_237:
   \   000047   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00004A   75..05       MOV     ?V0 + 0,#0x5
   \   00004D   75..00       MOV     ?V0 + 1,#0x0
   \   000050   78..         MOV     R0,#?V0 + 0
   \   000052   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000055   E5..         MOV     A,?V0 + 4
   \   000057   F5..         MOV     ?V0 + 0,A
   \   000059   78..         MOV     R0,#?V0 + 0
   \   00005B   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00005E   E4           CLR     A
   \   00005F   F5..         MOV     ?V0 + 0,A
   \   000061   78..         MOV     R0,#?V0 + 0
   \   000063   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000066   E5..         MOV     A,?V0 + 3
   \   000068   F5..         MOV     ?V0 + 0,A
   \   00006A   78..         MOV     R0,#?V0 + 0
   \   00006C   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00006F   75..00       MOV     ?V0 + 0,#0x0
   \   000072   78..         MOV     R0,#?V0 + 0
   \   000074   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000077   75..01       MOV     ?V0 + 0,#0x1
   \   00007A   78..         MOV     R0,#?V0 + 0
   \   00007C   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00007F   75..03       MOV     ?V0 + 0,#0x3
   \   000082   02....       LJMP    ?Subroutine2 & 0xFFFF
    790          }
    791          
    792          /*********************************************************************
    793           * @fn      zclSE_Pricing_Send_PublishBlockPeriod
    794           *
    795           * @brief   Call to send out a Publish Block Period
    796           *
    797           * @param   srcEP - Sending application's endpoint
    798           * @param   dstAddr - where you want the message to go
    799           * @param   pCmd - command payload
    800           * @param   disableDefaultRsp - disable default response
    801           * @param   seqNum - ZCL sequence number
    802           *
    803           * @return  ZStatus_t
    804           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    805          ZStatus_t zclSE_Pricing_Send_PublishBlockPeriod( uint8 srcEP, afAddrType_t *dstAddr,
   \                     zclSE_Pricing_Send_PublishBlockPeriod:
    806                                                      zclCCPublishBlockPeriod_t *pCmd,
    807                                                      uint8 disableDefaultRsp, uint8 seqNum )
    808          {
   \   000000   74EE         MOV     A,#-0x12
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 18
   \   000005                ; Auto size: 0
   \   000005   89..         MOV     ?V0 + 2,R1
   \   000007   EA           MOV     A,R2
   \   000008   FE           MOV     R6,A
   \   000009   EB           MOV     A,R3
   \   00000A   FF           MOV     R7,A
   \   00000B   8C..         MOV     ?V0 + 0,R4
   \   00000D   8D..         MOV     ?V0 + 1,R5
   \   00000F   7412         MOV     A,#0x12
   \   000011   12....       LCALL   ?XSTACK_DISP0_8
   \   000014   12....       LCALL   ?Subroutine39 & 0xFFFF
   \                     ??CrossCallReturnLabel_47:
   \   000017   12....       LCALL   ?XSTACK_DISP0_8
   \   00001A   E0           MOVX    A,@DPTR
   \   00001B   F5..         MOV     ?V0 + 6,A
    809            uint8 *buf;
    810            uint8 *pBuf;
    811            uint16 bufLen;
    812            ZStatus_t status;
    813          
    814            bufLen = PACKET_LEN_SE_PUBLISH_BLOCK_PERIOD;
    815            buf = osal_mem_alloc( bufLen );
   \   00001D                ; Setup parameters for call to function osal_mem_alloc
   \   00001D   7A11         MOV     R2,#0x11
   \   00001F   12....       LCALL   ?Subroutine84 & 0xFFFF
    816            if ( buf == NULL )
   \                     ??CrossCallReturnLabel_132:
   \   000022   7005         JNZ     ??zclSE_Pricing_Send_PublishBlockPeriod_0
    817            {
    818              return ( ZMemError );
   \   000024   7910         MOV     R1,#0x10
   \   000026   02....       LJMP    ??CrossCallReturnLabel_220 & 0xFFFF
    819            }
    820          
    821            pBuf = osal_buffer_uint32( buf, pCmd->providerId );
   \                     ??zclSE_Pricing_Send_PublishBlockPeriod_0:
   \   000029                ; Setup parameters for call to function osal_buffer_uint32
   \   000029   85..82       MOV     DPL,?V0 + 0
   \   00002C   85..83       MOV     DPH,?V0 + 1
   \   00002F   12....       LCALL   ?PUSH_XSTACK8_X_FOUR
   \   000032   12....       LCALL   ??Subroutine156_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_278:
   \   000035   12....       LCALL   ?DEALLOC_XSTACK8
    822            pBuf = osal_buffer_uint32( pBuf, pCmd->issuerEventId );
   \   000038                ; Setup parameters for call to function osal_buffer_uint32
   \   000038   85..82       MOV     DPL,?V0 + 0
   \   00003B   85..83       MOV     DPH,?V0 + 1
   \   00003E   A3           INC     DPTR
   \   00003F   A3           INC     DPTR
   \   000040   A3           INC     DPTR
   \   000041   A3           INC     DPTR
   \   000042   12....       LCALL   ?PUSH_XSTACK8_X_FOUR
   \   000045   12....       LCALL   ??Subroutine156_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_279:
   \   000048   12....       LCALL   ?DEALLOC_XSTACK8
    823            pBuf = osal_buffer_uint32( pBuf, pCmd->blockPeriodStartTime );
   \   00004B                ; Setup parameters for call to function osal_buffer_uint32
   \   00004B   85..82       MOV     DPL,?V0 + 0
   \   00004E   85..83       MOV     DPH,?V0 + 1
   \   000051   A3           INC     DPTR
   \   000052   A3           INC     DPTR
   \   000053   A3           INC     DPTR
   \   000054   A3           INC     DPTR
   \   000055   A3           INC     DPTR
   \   000056   A3           INC     DPTR
   \   000057   A3           INC     DPTR
   \   000058   A3           INC     DPTR
   \   000059   12....       LCALL   ?PUSH_XSTACK8_X_FOUR
   \   00005C   12....       LCALL   ??Subroutine156_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_280:
   \   00005F   12....       LCALL   ?DEALLOC_XSTACK8
    824            pBuf = osal_buffer_uint24( pBuf, pCmd->blockPeriodDurInMins );
   \   000062                ; Setup parameters for call to function osal_buffer_uint24
   \   000062   E5..         MOV     A,?V0 + 0
   \   000064   240C         ADD     A,#0xc
   \   000066   12....       LCALL   ??Subroutine192_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_522:
   \   000069   12....       LCALL   ?PUSH_XSTACK8_X_FOUR
   \   00006C   12....       LCALL   ?Subroutine96 & 0xFFFF
   \                     ??CrossCallReturnLabel_152:
   \   00006F   12....       LCALL   ?DEALLOC_XSTACK8
    825            *pBuf++ = pCmd->numPriceTiersAndBlock;
   \   000072   12....       LCALL   ?Subroutine93 & 0xFFFF
   \                     ??CrossCallReturnLabel_549:
   \   000075   12....       LCALL   ??Subroutine154_0 & 0xFFFF
    826          #ifdef SE_UK_EXT
    827            *pBuf++ = pCmd->tariffType;
    828          #endif
    829            *pBuf = pCmd->blockPeriodControl;
   \                     ??CrossCallReturnLabel_242:
   \   000078   E5..         MOV     A,?V0 + 0
   \   00007A   2412         ADD     A,#0x12
   \   00007C   F582         MOV     DPL,A
   \   00007E   E5..         MOV     A,?V0 + 1
   \   000080   12....       LCALL   ?Subroutine91 & 0xFFFF
    830          
    831            status = zcl_SendCommand( srcEP, dstAddr, ZCL_CLUSTER_ID_SE_PRICING,
    832                                      COMMAND_SE_PUBLISH_BLOCK_PERIOD, TRUE,
    833                                      ZCL_FRAME_SERVER_CLIENT_DIR, disableDefaultRsp, 0,
    834                                      seqNum, bufLen, buf );
   \                     ??CrossCallReturnLabel_146:
   \   000083                ; Setup parameters for call to function zcl_SendCommand
   \   000083   78..         MOV     R0,#?V0 + 4
   \   000085   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000088   75..11       MOV     ?V0 + 0,#0x11
   \   00008B   75..00       MOV     ?V0 + 1,#0x0
   \   00008E   78..         MOV     R0,#?V0 + 0
   \   000090   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000093   E5..         MOV     A,?V0 + 6
   \   000095   F5..         MOV     ?V0 + 0,A
   \   000097   78..         MOV     R0,#?V0 + 0
   \   000099   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00009C   E4           CLR     A
   \   00009D   F5..         MOV     ?V0 + 0,A
   \   00009F   78..         MOV     R0,#?V0 + 0
   \   0000A1   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000A4   E5..         MOV     A,?V0 + 3
   \   0000A6   F5..         MOV     ?V0 + 0,A
   \   0000A8   78..         MOV     R0,#?V0 + 0
   \   0000AA   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000AD   75..01       MOV     ?V0 + 0,#0x1
   \   0000B0   78..         MOV     R0,#?V0 + 0
   \   0000B2   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000B5   78..         MOV     R0,#?V0 + 0
   \   0000B7   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000BA   78..         MOV     R0,#?V0 + 0
   \   0000BC   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000BF   12....       LCALL   ?Subroutine83 & 0xFFFF
   \                     ??CrossCallReturnLabel_309:
   \   0000C2   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000C5   E9           MOV     A,R1
   \   0000C6   FE           MOV     R6,A
    835          
    836            osal_mem_free( buf );
   \   0000C7                ; Setup parameters for call to function osal_mem_free
   \   0000C7   AA..         MOV     R2,?V0 + 4
   \   0000C9   AB..         MOV     R3,?V0 + 5
   \   0000CB   12....       LCALL   ??Subroutine148_0 & 0xFFFF
    837          
    838            return status;
   \                     ??CrossCallReturnLabel_220:
   \   0000CE   02....       LJMP    ?Subroutine3 & 0xFFFF
    839          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine91:
   \   000000   12....       LCALL   ?Subroutine129 & 0xFFFF
   \                     ??CrossCallReturnLabel_196:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine93:
   \   000000   E5..         MOV     A,?V0 + 0
   \   000002   2410         ADD     A,#0x10
   \   000004                REQUIRE ??Subroutine192_0
   \   000004                ; // Fall through to label ??Subroutine192_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine192_0:
   \   000000   F582         MOV     DPL,A
   \   000002   E5..         MOV     A,?V0 + 1
   \   000004                REQUIRE ??Subroutine193_0
   \   000004                ; // Fall through to label ??Subroutine193_0
    840          
    841          #ifdef SE_UK_EXT
    842          /*********************************************************************
    843           * @fn      zclSE_Pricing_Send_PublishTariffInformation
    844           *
    845           * @brief   Call to send out a Publish Tariff Information
    846           *
    847           * @param   srcEP - Sending application's endpoint
    848           * @param   dstAddr - where you want the message to go
    849           * @param   pCmd - command payload
    850           * @param   disableDefaultRsp - disable default response
    851           * @param   seqNum - ZCL sequence number
    852           *
    853           * @return  ZStatus_t
    854           */
    855          ZStatus_t zclSE_Pricing_Send_PublishTariffInformation( uint8 srcEP, afAddrType_t *dstAddr,
    856                                                      zclCCPublishTariffInformation_t *pCmd,
    857                                                      uint8 disableDefaultRsp, uint8 seqNum )
    858          {
    859            uint8 *buf;
    860            uint8 *pBuf;
    861            uint16 bufLen;
    862            ZStatus_t status;
    863          
    864            bufLen = PACKET_LEN_SE_MIN_PUBLISH_TARIFF_INFORMATION + pCmd->tarifLabel.strLen;
    865            buf = osal_mem_alloc( bufLen );
    866            if ( buf == NULL )
    867            {
    868              return ( ZMemError );
    869            }
    870          
    871            pBuf = osal_buffer_uint32( buf, pCmd->supplierId );
    872            pBuf = osal_buffer_uint32( pBuf, pCmd->issuerTariffId );
    873            pBuf = osal_buffer_uint32( pBuf, pCmd->startTime );
    874            *pBuf++ = pCmd->tariffType;
    875            *pBuf++ = pCmd->tarifLabel.strLen;
    876            pBuf = osal_memcpy( pBuf, pCmd->tarifLabel.pStr, pCmd->tarifLabel.strLen );
    877            *pBuf++ = pCmd->numPriceTiersInUse;
    878            *pBuf++ = pCmd->numBlockThresholdsInUse;
    879            *pBuf++ = pCmd->unitOfMeasure;
    880            *pBuf++ = LO_UINT16( pCmd->currency );
    881            *pBuf++ = HI_UINT16( pCmd->currency );
    882            *pBuf++ = pCmd->priceTrailingDigit;
    883            pBuf = osal_buffer_uint32( pBuf, pCmd->standingCharge );
    884            *pBuf++ = pCmd->tierBlockMode;
    885            *pBuf++ = LO_UINT16( pCmd->blockThresholdMask );
    886            *pBuf++ = HI_UINT16( pCmd->blockThresholdMask );
    887            pBuf = osal_buffer_uint24( pBuf, pCmd->BlockThresholdMultiplier );
    888            pBuf = osal_buffer_uint24( pBuf, pCmd->BlockThresholdDivisor );
    889          
    890            status = zcl_SendCommand( srcEP, dstAddr, ZCL_CLUSTER_ID_SE_PRICING,
    891                                      COMMAND_SE_PUBLISH_TARIFF_INFO, TRUE,
    892                                      ZCL_FRAME_SERVER_CLIENT_DIR, disableDefaultRsp, 0,
    893                                      seqNum, bufLen, buf );
    894            osal_mem_free( buf );
    895          
    896            return status;
    897          }
    898          
    899          /*********************************************************************
    900           * @fn      zclSE_Pricing_Send_PublishPriceMatrix
    901           *
    902           * @brief   Call to send out a Publish Price Matrix
    903           *
    904           * @param   srcEP - Sending application's endpoint
    905           * @param   dstAddr - where you want the message to go
    906           * @param   pCmd - command payload
    907           * @param   disableDefaultRsp - disable default response
    908           * @param   seqNum - ZCL sequence number
    909           *
    910           * @return  ZStatus_t
    911           */
    912          ZStatus_t zclSE_Pricing_Send_PublishPriceMatrix( uint8 srcEP, afAddrType_t *dstAddr,
    913                                                           zclCCPublishPriceMatrix_t *pCmd,
    914                                                           uint8 disableDefaultRsp, uint8 seqNum )
    915          {
    916            uint8 *buf;
    917            uint8 *pBuf;
    918            uint16 bufLen;
    919            ZStatus_t status;
    920            uint8 i;
    921          
    922            bufLen = PACKET_LEN_SE_MIN_PUBLISH_PRICE_MATRIX + (pCmd->numElements * sizeof(uint32));
    923            buf = osal_mem_alloc( bufLen );
    924            if ( buf == NULL )
    925            {
    926              return ( ZMemError );
    927            }
    928          
    929            pBuf = osal_buffer_uint32( buf, pCmd->issuerTariffId );
    930            *pBuf++ = pCmd->commandIndex;
    931          
    932            for ( i = 0; i < pCmd->numElements; i++ )
    933            {
    934              pBuf = osal_buffer_uint32( pBuf, pCmd->pTierBlockPrice[i] );
    935            }
    936          
    937            status = zcl_SendCommand( srcEP, dstAddr, ZCL_CLUSTER_ID_SE_PRICING,
    938                                      COMMAND_SE_PUBLISH_PRICE_MATRIX, TRUE,
    939                                      ZCL_FRAME_SERVER_CLIENT_DIR, disableDefaultRsp, 0,
    940                                      seqNum, bufLen, buf );
    941            osal_mem_free( buf );
    942          
    943            return status;
    944          }
    945          
    946          /*********************************************************************
    947           * @fn      zclSE_Pricing_Send_PublishBlockThresholds
    948           *
    949           * @brief   Call to send out a Publish Block Thresholds
    950           *
    951           * @param   srcEP - Sending application's endpoint
    952           * @param   dstAddr - where you want the message to go
    953           * @param   pCmd - command payload
    954           * @param   disableDefaultRsp - disable default response
    955           * @param   seqNum - ZCL sequence number
    956           *
    957           * @return  ZStatus_t
    958           */
    959          ZStatus_t zclSE_Pricing_Send_PublishBlockThresholds( uint8 srcEP, afAddrType_t *dstAddr,
    960                                                           zclCCPublishBlockThresholds_t *pCmd,
    961                                                           uint8 disableDefaultRsp, uint8 seqNum )
    962          {
    963            uint8 *buf;
    964            uint8 *pBuf;
    965            uint16 bufLen;
    966            ZStatus_t status;
    967            uint8 i;
    968          
    969            bufLen = PACKET_LEN_SE_MIN_PUBLISH_BLOCK_THRESHOLD + (pCmd->numElements * 6);
    970            buf = osal_mem_alloc( bufLen );
    971            if ( buf == NULL )
    972            {
    973              return ( ZMemError );
    974            }
    975          
    976            pBuf = osal_buffer_uint32( buf, pCmd->issuerTariffId );
    977            *pBuf++ = pCmd->commandIndex;
    978          
    979            for ( i = 0; i < pCmd->numElements; i++ )
    980            {
    981              pBuf = osal_memcpy( pBuf, pCmd->pTierBlockThreshold[i], 6 );
    982            }
    983          
    984            status = zcl_SendCommand( srcEP, dstAddr, ZCL_CLUSTER_ID_SE_PRICING,
    985                                      COMMAND_SE_PUBLISH_BLOCK_THRESHOLD, TRUE,
    986                                      ZCL_FRAME_SERVER_CLIENT_DIR, disableDefaultRsp, 0,
    987                                      seqNum, bufLen, buf );
    988            osal_mem_free( buf );
    989          
    990            return status;
    991          }
    992          
    993          /*********************************************************************
    994           * @fn      zclSE_Pricing_Send_PublishConversionFactor
    995           *
    996           * @brief   Call to send out a Publish Conversion Factor
    997           *
    998           * @param   srcEP - Sending application's endpoint
    999           * @param   dstAddr - where you want the message to go
   1000           * @param   pCmd - command payload
   1001           * @param   disableDefaultRsp - disable default response
   1002           * @param   seqNum - ZCL sequence number
   1003           *
   1004           * @return  ZStatus_t
   1005           */
   1006          ZStatus_t zclSE_Pricing_Send_PublishConversionFactor( uint8 srcEP, afAddrType_t *dstAddr,
   1007                                                           zclCCPublishConversionFactor_t *pCmd,
   1008                                                           uint8 disableDefaultRsp, uint8 seqNum )
   1009          {
   1010            uint8 buf[PACKET_LEN_SE_PUBLISH_CONVERSION_FACTOR];
   1011            uint8 *pBuf;
   1012          
   1013            pBuf = osal_buffer_uint32( buf, pCmd->issuerEventId );
   1014            pBuf = osal_buffer_uint32( pBuf, pCmd->startTime );
   1015            pBuf = osal_buffer_uint32( pBuf, pCmd->conversionFactor );
   1016            *pBuf = pCmd->trailingDigit;
   1017          
   1018            return zcl_SendCommand( srcEP, dstAddr, ZCL_CLUSTER_ID_SE_PRICING,
   1019                                    COMMAND_SE_PUBLISH_CONVERSION_FACTOR, TRUE,
   1020                                    ZCL_FRAME_SERVER_CLIENT_DIR, disableDefaultRsp, 0,
   1021                                    seqNum, PACKET_LEN_SE_PUBLISH_CONVERSION_FACTOR, buf );
   1022          }
   1023          
   1024          /*********************************************************************
   1025           * @fn      zclSE_Pricing_Send_PublishCalorificValue
   1026           *
   1027           * @brief   Call to send out a Publish Calorific Value
   1028           *
   1029           * @param   srcEP - Sending application's endpoint
   1030           * @param   dstAddr - where you want the message to go
   1031           * @param   pCmd - command payload
   1032           * @param   disableDefaultRsp - disable default response
   1033           * @param   seqNum - ZCL sequence number
   1034           *
   1035           * @return  ZStatus_t
   1036           */
   1037          ZStatus_t zclSE_Pricing_Send_PublishCalorificValue( uint8 srcEP, afAddrType_t *dstAddr,
   1038                                                           zclCCPublishCalorificValue_t *pCmd,
   1039                                                           uint8 disableDefaultRsp, uint8 seqNum )
   1040          {
   1041            uint8 buf[PACKET_LEN_SE_PUBLISH_CALORIFIC_VALUE];
   1042            uint8 *pBuf;
   1043          
   1044            pBuf = osal_buffer_uint32( buf, pCmd->issuerEventId );
   1045            pBuf = osal_buffer_uint32( pBuf, pCmd->startTime );
   1046            pBuf = osal_buffer_uint32( pBuf, pCmd->calorificValue );
   1047            *pBuf++ = pCmd->calorificValueUnit;
   1048            *pBuf = pCmd->trailingDigit;
   1049          
   1050            return zcl_SendCommand( srcEP, dstAddr, ZCL_CLUSTER_ID_SE_PRICING,
   1051                                    COMMAND_SE_PUBLISH_CALORIFIC_VALUE, TRUE,
   1052                                    ZCL_FRAME_SERVER_CLIENT_DIR, disableDefaultRsp, 0,
   1053                                    seqNum, PACKET_LEN_SE_PUBLISH_CALORIFIC_VALUE, buf );
   1054          }
   1055          
   1056          /*********************************************************************
   1057           * @fn      zclSE_Pricing_Send_PublishCO2Value
   1058           *
   1059           * @brief   Call to send out a Publish CO2 Value
   1060           *
   1061           * @param   srcEP - Sending application's endpoint
   1062           * @param   dstAddr - where you want the message to go
   1063           * @param   pCmd - command payload
   1064           * @param   disableDefaultRsp - disable default response
   1065           * @param   seqNum - ZCL sequence number
   1066           *
   1067           * @return  ZStatus_t
   1068           */
   1069          ZStatus_t zclSE_Pricing_Send_PublishCO2Value( uint8 srcEP, afAddrType_t *dstAddr,
   1070                                                           zclCCPublishCO2Value_t *pCmd,
   1071                                                           uint8 disableDefaultRsp, uint8 seqNum )
   1072          {
   1073            uint8 buf[PACKET_LEN_SE_PUBLISH_CO2_VALUE];
   1074            uint8 *pBuf;
   1075          
   1076            pBuf = osal_buffer_uint32( buf, pCmd->issuerEventId );
   1077            pBuf = osal_buffer_uint32( pBuf, pCmd->startTime );
   1078            *pBuf++ = pCmd->tariffType;
   1079            pBuf = osal_buffer_uint32( pBuf, pCmd->CO2Value );
   1080            *pBuf++ = pCmd->CO2ValueUnit;
   1081            *pBuf = pCmd->trailingDigit;
   1082          
   1083            return zcl_SendCommand( srcEP, dstAddr, ZCL_CLUSTER_ID_SE_PRICING,
   1084                                    COMMAND_SE_PUBLISH_CO2_VALUE, TRUE,
   1085                                    ZCL_FRAME_SERVER_CLIENT_DIR, disableDefaultRsp, 0,
   1086                                    seqNum, PACKET_LEN_SE_PUBLISH_CO2_VALUE, buf );
   1087          }
   1088          
   1089          /*********************************************************************
   1090           * @fn      zclSE_Pricing_Send_PublishCPPEvent
   1091           *
   1092           * @brief   Call to send out a Publish CPP Event
   1093           *
   1094           * @param   srcEP - Sending application's endpoint
   1095           * @param   dstAddr - where you want the message to go
   1096           * @param   pCmd - command payload
   1097           * @param   disableDefaultRsp - disable default response
   1098           * @param   seqNum - ZCL sequence number
   1099           *
   1100           * @return  ZStatus_t
   1101           */
   1102          ZStatus_t zclSE_Pricing_Send_PublishCPPEvent( uint8 srcEP, afAddrType_t *dstAddr,
   1103                                                           zclCCPublishCPPEvent_t *pCmd,
   1104                                                           uint8 disableDefaultRsp, uint8 seqNum )
   1105          {
   1106            uint8 buf[PACKET_LEN_SE_PUBLISH_CPP_EVENT];
   1107            uint8 *pBuf;
   1108          
   1109            pBuf = osal_buffer_uint32( buf, pCmd->issuerEventId );
   1110            pBuf = osal_buffer_uint32( pBuf, pCmd->startTime );
   1111            *pBuf++ = LO_UINT16( pCmd->durationInMinutes );
   1112            *pBuf++ = HI_UINT16( pCmd->durationInMinutes );
   1113            *pBuf++ = pCmd->tariffType;
   1114            *pBuf++ = pCmd->CPPPriceTier;
   1115            *pBuf = pCmd->CPPAuth;
   1116          
   1117            return zcl_SendCommand( srcEP, dstAddr, ZCL_CLUSTER_ID_SE_PRICING,
   1118                                    COMMAND_SE_PUBLISH_CPP_EVENT, TRUE,
   1119                                    ZCL_FRAME_SERVER_CLIENT_DIR, disableDefaultRsp, 0,
   1120                                    seqNum, PACKET_LEN_SE_PUBLISH_CPP_EVENT, buf );
   1121          }
   1122          
   1123          /*********************************************************************
   1124           * @fn      zclSE_Pricing_Send_PublishBillingPeriod
   1125           *
   1126           * @brief   Call to send out a Publish Billing Period
   1127           *
   1128           * @param   srcEP - Sending application's endpoint
   1129           * @param   dstAddr - where you want the message to go
   1130           * @param   pCmd - command payload
   1131           * @param   disableDefaultRsp - disable default response
   1132           * @param   seqNum - ZCL sequence number
   1133           *
   1134           * @return  ZStatus_t
   1135           */
   1136          ZStatus_t zclSE_Pricing_Send_PublishBillingPeriod( uint8 srcEP, afAddrType_t *dstAddr,
   1137                                                           zclCCPublishBillingPeriod_t *pCmd,
   1138                                                           uint8 disableDefaultRsp, uint8 seqNum )
   1139          {
   1140            uint8 buf[PACKET_LEN_SE_PUBLISH_BILLING_PERIOD];
   1141            uint8 *pBuf;
   1142          
   1143            pBuf = osal_buffer_uint32( buf, pCmd->issuerEventId );
   1144            pBuf = osal_buffer_uint32( pBuf, pCmd->startTime );
   1145            pBuf = osal_buffer_uint24( pBuf, pCmd->duration );
   1146            *pBuf = pCmd->tariffType;
   1147          
   1148            return zcl_SendCommand( srcEP, dstAddr, ZCL_CLUSTER_ID_SE_PRICING,
   1149                                    COMMAND_SE_PUBLISH_BILLING_PERIOD, TRUE,
   1150                                    ZCL_FRAME_SERVER_CLIENT_DIR, disableDefaultRsp, 0,
   1151                                    seqNum, PACKET_LEN_SE_PUBLISH_BILLING_PERIOD, buf );
   1152          }
   1153          
   1154          /*********************************************************************
   1155           * @fn      zclSE_Pricing_Send_PublishConsolidatedBill
   1156           *
   1157           * @brief   Call to send out a Publish Consolidated Bill
   1158           *
   1159           * @param   srcEP - Sending application's endpoint
   1160           * @param   dstAddr - where you want the message to go
   1161           * @param   pCmd - command payload
   1162           * @param   disableDefaultRsp - disable default response
   1163           * @param   seqNum - ZCL sequence number
   1164           *
   1165           * @return  ZStatus_t
   1166           */
   1167          ZStatus_t zclSE_Pricing_Send_PublishConsolidatedBill( uint8 srcEP, afAddrType_t *dstAddr,
   1168                                                           zclCCPublishConsolidatedBill_t *pCmd,
   1169                                                           uint8 disableDefaultRsp, uint8 seqNum )
   1170          {
   1171            uint8 buf[PACKET_LEN_SE_PUBLISH_CONSOLIDATED_BILL];
   1172            uint8 *pBuf;
   1173          
   1174            pBuf = osal_buffer_uint32( buf, pCmd->issuerEventId );
   1175            pBuf = osal_buffer_uint32( pBuf, pCmd->startTime );
   1176            pBuf = osal_buffer_uint24( pBuf, pCmd->duration );
   1177            *pBuf++ = pCmd->tariffType;
   1178            pBuf = osal_buffer_uint32( pBuf, pCmd->consolidatedBill );
   1179            *pBuf++ = LO_UINT16( pCmd->currency );
   1180            *pBuf++ = HI_UINT16( pCmd->currency );
   1181            *pBuf = pCmd->trailingDigit;
   1182          
   1183            return zcl_SendCommand( srcEP, dstAddr, ZCL_CLUSTER_ID_SE_PRICING,
   1184                                    COMMAND_SE_PUBLISH_CONSOLIDATED_BILL, TRUE,
   1185                                    ZCL_FRAME_SERVER_CLIENT_DIR, disableDefaultRsp, 0,
   1186                                    seqNum, PACKET_LEN_SE_PUBLISH_CONSOLIDATED_BILL, buf );
   1187          }
   1188          
   1189          /*********************************************************************
   1190           * @fn      zclSE_Pricing_Send_PublishCreditPaymentInfo
   1191           *
   1192           * @brief   Call to send out a Publish Credit Payment Info
   1193           *
   1194           * @param   srcEP - Sending application's endpoint
   1195           * @param   dstAddr - where you want the message to go
   1196           * @param   pCmd - command payload
   1197           * @param   disableDefaultRsp - disable default response
   1198           * @param   seqNum - ZCL sequence number
   1199           *
   1200           * @return  ZStatus_t
   1201           */
   1202          ZStatus_t zclSE_Pricing_Send_PublishCreditPaymentInfo( uint8 srcEP, afAddrType_t *dstAddr,
   1203                                                           zclCCPublishCreditPaymentInfo_t *pCmd,
   1204                                                           uint8 disableDefaultRsp, uint8 seqNum )
   1205          {
   1206            uint8 *buf;
   1207            uint8 *pBuf;
   1208            uint16 bufLen;
   1209            ZStatus_t status;
   1210          
   1211            bufLen = PACKET_LEN_SE_MIN_PUBLISH_CREDIT_PAYMENT_INFO + pCmd->creditPaymentRef.strLen;
   1212            buf = osal_mem_alloc( bufLen );
   1213            if ( buf == NULL )
   1214            {
   1215              return ( ZMemError );
   1216            }
   1217          
   1218            pBuf = osal_buffer_uint32( buf, pCmd->issuerEventId );
   1219            pBuf = osal_buffer_uint32( pBuf, pCmd->paymentDueDate );
   1220            pBuf = osal_buffer_uint32( pBuf, pCmd->creditPaymentOverdueAmt );
   1221            *pBuf++ = pCmd->creditPaymentStatus;
   1222            pBuf = osal_buffer_uint32( pBuf, pCmd->creditPayment );
   1223            pBuf = osal_buffer_uint32( pBuf, pCmd->creditPaymentDate );
   1224            *pBuf++ = pCmd->creditPaymentRef.strLen;
   1225            osal_memcpy( pBuf, pCmd->creditPaymentRef.pStr, pCmd->creditPaymentRef.strLen );
   1226          
   1227            status = zcl_SendCommand( srcEP, dstAddr, ZCL_CLUSTER_ID_SE_PRICING,
   1228                                      COMMAND_SE_PUBLISH_CREDIT_PAYMENT_INFO, TRUE,
   1229                                      ZCL_FRAME_SERVER_CLIENT_DIR, disableDefaultRsp, 0,
   1230                                      seqNum, bufLen, buf );
   1231            osal_mem_free( buf );
   1232          
   1233            return status;
   1234          }
   1235          
   1236          /*********************************************************************
   1237           * @fn      zclSE_Pricing_Send_GetTariffInformation
   1238           *
   1239           * @brief   Call to send out a Get Tariff Information
   1240           *
   1241           * @param   srcEP - Sending application's endpoint
   1242           * @param   dstAddr - where you want the message to go
   1243           * @param   pCmd - command payload
   1244           * @param   disableDefaultRsp - disable default response
   1245           * @param   seqNum - ZCL sequence number
   1246           *
   1247           * @return  ZStatus_t
   1248           */
   1249          ZStatus_t zclSE_Pricing_Send_GetTariffInformation( uint8 srcEP, afAddrType_t *dstAddr,
   1250                                                             zclCCGetTariffInformation_t *pCmd,
   1251                                                             uint8 disableDefaultRsp, uint8 seqNum )
   1252          {
   1253            uint8 buf[PACKET_LEN_SE_GET_TARIFF_INFO];
   1254            uint8 *pBuf;
   1255          
   1256            pBuf = osal_buffer_uint32( buf, pCmd->startTime );
   1257            *pBuf++ = pCmd->numEvents;
   1258            *pBuf = pCmd->tariffType;
   1259          
   1260            return zcl_SendCommand( srcEP, dstAddr, ZCL_CLUSTER_ID_SE_PRICING,
   1261                                    COMMAND_SE_GET_TARIFF_INFO, TRUE,
   1262                                    ZCL_FRAME_CLIENT_SERVER_DIR, disableDefaultRsp, 0,
   1263                                    seqNum, PACKET_LEN_SE_GET_TARIFF_INFO, buf );
   1264          }
   1265          
   1266          /*********************************************************************
   1267           * @fn      zclSE_Pricing_Send_GetPriceMatrix
   1268           *
   1269           * @brief   Call to send out a Get Price Matrix
   1270           *
   1271           * @param   srcEP - Sending application's endpoint
   1272           * @param   dstAddr - where you want the message to go
   1273           * @param   issuerId - Issuer ID
   1274           * @param   disableDefaultRsp - disable default response
   1275           * @param   seqNum - ZCL sequence number
   1276           *
   1277           * @return  ZStatus_t
   1278           */
   1279          ZStatus_t zclSE_Pricing_Send_GetPriceMatrix( uint8 srcEP, afAddrType_t *dstAddr,
   1280                                                       uint32 issuerId,
   1281                                                       uint8 disableDefaultRsp, uint8 seqNum )
   1282          {
   1283            uint8 buf[PACKET_LEN_SE_GET_PRICE_MATRIX];
   1284          
   1285            osal_buffer_uint32( buf, issuerId );
   1286          
   1287            return zcl_SendCommand( srcEP, dstAddr, ZCL_CLUSTER_ID_SE_PRICING,
   1288                                    COMMAND_SE_GET_PRICE_MATRIX, TRUE,
   1289                                    ZCL_FRAME_CLIENT_SERVER_DIR, disableDefaultRsp, 0,
   1290                                    seqNum, PACKET_LEN_SE_GET_PRICE_MATRIX, buf );
   1291          }
   1292          
   1293          /*********************************************************************
   1294           * @fn      zclSE_Pricing_Send_GetBlockThresholds
   1295           *
   1296           * @brief   Call to send out a Get Block Thresholds
   1297           *
   1298           * @param   srcEP - Sending application's endpoint
   1299           * @param   dstAddr - where you want the message to go
   1300           * @param   issuerId - Issuer ID
   1301           * @param   disableDefaultRsp - disable default response
   1302           * @param   seqNum - ZCL sequence number
   1303           *
   1304           * @return  ZStatus_t
   1305           */
   1306          ZStatus_t zclSE_Pricing_Send_GetBlockThresholds( uint8 srcEP, afAddrType_t *dstAddr,
   1307                                                           uint32 issuerId,
   1308                                                           uint8 disableDefaultRsp, uint8 seqNum )
   1309          {
   1310            uint8 buf[PACKET_LEN_SE_GET_BLOCK_THRESHOLD];
   1311          
   1312            osal_buffer_uint32( buf, issuerId );
   1313          
   1314            return zcl_SendCommand( srcEP, dstAddr, ZCL_CLUSTER_ID_SE_PRICING,
   1315                                    COMMAND_SE_GET_BLOCK_THRESHOLD, TRUE,
   1316                                    ZCL_FRAME_CLIENT_SERVER_DIR, disableDefaultRsp, 0,
   1317                                    seqNum, PACKET_LEN_SE_GET_BLOCK_THRESHOLD, buf );
   1318          }
   1319          
   1320          /*********************************************************************
   1321           * @fn      zclSE_Pricing_Send_GetConversionFactor
   1322           *
   1323           * @brief   Call to send out a Get Conversion Factor
   1324           *
   1325           * @param   srcEP - Sending application's endpoint
   1326           * @param   dstAddr - where you want the message to go
   1327           * @param   pCmd - command payload
   1328           * @param   disableDefaultRsp - disable default response
   1329           * @param   seqNum - ZCL sequence number
   1330           *
   1331           * @return  ZStatus_t
   1332           */
   1333          ZStatus_t zclSE_Pricing_Send_GetConversionFactor( uint8 srcEP, afAddrType_t *dstAddr,
   1334                                                            zclCCGetConversionFactor_t *pCmd,
   1335                                                            uint8 disableDefaultRsp, uint8 seqNum )
   1336          {
   1337            uint8 buf[PACKET_LEN_SE_GET_CONVERSION_FACTOR];
   1338            uint8 *pBuf;
   1339          
   1340            pBuf = osal_buffer_uint32( buf, pCmd->startTime );
   1341            *pBuf = pCmd->numEvents;
   1342          
   1343            return zcl_SendCommand( srcEP, dstAddr, ZCL_CLUSTER_ID_SE_PRICING,
   1344                                    COMMAND_SE_GET_CONVERSION_FACTOR, TRUE,
   1345                                    ZCL_FRAME_CLIENT_SERVER_DIR, disableDefaultRsp, 0,
   1346                                    seqNum, PACKET_LEN_SE_GET_CONVERSION_FACTOR, buf );
   1347          }
   1348          
   1349          /*********************************************************************
   1350           * @fn      zclSE_Pricing_Send_GetCalorificValue
   1351           *
   1352           * @brief   Call to send out a Get Calorific Value
   1353           *
   1354           * @param   srcEP - Sending application's endpoint
   1355           * @param   dstAddr - where you want the message to go
   1356           * @param   pCmd - command payload
   1357           * @param   disableDefaultRsp - disable default response
   1358           * @param   seqNum - ZCL sequence number
   1359           *
   1360           * @return  ZStatus_t
   1361           */
   1362          ZStatus_t zclSE_Pricing_Send_GetCalorificValue( uint8 srcEP, afAddrType_t *dstAddr,
   1363                                                          zclCCGetCalorificValue_t *pCmd,
   1364                                                          uint8 disableDefaultRsp, uint8 seqNum )
   1365          {
   1366            uint8 buf[PACKET_LEN_SE_GET_CALORIFIC_VALUE];
   1367            uint8 *pBuf;
   1368          
   1369            pBuf = osal_buffer_uint32( buf, pCmd->startTime );
   1370            *pBuf = pCmd->numEvents;
   1371          
   1372            return zcl_SendCommand( srcEP, dstAddr, ZCL_CLUSTER_ID_SE_PRICING,
   1373                                    COMMAND_SE_GET_CALORIFIC_VALUE, TRUE,
   1374                                    ZCL_FRAME_CLIENT_SERVER_DIR, disableDefaultRsp, 0,
   1375                                    seqNum, PACKET_LEN_SE_GET_CALORIFIC_VALUE, buf );
   1376          }
   1377          
   1378          /*********************************************************************
   1379           * @fn      zclSE_Pricing_Send_GetCO2Value
   1380           *
   1381           * @brief   Call to send out a Get CO2 Value
   1382           *
   1383           * @param   srcEP - Sending application's endpoint
   1384           * @param   dstAddr - where you want the message to go
   1385           * @param   pCmd - command payload
   1386           * @param   disableDefaultRsp - disable default response
   1387           * @param   seqNum - ZCL sequence number
   1388           *
   1389           * @return  ZStatus_t
   1390           */
   1391          ZStatus_t zclSE_Pricing_Send_GetCO2Value( uint8 srcEP, afAddrType_t *dstAddr,
   1392                                                          zclCCGetCO2Value_t *pCmd,
   1393                                                          uint8 disableDefaultRsp, uint8 seqNum )
   1394          {
   1395            uint8 buf[PACKET_LEN_SE_GET_CO2_VALUE];
   1396            uint8 *pBuf;
   1397          
   1398            pBuf = osal_buffer_uint32( buf, pCmd->startTime );
   1399            *pBuf++ = pCmd->numEvents;
   1400            *pBuf = pCmd->tariffType;
   1401          
   1402            return zcl_SendCommand( srcEP, dstAddr, ZCL_CLUSTER_ID_SE_PRICING,
   1403                                    COMMAND_SE_GET_CO2_VALUE, TRUE,
   1404                                    ZCL_FRAME_CLIENT_SERVER_DIR, disableDefaultRsp, 0,
   1405                                    seqNum, PACKET_LEN_SE_GET_CO2_VALUE, buf );
   1406          }
   1407          
   1408          /*********************************************************************
   1409           * @fn      zclSE_Pricing_Send_GetBillingPeriod
   1410           *
   1411           * @brief   Call to send out a Get Billing Period
   1412           *
   1413           * @param   srcEP - Sending application's endpoint
   1414           * @param   dstAddr - where you want the message to go
   1415           * @param   pCmd - command payload
   1416           * @param   disableDefaultRsp - disable default response
   1417           * @param   seqNum - ZCL sequence number
   1418           *
   1419           * @return  ZStatus_t
   1420           */
   1421          ZStatus_t zclSE_Pricing_Send_GetBillingPeriod( uint8 srcEP, afAddrType_t *dstAddr,
   1422                                                         zclCCGetBillingPeriod_t *pCmd,
   1423                                                         uint8 disableDefaultRsp, uint8 seqNum )
   1424          {
   1425            uint8 buf[PACKET_LEN_SE_GET_BILLING_PERIOD];
   1426            uint8 *pBuf;
   1427          
   1428            pBuf = osal_buffer_uint32( buf, pCmd->startTime );
   1429            *pBuf++ = pCmd->numEvents;
   1430            *pBuf = pCmd->tariffType;
   1431          
   1432            return zcl_SendCommand( srcEP, dstAddr, ZCL_CLUSTER_ID_SE_PRICING,
   1433                                    COMMAND_SE_GET_BILLING_PERIOD, TRUE,
   1434                                    ZCL_FRAME_CLIENT_SERVER_DIR, disableDefaultRsp, 0,
   1435                                    seqNum, PACKET_LEN_SE_GET_BILLING_PERIOD, buf );
   1436          }
   1437          
   1438          /*********************************************************************
   1439           * @fn      zclSE_Pricing_Send_GetConsolidatedBill
   1440           *
   1441           * @brief   Call to send out a Get Consolidated Bill
   1442           *
   1443           * @param   srcEP - Sending application's endpoint
   1444           * @param   dstAddr - where you want the message to go
   1445           * @param   pCmd - command payload
   1446           * @param   disableDefaultRsp - disable default response
   1447           * @param   seqNum - ZCL sequence number
   1448           *
   1449           * @return  ZStatus_t
   1450           */
   1451          ZStatus_t zclSE_Pricing_Send_GetConsolidatedBill( uint8 srcEP, afAddrType_t *dstAddr,
   1452                                                          zclCCGetConsolidatedBill_t *pCmd,
   1453                                                          uint8 disableDefaultRsp, uint8 seqNum )
   1454          {
   1455            uint8 buf[PACKET_LEN_SE_GET_CONSOLIDATED_BILL];
   1456            uint8 *pBuf;
   1457          
   1458            pBuf = osal_buffer_uint32( buf, pCmd->startTime );
   1459            *pBuf++ = pCmd->numEvents;
   1460            *pBuf = pCmd->tariffType;
   1461          
   1462            return zcl_SendCommand( srcEP, dstAddr, ZCL_CLUSTER_ID_SE_PRICING,
   1463                                    COMMAND_SE_GET_CONSOLIDATED_BILL, TRUE,
   1464                                    ZCL_FRAME_CLIENT_SERVER_DIR, disableDefaultRsp, 0,
   1465                                    seqNum, PACKET_LEN_SE_GET_CONSOLIDATED_BILL, buf );
   1466          }
   1467          
   1468          /*********************************************************************
   1469           * @fn      zclSE_Pricing_Send_CPPEventResponse
   1470           *
   1471           * @brief   Call to send out a CPP Event Response
   1472           *
   1473           * @param   srcEP - Sending application's endpoint
   1474           * @param   dstAddr - where you want the message to go
   1475           * @param   pCmd - command payload
   1476           * @param   disableDefaultRsp - disable default response
   1477           * @param   seqNum - ZCL sequence number
   1478           *
   1479           * @return  ZStatus_t
   1480           */
   1481          ZStatus_t zclSE_Pricing_Send_CPPEventResponse( uint8 srcEP, afAddrType_t *dstAddr,
   1482                                                         zclCCCPPEventResponse_t *pCmd,
   1483                                                         uint8 disableDefaultRsp, uint8 seqNum )
   1484          {
   1485            uint8 buf[PACKET_LEN_SE_CPP_EVENT_RESPONSE];
   1486            uint8 *pBuf;
   1487          
   1488            pBuf = osal_buffer_uint32( buf, pCmd->issuerEventId );
   1489            *pBuf = pCmd->CPPAuth;
   1490          
   1491            return zcl_SendCommand( srcEP, dstAddr, ZCL_CLUSTER_ID_SE_PRICING,
   1492                                    COMMAND_SE_CPP_EVENT_RESPONSE, TRUE,
   1493                                    ZCL_FRAME_CLIENT_SERVER_DIR, disableDefaultRsp, 0,
   1494                                    seqNum, PACKET_LEN_SE_CPP_EVENT_RESPONSE, buf );
   1495          }
   1496          #endif  // SE_UK_EXT
   1497          #endif  // ZCL_PRICING
   1498          
   1499          
   1500          #ifdef ZCL_MESSAGE
   1501          /*********************************************************************
   1502           * @fn      zclSE_Message_Send_DisplayMessage
   1503           *
   1504           * @brief   Call to send out a Display Message Command
   1505           *
   1506           * @param   srcEP - Sending application's endpoint
   1507           * @param   dstAddr - where you want the message to go
   1508           * @param   pCmd - command payload
   1509           * @param   disableDefaultRsp - disable default response
   1510           * @param   seqNum - ZCL sequence number
   1511           *
   1512           * @return  ZStatus_t
   1513           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1514          ZStatus_t zclSE_Message_Send_DisplayMessage( uint8 srcEP, afAddrType_t *dstAddr,
   \                     zclSE_Message_Send_DisplayMessage:
   1515                                                       zclCCDisplayMessage_t *pCmd,
   1516                                                       uint8 disableDefaultRsp, uint8 seqNum )
   1517          {
   \   000000   74EA         MOV     A,#-0x16
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 22
   \   000005                ; Auto size: 0
   \   000005   89..         MOV     ?V0 + 6,R1
   \   000007   8A..         MOV     ?V0 + 12,R2
   \   000009   8B..         MOV     ?V0 + 13,R3
   \   00000B   EC           MOV     A,R4
   \   00000C   FE           MOV     R6,A
   \   00000D   ED           MOV     A,R5
   \   00000E   FF           MOV     R7,A
   \   00000F   7416         MOV     A,#0x16
   \   000011   12....       LCALL   ?XSTACK_DISP0_8
   \   000014   E0           MOVX    A,@DPTR
   \   000015   F5..         MOV     ?V0 + 5,A
   \   000017   7417         MOV     A,#0x17
   \   000019   12....       LCALL   ?XSTACK_DISP0_8
   \   00001C   E0           MOVX    A,@DPTR
   \   00001D   F5..         MOV     ?V0 + 4,A
   1518            uint8 *buf;
   1519            uint8 *pBuf;
   1520            uint16 bufLen;
   1521            ZStatus_t status;
   1522          
   1523            // msgId + msgCtrl + start time + duration + msgLen + msg
   1524            bufLen = 4 + 1 + 4 + 2 + 1 + pCmd->msgString.strLen;
   \   00001F   EE           MOV     A,R6
   \   000020   240F         ADD     A,#0xf
   \   000022   F582         MOV     DPL,A
   \   000024   EF           MOV     A,R7
   \   000025   12....       LCALL   ??Subroutine170_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_359:
   \   000028   240C         ADD     A,#0xc
   \   00002A   12....       LCALL   ?Subroutine82 & 0xFFFF
   1525          
   1526            buf = osal_mem_alloc( bufLen );
   1527            if ( buf == NULL )
   \                     ??CrossCallReturnLabel_327:
   \   00002D   7005         JNZ     ??zclSE_Message_Send_DisplayMessage_0
   1528            {
   1529              return ( ZMemError );
   \   00002F   7910         MOV     R1,#0x10
   \   000031   02....       LJMP    ??CrossCallReturnLabel_215 & 0xFFFF
   1530            }
   1531          
   1532            pBuf = osal_buffer_uint32( buf, pCmd->messageId );  // Streamline the uint32 data
   \                     ??zclSE_Message_Send_DisplayMessage_0:
   \   000034                ; Setup parameters for call to function osal_buffer_uint32
   \   000034   8E82         MOV     DPL,R6
   \   000036   8F83         MOV     DPH,R7
   \   000038   12....       LCALL   ?PUSH_XSTACK8_X_FOUR
   \   00003B   12....       LCALL   ??Subroutine156_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_281:
   \   00003E   12....       LCALL   ?DEALLOC_XSTACK8
   1533            *pBuf++ = pCmd->messageCtrl.transmissionMode |
   1534                     (pCmd->messageCtrl.importance << SE_PROFILE_MSGCTRL_IMPORTANCE) |
   1535          #if defined ( SE_UK_EXT )
   1536                     (pCmd->messageCtrl.pinRequired << SE_PROFILE_MSGCTRL_PINREQUIRED ) |
   1537                     (pCmd->messageCtrl.acceptanceRequired << SE_PROFILE_MSGCTRL_ACCEPTREQUIRED ) |
   1538          #endif
   1539                     (pCmd->messageCtrl.confirmationRequired << SE_PROFILE_MSGCTRL_CONFREQUIRED);
   \   000041   8E82         MOV     DPL,R6
   \   000043   8F83         MOV     DPH,R7
   \   000045   12....       LCALL   ?Subroutine66 & 0xFFFF
   \                     ??CrossCallReturnLabel_93:
   \   000048   8E82         MOV     DPL,R6
   \   00004A   8F83         MOV     DPH,R7
   \   00004C   A3           INC     DPTR
   \   00004D   A3           INC     DPTR
   \   00004E   A3           INC     DPTR
   \   00004F   A3           INC     DPTR
   \   000050   A3           INC     DPTR
   \   000051   E0           MOVX    A,@DPTR
   \   000052   33           RLC     A
   \   000053   33           RLC     A
   \   000054   54FC         ANL     A,#0xfc
   \   000056   8E82         MOV     DPL,R6
   \   000058   8F83         MOV     DPH,R7
   \   00005A   A3           INC     DPTR
   \   00005B   A3           INC     DPTR
   \   00005C   A3           INC     DPTR
   \   00005D   A3           INC     DPTR
   \   00005E   F8           MOV     R0,A
   \   00005F   E0           MOVX    A,@DPTR
   \   000060   48           ORL     A,R0
   \   000061   49           ORL     A,R1
   \   000062   8A82         MOV     DPL,R2
   \   000064   8B83         MOV     DPH,R3
   \   000066   F0           MOVX    @DPTR,A
   \   000067   A3           INC     DPTR
   \   000068   AA82         MOV     R2,DPL
   \   00006A   AB83         MOV     R3,DPH
   1540            pBuf = osal_buffer_uint32( pBuf, pCmd->startTime );
   \   00006C                ; Setup parameters for call to function osal_buffer_uint32
   \   00006C   8E82         MOV     DPL,R6
   \   00006E   8F83         MOV     DPH,R7
   \   000070   A3           INC     DPTR
   \   000071   A3           INC     DPTR
   \   000072   A3           INC     DPTR
   \   000073   A3           INC     DPTR
   \   000074   A3           INC     DPTR
   \   000075   A3           INC     DPTR
   \   000076   A3           INC     DPTR
   \   000077   A3           INC     DPTR
   \   000078   A3           INC     DPTR
   \   000079   12....       LCALL   ?PUSH_XSTACK8_X_FOUR
   \   00007C   12....       LCALL   ??Subroutine156_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_282:
   \   00007F   12....       LCALL   ?DEALLOC_XSTACK8
   1541            *pBuf++ = LO_UINT16( pCmd->durationInMinutes );
   \   000082   EE           MOV     A,R6
   \   000083   240D         ADD     A,#0xd
   \   000085   12....       LCALL   ?Subroutine16 & 0xFFFF
   1542            *pBuf++ = HI_UINT16( pCmd->durationInMinutes );
   1543            *pBuf++ = pCmd->msgString.strLen;
   \                     ??CrossCallReturnLabel_225:
   \   000088   240F         ADD     A,#0xf
   \   00008A   FC           MOV     R4,A
   \   00008B   EF           MOV     A,R7
   \   00008C   3400         ADDC    A,#0x0
   \   00008E   FD           MOV     R5,A
   \   00008F   8C82         MOV     DPL,R4
   \   000091   8D83         MOV     DPH,R5
   \   000093   12....       LCALL   ??Subroutine150_0 & 0xFFFF
   1544          
   1545            osal_memcpy( pBuf, pCmd->msgString.pStr, pCmd->msgString.strLen );
   \                     ??CrossCallReturnLabel_231:
   \   000096   2410         ADD     A,#0x10
   \   000098   F582         MOV     DPL,A
   \   00009A   EF           MOV     A,R7
   \   00009B   12....       LCALL   ??Subroutine193_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_511:
   \   00009E   12....       LCALL   ?Subroutine51 & 0xFFFF
   \                     ??CrossCallReturnLabel_62:
   \   0000A1   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   0000A4   12....       LCALL   ?Subroutine59 & 0xFFFF
   \                     ??CrossCallReturnLabel_80:
   \   0000A7   12....       LCALL   ?DEALLOC_XSTACK8
   1546          
   1547            status = zcl_SendCommand( srcEP, dstAddr, ZCL_CLUSTER_ID_SE_MESSAGE,
   1548                                      COMMAND_SE_DISPLAY_MESSAGE, TRUE,
   1549                                      ZCL_FRAME_SERVER_CLIENT_DIR, disableDefaultRsp,
   1550                                      0, seqNum, bufLen, buf );
   \   0000AA                ; Setup parameters for call to function zcl_SendCommand
   \   0000AA   78..         MOV     R0,#?V0 + 0
   \   0000AC   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000AF   78..         MOV     R0,#?V0 + 2
   \   0000B1   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000B4   E5..         MOV     A,?V0 + 4
   \   0000B6   F5..         MOV     ?V0 + 2,A
   \   0000B8   78..         MOV     R0,#?V0 + 2
   \   0000BA   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000BD   E4           CLR     A
   \   0000BE   F5..         MOV     ?V0 + 2,A
   \   0000C0   F5..         MOV     ?V0 + 3,A
   \   0000C2   78..         MOV     R0,#?V0 + 2
   \   0000C4   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000C7   E5..         MOV     A,?V0 + 5
   \   0000C9   F5..         MOV     ?V0 + 2,A
   \   0000CB   78..         MOV     R0,#?V0 + 2
   \   0000CD   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000D0   75..01       MOV     ?V0 + 2,#0x1
   \   0000D3   78..         MOV     R0,#?V0 + 2
   \   0000D5   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000D8   78..         MOV     R0,#?V0 + 2
   \   0000DA   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000DD   75..00       MOV     ?V0 + 2,#0x0
   \   0000E0   78..         MOV     R0,#?V0 + 2
   \   0000E2   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000E5   7C03         MOV     R4,#0x3
   \   0000E7   7D07         MOV     R5,#0x7
   \   0000E9   AA..         MOV     R2,?V0 + 12
   \   0000EB   AB..         MOV     R3,?V0 + 13
   \   0000ED   A9..         MOV     R1,?V0 + 6
   \   0000EF   12....       LCALL   ??Subroutine160_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_316:
   \   0000F2   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000F5   12....       LCALL   ?Subroutine94 & 0xFFFF
   1551            osal_mem_free( buf );
   1552          
   1553            return status;
   \                     ??CrossCallReturnLabel_215:
   \   0000F8   7F0E         MOV     R7,#0xe
   \   0000FA   02....       LJMP    ?BANKED_LEAVE_XDATA
   1554          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine66:
   \   000000   A3           INC     DPTR
   \   000001   A3           INC     DPTR
   \   000002   A3           INC     DPTR
   \   000003   A3           INC     DPTR
   \   000004   A3           INC     DPTR
   \   000005   A3           INC     DPTR
   \   000006   A3           INC     DPTR
   \   000007   A3           INC     DPTR
   \   000008   E0           MOVX    A,@DPTR
   \   000009   A2E0         MOV     C,0xE0 /* A   */.0
   \   00000B   E4           CLR     A
   \   00000C   33           RLC     A
   \   00000D   13           RRC     A
   \   00000E   13           RRC     A
   \   00000F   F9           MOV     R1,A
   \   000010   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine51:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F5..         MOV     ?V0 + 8,A
   \   000003   A3           INC     DPTR
   \   000004   E0           MOVX    A,@DPTR
   \   000005   F5..         MOV     ?V0 + 9,A
   \   000007   75..00       MOV     ?V0 + 10,#0x0
   \   00000A   78..         MOV     R0,#?V0 + 8
   \   00000C   22           RET
   1555          
   1556          /*********************************************************************
   1557           * @fn      zclSE_Message_Send_CancelMessage
   1558           *
   1559           * @brief   Call to send out a Cancel Message Command
   1560           *
   1561           * @param   srcEP - Sending application's endpoint
   1562           * @param   dstAddr - where you want the message to go
   1563           * @param   pCmd - command payload
   1564           * @param   disableDefaultRsp - disable default response
   1565           * @param   seqNum - ZCL sequence number
   1566           *
   1567           * @return  ZStatus_t
   1568           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1569          ZStatus_t zclSE_Message_Send_CancelMessage( uint8 srcEP, afAddrType_t *dstAddr,
   \                     zclSE_Message_Send_CancelMessage:
   1570                                                      zclCCCancelMessage_t *pCmd,
   1571                                                      uint8 disableDefaultRsp, uint8 seqNum )
   1572          {
   \   000000   74F3         MOV     A,#-0xd
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 13
   \   000005                ; Auto size: 5
   \   000005   74FB         MOV     A,#-0x5
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   89..         MOV     ?V0 + 2,R1
   \   00000C   EA           MOV     A,R2
   \   00000D   FE           MOV     R6,A
   \   00000E   EB           MOV     A,R3
   \   00000F   FF           MOV     R7,A
   \   000010   8C..         MOV     ?V0 + 0,R4
   \   000012   8D..         MOV     ?V0 + 1,R5
   \   000014   7412         MOV     A,#0x12
   \   000016   12....       LCALL   ?XSTACK_DISP0_8
   \   000019   12....       LCALL   ?Subroutine39 & 0xFFFF
   \                     ??CrossCallReturnLabel_48:
   \   00001C   12....       LCALL   ?XSTACK_DISP0_8
   \   00001F   12....       LCALL   ?Subroutine31 & 0xFFFF
   1573            uint8 buf[5];
   1574          
   1575            osal_buffer_uint32( buf, pCmd->messageId );  // Streamline the uint32 data
   \                     ??CrossCallReturnLabel_32:
   \   000022   12....       LCALL   ?PUSH_XSTACK8_X_FOUR
   \   000025   7404         MOV     A,#0x4
   \   000027   12....       LCALL   ?XSTACK_DISP0_8
   \   00002A   12....       LCALL   ?Subroutine81 & 0xFFFF
   \                     ??CrossCallReturnLabel_264:
   \   00002D   12....       LCALL   ?DEALLOC_XSTACK8
   1576            buf[4] = pCmd->messageCtrl.transmissionMode |
   1577                     (pCmd->messageCtrl.importance << SE_PROFILE_MSGCTRL_IMPORTANCE) |
   1578          #if defined ( SE_UK_EXT )
   1579                     (pCmd->messageCtrl.pinRequired << SE_PROFILE_MSGCTRL_PINREQUIRED ) |
   1580                     (pCmd->messageCtrl.acceptanceRequired << SE_PROFILE_MSGCTRL_ACCEPTREQUIRED ) |
   1581          #endif
   1582                     (pCmd->messageCtrl.confirmationRequired << SE_PROFILE_MSGCTRL_CONFREQUIRED);
   \   000030   85..82       MOV     DPL,?V0 + 0
   \   000033   85..83       MOV     DPH,?V0 + 1
   \   000036   12....       LCALL   ?Subroutine66 & 0xFFFF
   \                     ??CrossCallReturnLabel_94:
   \   000039   85..82       MOV     DPL,?V0 + 0
   \   00003C   85..83       MOV     DPH,?V0 + 1
   \   00003F   A3           INC     DPTR
   \   000040   A3           INC     DPTR
   \   000041   A3           INC     DPTR
   \   000042   A3           INC     DPTR
   \   000043   A3           INC     DPTR
   \   000044   E0           MOVX    A,@DPTR
   \   000045   33           RLC     A
   \   000046   33           RLC     A
   \   000047   54FC         ANL     A,#0xfc
   \   000049   85..82       MOV     DPL,?V0 + 0
   \   00004C   85..83       MOV     DPH,?V0 + 1
   \   00004F   A3           INC     DPTR
   \   000050   A3           INC     DPTR
   \   000051   A3           INC     DPTR
   \   000052   A3           INC     DPTR
   \   000053   F8           MOV     R0,A
   \   000054   E0           MOVX    A,@DPTR
   \   000055   48           ORL     A,R0
   \   000056   49           ORL     A,R1
   \   000057   C0E0         PUSH    A
   \   000059   7404         MOV     A,#0x4
   \   00005B   12....       LCALL   ?XSTACK_DISP0_8
   \   00005E   D0E0         POP     A
   \   000060   12....       LCALL   ??Subroutine151_0 & 0xFFFF
   1583          
   1584            return zcl_SendCommand( srcEP, dstAddr, ZCL_CLUSTER_ID_SE_MESSAGE,
   1585                                    COMMAND_SE_CANCEL_MESSAGE, TRUE,
   1586                                    ZCL_FRAME_SERVER_CLIENT_DIR, disableDefaultRsp,
   1587                                    0, seqNum, 5, buf );
   \                     ??CrossCallReturnLabel_238:
   \   000063   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000066   75..05       MOV     ?V0 + 0,#0x5
   \   000069   75..00       MOV     ?V0 + 1,#0x0
   \   00006C   78..         MOV     R0,#?V0 + 0
   \   00006E   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000071   E5..         MOV     A,?V0 + 4
   \   000073   F5..         MOV     ?V0 + 0,A
   \   000075   78..         MOV     R0,#?V0 + 0
   \   000077   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00007A   E4           CLR     A
   \   00007B   F5..         MOV     ?V0 + 0,A
   \   00007D   78..         MOV     R0,#?V0 + 0
   \   00007F   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000082   E5..         MOV     A,?V0 + 3
   \   000084   F5..         MOV     ?V0 + 0,A
   \   000086   78..         MOV     R0,#?V0 + 0
   \   000088   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00008B   75..01       MOV     ?V0 + 0,#0x1
   \   00008E   78..         MOV     R0,#?V0 + 0
   \   000090   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000093   78..         MOV     R0,#?V0 + 0
   \   000095   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000098   78..         MOV     R0,#?V0 + 0
   \   00009A   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00009D   7C03         MOV     R4,#0x3
   \   00009F   80..         SJMP    ??Subroutine152_0
   1588          }
   1589          
   1590          /*********************************************************************
   1591           * @fn      zclSE_Message_Send_MessageConfirmation
   1592           *
   1593           * @brief   Call to send out a Message Confirmation
   1594           *
   1595           * @param   srcEP - Sending application's endpoint
   1596           * @param   dstAddr - where you want the message to go
   1597           * @param   pCmd - command payload
   1598           * @param   disableDefaultRsp - disable default response
   1599           * @param   seqNum - ZCL sequence number
   1600           *
   1601           * @return  ZStatus_t
   1602           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1603          ZStatus_t zclSE_Message_Send_MessageConfirmation( uint8 srcEP, afAddrType_t *dstAddr,
   \                     zclSE_Message_Send_MessageConfirmation:
   1604                                                            zclCCMessageConfirmation_t *pCmd,
   1605                                                            uint8 disableDefaultRsp, uint8 seqNum )
   1606          {
   \   000000   74EE         MOV     A,#-0x12
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 18
   \   000005                ; Auto size: 0
   \   000005   89..         MOV     ?V0 + 2,R1
   \   000007   EA           MOV     A,R2
   \   000008   FE           MOV     R6,A
   \   000009   EB           MOV     A,R3
   \   00000A   FF           MOV     R7,A
   \   00000B   8C..         MOV     ?V0 + 0,R4
   \   00000D   8D..         MOV     ?V0 + 1,R5
   \   00000F   7412         MOV     A,#0x12
   \   000011   12....       LCALL   ?XSTACK_DISP0_8
   \   000014   12....       LCALL   ?Subroutine39 & 0xFFFF
   \                     ??CrossCallReturnLabel_49:
   \   000017   12....       LCALL   ?XSTACK_DISP0_8
   \   00001A   E0           MOVX    A,@DPTR
   \   00001B   F5..         MOV     ?V0 + 6,A
   1607            uint8 *buf;
   1608            uint8 *pBuf;
   1609            uint16 bufLen = 4 + 4; // msgId + confirm time
   1610            ZStatus_t status;
   1611          
   1612          #if defined ( SE_UK_EXT )
   1613            // Message Response length must be 0 - 20 octets
   1614            if ( pCmd->msgString.strLen > SE_PROFILE_MESSAGE_RESPONSE_LENGTH )
   1615            {
   1616              return (ZInvalidParameter);
   1617            }
   1618          
   1619            // msgLen + msg
   1620            bufLen += 1 + pCmd->msgString.strLen;
   1621          #endif
   1622          
   1623            buf = osal_mem_alloc( bufLen );
   \   00001D                ; Setup parameters for call to function osal_mem_alloc
   \   00001D   7A08         MOV     R2,#0x8
   \   00001F   12....       LCALL   ?Subroutine84 & 0xFFFF
   1624            if ( buf == NULL )
   \                     ??CrossCallReturnLabel_133:
   \   000022   7004         JNZ     ??zclSE_Message_Send_MessageConfirmation_0
   1625            {
   1626              return ( ZMemError );
   \   000024   7910         MOV     R1,#0x10
   \   000026   8072         SJMP    ??CrossCallReturnLabel_221
   1627            }
   1628          
   1629            pBuf = osal_buffer_uint32( buf, pCmd->messageId );  // Streamline the uint32 data
   1630            pBuf = osal_buffer_uint32( pBuf, pCmd->confirmTime );
   \                     ??zclSE_Message_Send_MessageConfirmation_0:
   \   000028                ; Setup parameters for call to function osal_buffer_uint32
   \   000028   85..82       MOV     DPL,?V0 + 0
   \   00002B   85..83       MOV     DPH,?V0 + 1
   \   00002E   A3           INC     DPTR
   \   00002F   A3           INC     DPTR
   \   000030   A3           INC     DPTR
   \   000031   A3           INC     DPTR
   \   000032   12....       LCALL   ?PUSH_XSTACK8_X_FOUR
   \   000035                ; Setup parameters for call to function osal_buffer_uint32
   \   000035   85..82       MOV     DPL,?V0 + 0
   \   000038   85..83       MOV     DPH,?V0 + 1
   \   00003B   12....       LCALL   ?PUSH_XSTACK8_X_FOUR
   \   00003E   12....       LCALL   ??Subroutine156_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_283:
   \   000041   12....       LCALL   ?DEALLOC_XSTACK8
   \   000044   12....       LCALL   ??Subroutine156_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_284:
   \   000047   12....       LCALL   ?DEALLOC_XSTACK8
   1631          
   1632          #if defined ( SE_UK_EXT )
   1633            *pBuf++ = pCmd->msgString.strLen;
   1634            osal_memcpy( pBuf, pCmd->msgString.pStr, pCmd->msgString.strLen );
   1635          #endif
   1636          
   1637            status = zcl_SendCommand( srcEP, dstAddr, ZCL_CLUSTER_ID_SE_MESSAGE,
   1638                                      COMMAND_SE_MESSAGE_CONFIRMATION, TRUE,
   1639                                      ZCL_FRAME_CLIENT_SERVER_DIR, disableDefaultRsp,
   1640                                      0, seqNum, bufLen, buf );
   \   00004A                ; Setup parameters for call to function zcl_SendCommand
   \   00004A   78..         MOV     R0,#?V0 + 4
   \   00004C   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00004F   75..08       MOV     ?V0 + 0,#0x8
   \   000052   75..00       MOV     ?V0 + 1,#0x0
   \   000055   78..         MOV     R0,#?V0 + 0
   \   000057   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00005A   E5..         MOV     A,?V0 + 6
   \   00005C   F5..         MOV     ?V0 + 0,A
   \   00005E   78..         MOV     R0,#?V0 + 0
   \   000060   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000063   E4           CLR     A
   \   000064   F5..         MOV     ?V0 + 0,A
   \   000066   78..         MOV     R0,#?V0 + 0
   \   000068   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00006B   E5..         MOV     A,?V0 + 3
   \   00006D   F5..         MOV     ?V0 + 0,A
   \   00006F   78..         MOV     R0,#?V0 + 0
   \   000071   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000074   75..00       MOV     ?V0 + 0,#0x0
   \   000077   78..         MOV     R0,#?V0 + 0
   \   000079   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00007C   75..01       MOV     ?V0 + 0,#0x1
   \   00007F   78..         MOV     R0,#?V0 + 0
   \   000081   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000084   78..         MOV     R0,#?V0 + 0
   \   000086   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000089   7C03         MOV     R4,#0x3
   \   00008B   12....       LCALL   ??Subroutine159_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_311:
   \   00008E   12....       LCALL   ?DEALLOC_XSTACK8
   \   000091   E9           MOV     A,R1
   \   000092   FE           MOV     R6,A
   1641            osal_mem_free( buf );
   \   000093                ; Setup parameters for call to function osal_mem_free
   \   000093   AA..         MOV     R2,?V0 + 4
   \   000095   AB..         MOV     R3,?V0 + 5
   \   000097   12....       LCALL   ??Subroutine148_0 & 0xFFFF
   1642          
   1643            return status;
   \                     ??CrossCallReturnLabel_221:
   \   00009A   02....       LJMP    ?Subroutine3 & 0xFFFF
   1644          }
   1645          #endif  // ZCL_MESSAGE
   1646          
   1647          #ifdef ZCL_LOAD_CONTROL
   1648          /*********************************************************************
   1649           * @fn      zclSE_LoadControl_Send_LoadControlEvent
   1650           *
   1651           * @brief   Call to send out a Load Control Event
   1652           *
   1653           * @param   srcEP - Sending application's endpoint
   1654           * @param   dstAddr - where you want the message to go
   1655           * @param   pCmd - command payload
   1656           * @param   disableDefaultRsp - disable default response
   1657           * @param   seqNum - ZCL sequence number
   1658           *
   1659           * @return  ZStatus_t
   1660           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1661          ZStatus_t zclSE_LoadControl_Send_LoadControlEvent( uint8 srcEP, afAddrType_t *dstAddr,
   \                     zclSE_LoadControl_Send_LoadControlEvent:
   1662                                                                zclCCLoadControlEvent_t *pCmd,
   1663                                                                uint8 disableDefaultRsp, uint8 seqNum )
   1664          {
   \   000000   74EE         MOV     A,#-0x12
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 18
   \   000005                ; Auto size: 0
   \   000005   89..         MOV     ?V0 + 6,R1
   \   000007   8A..         MOV     ?V0 + 2,R2
   \   000009   8B..         MOV     ?V0 + 3,R3
   \   00000B   8C..         MOV     ?V0 + 4,R4
   \   00000D   8D..         MOV     ?V0 + 5,R5
   \   00000F   7412         MOV     A,#0x12
   \   000011   12....       LCALL   ?XSTACK_DISP0_8
   \   000014   E0           MOVX    A,@DPTR
   \   000015   FF           MOV     R7,A
   \   000016   7413         MOV     A,#0x13
   \   000018   12....       LCALL   ?XSTACK_DISP0_8
   \   00001B   E0           MOVX    A,@DPTR
   \   00001C   FE           MOV     R6,A
   1665            uint8 *buf;
   1666            uint8 *pBuf;
   1667            ZStatus_t status;
   1668          
   1669            buf = osal_mem_alloc( PACKET_LEN_SE_LOAD_CONTROL_EVENT );
   \   00001D                ; Setup parameters for call to function osal_mem_alloc
   \   00001D   7A17         MOV     R2,#0x17
   \   00001F   7B00         MOV     R3,#0x0
   \   000021   12....       LCALL   ??Subroutine161_0 & 0xFFFF
   1670          
   1671            if ( buf == NULL )
   \                     ??CrossCallReturnLabel_329:
   \   000024   7005         JNZ     ??zclSE_LoadControl_Send_LoadControlEvent_0
   1672            {
   1673              return ( ZMemError );
   \   000026   7910         MOV     R1,#0x10
   \   000028   02....       LJMP    ??CrossCallReturnLabel_216 & 0xFFFF
   1674            }
   1675          
   1676            pBuf = osal_buffer_uint32( buf, pCmd->issuerEvent );
   \                     ??zclSE_LoadControl_Send_LoadControlEvent_0:
   \   00002B                ; Setup parameters for call to function osal_buffer_uint32
   \   00002B   85..82       MOV     DPL,?V0 + 4
   \   00002E   85..83       MOV     DPH,?V0 + 5
   \   000031   12....       LCALL   ?PUSH_XSTACK8_X_FOUR
   \   000034   12....       LCALL   ??Subroutine156_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_285:
   \   000037   12....       LCALL   ?DEALLOC_XSTACK8
   1677            pBuf = osal_buffer_uint24( pBuf, pCmd->deviceGroupClass );
   \   00003A                ; Setup parameters for call to function osal_buffer_uint24
   \   00003A   85..82       MOV     DPL,?V0 + 4
   \   00003D   85..83       MOV     DPH,?V0 + 5
   \   000040   A3           INC     DPTR
   \   000041   A3           INC     DPTR
   \   000042   A3           INC     DPTR
   \   000043   A3           INC     DPTR
   \   000044   12....       LCALL   ?PUSH_XSTACK8_X_FOUR
   \   000047   12....       LCALL   ?Subroutine96 & 0xFFFF
   \                     ??CrossCallReturnLabel_153:
   \   00004A   12....       LCALL   ?DEALLOC_XSTACK8
   1678            pBuf = osal_buffer_uint32( pBuf, pCmd->startTime );
   \   00004D                ; Setup parameters for call to function osal_buffer_uint32
   \   00004D   85..82       MOV     DPL,?V0 + 4
   \   000050   85..83       MOV     DPH,?V0 + 5
   \   000053   A3           INC     DPTR
   \   000054   A3           INC     DPTR
   \   000055   A3           INC     DPTR
   \   000056   A3           INC     DPTR
   \   000057   A3           INC     DPTR
   \   000058   A3           INC     DPTR
   \   000059   A3           INC     DPTR
   \   00005A   A3           INC     DPTR
   \   00005B   12....       LCALL   ?PUSH_XSTACK8_X_FOUR
   \   00005E   12....       LCALL   ??Subroutine156_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_286:
   \   000061   12....       LCALL   ?DEALLOC_XSTACK8
   1679            *pBuf++ = LO_UINT16( pCmd->durationInMinutes );
   \   000064   E5..         MOV     A,?V0 + 4
   \   000066   240C         ADD     A,#0xc
   \   000068   F8           MOV     R0,A
   \   000069   E5..         MOV     A,?V0 + 5
   \   00006B   12....       LCALL   ?Subroutine90 & 0xFFFF
   \                     ??CrossCallReturnLabel_144:
   \   00006E   12....       LCALL   ??Subroutine154_0 & 0xFFFF
   1680            *pBuf++ = HI_UINT16( pCmd->durationInMinutes );
   \                     ??CrossCallReturnLabel_243:
   \   000071   8882         MOV     DPL,R0
   \   000073   8983         MOV     DPH,R1
   \   000075   A3           INC     DPTR
   \   000076   12....       LCALL   ??Subroutine155_0 & 0xFFFF
   1681            *pBuf++ = pCmd->criticalityLevel;
   \                     ??CrossCallReturnLabel_257:
   \   000079   240E         ADD     A,#0xe
   \   00007B   12....       LCALL   ?Subroutine14 & 0xFFFF
   1682            *pBuf++ = pCmd->coolingTemperatureOffset;
   \                     ??CrossCallReturnLabel_252:
   \   00007E   240F         ADD     A,#0xf
   \   000080   12....       LCALL   ?Subroutine14 & 0xFFFF
   1683            *pBuf++ = pCmd->heatingTemperatureOffset;
   \                     ??CrossCallReturnLabel_253:
   \   000083   2410         ADD     A,#0x10
   \   000085   12....       LCALL   ?Subroutine14 & 0xFFFF
   1684            *pBuf++ = LO_UINT16( pCmd->coolingTemperatureSetPoint );
   \                     ??CrossCallReturnLabel_254:
   \   000088   2411         ADD     A,#0x11
   \   00008A   F8           MOV     R0,A
   \   00008B   12....       LCALL   ?Subroutine46 & 0xFFFF
   1685            *pBuf++ = HI_UINT16( pCmd->coolingTemperatureSetPoint );
   \                     ??CrossCallReturnLabel_55:
   \   00008E   12....       LCALL   ??Subroutine155_0 & 0xFFFF
   1686            *pBuf++ = LO_UINT16( pCmd->heatingTemperatureSetPoint );
   \                     ??CrossCallReturnLabel_258:
   \   000091   2413         ADD     A,#0x13
   \   000093   08           INC     R0
   \   000094   08           INC     R0
   \   000095   12....       LCALL   ?Subroutine46 & 0xFFFF
   1687            *pBuf++ = HI_UINT16( pCmd->heatingTemperatureSetPoint );
   \                     ??CrossCallReturnLabel_56:
   \   000098   12....       LCALL   ??Subroutine155_0 & 0xFFFF
   1688            *pBuf++ = pCmd->averageLoadAdjustmentPercentage;
   \                     ??CrossCallReturnLabel_259:
   \   00009B   2415         ADD     A,#0x15
   \   00009D   12....       LCALL   ?Subroutine14 & 0xFFFF
   1689            *pBuf++ = pCmd->dutyCycle;
   \                     ??CrossCallReturnLabel_255:
   \   0000A0   2416         ADD     A,#0x16
   \   0000A2   12....       LCALL   ?Subroutine14 & 0xFFFF
   1690            *pBuf = pCmd->eventControl;
   \                     ??CrossCallReturnLabel_256:
   \   0000A5   2417         ADD     A,#0x17
   \   0000A7   F582         MOV     DPL,A
   \   0000A9   E5..         MOV     A,?V0 + 5
   \   0000AB   12....       LCALL   ?Subroutine65 & 0xFFFF
   1691          
   1692            status = zcl_SendCommand( srcEP, dstAddr, ZCL_CLUSTER_ID_SE_LOAD_CONTROL,
   1693                                      COMMAND_SE_LOAD_CONTROL_EVENT, TRUE,
   1694                                      ZCL_FRAME_SERVER_CLIENT_DIR, disableDefaultRsp, 0, seqNum,
   1695                                      PACKET_LEN_SE_LOAD_CONTROL_EVENT, buf );
   \                     ??CrossCallReturnLabel_92:
   \   0000AE   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000B1   75..17       MOV     ?V0 + 4,#0x17
   \   0000B4   75..00       MOV     ?V0 + 5,#0x0
   \   0000B7   78..         MOV     R0,#?V0 + 4
   \   0000B9   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000BC   EE           MOV     A,R6
   \   0000BD   F5..         MOV     ?V0 + 4,A
   \   0000BF   78..         MOV     R0,#?V0 + 4
   \   0000C1   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000C4   E4           CLR     A
   \   0000C5   F5..         MOV     ?V0 + 4,A
   \   0000C7   78..         MOV     R0,#?V0 + 4
   \   0000C9   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000CC   EF           MOV     A,R7
   \   0000CD   F5..         MOV     ?V0 + 4,A
   \   0000CF   78..         MOV     R0,#?V0 + 4
   \   0000D1   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000D4   75..01       MOV     ?V0 + 4,#0x1
   \   0000D7   78..         MOV     R0,#?V0 + 4
   \   0000D9   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000DC   78..         MOV     R0,#?V0 + 4
   \   0000DE   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000E1   75..00       MOV     ?V0 + 4,#0x0
   \   0000E4   78..         MOV     R0,#?V0 + 4
   \   0000E6   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000E9   7C01         MOV     R4,#0x1
   \   0000EB   7D07         MOV     R5,#0x7
   \   0000ED   AA..         MOV     R2,?V0 + 2
   \   0000EF   AB..         MOV     R3,?V0 + 3
   \   0000F1   A9..         MOV     R1,?V0 + 6
   \   0000F3   12....       LCALL   ??Subroutine160_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_317:
   \   0000F6   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000F9   12....       LCALL   ?Subroutine94 & 0xFFFF
   1696          
   1697            osal_mem_free( buf );
   1698          
   1699            return status;
   \                     ??CrossCallReturnLabel_216:
   \   0000FC                REQUIRE ?Subroutine3
   \   0000FC                ; // Fall through to label ?Subroutine3
   1700          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine46:
   \   000000   E5..         MOV     A,?V0 + 5
   \   000002   12....       LCALL   ?Subroutine107 & 0xFFFF
   \                     ??CrossCallReturnLabel_163:
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine107:
   \   000000   12....       LCALL   ?Subroutine142 & 0xFFFF
   \                     ??CrossCallReturnLabel_208:
   \   000003   12....       LCALL   ?Subroutine135 & 0xFFFF
   \                     ??CrossCallReturnLabel_298:
   \   000006   8882         MOV     DPL,R0
   \   000008   8983         MOV     DPH,R1
   \   00000A   A3           INC     DPTR
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine14:
   \   000000   F582         MOV     DPL,A
   \   000002   E5..         MOV     A,?V0 + 5
   \   000004   12....       LCALL   ??Subroutine187_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_553:
   \   000007                REQUIRE ??Subroutine155_0
   \   000007                ; // Fall through to label ??Subroutine155_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine155_0:
   \   000000   12....       LCALL   ?Subroutine108 & 0xFFFF
   \                     ??CrossCallReturnLabel_296:
   \   000003   E5..         MOV     A,?V0 + 4
   \   000005   22           RET
   1701          
   1702          /*********************************************************************
   1703           * @fn      zclSE_LoadControl_Send_CancelLoadControlEvent
   1704           *
   1705           * @brief   Call to send out a Cancel Load Control Event
   1706           *
   1707           * @param   srcEP - Sending application's endpoint
   1708           * @param   dstAddr - where you want the message to go
   1709           * @param   pCmd - command payload
   1710           * @param   disableDefaultRsp - disable default response
   1711           * @param   seqNum - ZCL sequence number
   1712           *
   1713           * @return  ZStatus_t
   1714           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine38:
   \   000000   A3           INC     DPTR
   \   000001   A3           INC     DPTR
   \   000002   A3           INC     DPTR
   \   000003   A3           INC     DPTR
   \   000004   A3           INC     DPTR
   \   000005   A3           INC     DPTR
   \   000006   A3           INC     DPTR
   \   000007   A3           INC     DPTR
   \   000008                REQUIRE ??Subroutine154_0
   \   000008                ; // Fall through to label ??Subroutine154_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1715          ZStatus_t zclSE_LoadControl_Send_CancelLoadControlEvent( uint8 srcEP, afAddrType_t *dstAddr,
   \                     zclSE_LoadControl_Send_CancelLoadControlEvent:
   1716                                                                zclCCCancelLoadControlEvent_t *pCmd,
   1717                                                                uint8 disableDefaultRsp, uint8 seqNum )
   1718          {
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 12
   \   000005   74F4         MOV     A,#-0xc
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   89..         MOV     ?V0 + 2,R1
   \   00000C   EA           MOV     A,R2
   \   00000D   FE           MOV     R6,A
   \   00000E   EB           MOV     A,R3
   \   00000F   FF           MOV     R7,A
   \   000010   8C..         MOV     ?V0 + 0,R4
   \   000012   8D..         MOV     ?V0 + 1,R5
   \   000014   741C         MOV     A,#0x1c
   \   000016   12....       LCALL   ?XSTACK_DISP0_8
   \   000019   E0           MOVX    A,@DPTR
   \   00001A   F5..         MOV     ?V0 + 3,A
   \   00001C   741D         MOV     A,#0x1d
   \   00001E   12....       LCALL   ?XSTACK_DISP0_8
   \   000021   12....       LCALL   ?Subroutine31 & 0xFFFF
   1719            uint8 buf[PACKET_LEN_SE_CANCEL_LOAD_CONTROL_EVENT];
   1720            uint8 *pBuf;
   1721          
   1722            pBuf = osal_buffer_uint32( buf, pCmd->issuerEventID );
   \                     ??CrossCallReturnLabel_33:
   \   000024   12....       LCALL   ?PUSH_XSTACK8_X_FOUR
   \   000027   7404         MOV     A,#0x4
   \   000029   12....       LCALL   ?XSTACK_DISP0_8
   \   00002C   12....       LCALL   ?Subroutine81 & 0xFFFF
   \                     ??CrossCallReturnLabel_265:
   \   00002F   12....       LCALL   ?DEALLOC_XSTACK8
   1723            pBuf = osal_buffer_uint24( pBuf, pCmd->deviceGroupClass );
   \   000032                ; Setup parameters for call to function osal_buffer_uint24
   \   000032   85..82       MOV     DPL,?V0 + 0
   \   000035   85..83       MOV     DPH,?V0 + 1
   \   000038   A3           INC     DPTR
   \   000039   A3           INC     DPTR
   \   00003A   A3           INC     DPTR
   \   00003B   A3           INC     DPTR
   \   00003C   12....       LCALL   ?PUSH_XSTACK8_X_FOUR
   \   00003F   12....       LCALL   ?Subroutine96 & 0xFFFF
   \                     ??CrossCallReturnLabel_154:
   \   000042   12....       LCALL   ?DEALLOC_XSTACK8
   1724            *pBuf++ = pCmd->cancelControl;
   \   000045   85..82       MOV     DPL,?V0 + 0
   \   000048   85..83       MOV     DPH,?V0 + 1
   \   00004B   12....       LCALL   ?Subroutine38 & 0xFFFF
   1725            pBuf = osal_buffer_uint32( pBuf, pCmd->effectiveTime );
   \                     ??CrossCallReturnLabel_244:
   \   00004E                ; Setup parameters for call to function osal_buffer_uint32
   \   00004E   85..82       MOV     DPL,?V0 + 0
   \   000051   85..83       MOV     DPH,?V0 + 1
   \   000054   A3           INC     DPTR
   \   000055   A3           INC     DPTR
   \   000056   A3           INC     DPTR
   \   000057   A3           INC     DPTR
   \   000058   A3           INC     DPTR
   \   000059   A3           INC     DPTR
   \   00005A   A3           INC     DPTR
   \   00005B   A3           INC     DPTR
   \   00005C   A3           INC     DPTR
   \   00005D   12....       LCALL   ?PUSH_XSTACK8_X_FOUR
   \   000060   12....       LCALL   ??Subroutine156_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_287:
   \   000063   12....       LCALL   ?DEALLOC_XSTACK8
   1726          
   1727            return zcl_SendCommand( srcEP, dstAddr, ZCL_CLUSTER_ID_SE_LOAD_CONTROL,
   1728                                    COMMAND_SE_CANCEL_LOAD_CONTROL_EVENT, TRUE,
   1729                                    ZCL_FRAME_SERVER_CLIENT_DIR, disableDefaultRsp, 0, seqNum,
   1730                                    PACKET_LEN_SE_CANCEL_LOAD_CONTROL_EVENT, buf );
   \   000066                ; Setup parameters for call to function zcl_SendCommand
   \   000066   85..82       MOV     DPL,?XSP + 0
   \   000069   85..83       MOV     DPH,?XSP + 1
   \   00006C   8582..       MOV     ?V0 + 0,DPL
   \   00006F   8583..       MOV     ?V0 + 1,DPH
   \   000072   78..         MOV     R0,#?V0 + 0
   \   000074   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000077   75..0C       MOV     ?V0 + 0,#0xc
   \   00007A   75..00       MOV     ?V0 + 1,#0x0
   \   00007D   78..         MOV     R0,#?V0 + 0
   \   00007F   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000082   E5..         MOV     A,?V0 + 4
   \   000084   F5..         MOV     ?V0 + 0,A
   \   000086   78..         MOV     R0,#?V0 + 0
   \   000088   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00008B   E4           CLR     A
   \   00008C   F5..         MOV     ?V0 + 0,A
   \   00008E   78..         MOV     R0,#?V0 + 0
   \   000090   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000093   E5..         MOV     A,?V0 + 3
   \   000095   F5..         MOV     ?V0 + 0,A
   \   000097   78..         MOV     R0,#?V0 + 0
   \   000099   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00009C   75..01       MOV     ?V0 + 0,#0x1
   \   00009F   78..         MOV     R0,#?V0 + 0
   \   0000A1   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000A4   78..         MOV     R0,#?V0 + 0
   \   0000A6   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000A9   78..         MOV     R0,#?V0 + 0
   \   0000AB   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000AE   7C01         MOV     R4,#0x1
   \   0000B0   12....       LCALL   ??Subroutine159_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_312:
   \   0000B3   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000B6   740C         MOV     A,#0xc
   \   0000B8                REQUIRE ?Subroutine4
   \   0000B8                ; // Fall through to label ?Subroutine4
   1731          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine4:
   \   000000   12....       LCALL   ?DEALLOC_XSTACK8
   \   000003   7F08         MOV     R7,#0x8
   \   000005   02....       LJMP    ?BANKED_LEAVE_XDATA
   1732          
   1733          /*********************************************************************
   1734           * @fn      zclSE_LoadControl_Send_ReportEventStatus
   1735           *
   1736           * @brief   Call to send out a Report Event Status
   1737           *
   1738           * @param   srcEP - Sending application's endpoint
   1739           * @param   dstAddr - where you want the message to go
   1740           * @param   pCmd - command payload
   1741           * @param   disableDefaultRsp - disable default response
   1742           * @param   seqNum - ZCL sequence number
   1743           *
   1744           * @return  ZStatus_t
   1745           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1746          ZStatus_t zclSE_LoadControl_Send_ReportEventStatus( uint8 srcEP, afAddrType_t *dstAddr,
   \                     zclSE_LoadControl_Send_ReportEventStatus:
   1747                                                                zclCCReportEventStatus_t *pCmd,
   1748                                                                uint8 disableDefaultRsp, uint8 seqNum )
   1749          {
   \   000000   74EE         MOV     A,#-0x12
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 18
   \   000005                ; Auto size: 0
   \   000005   89..         MOV     ?V0 + 4,R1
   \   000007   8A..         MOV     ?V0 + 6,R2
   \   000009   8B..         MOV     ?V0 + 7,R3
   \   00000B   8C..         MOV     ?V0 + 2,R4
   \   00000D   8D..         MOV     ?V0 + 3,R5
   \   00000F   7412         MOV     A,#0x12
   \   000011   12....       LCALL   ?XSTACK_DISP0_8
   \   000014   E0           MOVX    A,@DPTR
   \   000015   FF           MOV     R7,A
   \   000016   7413         MOV     A,#0x13
   \   000018   12....       LCALL   ?XSTACK_DISP0_8
   \   00001B   E0           MOVX    A,@DPTR
   \   00001C   FE           MOV     R6,A
   1750            uint8 *buf;
   1751            uint8 *pBuf;
   1752            ZStatus_t status;
   1753          
   1754            buf = osal_mem_alloc( PACKET_LEN_SE_REPORT_EVENT_STATUS );
   \   00001D                ; Setup parameters for call to function osal_mem_alloc
   \   00001D   7A3C         MOV     R2,#0x3c
   \   00001F   7B00         MOV     R3,#0x0
   \   000021   12....       LCALL   ??Subroutine161_0 & 0xFFFF
   1755          
   1756            if ( buf == NULL )
   \                     ??CrossCallReturnLabel_330:
   \   000024   7005         JNZ     ??zclSE_LoadControl_Send_ReportEventStatus_0
   1757            {
   1758              return ( ZMemError );
   \   000026   7910         MOV     R1,#0x10
   \   000028   02....       LJMP    ??CrossCallReturnLabel_217 & 0xFFFF
   1759            }
   1760          
   1761            pBuf = osal_buffer_uint32( buf, pCmd->issuerEventID );
   \                     ??zclSE_LoadControl_Send_ReportEventStatus_0:
   \   00002B                ; Setup parameters for call to function osal_buffer_uint32
   \   00002B   85..82       MOV     DPL,?V0 + 2
   \   00002E   85..83       MOV     DPH,?V0 + 3
   \   000031   12....       LCALL   ?PUSH_XSTACK8_X_FOUR
   \   000034   12....       LCALL   ??Subroutine156_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_288:
   \   000037   12....       LCALL   ?DEALLOC_XSTACK8
   1762            *pBuf++ = pCmd->eventStatus;
   \   00003A   85..82       MOV     DPL,?V0 + 2
   \   00003D   85..83       MOV     DPH,?V0 + 3
   \   000040   A3           INC     DPTR
   \   000041   A3           INC     DPTR
   \   000042   A3           INC     DPTR
   \   000043   A3           INC     DPTR
   \   000044   A3           INC     DPTR
   \   000045   A3           INC     DPTR
   \   000046   A3           INC     DPTR
   \   000047   A3           INC     DPTR
   \   000048   12....       LCALL   ?Subroutine37 & 0xFFFF
   1763            pBuf = osal_buffer_uint32( pBuf, pCmd->eventStartTime );
   \                     ??CrossCallReturnLabel_41:
   \   00004B   A3           INC     DPTR
   \   00004C   A3           INC     DPTR
   \   00004D   A3           INC     DPTR
   \   00004E   12....       LCALL   ?PUSH_XSTACK8_X_FOUR
   \   000051   12....       LCALL   ??Subroutine156_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_289:
   \   000054   12....       LCALL   ?DEALLOC_XSTACK8
   1764            *pBuf++ = pCmd->criticalityLevelApplied;
   \   000057   85..82       MOV     DPL,?V0 + 2
   \   00005A   85..83       MOV     DPH,?V0 + 3
   \   00005D   A3           INC     DPTR
   \   00005E   12....       LCALL   ?Subroutine38 & 0xFFFF
   1765            *pBuf++ = LO_UINT16( pCmd->coolingTemperatureSetPointApplied );
   \                     ??CrossCallReturnLabel_245:
   \   000061   E5..         MOV     A,?V0 + 2
   \   000063   240A         ADD     A,#0xa
   \   000065   F8           MOV     R0,A
   \   000066   12....       LCALL   ?Subroutine24 & 0xFFFF
   1766            *pBuf++ = HI_UINT16( pCmd->coolingTemperatureSetPointApplied );
   1767            *pBuf++ = LO_UINT16( pCmd->heatingTemperatureSetPointApplied );
   \                     ??CrossCallReturnLabel_290:
   \   000069   240C         ADD     A,#0xc
   \   00006B   08           INC     R0
   \   00006C   08           INC     R0
   \   00006D   12....       LCALL   ?Subroutine24 & 0xFFFF
   1768            *pBuf++ = HI_UINT16( pCmd->heatingTemperatureSetPointApplied );
   1769            *pBuf++ = pCmd->averageLoadAdjustment;
   \                     ??CrossCallReturnLabel_291:
   \   000070   240E         ADD     A,#0xe
   \   000072   F582         MOV     DPL,A
   \   000074   E5..         MOV     A,?V0 + 3
   \   000076   12....       LCALL   ??Subroutine193_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_512:
   \   000079   12....       LCALL   ??Subroutine157_0 & 0xFFFF
   1770            *pBuf++ = pCmd->dutyCycleApplied;
   \                     ??CrossCallReturnLabel_292:
   \   00007C   240F         ADD     A,#0xf
   \   00007E   F582         MOV     DPL,A
   \   000080   E5..         MOV     A,?V0 + 3
   \   000082   12....       LCALL   ??Subroutine193_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_513:
   \   000085   12....       LCALL   ??Subroutine157_0 & 0xFFFF
   1771            *pBuf++ = pCmd->eventControl;
   \                     ??CrossCallReturnLabel_293:
   \   000088   2410         ADD     A,#0x10
   \   00008A   F582         MOV     DPL,A
   \   00008C   E5..         MOV     A,?V0 + 3
   \   00008E   12....       LCALL   ??Subroutine193_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_514:
   \   000091   12....       LCALL   ??Subroutine157_0 & 0xFFFF
   1772            *pBuf++ = pCmd->signatureType;
   \                     ??CrossCallReturnLabel_294:
   \   000094   2411         ADD     A,#0x11
   \   000096   F582         MOV     DPL,A
   \   000098   E5..         MOV     A,?V0 + 3
   \   00009A   12....       LCALL   ?Subroutine91 & 0xFFFF
   \                     ??CrossCallReturnLabel_147:
   \   00009D   A3           INC     DPTR
   1773          
   1774            zclGeneral_KeyEstablishment_ECDSASign( buf, PACKET_LEN_SE_REPORT_EVENT_STATUS_ONLY, pBuf);
   \   00009E                ; Setup parameters for call to function zclGeneral_KeyEstablishment_ECDSASign
   \   00009E   AC82         MOV     R4,DPL
   \   0000A0   AD83         MOV     R5,DPH
   \   0000A2   7912         MOV     R1,#0x12
   \   0000A4   AA..         MOV     R2,?V0 + 0
   \   0000A6   AB..         MOV     R3,?V0 + 1
   \   0000A8   12....       LCALL   ??zclGeneral_KeyEstablishment_ECDSASign?relay
   1775          
   1776            status = zcl_SendCommand( srcEP, dstAddr, ZCL_CLUSTER_ID_SE_LOAD_CONTROL,
   1777                                      COMMAND_SE_REPORT_EVENT_STATUS, TRUE,
   1778                                      ZCL_FRAME_CLIENT_SERVER_DIR, disableDefaultRsp, 0, seqNum,
   1779                                      PACKET_LEN_SE_REPORT_EVENT_STATUS, buf );
   \   0000AB                ; Setup parameters for call to function zcl_SendCommand
   \   0000AB   78..         MOV     R0,#?V0 + 0
   \   0000AD   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000B0   75..3C       MOV     ?V0 + 2,#0x3c
   \   0000B3   75..00       MOV     ?V0 + 3,#0x0
   \   0000B6   78..         MOV     R0,#?V0 + 2
   \   0000B8   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000BB   EE           MOV     A,R6
   \   0000BC   F5..         MOV     ?V0 + 2,A
   \   0000BE   78..         MOV     R0,#?V0 + 2
   \   0000C0   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000C3   E4           CLR     A
   \   0000C4   F5..         MOV     ?V0 + 2,A
   \   0000C6   78..         MOV     R0,#?V0 + 2
   \   0000C8   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000CB   EF           MOV     A,R7
   \   0000CC   F5..         MOV     ?V0 + 2,A
   \   0000CE   78..         MOV     R0,#?V0 + 2
   \   0000D0   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000D3   75..00       MOV     ?V0 + 2,#0x0
   \   0000D6   78..         MOV     R0,#?V0 + 2
   \   0000D8   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000DB   75..01       MOV     ?V0 + 2,#0x1
   \   0000DE   78..         MOV     R0,#?V0 + 2
   \   0000E0   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000E3   75..00       MOV     ?V0 + 2,#0x0
   \   0000E6   78..         MOV     R0,#?V0 + 2
   \   0000E8   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000EB   7C01         MOV     R4,#0x1
   \   0000ED   7D07         MOV     R5,#0x7
   \   0000EF   AA..         MOV     R2,?V0 + 6
   \   0000F1   AB..         MOV     R3,?V0 + 7
   \   0000F3   A9..         MOV     R1,?V0 + 4
   \   0000F5   12....       LCALL   ??Subroutine160_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_318:
   \   0000F8   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000FB   12....       LCALL   ?Subroutine94 & 0xFFFF
   1780          
   1781            osal_mem_free( buf );
   1782          
   1783            return status;
   \                     ??CrossCallReturnLabel_217:
   \   0000FE   02....       LJMP    ?Subroutine3 & 0xFFFF
   1784          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine24:
   \   000000   E5..         MOV     A,?V0 + 3
   \   000002   12....       LCALL   ?Subroutine107 & 0xFFFF
   \                     ??CrossCallReturnLabel_164:
   \   000005                REQUIRE ??Subroutine157_0
   \   000005                ; // Fall through to label ??Subroutine157_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine157_0:
   \   000000   12....       LCALL   ?Subroutine108 & 0xFFFF
   \                     ??CrossCallReturnLabel_297:
   \   000003   E5..         MOV     A,?V0 + 2
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine37:
   \   000000   12....       LCALL   ?Subroutine105 & 0xFFFF
   \                     ??CrossCallReturnLabel_247:
   \   000003                ; Setup parameters for call to function osal_buffer_uint32
   \   000003   85..82       MOV     DPL,?V0 + 2
   \   000006   85..83       MOV     DPH,?V0 + 3
   \   000009   A3           INC     DPTR
   \   00000A   22           RET
   1785          
   1786          /*********************************************************************
   1787           * @fn      zclSE_LoadControl_Send_GetScheduledEvent
   1788           *
   1789           * @brief   Call to send out a Get Scheduled Event
   1790           *
   1791           * @param   srcEP - Sending application's endpoint
   1792           * @param   dstAddr - where you want the message to go
   1793           * @param   pCmd - command payload
   1794           * @param   disableDefaultRsp - disable default response
   1795           * @param   seqNum - ZCL sequence number
   1796           *
   1797           * @return  ZStatus_t
   1798           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1799          ZStatus_t zclSE_LoadControl_Send_GetScheduledEvent( uint8 srcEP, afAddrType_t *dstAddr,
   \                     zclSE_LoadControl_Send_GetScheduledEvent:
   1800                                                                zclCCGetScheduledEvent_t *pCmd,
   1801                                                                uint8 disableDefaultRsp, uint8 seqNum )
   1802          {
   \   000000   74F3         MOV     A,#-0xd
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 13
   \   000005                ; Auto size: 5
   \   000005   74FB         MOV     A,#-0x5
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   89..         MOV     ?V0 + 2,R1
   \   00000C   EA           MOV     A,R2
   \   00000D   FE           MOV     R6,A
   \   00000E   EB           MOV     A,R3
   \   00000F   FF           MOV     R7,A
   \   000010   8C..         MOV     ?V0 + 0,R4
   \   000012   8D..         MOV     ?V0 + 1,R5
   \   000014   7412         MOV     A,#0x12
   \   000016   12....       LCALL   ?XSTACK_DISP0_8
   \   000019   12....       LCALL   ?Subroutine39 & 0xFFFF
   \                     ??CrossCallReturnLabel_50:
   \   00001C   12....       LCALL   ?XSTACK_DISP0_8
   \   00001F   12....       LCALL   ?Subroutine31 & 0xFFFF
   1803            uint8 buf[PACKET_LEN_SE_GET_SCHEDULED_EVENT];
   1804          
   1805            osal_buffer_uint32( buf, pCmd->startTime );
   \                     ??CrossCallReturnLabel_34:
   \   000022   12....       LCALL   ?PUSH_XSTACK8_X_FOUR
   \   000025   7404         MOV     A,#0x4
   \   000027   12....       LCALL   ?XSTACK_DISP0_8
   \   00002A   12....       LCALL   ?Subroutine81 & 0xFFFF
   \                     ??CrossCallReturnLabel_266:
   \   00002D   12....       LCALL   ?DEALLOC_XSTACK8
   1806            buf[4] = pCmd->numEvents;
   \   000030   85..82       MOV     DPL,?V0 + 0
   \   000033   85..83       MOV     DPH,?V0 + 1
   \   000036   A3           INC     DPTR
   \   000037   A3           INC     DPTR
   \   000038   A3           INC     DPTR
   \   000039   A3           INC     DPTR
   \   00003A   E0           MOVX    A,@DPTR
   \   00003B   C0E0         PUSH    A
   \   00003D   7404         MOV     A,#0x4
   \   00003F   12....       LCALL   ?XSTACK_DISP0_8
   \   000042   D0E0         POP     A
   \   000044   12....       LCALL   ??Subroutine151_0 & 0xFFFF
   1807          
   1808            return zcl_SendCommand( srcEP, dstAddr, ZCL_CLUSTER_ID_SE_LOAD_CONTROL,
   1809                                    COMMAND_SE_GET_SCHEDULED_EVENT, TRUE,
   1810                                    ZCL_FRAME_CLIENT_SERVER_DIR, disableDefaultRsp, 0, seqNum,
   1811                                    PACKET_LEN_SE_GET_SCHEDULED_EVENT, buf );
   \                     ??CrossCallReturnLabel_239:
   \   000047   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00004A   75..05       MOV     ?V0 + 0,#0x5
   \   00004D   75..00       MOV     ?V0 + 1,#0x0
   \   000050   78..         MOV     R0,#?V0 + 0
   \   000052   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000055   E5..         MOV     A,?V0 + 4
   \   000057   F5..         MOV     ?V0 + 0,A
   \   000059   78..         MOV     R0,#?V0 + 0
   \   00005B   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00005E   E4           CLR     A
   \   00005F   F5..         MOV     ?V0 + 0,A
   \   000061   78..         MOV     R0,#?V0 + 0
   \   000063   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000066   E5..         MOV     A,?V0 + 3
   \   000068   F5..         MOV     ?V0 + 0,A
   \   00006A   78..         MOV     R0,#?V0 + 0
   \   00006C   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00006F   75..00       MOV     ?V0 + 0,#0x0
   \   000072   78..         MOV     R0,#?V0 + 0
   \   000074   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000077   75..01       MOV     ?V0 + 0,#0x1
   \   00007A   78..         MOV     R0,#?V0 + 0
   \   00007C   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00007F   78..         MOV     R0,#?V0 + 0
   \   000081   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000084   7C01         MOV     R4,#0x1
   \   000086   02....       LJMP    ??Subroutine152_0 & 0xFFFF
   1812          }
   1813          #endif  // ZCL_LOAD_CONTROL
   1814          
   1815          #ifdef ZCL_PREPAYMENT
   1816          /*********************************************************************
   1817           * @fn      zclSE_Prepayment_Send_SelAvailEmergencyCredit
   1818           *
   1819           * @brief   Call to send out a Select Available Emergency Credit command
   1820           *
   1821           * @param   srcEP - Sending application's endpoint
   1822           * @param   dstAddr - where you want the message to go
   1823           * @param   pCmd - command payload
   1824           * @param   disableDefaultRsp - disable default response
   1825           * @param   seqNum - ZCL sequence number
   1826           *
   1827           * @return  ZStatus_t
   1828           */
   1829          ZStatus_t zclSE_Prepayment_Send_SelAvailEmergencyCredit( uint8 srcEP,
   1830                                                                   afAddrType_t *dstAddr,
   1831                                                                   zclCCSelAvailEmergencyCredit_t *pCmd,
   1832                                                                   uint8 disableDefaultRsp,
   1833                                                                   uint8 seqNum )
   1834          {
   1835            uint8 *buf;
   1836            uint8 *pBuf;
   1837            uint8 bufLen;
   1838            ZStatus_t status;
   1839          
   1840            // include in length all variable length fields
   1841            bufLen = PACKET_LEN_SE_SEL_AVAIL_EMERGENCY_CREDIT +
   1842                     pCmd->siteId.strLen +
   1843                     pCmd->meterSerialNumber.strLen;
   1844          
   1845            buf = osal_mem_alloc( bufLen );
   1846            if ( buf == NULL )
   1847            {
   1848              return ( ZMemError );
   1849            }
   1850          
   1851            pBuf = osal_buffer_uint32( buf, pCmd->commandDateTime );
   1852            *pBuf++ = pCmd->originatingDevice;
   1853            *pBuf++ = pCmd->siteId.strLen;
   1854            pBuf = osal_memcpy( pBuf, pCmd->siteId.pStr, pCmd->siteId.strLen );
   1855            *pBuf++ = pCmd->meterSerialNumber.strLen;
   1856            osal_memcpy( pBuf, pCmd->meterSerialNumber.pStr, pCmd->meterSerialNumber.strLen );
   1857          
   1858            status = zcl_SendCommand( srcEP, dstAddr, ZCL_CLUSTER_ID_SE_PREPAYMENT,
   1859                                      COMMAND_SE_SEL_AVAIL_EMERGENCY_CREDIT, TRUE,
   1860                                      ZCL_FRAME_CLIENT_SERVER_DIR, disableDefaultRsp, 0,
   1861                                      seqNum, bufLen, buf );
   1862          
   1863            osal_mem_free( buf );
   1864          
   1865            return status;
   1866          }
   1867          
   1868          #ifndef SE_UK_EXT
   1869          /*********************************************************************
   1870           * @fn      zclSE_Prepayment_Send_ChangeSupply
   1871           *
   1872           * @brief   Call to send out a Change Supply command
   1873           *
   1874           * @param   srcEP - Sending application's endpoint
   1875           * @param   dstAddr - where you want the message to go
   1876           * @param   pCmd - command payload
   1877           * @param   disableDefaultRsp - disable default response
   1878           * @param   seqNum - ZCL sequence number
   1879           *
   1880           * @return  ZStatus_t
   1881           */
   1882          ZStatus_t zclSE_Prepayment_Send_ChangeSupply( uint8 srcEP, afAddrType_t *dstAddr,
   1883                                                        zclCCChangeSupply_t *pCmd,
   1884                                                        uint8 disableDefaultRsp,
   1885                                                        uint8 seqNum )
   1886          {
   1887            uint8 *buf;
   1888            uint8 *pBuf;
   1889            uint8 bufLen;
   1890            ZStatus_t status;
   1891          
   1892            // include in length all variable length fields
   1893            bufLen = PACKET_LEN_SE_CHANGE_SUPPLY +
   1894                     pCmd->siteId.strLen +
   1895                     pCmd->meterSerialNumber.strLen;
   1896          
   1897            buf = osal_mem_alloc( bufLen );
   1898            if ( buf == NULL )
   1899            {
   1900              return ( ZMemError );
   1901            }
   1902          
   1903            pBuf = osal_buffer_uint32( buf, pCmd->providerId );
   1904            pBuf = osal_buffer_uint32( pBuf, pCmd->requestDateTime );
   1905            *pBuf++ = pCmd->siteId.strLen;
   1906            pBuf = osal_memcpy( pBuf, pCmd->siteId.pStr, pCmd->siteId.strLen );
   1907            *pBuf++ = pCmd->meterSerialNumber.strLen;
   1908            pBuf = osal_memcpy( pBuf, pCmd->meterSerialNumber.pStr, pCmd->meterSerialNumber.strLen );
   1909            pBuf = osal_buffer_uint32( pBuf, pCmd->implementationDateTime );
   1910            *pBuf++ = pCmd->proposedSupplyStatus;
   1911            *pBuf = pCmd->origIdSupplyControlBits;
   1912          
   1913            status = zcl_SendCommand( srcEP, dstAddr, ZCL_CLUSTER_ID_SE_PREPAYMENT,
   1914                                      COMMAND_SE_CHANGE_SUPPLY, TRUE,
   1915                                      ZCL_FRAME_CLIENT_SERVER_DIR, disableDefaultRsp, 0,
   1916                                      seqNum, bufLen, buf );
   1917          
   1918            osal_mem_free( buf );
   1919          
   1920            return status;
   1921          }
   1922          
   1923          /*********************************************************************
   1924           * @fn      zclSE_Prepayment_Send_SupplyStatusResponse
   1925           *
   1926           * @brief   Call to send out a Supply Status Response
   1927           *
   1928           * @param   srcEP - Sending application's endpoint
   1929           * @param   dstAddr - where you want the message to go
   1930           * @param   pCmd - command payload
   1931           * @param   disableDefaultRsp - disable default response
   1932           * @param   seqNum - ZCL sequence number
   1933           *
   1934           * @return  ZStatus_t
   1935           */
   1936          ZStatus_t zclSE_Prepayment_Send_SupplyStatusResponse( uint8 srcEP,
   1937                                                                afAddrType_t *dstAddr,
   1938                                                                zclCCSupplyStatusResponse_t *pCmd,
   1939                                                                uint8 disableDefaultRsp,
   1940                                                                uint8 seqNum )
   1941          {
   1942            uint8 *buf;
   1943            uint8 *pBuf;
   1944            ZStatus_t status;
   1945          
   1946            buf = osal_mem_alloc( PACKET_LEN_SE_SUPPLY_STATUS_RESPONSE );
   1947            if ( buf == NULL )
   1948            {
   1949              return ( ZMemError );
   1950            }
   1951          
   1952            pBuf = osal_buffer_uint32( buf, pCmd->providerId );
   1953            pBuf = osal_buffer_uint32( pBuf, pCmd->implementationDateTime );
   1954            *pBuf = pCmd->supplyStatus;
   1955          
   1956            status = zcl_SendCommand( srcEP, dstAddr, ZCL_CLUSTER_ID_SE_PREPAYMENT,
   1957                                      COMMAND_SE_SUPPLY_STATUS_RESPONSE, TRUE,
   1958                                      ZCL_FRAME_SERVER_CLIENT_DIR, disableDefaultRsp, 0,
   1959                                      seqNum, PACKET_LEN_SE_SUPPLY_STATUS_RESPONSE, buf );
   1960          
   1961            osal_mem_free( buf );
   1962          
   1963            return status;
   1964          }
   1965          
   1966          #else // SE_UK_EXT
   1967          /*********************************************************************
   1968           * @fn      zclSE_Prepayment_Send_ChangeDebt
   1969           *
   1970           * @brief   Call to send out a Change Debt
   1971           *
   1972           * @param   srcEP - Sending application's endpoint
   1973           * @param   dstAddr - where you want the message to go
   1974           * @param   pCmd - command payload
   1975           * @param   disableDefaultRsp - disable default response
   1976           * @param   seqNum - ZCL sequence number
   1977           *
   1978           * @return  ZStatus_t
   1979           */
   1980          ZStatus_t zclSE_Prepayment_Send_ChangeDebt( uint8 srcEP, afAddrType_t *dstAddr,
   1981                                                      zclCCChangeDebt_t *pCmd,
   1982                                                      uint8 disableDefaultRsp, uint8 seqNum )
   1983          {
   1984            uint8 *buf;
   1985            uint8 *pBuf;
   1986            ZStatus_t status;
   1987            uint8 bufLen = PACKET_LEN_SE_MIN_CHANGE_DEBT + pCmd->debtLabel.strLen + pCmd->signature.strLen;
   1988          
   1989            buf = osal_mem_alloc( bufLen );
   1990            if ( buf == NULL )
   1991            {
   1992              return ( ZMemError );
   1993            }
   1994          
   1995            pBuf = osal_buffer_uint32( buf, pCmd->cmdIssueTime );
   1996            *pBuf++ = pCmd->debtLabel.strLen;
   1997            pBuf = osal_memcpy( pBuf, pCmd->debtLabel.pStr, pCmd->debtLabel.strLen );
   1998            pBuf = osal_buffer_uint32( pBuf, pCmd->debtAmount );
   1999            *pBuf++ = pCmd->debtRecoveryMethod;
   2000            *pBuf++ = pCmd->debtType;
   2001            pBuf = osal_buffer_uint32( pBuf, pCmd->recoveryStartTime );
   2002            *pBuf++ = LO_UINT16( pCmd->debtRecoveryCollectionTime );
   2003            *pBuf++ = HI_UINT16( pCmd->debtRecoveryCollectionTime );
   2004            pBuf = osal_buffer_uint32( pBuf, pCmd->debtRecoveryFrequency );
   2005            pBuf = osal_buffer_uint32( pBuf, pCmd->debtRecoveryAmt );
   2006            *pBuf++ = LO_UINT16( pCmd->debtRecoveryBalancePct );
   2007            *pBuf++ = HI_UINT16( pCmd->debtRecoveryBalancePct );
   2008            *pBuf++ = pCmd->debtRecoveryMaxMissed;
   2009            *pBuf++ = pCmd->signature.strLen;
   2010            (void)osal_memcpy( pBuf, pCmd->signature.pStr, pCmd->signature.strLen );
   2011          
   2012            status = zcl_SendCommand( srcEP, dstAddr, ZCL_CLUSTER_ID_SE_PREPAYMENT,
   2013                                      COMMAND_SE_CHANGE_DEBT, TRUE,
   2014                                      ZCL_FRAME_CLIENT_SERVER_DIR, disableDefaultRsp, 0,
   2015                                      seqNum, bufLen, buf );
   2016          
   2017            osal_mem_free( buf );
   2018          
   2019            return status;
   2020          }
   2021          
   2022          /*********************************************************************
   2023           * @fn      zclSE_Prepayment_Send_EmergencyCreditSetup
   2024           *
   2025           * @brief   Call to send out a Emergency Credit Setup
   2026           *
   2027           * @param   srcEP - Sending application's endpoint
   2028           * @param   dstAddr - where you want the message to go
   2029           * @param   pCmd - command payload
   2030           * @param   disableDefaultRsp - disable default response
   2031           * @param   seqNum - ZCL sequence number
   2032           *
   2033           * @return  ZStatus_t
   2034           */
   2035          ZStatus_t zclSE_Prepayment_Send_EmergencyCreditSetup( uint8 srcEP, afAddrType_t *dstAddr,
   2036                                                                zclCCEmergencyCreditSetup_t *pCmd,
   2037                                                                uint8 disableDefaultRsp, uint8 seqNum )
   2038          {
   2039            uint8 buf[PACKET_LEN_SE_EMERGENCY_CREDIT_SETUP];
   2040            uint8 *pBuf;
   2041          
   2042            pBuf = osal_buffer_uint32( buf, pCmd->cmdIssueTime );
   2043            pBuf = osal_buffer_uint32( pBuf, pCmd->emergencyCreditLimit );
   2044            pBuf = osal_buffer_uint32( pBuf, pCmd->emergencyCreditThreshold );
   2045          
   2046            return zcl_SendCommand( srcEP, dstAddr, ZCL_CLUSTER_ID_SE_PREPAYMENT,
   2047                                    COMMAND_SE_EMERGENCY_CREDIT_SETUP, TRUE,
   2048                                    ZCL_FRAME_CLIENT_SERVER_DIR, disableDefaultRsp, 0,
   2049                                    seqNum, PACKET_LEN_SE_EMERGENCY_CREDIT_SETUP, buf );
   2050          }
   2051          
   2052          /*********************************************************************
   2053           * @fn      zclSE_Prepayment_Send_ConsumerTopup
   2054           *
   2055           * @brief   Call to send out a Consumer Topup
   2056           *
   2057           * @param   srcEP - Sending application's endpoint
   2058           * @param   dstAddr - where you want the message to go
   2059           * @param   pCmd - command payload
   2060           * @param   disableDefaultRsp - disable default response
   2061           * @param   seqNum - ZCL sequence number
   2062           *
   2063           * @return  ZStatus_t
   2064           */
   2065          ZStatus_t zclSE_Prepayment_Send_ConsumerTopup( uint8 srcEP, afAddrType_t *dstAddr,
   2066                                                         zclCCConsumerTopup_t *pCmd,
   2067                                                         uint8 disableDefaultRsp, uint8 seqNum )
   2068          {
   2069            uint8 *buf;
   2070            uint8 *pBuf;
   2071            ZStatus_t status;
   2072            uint8 bufLen = PACKET_LEN_SE_MIN_CONSUMER_TOPUP + pCmd->topupCode.strLen;
   2073          
   2074            buf = osal_mem_alloc( bufLen );
   2075            if ( buf == NULL )
   2076            {
   2077              return ( ZMemError );
   2078            }
   2079          
   2080            pBuf = buf;
   2081          
   2082            *pBuf++ = pCmd->originatingDevice;
   2083            *pBuf++ = pCmd->topupCode.strLen;
   2084            pBuf = osal_memcpy( pBuf, pCmd->topupCode.pStr, pCmd->topupCode.strLen );
   2085          
   2086            status = zcl_SendCommand( srcEP, dstAddr, ZCL_CLUSTER_ID_SE_PREPAYMENT,
   2087                                      COMMAND_SE_CONSUMER_TOPUP, TRUE,
   2088                                      ZCL_FRAME_CLIENT_SERVER_DIR, disableDefaultRsp, 0,
   2089                                      seqNum, bufLen, buf );
   2090            osal_mem_free( buf );
   2091          
   2092            return status;
   2093          }
   2094          
   2095          /*********************************************************************
   2096           * @fn      zclSE_Prepayment_Send_CreditAdjustment
   2097           *
   2098           * @brief   Call to send out a Credit Adjustment
   2099           *
   2100           * @param   srcEP - Sending application's endpoint
   2101           * @param   dstAddr - where you want the message to go
   2102           * @param   pCmd - command payload
   2103           * @param   disableDefaultRsp - disable default response
   2104           * @param   seqNum - ZCL sequence number
   2105           *
   2106           * @return  ZStatus_t
   2107           */
   2108          ZStatus_t zclSE_Prepayment_Send_CreditAdjustment( uint8 srcEP, afAddrType_t *dstAddr,
   2109                                                            zclCCCreditAdjustment_t *pCmd,
   2110                                                            uint8 disableDefaultRsp, uint8 seqNum )
   2111          {
   2112            uint8 *buf;
   2113            uint8 *pBuf;
   2114            ZStatus_t status;
   2115            uint8 bufLen = PACKET_LEN_SE_MIN_CREDIT_ADJUSTMENT +  pCmd->signature.strLen;
   2116          
   2117            buf = osal_mem_alloc( bufLen );
   2118            if ( buf == NULL )
   2119            {
   2120              return ( ZMemError );
   2121            }
   2122          
   2123            pBuf = osal_buffer_uint32( buf, pCmd->cmdIssueTime );
   2124            *pBuf++ = pCmd->creditAdjustmentType;
   2125            pBuf = osal_memcpy( pBuf, pCmd->creditAdjustmentValue, 6 );
   2126            *pBuf++ = pCmd->signature.strLen;
   2127            pBuf = osal_memcpy( pBuf, pCmd->signature.pStr, pCmd->signature.strLen );
   2128          
   2129            status = zcl_SendCommand( srcEP, dstAddr, ZCL_CLUSTER_ID_SE_PREPAYMENT,
   2130                                      COMMAND_SE_CREDIT_ADJUSTMENT, TRUE,
   2131                                      ZCL_FRAME_CLIENT_SERVER_DIR, disableDefaultRsp, 0,
   2132                                      seqNum, bufLen, buf );
   2133            osal_mem_free( buf );
   2134          
   2135            return status;
   2136          }
   2137          
   2138          /*********************************************************************
   2139           * @fn      zclSE_Prepayment_Send_ChangePaymentMode
   2140           *
   2141           * @brief   Call to send out a Change Payment Mode
   2142           *
   2143           * @param   srcEP - Sending application's endpoint
   2144           * @param   dstAddr - where you want the message to go
   2145           * @param   pCmd - command payload
   2146           * @param   disableDefaultRsp - disable default response
   2147           * @param   seqNum - ZCL sequence number
   2148           *
   2149           * @return  ZStatus_t
   2150           */
   2151          ZStatus_t zclSE_Prepayment_Send_ChangePaymentMode( uint8 srcEP, afAddrType_t *dstAddr,
   2152                                                             zclCCChangePaymentMode_t *pCmd,
   2153                                                             uint8 disableDefaultRsp, uint8 seqNum )
   2154          {
   2155            uint8 *buf;
   2156            uint8 *pBuf;
   2157            ZStatus_t status;
   2158            uint8 bufLen = PACKET_LEN_SE_MIN_CHANGE_PAYMENT_MODE +  pCmd->signature.strLen;
   2159          
   2160            buf = osal_mem_alloc( bufLen );
   2161            if ( buf == NULL )
   2162            {
   2163              return ( ZMemError );
   2164            }
   2165          
   2166            pBuf = osal_buffer_uint32( buf, pCmd->supplierId );
   2167            pBuf = osal_buffer_uint32( pBuf, pCmd->modeEventId );
   2168            pBuf = osal_buffer_uint32( pBuf, pCmd->implementationDate );
   2169            *pBuf++ = pCmd->proposedPaymentControl;
   2170            pBuf = osal_buffer_uint32( pBuf, pCmd->cutOffValue );
   2171            *pBuf++ = pCmd->signature.strLen;
   2172            pBuf = osal_memcpy( pBuf, pCmd->signature.pStr, pCmd->signature.strLen );
   2173          
   2174            status = zcl_SendCommand( srcEP, dstAddr, ZCL_CLUSTER_ID_SE_PREPAYMENT,
   2175                                      COMMAND_SE_CHANGE_PAYMENT_MODE, TRUE,
   2176                                      ZCL_FRAME_CLIENT_SERVER_DIR, disableDefaultRsp, 0,
   2177                                      seqNum, bufLen, buf );
   2178            osal_mem_free( buf );
   2179          
   2180            return status;
   2181          }
   2182          
   2183          /*********************************************************************
   2184           * @fn      zclSE_Prepayment_Send_GetPrepaySnapshot
   2185           *
   2186           * @brief   Call to send out a Get Prepay Snapshot
   2187           *
   2188           * @param   srcEP - Sending application's endpoint
   2189           * @param   dstAddr - where you want the message to go
   2190           * @param   pCmd - command payload
   2191           * @param   disableDefaultRsp - disable default response
   2192           * @param   seqNum - ZCL sequence number
   2193           *
   2194           * @return  ZStatus_t
   2195           */
   2196          ZStatus_t zclSE_Prepayment_Send_GetPrepaySnapshot( uint8 srcEP, afAddrType_t *dstAddr,
   2197                                                             zclCCGetPrepaySnapshot_t *pCmd,
   2198                                                             uint8 disableDefaultRsp, uint8 seqNum )
   2199          {
   2200            uint8 buf[PACKET_LEN_SE_GET_PREPAY_SNAPSHOT];
   2201            uint8 *pBuf;
   2202          
   2203            pBuf = osal_buffer_uint32( buf, pCmd->startTime );
   2204            *pBuf++ = pCmd->numberOfSnapshots;
   2205            *pBuf++ = LO_UINT16( pCmd->snapshotCause );
   2206            *pBuf   = HI_UINT16( pCmd->snapshotCause );
   2207          
   2208            return zcl_SendCommand( srcEP, dstAddr, ZCL_CLUSTER_ID_SE_PREPAYMENT,
   2209                                    COMMAND_SE_GET_PREPAY_SNAPSHOT, TRUE,
   2210                                    ZCL_FRAME_CLIENT_SERVER_DIR, disableDefaultRsp, 0,
   2211                                    seqNum, PACKET_LEN_SE_GET_PREPAY_SNAPSHOT, buf );
   2212          }
   2213          
   2214          /*********************************************************************
   2215           * @fn      zclSE_Prepayment_Send_GetTopupLog
   2216           *
   2217           * @brief   Call to send out a Get Topup Log
   2218           *
   2219           * @param   srcEP - Sending application's endpoint
   2220           * @param   dstAddr - where you want the message to go
   2221           * @param   numEvents - number of events
   2222           * @param   disableDefaultRsp - disable default response
   2223           * @param   seqNum - ZCL sequence number
   2224           *
   2225           * @return  ZStatus_t
   2226           */
   2227          ZStatus_t zclSE_Prepayment_Send_GetTopupLog( uint8 srcEP, afAddrType_t *dstAddr,
   2228                                                       uint8 numEvents, uint8 disableDefaultRsp, uint8 seqNum )
   2229          {
   2230            uint8 buf[PACKET_LEN_SE_GET_TOPUP_LOG];
   2231          
   2232            buf[0] = numEvents;
   2233          
   2234            return zcl_SendCommand( srcEP, dstAddr, ZCL_CLUSTER_ID_SE_PREPAYMENT,
   2235                                    COMMAND_SE_GET_TOPUP_LOG, TRUE,
   2236                                    ZCL_FRAME_CLIENT_SERVER_DIR, disableDefaultRsp, 0,
   2237                                    seqNum, PACKET_LEN_SE_GET_TOPUP_LOG, buf );
   2238          }
   2239          
   2240          /*********************************************************************
   2241           * @fn      zclSE_Prepayment_Send_SetLowCreditWarningLevel
   2242           *
   2243           * @brief   Call to send out a Set Low Credit Warning Level
   2244           *
   2245           * @param   srcEP - Sending application's endpoint
   2246           * @param   dstAddr - where you want the message to go
   2247           * @param   warningLevel - warning level
   2248           * @param   disableDefaultRsp - disable default response
   2249           * @param   seqNum - ZCL sequence number
   2250           *
   2251           * @return  ZStatus_t
   2252           */
   2253          ZStatus_t zclSE_Prepayment_Send_SetLowCreditWarningLevel( uint8 srcEP, afAddrType_t *dstAddr,
   2254                                                                    uint8 warningLevel,
   2255                                                                    uint8 disableDefaultRsp, uint8 seqNum )
   2256          {
   2257            uint8 buf[PACKET_LEN_SE_SET_LOW_CREDIT_WARNING_LEVEL];
   2258          
   2259            buf[0] = warningLevel;
   2260          
   2261            return zcl_SendCommand( srcEP, dstAddr, ZCL_CLUSTER_ID_SE_PREPAYMENT,
   2262                                    COMMAND_SE_SET_LOW_CREDIT_WARNING_LEVEL, TRUE,
   2263                                    ZCL_FRAME_CLIENT_SERVER_DIR, disableDefaultRsp, 0,
   2264                                    seqNum, PACKET_LEN_SE_SET_LOW_CREDIT_WARNING_LEVEL, buf );
   2265          }
   2266          
   2267          /*********************************************************************
   2268           * @fn      zclSE_Prepayment_Send_GetDebtRepaymentLog
   2269           *
   2270           * @brief   Call to send out a Get Debt Repayment Log
   2271           *
   2272           * @param   srcEP - Sending application's endpoint
   2273           * @param   dstAddr - where you want the message to go
   2274           * @param   pCmd - command payload
   2275           * @param   disableDefaultRsp - disable default response
   2276           * @param   seqNum - ZCL sequence number
   2277           *
   2278           * @return  ZStatus_t
   2279           */
   2280          ZStatus_t zclSE_Prepayment_Send_GetDebtRepaymentLog( uint8 srcEP, afAddrType_t *dstAddr,
   2281                                                               zclCCGetDebtRepaymentLog_t *pCmd,
   2282                                                               uint8 disableDefaultRsp, uint8 seqNum )
   2283          {
   2284            uint8 buf[PACKET_LEN_SE_GET_DEBT_REPAYMENT_LOG];
   2285          
   2286            buf[0] = pCmd->numberOfDebt;
   2287            buf[1] = pCmd->debtType;
   2288          
   2289            return zcl_SendCommand( srcEP, dstAddr, ZCL_CLUSTER_ID_SE_PREPAYMENT,
   2290                                    COMMAND_SE_GET_DEBT_REPAYMENT_LOG, TRUE,
   2291                                    ZCL_FRAME_CLIENT_SERVER_DIR, disableDefaultRsp, 0,
   2292                                    seqNum, PACKET_LEN_SE_GET_DEBT_REPAYMENT_LOG, buf );
   2293          }
   2294          
   2295          /*********************************************************************
   2296           * @fn      zclSE_Prepayment_Send_GetPrepaySnapshotResponse
   2297           *
   2298           * @brief   Call to send out a Get Prepay Snapshot Response
   2299           *
   2300           * @param   srcEP - Sending application's endpoint
   2301           * @param   dstAddr - where you want the message to go
   2302           * @param   pCmd - command payload
   2303           * @param   disableDefaultRsp - disable default response
   2304           * @param   seqNum - ZCL sequence number
   2305           *
   2306           * @return  ZStatus_t
   2307           */
   2308          ZStatus_t zclSE_Prepayment_Send_GetPrepaySnapshotResponse( uint8 srcEP, afAddrType_t *dstAddr,
   2309                                                                     zclCCGetPrepaySnapshotResponse_t *pCmd,
   2310                                                                     uint8 disableDefaultRsp, uint8 seqNum )
   2311          {
   2312            uint8 buf[PACKET_LEN_SE_GET_PREPAY_SNAPSHOT_RESPONSE];
   2313            uint8 *pBuf;
   2314          
   2315            pBuf = osal_buffer_uint32( buf, pCmd->eventIssuerId );
   2316            pBuf = osal_buffer_uint32( pBuf, pCmd->snapshotTime );
   2317            *pBuf++ = pCmd->commandIndex;
   2318            *pBuf++ = LO_UINT16( pCmd->snapshotCause );
   2319            *pBuf++ = HI_UINT16( pCmd->snapshotCause );
   2320            *pBuf++ = pCmd->snapshotPayloadType;
   2321          
   2322            pBuf = osal_buffer_uint32( pBuf, pCmd->payload.type1DebtRemaining );
   2323            pBuf = osal_buffer_uint32( pBuf, pCmd->payload.type2DebtRemaining );
   2324            pBuf = osal_buffer_uint32( pBuf, pCmd->payload.type3DebtRemaining );
   2325            pBuf = osal_buffer_uint32( pBuf, pCmd->payload.emergencyCreditRemaining );
   2326            pBuf = osal_buffer_uint32( pBuf, pCmd->payload.creditRemaining );
   2327          
   2328            return zcl_SendCommand( srcEP, dstAddr, ZCL_CLUSTER_ID_SE_PREPAYMENT,
   2329                                    COMMAND_SE_GET_PREPAY_SNAPSHOT_RESPONSE, TRUE,
   2330                                    ZCL_FRAME_SERVER_CLIENT_DIR, disableDefaultRsp, 0,
   2331                                    seqNum, PACKET_LEN_SE_GET_PREPAY_SNAPSHOT_RESPONSE, buf );
   2332          }
   2333          
   2334          /*********************************************************************
   2335           * @fn      zclSE_Prepayment_Send_ChangePaymentModeResponse
   2336           *
   2337           * @brief   Call to send out a Change Payment Mode Response
   2338           *
   2339           * @param   srcEP - Sending application's endpoint
   2340           * @param   dstAddr - where you want the message to go
   2341           * @param   pCmd - command payload
   2342           * @param   disableDefaultRsp - disable default response
   2343           * @param   seqNum - ZCL sequence number
   2344           *
   2345           * @return  ZStatus_t
   2346           */
   2347          ZStatus_t zclSE_Prepayment_Send_ChangePaymentModeResponse( uint8 srcEP, afAddrType_t *dstAddr,
   2348                                                                     zclCCChangePaymentModeResponse_t *pCmd,
   2349                                                                     uint8 disableDefaultRsp, uint8 seqNum )
   2350          {
   2351            uint8 buf[PACKET_LEN_SE_CHANGE_PAYMENT_MODE_RESPONSE];
   2352            uint8 *pBuf = buf;
   2353          
   2354            *pBuf++ = pCmd->friendlyCredit;
   2355            pBuf = osal_buffer_uint32( pBuf, pCmd->friendlyCreditCalendar );
   2356            pBuf = osal_buffer_uint32( pBuf, pCmd->emergencyCreditLimit );
   2357            pBuf = osal_buffer_uint32( pBuf, pCmd->cmergencyCreditThreshold );
   2358          
   2359            return zcl_SendCommand( srcEP, dstAddr, ZCL_CLUSTER_ID_SE_PREPAYMENT,
   2360                                    COMMAND_SE_CHANGE_PAYMENT_MODE_RESPONSE, TRUE,
   2361                                    ZCL_FRAME_SERVER_CLIENT_DIR, disableDefaultRsp, 0,
   2362                                    seqNum, PACKET_LEN_SE_CHANGE_PAYMENT_MODE_RESPONSE, buf );
   2363          }
   2364          
   2365          /*********************************************************************
   2366           * @fn      zclSE_Prepayment_Send_ConsumerTopupResponse
   2367           *
   2368           * @brief   Call to send out a Consumer Topup Response
   2369           *
   2370           * @param   srcEP - Sending application's endpoint
   2371           * @param   dstAddr - where you want the message to go
   2372           * @param   pCmd - command payload
   2373           * @param   disableDefaultRsp - disable default response
   2374           * @param   seqNum - ZCL sequence number
   2375           *
   2376           * @return  ZStatus_t
   2377           */
   2378          ZStatus_t zclSE_Prepayment_Send_ConsumerTopupResponse( uint8 srcEP, afAddrType_t *dstAddr,
   2379                                                                 zclCCConsumerTopupResponse_t *pCmd,
   2380                                                                 uint8 disableDefaultRsp, uint8 seqNum )
   2381          {
   2382            uint8 buf[PACKET_LEN_SE_SE_CONSUMER_TOPUP_RESPONSE];
   2383            uint8 *pBuf = buf;
   2384          
   2385            *pBuf++ = pCmd->resultType;
   2386            pBuf = osal_buffer_uint32( pBuf, pCmd->topupValue );
   2387            *pBuf++ = pCmd->sourceofTopup;
   2388            pBuf = osal_buffer_uint32( pBuf, pCmd->creditRemaining );
   2389          
   2390            return zcl_SendCommand( srcEP, dstAddr, ZCL_CLUSTER_ID_SE_PREPAYMENT,
   2391                                    COMMAND_SE_CONSUMER_TOPUP_RESPONSE, TRUE,
   2392                                    ZCL_FRAME_SERVER_CLIENT_DIR, disableDefaultRsp, 0,
   2393                                    seqNum, PACKET_LEN_SE_SE_CONSUMER_TOPUP_RESPONSE, buf );
   2394          }
   2395          
   2396          /*********************************************************************
   2397           * @fn      zclSE_Prepayment_Send_GetCommands
   2398           *
   2399           * @brief   Call to send out a Get Commands
   2400           *
   2401           * @param   srcEP - Sending application's endpoint
   2402           * @param   dstAddr - where you want the message to go
   2403           * @param   notificationFlags - notification flags
   2404           * @param   disableDefaultRsp - disable default response
   2405           * @param   seqNum - ZCL sequence number
   2406           *
   2407           * @return  ZStatus_t
   2408           */
   2409          ZStatus_t zclSE_Prepayment_Send_GetCommands( uint8 srcEP, afAddrType_t *dstAddr,
   2410                                                       uint8 notificationFlags, uint8 disableDefaultRsp, uint8 seqNum )
   2411          {
   2412            uint8 buf[PACKET_LEN_SE_GET_COMMANDS];
   2413          
   2414            buf[0] = notificationFlags;
   2415          
   2416            return zcl_SendCommand( srcEP, dstAddr, ZCL_CLUSTER_ID_SE_PREPAYMENT,
   2417                                    COMMAND_SE_GET_COMMANDS, TRUE,
   2418                                    ZCL_FRAME_SERVER_CLIENT_DIR, disableDefaultRsp, 0,
   2419                                    seqNum, PACKET_LEN_SE_GET_COMMANDS, buf );
   2420          }
   2421          
   2422          /*********************************************************************
   2423           * @fn      zclSE_Prepayment_Send_PublishTopupLog
   2424           *
   2425           * @brief   Call to send out a Publish Topup Log
   2426           *
   2427           * @param   srcEP - Sending application's endpoint
   2428           * @param   dstAddr - where you want the message to go
   2429           * @param   pCmd - command payload
   2430           * @param   disableDefaultRsp - disable default response
   2431           * @param   seqNum - ZCL sequence number
   2432           *
   2433           * @return  ZStatus_t
   2434           */
   2435          ZStatus_t zclSE_Prepayment_Send_PublishTopupLog( uint8 srcEP, afAddrType_t *dstAddr,
   2436                                                          zclCCPublishTopupLog_t *pCmd,
   2437                                                          uint8 disableDefaultRsp, uint8 seqNum )
   2438          {
   2439            uint8 *buf;
   2440            uint8 *pBuf;
   2441            ZStatus_t status;
   2442            uint8 bufLen = PACKET_LEN_SE_MIN_PUBLISH_TOPUP_LOG + (pCmd->numCodes * SE_TOPUP_CODE_LEN);
   2443            uint8 i;
   2444          
   2445            buf = osal_mem_alloc( bufLen );
   2446            if ( buf == NULL )
   2447            {
   2448              return ( ZMemError );
   2449            }
   2450          
   2451            pBuf = buf;
   2452          
   2453            *pBuf++ = pCmd->cmdIndex;
   2454            *pBuf++ = pCmd->totalCmds;
   2455          
   2456            bufLen = 2;
   2457          
   2458            for ( i = 0; i < pCmd->numCodes; i++ )
   2459            {
   2460              *pBuf++ = pCmd->pPayload[i].strLen;
   2461              pBuf = osal_memcpy( pBuf, pCmd->pPayload[i].pStr, pCmd->pPayload[i].strLen );
   2462              bufLen += 1 + pCmd->pPayload[i].strLen;
   2463            }
   2464          
   2465            status = zcl_SendCommand( srcEP, dstAddr, ZCL_CLUSTER_ID_SE_PREPAYMENT,
   2466                                      COMMAND_SE_PUBLISH_TOPUP_LOG, TRUE,
   2467                                      ZCL_FRAME_SERVER_CLIENT_DIR, disableDefaultRsp, 0,
   2468                                      seqNum, bufLen, buf );
   2469            osal_mem_free( buf );
   2470          
   2471            return status;
   2472          }
   2473          
   2474          /*********************************************************************
   2475           * @fn      zclSE_Prepayment_Send_PublishDebtLog
   2476           *
   2477           * @brief   Call to send out a Publish Debt Log
   2478           *
   2479           * @param   srcEP - Sending application's endpoint
   2480           * @param   dstAddr - where you want the message to go
   2481           * @param   pCmd - command payload
   2482           * @param   disableDefaultRsp - disable default response
   2483           * @param   seqNum - ZCL sequence number
   2484           *
   2485           * @return  ZStatus_t
   2486           */
   2487          ZStatus_t zclSE_Prepayment_Send_PublishDebtLog( uint8 srcEP, afAddrType_t *dstAddr,
   2488                                                          zclCCPublishDebtLog_t *pCmd,
   2489                                                          uint8 disableDefaultRsp, uint8 seqNum )
   2490          {
   2491            uint8 *buf;
   2492            uint8 *pBuf;
   2493            ZStatus_t status;
   2494            uint8 bufLen = PACKET_LEN_SE_MIN_PUBLISH_DEBT_LOG + (pCmd->numDebts * sizeof(zclCCDebtPayload_t));
   2495            uint8 i;
   2496          
   2497            buf = osal_mem_alloc( bufLen );
   2498            if ( buf == NULL )
   2499            {
   2500              return ( ZMemError );
   2501            }
   2502          
   2503            pBuf = buf;
   2504          
   2505            *pBuf++ = pCmd->cmdIndex;
   2506            *pBuf++ = pCmd->totalCmds;
   2507          
   2508            for ( i = 0; i < pCmd->numDebts; i++ )
   2509            {
   2510              pBuf = osal_buffer_uint32( pBuf, pCmd->pPayload[i].collectionTime );
   2511              pBuf = osal_buffer_uint32( pBuf, pCmd->pPayload[i].amountCollected );
   2512              *pBuf++ = pCmd->pPayload[i].debtType;
   2513              pBuf = osal_buffer_uint32( pBuf, pCmd->pPayload[i].outstandingDebt );
   2514            }
   2515          
   2516            status = zcl_SendCommand( srcEP, dstAddr, ZCL_CLUSTER_ID_SE_PREPAYMENT,
   2517                                      COMMAND_SE_PUBLISH_DEBT_LOG, TRUE,
   2518                                      ZCL_FRAME_SERVER_CLIENT_DIR, disableDefaultRsp, 0,
   2519                                      seqNum, bufLen, buf );
   2520            osal_mem_free( buf );
   2521          
   2522            return status;
   2523          }
   2524          #endif  //SE_UK_EXT
   2525          #endif  // ZCL_PREPAYMENT
   2526          
   2527          #ifdef ZCL_TUNNELING
   2528          /*********************************************************************
   2529           * @fn      zclSE_Tunneling_Send_RequestTunnel
   2530           *
   2531           * @brief   Call to send out a Request Tunnel
   2532           *
   2533           * @param   srcEP - Sending application's endpoint
   2534           * @param   dstAddr - where you want the message to go
   2535           * @param   pCmd - command payload
   2536           * @param   disableDefaultRsp - disable default response
   2537           * @param   seqNum - ZCL sequence number
   2538           *
   2539           * @return  ZStatus_t
   2540           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2541          ZStatus_t zclSE_Tunneling_Send_RequestTunnel( uint8 srcEP, afAddrType_t *dstAddr,
   \                     zclSE_Tunneling_Send_RequestTunnel:
   2542                                                        zclCCRequestTunnel_t  *pCmd,
   2543                                                        uint8 disableDefaultRsp, uint8 seqNum )
   2544          {
   \   000000   74EE         MOV     A,#-0x12
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 18
   \   000005                ; Auto size: 0
   \   000005   89..         MOV     ?V0 + 4,R1
   \   000007   EA           MOV     A,R2
   \   000008   FE           MOV     R6,A
   \   000009   EB           MOV     A,R3
   \   00000A   FF           MOV     R7,A
   \   00000B   8C..         MOV     ?V0 + 2,R4
   \   00000D   8D..         MOV     ?V0 + 3,R5
   \   00000F   7412         MOV     A,#0x12
   \   000011   12....       LCALL   ?XSTACK_DISP0_8
   \   000014   E0           MOVX    A,@DPTR
   \   000015   F5..         MOV     ?V0 + 5,A
   \   000017   7413         MOV     A,#0x13
   \   000019   12....       LCALL   ?XSTACK_DISP0_8
   \   00001C   E0           MOVX    A,@DPTR
   \   00001D   F5..         MOV     ?V0 + 6,A
   2545            uint8 *buf;
   2546            uint8 *pBuf;
   2547            ZStatus_t status;
   2548          
   2549            buf = osal_mem_alloc( PACKET_LEN_SE_TUNNELING_REQUEST );
   \   00001F                ; Setup parameters for call to function osal_mem_alloc
   \   00001F   7A06         MOV     R2,#0x6
   \   000021   7B00         MOV     R3,#0x0
   \   000023   12....       LCALL   ??osal_mem_alloc?relay
   \   000026   8A..         MOV     ?V0 + 8,R2
   \   000028   8B..         MOV     ?V0 + 9,R3
   2550            if ( buf == NULL )
   \   00002A   EA           MOV     A,R2
   \   00002B   45..         ORL     A,?V0 + 9
   \   00002D   7004         JNZ     ??zclSE_Tunneling_Send_RequestTunnel_0
   2551            {
   2552              return ZMemError;
   \   00002F   7910         MOV     R1,#0x10
   \   000031   807B         SJMP    ??CrossCallReturnLabel_222
   2553            }
   2554          
   2555            pBuf = buf;
   2556            *pBuf++ = pCmd->protocolId;
   \                     ??zclSE_Tunneling_Send_RequestTunnel_0:
   \   000033   12....       LCALL   ?Subroutine34 & 0xFFFF
   2557            *pBuf++ = LO_UINT16( pCmd->manufacturerCode );
   \                     ??CrossCallReturnLabel_37:
   \   000036   A882         MOV     R0,DPL
   \   000038   A983         MOV     R1,DPH
   \   00003A   12....       LCALL   ??Subroutine158_0 & 0xFFFF
   2558            *pBuf++ = HI_UINT16( pCmd->manufacturerCode );
   \                     ??CrossCallReturnLabel_302:
   \   00003D   A3           INC     DPTR
   \   00003E   8582..       MOV     ?V0 + 0,DPL
   \   000041   8583..       MOV     ?V0 + 1,DPH
   2559            *pBuf++ = pCmd->flowControlSupport;
   \   000044   85..82       MOV     DPL,?V0 + 2
   \   000047   85..83       MOV     DPH,?V0 + 3
   \   00004A   A3           INC     DPTR
   \   00004B   12....       LCALL   ?Subroutine43 & 0xFFFF
   2560            *pBuf++ = LO_UINT16( pCmd->maxInTransferSize );
   \                     ??CrossCallReturnLabel_53:
   \   00004E   2404         ADD     A,#0x4
   \   000050   12....       LCALL   ?Subroutine17 & 0xFFFF
   2561            *pBuf   = HI_UINT16( pCmd->maxInTransferSize );
   2562          
   2563            status = zcl_SendCommand( srcEP, dstAddr, ZCL_CLUSTER_ID_SE_SE_TUNNELING,
   2564                                      COMMAND_SE_REQUEST_TUNNEL, TRUE,
   2565                                      ZCL_FRAME_CLIENT_SERVER_DIR, disableDefaultRsp, 0,
   2566                                      seqNum, PACKET_LEN_SE_TUNNELING_REQUEST, buf );
   \                     ??CrossCallReturnLabel_300:
   \   000053                ; Setup parameters for call to function zcl_SendCommand
   \   000053   78..         MOV     R0,#?V0 + 8
   \   000055   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000058   75..06       MOV     ?V0 + 0,#0x6
   \   00005B   75..00       MOV     ?V0 + 1,#0x0
   \   00005E   78..         MOV     R0,#?V0 + 0
   \   000060   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000063   E5..         MOV     A,?V0 + 6
   \   000065   F5..         MOV     ?V0 + 0,A
   \   000067   78..         MOV     R0,#?V0 + 0
   \   000069   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00006C   E4           CLR     A
   \   00006D   F5..         MOV     ?V0 + 0,A
   \   00006F   78..         MOV     R0,#?V0 + 0
   \   000071   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000074   E5..         MOV     A,?V0 + 5
   \   000076   F5..         MOV     ?V0 + 0,A
   \   000078   78..         MOV     R0,#?V0 + 0
   \   00007A   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00007D   75..00       MOV     ?V0 + 0,#0x0
   \   000080   78..         MOV     R0,#?V0 + 0
   \   000082   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000085   75..01       MOV     ?V0 + 0,#0x1
   \   000088   78..         MOV     R0,#?V0 + 0
   \   00008A   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00008D   75..00       MOV     ?V0 + 0,#0x0
   \   000090   78..         MOV     R0,#?V0 + 0
   \   000092   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000095   7C04         MOV     R4,#0x4
   \   000097   7D07         MOV     R5,#0x7
   \   000099   EE           MOV     A,R6
   \   00009A   FA           MOV     R2,A
   \   00009B   EF           MOV     A,R7
   \   00009C   FB           MOV     R3,A
   \   00009D   A9..         MOV     R1,?V0 + 4
   \   00009F   12....       LCALL   ??Subroutine160_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_319:
   \   0000A2   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000A5   E9           MOV     A,R1
   \   0000A6   FE           MOV     R6,A
   2567          
   2568            osal_mem_free( buf );
   \   0000A7                ; Setup parameters for call to function osal_mem_free
   \   0000A7   AA..         MOV     R2,?V0 + 8
   \   0000A9   AB..         MOV     R3,?V0 + 9
   \   0000AB   12....       LCALL   ??Subroutine148_0 & 0xFFFF
   2569          
   2570            return status;
   \                     ??CrossCallReturnLabel_222:
   \   0000AE   02....       LJMP    ?Subroutine3 & 0xFFFF
   2571          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine43:
   \   000000   A3           INC     DPTR
   \   000001   A3           INC     DPTR
   \   000002   12....       LCALL   ?Subroutine102 & 0xFFFF
   \                     ??CrossCallReturnLabel_304:
   \   000005   E5..         MOV     A,?V0 + 2
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine102:
   \   000000   12....       LCALL   ?Subroutine138 & 0xFFFF
   \                     ??CrossCallReturnLabel_307:
   \   000003   A3           INC     DPTR
   \   000004   8582..       MOV     ?V0 + 0,DPL
   \   000007   8583..       MOV     ?V0 + 1,DPH
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine34:
   \   000000   85..82       MOV     DPL,?V0 + 2
   \   000003   85..83       MOV     DPH,?V0 + 3
   \   000006   12....       LCALL   ?Subroutine112 & 0xFFFF
   \                     ??CrossCallReturnLabel_168:
   \   000009   8582..       MOV     ?V0 + 0,DPL
   \   00000C   8583..       MOV     ?V0 + 1,DPH
   \   00000F   85..82       MOV     DPL,?V0 + 2
   \   000012   85..83       MOV     DPH,?V0 + 3
   \   000015   A3           INC     DPTR
   \   000016   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine17:
   \   000000   F8           MOV     R0,A
   \   000001   E5..         MOV     A,?V0 + 3
   \   000003   12....       LCALL   ?Subroutine128 & 0xFFFF
   \                     ??CrossCallReturnLabel_193:
   \   000006                REQUIRE ??Subroutine158_0
   \   000006                ; // Fall through to label ??Subroutine158_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine158_0:
   \   000000   12....       LCALL   ?Subroutine102 & 0xFFFF
   \                     ??CrossCallReturnLabel_305:
   \   000003   8882         MOV     DPL,R0
   \   000005   8983         MOV     DPH,R1
   \   000007   A3           INC     DPTR
   \   000008   12....       LCALL   ?Subroutine138 & 0xFFFF
   \                     ??CrossCallReturnLabel_306:
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine138:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   85..82       MOV     DPL,?V0 + 0
   \   000004   85..83       MOV     DPH,?V0 + 1
   \   000007   F0           MOVX    @DPTR,A
   \   000008   22           RET
   2572          
   2573          /*********************************************************************
   2574           * @fn      zclSE_Tunneling_Send_ReqTunnelRsp
   2575           *
   2576           * @brief   Call to send out a Request Tunnel Response
   2577           *
   2578           * @param   srcEP - Sending application's endpoint
   2579           * @param   dstAddr - where you want the message to go
   2580           * @param   pCmd - command payload
   2581           * @param   disableDefaultRsp - disable default response
   2582           * @param   seqNum - ZCL sequence number
   2583           *
   2584           * @return  ZStatus_t
   2585           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2586          extern ZStatus_t zclSE_Tunneling_Send_ReqTunnelRsp( uint8 srcEP, afAddrType_t *dstAddr,
   \                     zclSE_Tunneling_Send_ReqTunnelRsp:
   2587                                                              zclCCReqTunnelRsp_t *pCmd,
   2588                                                              uint8 disableDefaultRsp, uint8 seqNum )
   2589          {
   \   000000   74EF         MOV     A,#-0x11
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 17
   \   000005                ; Auto size: 0
   \   000005   89..         MOV     ?V0 + 4,R1
   \   000007   EA           MOV     A,R2
   \   000008   FE           MOV     R6,A
   \   000009   EB           MOV     A,R3
   \   00000A   FF           MOV     R7,A
   \   00000B   8C..         MOV     ?V0 + 2,R4
   \   00000D   8D..         MOV     ?V0 + 3,R5
   \   00000F   7411         MOV     A,#0x11
   \   000011   12....       LCALL   ?XSTACK_DISP0_8
   \   000014   E0           MOVX    A,@DPTR
   \   000015   F5..         MOV     ?V0 + 5,A
   \   000017   7412         MOV     A,#0x12
   \   000019   12....       LCALL   ?XSTACK_DISP0_8
   \   00001C   E0           MOVX    A,@DPTR
   \   00001D   F5..         MOV     ?V0 + 8,A
   2590            uint8 *buf;
   2591            uint8 *pBuf;
   2592            ZStatus_t status;
   2593          
   2594            buf = osal_mem_alloc( PACKET_LEN_SE_TUNNELING_RESPONSE );
   \   00001F                ; Setup parameters for call to function osal_mem_alloc
   \   00001F   7A05         MOV     R2,#0x5
   \   000021   7B00         MOV     R3,#0x0
   \   000023   12....       LCALL   ??osal_mem_alloc?relay
   \   000026   8A..         MOV     ?V0 + 6,R2
   \   000028   8B..         MOV     ?V0 + 7,R3
   2595            if ( buf == NULL )
   \   00002A   EA           MOV     A,R2
   \   00002B   45..         ORL     A,?V0 + 7
   \   00002D   7004         JNZ     ??zclSE_Tunneling_Send_ReqTunnelRsp_0
   2596            {
   2597              return ZMemError;
   \   00002F   7910         MOV     R1,#0x10
   \   000031   806C         SJMP    ??CrossCallReturnLabel_223
   2598            }
   2599          
   2600            pBuf = buf;
   2601            *pBuf++ = LO_UINT16( pCmd->tunnelId ) ;
   \                     ??zclSE_Tunneling_Send_ReqTunnelRsp_0:
   \   000033   12....       LCALL   ?Subroutine34 & 0xFFFF
   2602            *pBuf++ = HI_UINT16( pCmd->tunnelId );
   \                     ??CrossCallReturnLabel_38:
   \   000036   12....       LCALL   ?Subroutine102 & 0xFFFF
   2603            *pBuf++ = pCmd->tunnelStatus;
   \                     ??CrossCallReturnLabel_303:
   \   000039   85..82       MOV     DPL,?V0 + 2
   \   00003C   85..83       MOV     DPH,?V0 + 3
   \   00003F   12....       LCALL   ?Subroutine43 & 0xFFFF
   2604            *pBuf++ = LO_UINT16( pCmd->maxInTransferSize ) ;
   \                     ??CrossCallReturnLabel_54:
   \   000042   2403         ADD     A,#0x3
   \   000044   12....       LCALL   ?Subroutine17 & 0xFFFF
   2605            *pBuf   = HI_UINT16( pCmd->maxInTransferSize );
   2606          
   2607            status = zcl_SendCommand( srcEP, dstAddr, ZCL_CLUSTER_ID_SE_SE_TUNNELING,
   2608                                      COMMAND_SE_REQUEST_TUNNEL_RESPONSE, TRUE,
   2609                                      ZCL_FRAME_SERVER_CLIENT_DIR, disableDefaultRsp, 0,
   2610                                      seqNum, PACKET_LEN_SE_TUNNELING_RESPONSE, buf );
   \                     ??CrossCallReturnLabel_301:
   \   000047                ; Setup parameters for call to function zcl_SendCommand
   \   000047   78..         MOV     R0,#?V0 + 6
   \   000049   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00004C   75..05       MOV     ?V0 + 0,#0x5
   \   00004F   75..00       MOV     ?V0 + 1,#0x0
   \   000052   78..         MOV     R0,#?V0 + 0
   \   000054   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000057   E5..         MOV     A,?V0 + 8
   \   000059   F5..         MOV     ?V0 + 0,A
   \   00005B   78..         MOV     R0,#?V0 + 0
   \   00005D   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000060   E4           CLR     A
   \   000061   F5..         MOV     ?V0 + 0,A
   \   000063   78..         MOV     R0,#?V0 + 0
   \   000065   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000068   E5..         MOV     A,?V0 + 5
   \   00006A   F5..         MOV     ?V0 + 0,A
   \   00006C   78..         MOV     R0,#?V0 + 0
   \   00006E   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000071   75..01       MOV     ?V0 + 0,#0x1
   \   000074   78..         MOV     R0,#?V0 + 0
   \   000076   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000079   78..         MOV     R0,#?V0 + 0
   \   00007B   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00007E   75..00       MOV     ?V0 + 0,#0x0
   \   000081   78..         MOV     R0,#?V0 + 0
   \   000083   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000086   7C04         MOV     R4,#0x4
   \   000088   7D07         MOV     R5,#0x7
   \   00008A   EE           MOV     A,R6
   \   00008B   FA           MOV     R2,A
   \   00008C   EF           MOV     A,R7
   \   00008D   FB           MOV     R3,A
   \   00008E   A9..         MOV     R1,?V0 + 4
   \   000090   12....       LCALL   ??Subroutine160_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_320:
   \   000093   12....       LCALL   ?DEALLOC_XSTACK8
   \   000096   E9           MOV     A,R1
   \   000097   FE           MOV     R6,A
   2611          
   2612            osal_mem_free( buf );
   \   000098                ; Setup parameters for call to function osal_mem_free
   \   000098   AA..         MOV     R2,?V0 + 6
   \   00009A   AB..         MOV     R3,?V0 + 7
   \   00009C   12....       LCALL   ??Subroutine148_0 & 0xFFFF
   2613          
   2614            return status;
   \                     ??CrossCallReturnLabel_223:
   \   00009F   02....       LJMP    ?Subroutine0 & 0xFFFF
   2615          
   2616          }
   2617          
   2618          /*********************************************************************
   2619           * @fn      zclSE_Tunneling_Send_CloseTunnel
   2620           *
   2621           * @brief   Call to send out a Close Tunnel
   2622           *
   2623           * @param   srcEP - Sending application's endpoint
   2624           * @param   dstAddr - where you want the message to go
   2625           * @param   pCmd - command payload
   2626           * @param   disableDefaultRsp - disable default response
   2627           * @param   seqNum - ZCL sequence number
   2628           *
   2629           * @return  ZStatus_t
   2630           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2631          ZStatus_t zclSE_Tunneling_Send_CloseTunnel( uint8 srcEP, afAddrType_t *dstAddr,
   \                     zclSE_Tunneling_Send_CloseTunnel:
   2632                                                      zclCCCloseTunnel_t *pCmd,
   2633                                                      uint8 disableDefaultRsp, uint8 seqNum )
   2634          {
   \   000000   74F5         MOV     A,#-0xb
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 11
   \   000005                ; Auto size: 2
   \   000005   74FE         MOV     A,#-0x2
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   740D         MOV     A,#0xd
   \   00000C   12....       LCALL   ?XSTACK_DISP0_8
   \   00000F   E0           MOVX    A,@DPTR
   \   000010   FF           MOV     R7,A
   \   000011   740E         MOV     A,#0xe
   \   000013   12....       LCALL   ?XSTACK_DISP0_8
   \   000016   E0           MOVX    A,@DPTR
   \   000017   F5..         MOV     ?V0 + 2,A
   2635            uint8 buf[PACKET_LEN_SE_TUNNELING_CLOSE];
   2636            ZStatus_t status;
   2637          
   2638            buf[0] = LO_UINT16( pCmd->tunnelId );
   \   000019   12....       LCALL   ??Subroutine162_0 & 0xFFFF
   2639            buf[1] = HI_UINT16( pCmd->tunnelId );
   \                     ??CrossCallReturnLabel_336:
   \   00001C   C0E0         PUSH    A
   \   00001E   7401         MOV     A,#0x1
   \   000020   12....       LCALL   ?XSTACK_DISP0_8
   \   000023   D0E0         POP     A
   \   000025   12....       LCALL   ??Subroutine151_0 & 0xFFFF
   2640          
   2641            status = zcl_SendCommand( srcEP, dstAddr, ZCL_CLUSTER_ID_SE_SE_TUNNELING,
   2642                                      COMMAND_SE_CLOSE_TUNNEL, TRUE,
   2643                                      ZCL_FRAME_CLIENT_SERVER_DIR, disableDefaultRsp, 0,
   2644                                      seqNum, PACKET_LEN_SE_TUNNELING_CLOSE, buf );
   2645          
   2646            return status;
   \                     ??CrossCallReturnLabel_240:
   \   000028   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00002B   75..02       MOV     ?V0 + 0,#0x2
   \   00002E   75..00       MOV     ?V0 + 1,#0x0
   \   000031   78..         MOV     R0,#?V0 + 0
   \   000033   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000036   E5..         MOV     A,?V0 + 2
   \   000038   F5..         MOV     ?V0 + 0,A
   \   00003A   78..         MOV     R0,#?V0 + 0
   \   00003C   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00003F   E4           CLR     A
   \   000040   F5..         MOV     ?V0 + 0,A
   \   000042   78..         MOV     R0,#?V0 + 0
   \   000044   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000047   EF           MOV     A,R7
   \   000048   F5..         MOV     ?V0 + 0,A
   \   00004A   78..         MOV     R0,#?V0 + 0
   \   00004C   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00004F   75..00       MOV     ?V0 + 0,#0x0
   \   000052   78..         MOV     R0,#?V0 + 0
   \   000054   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000057   75..01       MOV     ?V0 + 0,#0x1
   \   00005A   78..         MOV     R0,#?V0 + 0
   \   00005C   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00005F   78..         MOV     R0,#?V0 + 0
   \   000061   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000064   7C04         MOV     R4,#0x4
   \   000066   7D07         MOV     R5,#0x7
   \   000068   12....       LCALL   ??Subroutine160_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_321:
   \   00006B   12....       LCALL   ?DEALLOC_XSTACK8
   \   00006E   7402         MOV     A,#0x2
   \   000070   12....       LCALL   ?DEALLOC_XSTACK8
   \   000073   7F03         MOV     R7,#0x3
   \   000075   02....       LJMP    ?BANKED_LEAVE_XDATA
   2647          }
   2648          
   2649          /*********************************************************************
   2650           * @fn      zclSE_Tunneling_Send_TransferData
   2651           *
   2652           * @brief   Call to send out a Transfer Data
   2653           *
   2654           * @param   srcEP - Sending application's endpoint
   2655           * @param   dstAddr - where you want the message to go
   2656           * @param   pCmd - command payload
   2657           * @param   cmdId - command identifier
   2658           * @param   dataLen - length of transported data
   2659           * @param   disableDefaultRsp - disable default response
   2660           * @param   seqNum - ZCL sequence number
   2661           *
   2662           * @return  ZStatus_t
   2663           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2664          ZStatus_t zclSE_Tunneling_Send_TransferData( uint8 srcEP, afAddrType_t *dstAddr,
   \                     zclSE_Tunneling_Send_TransferData:
   2665                                                       zclCCTransferData_t *pCmd, uint8 cmdId,
   2666                                                       uint16 dataLen, uint8 disableDefaultRsp, uint8 seqNum )
   2667          {
   \   000000   74E8         MOV     A,#-0x18
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 24
   \   000005                ; Auto size: 0
   \   000005   89..         MOV     ?V0 + 12,R1
   \   000007   8A..         MOV     ?V0 + 14,R2
   \   000009   8B..         MOV     ?V0 + 15,R3
   \   00000B   8C..         MOV     ?V0 + 2,R4
   \   00000D   8D..         MOV     ?V0 + 3,R5
   \   00000F   7418         MOV     A,#0x18
   \   000011   12....       LCALL   ?XSTACK_DISP0_8
   \   000014   E0           MOVX    A,@DPTR
   \   000015   F5..         MOV     ?V0 + 6,A
   \   000017   7419         MOV     A,#0x19
   \   000019   12....       LCALL   ?XSTACK_DISP0_8
   \   00001C   E0           MOVX    A,@DPTR
   \   00001D   FE           MOV     R6,A
   \   00001E   A3           INC     DPTR
   \   00001F   E0           MOVX    A,@DPTR
   \   000020   FF           MOV     R7,A
   \   000021   741B         MOV     A,#0x1b
   \   000023   12....       LCALL   ?XSTACK_DISP0_8
   \   000026   E0           MOVX    A,@DPTR
   \   000027   F5..         MOV     ?V0 + 11,A
   \   000029   741C         MOV     A,#0x1c
   \   00002B   12....       LCALL   ?XSTACK_DISP0_8
   \   00002E   E0           MOVX    A,@DPTR
   \   00002F   F5..         MOV     ?V0 + 7,A
   2668            uint8 *buf;
   2669            uint8 *pBuf;
   2670            uint8 bufLen;
   2671            ZStatus_t status;
   2672            uint8 direction;
   2673          
   2674            bufLen = PACKET_LEN_SE_TUNNELING_TRANSFER_DATA + dataLen;
   \   000031   EE           MOV     A,R6
   \   000032   2402         ADD     A,#0x2
   \   000034   F5..         MOV     ?V0 + 4,A
   2675            buf = osal_mem_alloc( bufLen );
   \   000036                ; Setup parameters for call to function osal_mem_alloc
   \   000036   FA           MOV     R2,A
   \   000037   7B00         MOV     R3,#0x0
   \   000039   12....       LCALL   ??Subroutine161_0 & 0xFFFF
   2676            if ( buf == NULL )
   \                     ??CrossCallReturnLabel_331:
   \   00003C   7005         JNZ     ??zclSE_Tunneling_Send_TransferData_0
   2677            {
   2678              return ZMemError;
   \   00003E   7910         MOV     R1,#0x10
   \   000040   02....       LJMP    ??CrossCallReturnLabel_218 & 0xFFFF
   2679            }
   2680          
   2681            pBuf = buf;
   2682            *pBuf++ = LO_UINT16( pCmd->tunnelId );
   \                     ??zclSE_Tunneling_Send_TransferData_0:
   \   000043   85..82       MOV     DPL,?V0 + 2
   \   000046   85..83       MOV     DPH,?V0 + 3
   \   000049   12....       LCALL   ?Subroutine37 & 0xFFFF
   2683            *pBuf++ = HI_UINT16( pCmd->tunnelId );
   \                     ??CrossCallReturnLabel_42:
   \   00004C   12....       LCALL   ?Subroutine64 & 0xFFFF
   \                     ??CrossCallReturnLabel_90:
   \   00004F   AB83         MOV     R3,DPH
   2684          
   2685            if ( cmdId == COMMAND_SE_DATA_CLIENT_SERVER_DIR )
   \   000051   7402         MOV     A,#0x2
   \   000053   65..         XRL     A,?V0 + 6
   \   000055   7005         JNZ     ??zclSE_Tunneling_Send_TransferData_1
   2686            {
   2687              direction = ZCL_FRAME_CLIENT_SERVER_DIR;
   \   000057   75..00       MOV     ?V0 + 5,#0x0
   \   00005A   8003         SJMP    ??zclSE_Tunneling_Send_TransferData_2
   2688            }
   2689            else
   2690            {
   2691              direction = ZCL_FRAME_SERVER_CLIENT_DIR;
   \                     ??zclSE_Tunneling_Send_TransferData_1:
   \   00005C   75..01       MOV     ?V0 + 5,#0x1
   2692            }
   2693          
   2694            osal_memcpy( pBuf, pCmd->data, dataLen );
   \                     ??zclSE_Tunneling_Send_TransferData_2:
   \   00005F                ; Setup parameters for call to function osal_memcpy
   \   00005F   85..82       MOV     DPL,?V0 + 2
   \   000062   85..83       MOV     DPH,?V0 + 3
   \   000065   A3           INC     DPTR
   \   000066   A3           INC     DPTR
   \   000067   12....       LCALL   ?Subroutine51 & 0xFFFF
   \                     ??CrossCallReturnLabel_63:
   \   00006A   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   00006D   EE           MOV     A,R6
   \   00006E   FC           MOV     R4,A
   \   00006F   EF           MOV     A,R7
   \   000070   FD           MOV     R5,A
   \   000071   12....       LCALL   ??Subroutine194_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_564:
   \   000074   12....       LCALL   ?DEALLOC_XSTACK8
   2695          
   2696            status = zcl_SendCommand( srcEP, dstAddr, ZCL_CLUSTER_ID_SE_SE_TUNNELING,
   2697                                      cmdId, TRUE, direction, disableDefaultRsp, 0,
   2698                                      seqNum, bufLen, buf );
   \   000077                ; Setup parameters for call to function zcl_SendCommand
   \   000077   78..         MOV     R0,#?V0 + 0
   \   000079   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00007C   85....       MOV     ?V0 + 2,?V0 + 4
   \   00007F   75..00       MOV     ?V0 + 3,#0x0
   \   000082   78..         MOV     R0,#?V0 + 2
   \   000084   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000087   E5..         MOV     A,?V0 + 7
   \   000089   F5..         MOV     ?V0 + 2,A
   \   00008B   78..         MOV     R0,#?V0 + 2
   \   00008D   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000090   E4           CLR     A
   \   000091   F5..         MOV     ?V0 + 2,A
   \   000093   78..         MOV     R0,#?V0 + 2
   \   000095   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000098   E5..         MOV     A,?V0 + 11
   \   00009A   F5..         MOV     ?V0 + 2,A
   \   00009C   78..         MOV     R0,#?V0 + 2
   \   00009E   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000A1   E5..         MOV     A,?V0 + 5
   \   0000A3   F5..         MOV     ?V0 + 2,A
   \   0000A5   78..         MOV     R0,#?V0 + 2
   \   0000A7   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000AA   75..01       MOV     ?V0 + 2,#0x1
   \   0000AD   78..         MOV     R0,#?V0 + 2
   \   0000AF   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000B2   E5..         MOV     A,?V0 + 6
   \   0000B4   F5..         MOV     ?V0 + 2,A
   \   0000B6   78..         MOV     R0,#?V0 + 2
   \   0000B8   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000BB   7C04         MOV     R4,#0x4
   \   0000BD   7D07         MOV     R5,#0x7
   \   0000BF   AA..         MOV     R2,?V0 + 14
   \   0000C1   AB..         MOV     R3,?V0 + 15
   \   0000C3   A9..         MOV     R1,?V0 + 12
   \   0000C5   12....       LCALL   ??Subroutine160_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_322:
   \   0000C8   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000CB   12....       LCALL   ?Subroutine94 & 0xFFFF
   2699          
   2700            osal_mem_free( buf );
   2701          
   2702            return status;
   \                     ??CrossCallReturnLabel_218:
   \   0000CE   7F10         MOV     R7,#0x10
   \   0000D0   02....       LJMP    ?BANKED_LEAVE_XDATA
   2703          }
   2704          
   2705          /*********************************************************************
   2706           * @fn      zclSE_Tunneling_Send_TransferDataError
   2707           *
   2708           * @brief   Call to send out a Transfer Data Error
   2709           *
   2710           * @param   srcEP - Sending application's endpoint
   2711           * @param   dstAddr - where you want the message to go
   2712           * @param   pCmd - command payload
   2713           * @param   cmdId - command identifier
   2714           * @param   disableDefaultRsp - disable default response
   2715           * @param   seqNum - ZCL sequence number
   2716           *
   2717           * @return  ZStatus_t
   2718           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2719          ZStatus_t zclSE_Tunneling_Send_TransferDataError( uint8 srcEP, afAddrType_t *dstAddr,
   \                     zclSE_Tunneling_Send_TransferDataError:
   2720                                                            zclCCTransferDataError_t *pCmd, uint8 cmdId,
   2721                                                            uint8 disableDefaultRsp, uint8 seqNum )
   2722          {
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 3
   \   000005   74FD         MOV     A,#-0x3
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   E9           MOV     A,R1
   \   00000B   FE           MOV     R6,A
   \   00000C   740F         MOV     A,#0xf
   \   00000E   12....       LCALL   ?XSTACK_DISP0_8
   \   000011   E0           MOVX    A,@DPTR
   \   000012   FF           MOV     R7,A
   \   000013   7410         MOV     A,#0x10
   \   000015   12....       LCALL   ?XSTACK_DISP0_8
   \   000018   E0           MOVX    A,@DPTR
   \   000019   F5..         MOV     ?V0 + 2,A
   \   00001B   7411         MOV     A,#0x11
   \   00001D   12....       LCALL   ?XSTACK_DISP0_8
   \   000020   12....       LCALL   ?Subroutine23 & 0xFFFF
   2723            uint8 buf[PACKET_LEN_SE_TUNNELING_DATA_ERROR];
   2724            ZStatus_t status;
   2725            uint8 direction;
   2726          
   2727            buf[0] = LO_UINT16( pCmd->tunnelId );
   2728            buf[1] = HI_UINT16( pCmd->tunnelId );
   \                     ??CrossCallReturnLabel_332:
   \   000023   C0E0         PUSH    A
   \   000025   7401         MOV     A,#0x1
   \   000027   12....       LCALL   ?XSTACK_DISP0_8
   \   00002A   D0E0         POP     A
   \   00002C   F0           MOVX    @DPTR,A
   2729            buf[2] = pCmd->transferDataStatus;
   \   00002D   8C82         MOV     DPL,R4
   \   00002F   8D83         MOV     DPH,R5
   \   000031   A3           INC     DPTR
   \   000032   A3           INC     DPTR
   \   000033   E0           MOVX    A,@DPTR
   \   000034   C0E0         PUSH    A
   \   000036   7402         MOV     A,#0x2
   \   000038   12....       LCALL   ?XSTACK_DISP0_8
   \   00003B   D0E0         POP     A
   \   00003D   F0           MOVX    @DPTR,A
   2730          
   2731            if ( cmdId == COMMAND_SE_DATA_ERROR_CLIENT_SERVER_DIR)
   \   00003E   7403         MOV     A,#0x3
   \   000040   6F           XRL     A,R7
   \   000041   7004         JNZ     ??zclSE_Tunneling_Send_TransferDataError_0
   2732            {
   2733              direction = ZCL_FRAME_CLIENT_SERVER_DIR;
   \   000043   7900         MOV     R1,#0x0
   \   000045   8002         SJMP    ??zclSE_Tunneling_Send_TransferDataError_1
   2734            }
   2735            else
   2736            {
   2737              direction = ZCL_FRAME_SERVER_CLIENT_DIR;
   \                     ??zclSE_Tunneling_Send_TransferDataError_0:
   \   000047   7901         MOV     R1,#0x1
   2738            }
   2739          
   2740            status = zcl_SendCommand( srcEP, dstAddr, ZCL_CLUSTER_ID_SE_SE_TUNNELING,
   2741                                      cmdId, TRUE, direction, disableDefaultRsp, 0,
   2742                                      seqNum, PACKET_LEN_SE_TUNNELING_DATA_ERROR, buf );
   2743          
   2744            return status;
   \                     ??zclSE_Tunneling_Send_TransferDataError_1:
   \   000049                ; Setup parameters for call to function zcl_SendCommand
   \   000049   85..82       MOV     DPL,?XSP + 0
   \   00004C   85..83       MOV     DPH,?XSP + 1
   \   00004F   8582..       MOV     ?V0 + 0,DPL
   \   000052   8583..       MOV     ?V0 + 1,DPH
   \   000055   78..         MOV     R0,#?V0 + 0
   \   000057   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00005A   75..03       MOV     ?V0 + 0,#0x3
   \   00005D   75..00       MOV     ?V0 + 1,#0x0
   \   000060   78..         MOV     R0,#?V0 + 0
   \   000062   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000065   E5..         MOV     A,?V0 + 3
   \   000067   F5..         MOV     ?V0 + 0,A
   \   000069   78..         MOV     R0,#?V0 + 0
   \   00006B   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00006E   E4           CLR     A
   \   00006F   F5..         MOV     ?V0 + 0,A
   \   000071   78..         MOV     R0,#?V0 + 0
   \   000073   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000076   E5..         MOV     A,?V0 + 2
   \   000078   F5..         MOV     ?V0 + 0,A
   \   00007A   78..         MOV     R0,#?V0 + 0
   \   00007C   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00007F   E9           MOV     A,R1
   \   000080   F5..         MOV     ?V0 + 0,A
   \   000082   78..         MOV     R0,#?V0 + 0
   \   000084   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000087   75..01       MOV     ?V0 + 0,#0x1
   \   00008A   78..         MOV     R0,#?V0 + 0
   \   00008C   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00008F   EF           MOV     A,R7
   \   000090   F5..         MOV     ?V0 + 0,A
   \   000092   78..         MOV     R0,#?V0 + 0
   \   000094   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000097   7C04         MOV     R4,#0x4
   \   000099   7D07         MOV     R5,#0x7
   \   00009B   EE           MOV     A,R6
   \   00009C   F9           MOV     R1,A
   \   00009D   12....       LCALL   ??Subroutine160_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_323:
   \   0000A0   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000A3   7403         MOV     A,#0x3
   \   0000A5   02....       LJMP    ??Subroutine176_0 & 0xFFFF
   2745          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine23:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F5..         MOV     ?V0 + 3,A
   \   000003                REQUIRE ??Subroutine162_0
   \   000003                ; // Fall through to label ??Subroutine162_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine176_0:
   \   000000   12....       LCALL   ?DEALLOC_XSTACK8
   \   000003                REQUIRE ??Subroutine177_0
   \   000003                ; // Fall through to label ??Subroutine177_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine177_0:
   \   000000   7F04         MOV     R7,#0x4
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA
   2746          
   2747          /*********************************************************************
   2748           * @fn      zclSE_Tunneling_Send_AckTransferData
   2749           *
   2750           * @brief   Call to send out an Acknowledgment Transfer Data
   2751           *
   2752           * @param   srcEP - Sending application's endpoint
   2753           * @param   dstAddr - where you want the message to go
   2754           * @param   pCmd - command payload
   2755           * @param   cmdId - command identifier
   2756           * @param   disableDefaultRsp - disable default response
   2757           * @param   seqNum - ZCL sequence number
   2758           *
   2759           * @return  ZStatus_t
   2760           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2761          ZStatus_t zclSE_Tunneling_Send_AckTransferData( uint8 srcEP, afAddrType_t *dstAddr,
   \                     zclSE_Tunneling_Send_AckTransferData:
   2762                                                          zclCCAckTransferData_t *pCmd, uint8 cmdId,
   2763                                                          uint8 disableDefaultRsp, uint8 seqNum )
   2764          {
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 4
   \   000005   74FC         MOV     A,#-0x4
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   E9           MOV     A,R1
   \   00000B   FE           MOV     R6,A
   \   00000C   7410         MOV     A,#0x10
   \   00000E   12....       LCALL   ?XSTACK_DISP0_8
   \   000011   E0           MOVX    A,@DPTR
   \   000012   FF           MOV     R7,A
   \   000013   7411         MOV     A,#0x11
   \   000015   12....       LCALL   ?XSTACK_DISP0_8
   \   000018   E0           MOVX    A,@DPTR
   \   000019   F5..         MOV     ?V0 + 2,A
   \   00001B   7412         MOV     A,#0x12
   \   00001D   12....       LCALL   ?XSTACK_DISP0_8
   \   000020   12....       LCALL   ?Subroutine23 & 0xFFFF
   2765            uint8 buf[PACKET_LEN_SE_TUNNELING_DATA_ACK];
   2766            ZStatus_t status;
   2767            uint8 direction;
   2768          
   2769            buf[0] = LO_UINT16( pCmd->tunnelId );
   2770            buf[1] = HI_UINT16( pCmd->tunnelId );
   \                     ??CrossCallReturnLabel_333:
   \   000023   C0E0         PUSH    A
   \   000025   7401         MOV     A,#0x1
   \   000027   12....       LCALL   ?XSTACK_DISP0_8
   \   00002A   D0E0         POP     A
   \   00002C   12....       LCALL   ?Subroutine76 & 0xFFFF
   2771            buf[2] = LO_UINT16( pCmd->numberOfBytesLeft );
   \                     ??CrossCallReturnLabel_118:
   \   00002F   C0E0         PUSH    A
   \   000031   7402         MOV     A,#0x2
   \   000033   12....       LCALL   ?XSTACK_DISP0_8
   \   000036   D0E0         POP     A
   \   000038   12....       LCALL   ?Subroutine80 & 0xFFFF
   2772            buf[3] = HI_UINT16( pCmd->numberOfBytesLeft );
   \                     ??CrossCallReturnLabel_127:
   \   00003B   E0           MOVX    A,@DPTR
   \   00003C   C0E0         PUSH    A
   \   00003E   7403         MOV     A,#0x3
   \   000040   12....       LCALL   ?XSTACK_DISP0_8
   \   000043   D0E0         POP     A
   \   000045   F0           MOVX    @DPTR,A
   2773          
   2774            if ( cmdId == COMMAND_SE_ACK_SERVER_CLIENT_DIR )
   \   000046   7403         MOV     A,#0x3
   \   000048   6F           XRL     A,R7
   \   000049   7004         JNZ     ??zclSE_Tunneling_Send_AckTransferData_0
   2775            {
   2776              direction = ZCL_FRAME_SERVER_CLIENT_DIR;
   \   00004B   7901         MOV     R1,#0x1
   \   00004D   8002         SJMP    ??zclSE_Tunneling_Send_AckTransferData_1
   2777            }
   2778            else
   2779            {
   2780              direction = ZCL_FRAME_CLIENT_SERVER_DIR;
   \                     ??zclSE_Tunneling_Send_AckTransferData_0:
   \   00004F   7900         MOV     R1,#0x0
   2781            }
   2782          
   2783            status = zcl_SendCommand( srcEP, dstAddr, ZCL_CLUSTER_ID_SE_SE_TUNNELING,
   2784                                      cmdId, TRUE, direction, disableDefaultRsp, 0,
   2785                                      seqNum, PACKET_LEN_SE_TUNNELING_DATA_ACK, buf );
   2786          
   2787            return status;
   \                     ??zclSE_Tunneling_Send_AckTransferData_1:
   \   000051                ; Setup parameters for call to function zcl_SendCommand
   \   000051   02....       LJMP    ?Subroutine5 & 0xFFFF
   2788          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine80:
   \   000000   12....       LCALL   ?Subroutine124 & 0xFFFF
   \                     ??CrossCallReturnLabel_181:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine124:
   \   000000   12....       LCALL   ?Subroutine140 & 0xFFFF
   \                     ??CrossCallReturnLabel_201:
   \   000003   A3           INC     DPTR
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine76:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   EC           MOV     A,R4
   \   000002   2402         ADD     A,#0x2
   \   000004   F8           MOV     R0,A
   \   000005   ED           MOV     A,R5
   \   000006   12....       LCALL   ?Subroutine126 & 0xFFFF
   \                     ??CrossCallReturnLabel_189:
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine126:
   \   000000   12....       LCALL   ?Subroutine142 & 0xFFFF
   \                     ??CrossCallReturnLabel_209:
   \   000003   E0           MOVX    A,@DPTR
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine5:
   \   000000   85..82       MOV     DPL,?XSP + 0
   \   000003   85..83       MOV     DPH,?XSP + 1
   \   000006   8582..       MOV     ?V0 + 0,DPL
   \   000009   8583..       MOV     ?V0 + 1,DPH
   \   00000C   78..         MOV     R0,#?V0 + 0
   \   00000E   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000011   75..04       MOV     ?V0 + 0,#0x4
   \   000014   75..00       MOV     ?V0 + 1,#0x0
   \   000017   78..         MOV     R0,#?V0 + 0
   \   000019   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00001C   E5..         MOV     A,?V0 + 3
   \   00001E   F5..         MOV     ?V0 + 0,A
   \   000020   78..         MOV     R0,#?V0 + 0
   \   000022   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000025   E4           CLR     A
   \   000026   F5..         MOV     ?V0 + 0,A
   \   000028   78..         MOV     R0,#?V0 + 0
   \   00002A   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00002D   E5..         MOV     A,?V0 + 2
   \   00002F   F5..         MOV     ?V0 + 0,A
   \   000031   78..         MOV     R0,#?V0 + 0
   \   000033   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000036   E9           MOV     A,R1
   \   000037   F5..         MOV     ?V0 + 0,A
   \   000039   78..         MOV     R0,#?V0 + 0
   \   00003B   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00003E   75..01       MOV     ?V0 + 0,#0x1
   \   000041   78..         MOV     R0,#?V0 + 0
   \   000043   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000046   EF           MOV     A,R7
   \   000047   F5..         MOV     ?V0 + 0,A
   \   000049   78..         MOV     R0,#?V0 + 0
   \   00004B   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00004E   7C04         MOV     R4,#0x4
   \   000050   7D07         MOV     R5,#0x7
   \   000052   EE           MOV     A,R6
   \   000053   F9           MOV     R1,A
   \   000054   12....       LCALL   ??Subroutine160_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_324:
   \   000057   12....       LCALL   ?DEALLOC_XSTACK8
   \   00005A   7404         MOV     A,#0x4
   \   00005C                REQUIRE ??Subroutine176_0
   \   00005C                ; // Fall through to label ??Subroutine176_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine140:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   8882         MOV     DPL,R0
   \   000003   8983         MOV     DPH,R1
   \   000005   22           RET
   2789          
   2790          /*********************************************************************
   2791           * @fn      zclSE_Tunneling_Send_ReadyData
   2792           *
   2793           * @brief   Call to send out a Ready Data
   2794           *
   2795           * @param   srcEP - Sending application's endpoint
   2796           * @param   dstAddr - where you want the message to go
   2797           * @param   pCmd - command payload
   2798           * @param   cmdId - command identifier
   2799           * @param   disableDefaultRsp - disable default response
   2800           * @param   seqNum - ZCL sequence number
   2801           *
   2802           * @return  ZStatus_t
   2803           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2804          ZStatus_t zclSE_Tunneling_Send_ReadyData( uint8 srcEP, afAddrType_t *dstAddr,
   \                     zclSE_Tunneling_Send_ReadyData:
   2805                                                    zclCCReadyData_t *pCmd, uint8 cmdId,
   2806                                                    uint8 disableDefaultRsp, uint8 seqNum )
   2807          {
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 4
   \   000005   74FC         MOV     A,#-0x4
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   E9           MOV     A,R1
   \   00000B   FE           MOV     R6,A
   \   00000C   7410         MOV     A,#0x10
   \   00000E   12....       LCALL   ?XSTACK_DISP0_8
   \   000011   E0           MOVX    A,@DPTR
   \   000012   FF           MOV     R7,A
   \   000013   7411         MOV     A,#0x11
   \   000015   12....       LCALL   ?XSTACK_DISP0_8
   \   000018   E0           MOVX    A,@DPTR
   \   000019   F5..         MOV     ?V0 + 2,A
   \   00001B   7412         MOV     A,#0x12
   \   00001D   12....       LCALL   ?XSTACK_DISP0_8
   \   000020   12....       LCALL   ?Subroutine23 & 0xFFFF
   2808            uint8 buf[PACKET_LEN_SE_TUNNELING_READY_DATA];
   2809            ZStatus_t status;
   2810            uint8 direction;
   2811          
   2812            buf[0] = LO_UINT16( pCmd->tunnelId );
   2813            buf[1] = HI_UINT16( pCmd->tunnelId );
   \                     ??CrossCallReturnLabel_334:
   \   000023   C0E0         PUSH    A
   \   000025   7401         MOV     A,#0x1
   \   000027   12....       LCALL   ?XSTACK_DISP0_8
   \   00002A   D0E0         POP     A
   \   00002C   12....       LCALL   ?Subroutine76 & 0xFFFF
   2814            buf[2] = LO_UINT16( pCmd->numberOfOctetsLeft );
   \                     ??CrossCallReturnLabel_119:
   \   00002F   C0E0         PUSH    A
   \   000031   7402         MOV     A,#0x2
   \   000033   12....       LCALL   ?XSTACK_DISP0_8
   \   000036   D0E0         POP     A
   \   000038   12....       LCALL   ?Subroutine80 & 0xFFFF
   2815            buf[3] = HI_UINT16( pCmd->numberOfOctetsLeft );
   \                     ??CrossCallReturnLabel_128:
   \   00003B   E0           MOVX    A,@DPTR
   \   00003C   C0E0         PUSH    A
   \   00003E   7403         MOV     A,#0x3
   \   000040   12....       LCALL   ?XSTACK_DISP0_8
   \   000043   D0E0         POP     A
   \   000045   F0           MOVX    @DPTR,A
   2816          
   2817            if ( cmdId == COMMAND_SE_READY_DATA_CLIENT_SERVER_DIR )
   \   000046   7405         MOV     A,#0x5
   \   000048   6F           XRL     A,R7
   \   000049   7004         JNZ     ??zclSE_Tunneling_Send_ReadyData_0
   2818            {
   2819              direction = ZCL_FRAME_CLIENT_SERVER_DIR;
   \   00004B   7900         MOV     R1,#0x0
   \   00004D   8002         SJMP    ??zclSE_Tunneling_Send_ReadyData_1
   2820            }
   2821            else
   2822            {
   2823              direction = ZCL_FRAME_SERVER_CLIENT_DIR;
   \                     ??zclSE_Tunneling_Send_ReadyData_0:
   \   00004F   7901         MOV     R1,#0x1
   2824            }
   2825          
   2826            status = zcl_SendCommand( srcEP, dstAddr, ZCL_CLUSTER_ID_SE_SE_TUNNELING,
   2827                                      cmdId, TRUE, direction, disableDefaultRsp, 0,
   2828                                      seqNum, PACKET_LEN_SE_TUNNELING_READY_DATA, buf );
   2829          
   2830            return status;
   \                     ??zclSE_Tunneling_Send_ReadyData_1:
   \   000051                ; Setup parameters for call to function zcl_SendCommand
   \   000051   02....       LJMP    ?Subroutine5 & 0xFFFF
   2831          }
   2832          
   2833          #ifdef SE_UK_EXT
   2834          /*********************************************************************
   2835           * @fn      zclSE_Tunneling_Send_GetSuppTunnelProt
   2836           *
   2837           * @brief   Call to send out a Get Supported Tunnel Protocols
   2838           *
   2839           * @param   srcEP - Sending application's endpoint
   2840           * @param   dstAddr - where you want the message to go
   2841           * @param   pCmd - command payload
   2842           * @param   disableDefaultRsp - disable default response
   2843           * @param   seqNum - ZCL sequence number
   2844           *
   2845           * @return  ZStatus_t
   2846           */
   2847          ZStatus_t zclSE_Tunneling_Send_GetSuppTunnelProt( uint8 srcEP, afAddrType_t *dstAddr,
   2848                                                            zclCCGetSuppTunnProt_t *pCmd,
   2849                                                            uint8 disableDefaultRsp, uint8 seqNum )
   2850          {
   2851            uint8 buf[PACKET_LEN_SE_TUNNELING_GET_SUPP_PROT];
   2852            ZStatus_t status;
   2853          
   2854            buf[0] = pCmd->protocolOffset;
   2855          
   2856            status = zcl_SendCommand( srcEP, dstAddr, ZCL_CLUSTER_ID_SE_SE_TUNNELING,
   2857                                      COMMAND_SE_GET_SUPP_TUNNEL_PROTOCOLS, TRUE,
   2858                                      ZCL_FRAME_CLIENT_SERVER_DIR, disableDefaultRsp, 0,
   2859                                      seqNum, PACKET_LEN_SE_TUNNELING_GET_SUPP_PROT, buf );
   2860            return status;
   2861          }
   2862          
   2863          /*********************************************************************
   2864           * @fn      zclSE_Tunneling_Send_SuppTunnelProtRsp
   2865           *
   2866           * @brief   Call to send out a Supported Tunnel Protocols Response
   2867           *
   2868           * @param   srcEP - Sending application's endpoint
   2869           * @param   dstAddr - where you want the message to go
   2870           * @param   pCmd - command payload
   2871           * @param   disableDefaultRsp - disable default response
   2872           * @param   seqNum - ZCL sequence number
   2873           *
   2874           * @return  ZStatus_t
   2875           */
   2876          ZStatus_t zclSE_Tunneling_Send_SuppTunnelProtRsp( uint8 srcEP, afAddrType_t *dstAddr,
   2877                                                            zclCCSuppTunnProtRsp_t *pCmd,
   2878                                                            uint8 disableDefaultRsp, uint8 seqNum )
   2879          {
   2880            uint8 *buf;
   2881            uint8 *pBuf;
   2882            uint8 bufLen;
   2883            uint8 i;
   2884            ZStatus_t status;
   2885          
   2886            bufLen = PACKET_LEN_SE_TUNNELING_SUPP_PROT_RSP +
   2887                     (pCmd->protocolCount * PACKET_LEN_SE_TUNNELING_PROTOCOL_PAYLOAD);
   2888          
   2889            buf = osal_mem_alloc( bufLen );
   2890            if ( buf == NULL )
   2891            {
   2892              return ZMemError;
   2893            }
   2894          
   2895            pBuf = buf;
   2896            *pBuf++ = pCmd->protocolListComp;
   2897            *pBuf++ = pCmd->protocolCount;
   2898          
   2899            for ( i = 0; i < pCmd->protocolCount; i++ )
   2900            {
   2901              *pBuf++ = LO_UINT16( pCmd->protocol[i].manufacturerCode );
   2902              *pBuf++ = HI_UINT16( pCmd->protocol[i].manufacturerCode );
   2903              *pBuf++ = pCmd->protocol[i].protocolId;
   2904            }
   2905          
   2906            status = zcl_SendCommand( srcEP, dstAddr, ZCL_CLUSTER_ID_SE_SE_TUNNELING,
   2907                                      COMMAND_SE_SUPP_TUNNEL_PROTOCOLS_RSP, TRUE,
   2908                                      ZCL_FRAME_SERVER_CLIENT_DIR, disableDefaultRsp, 0,
   2909                                      seqNum, bufLen, buf );
   2910          
   2911            osal_mem_free( buf );
   2912          
   2913            return status;
   2914          }
   2915          
   2916          /*********************************************************************
   2917           * @fn      zclSE_Tunneling_Send_TunnelClosureNotification
   2918           *
   2919           * @brief   Call to send out a Tunnel Closure Notification
   2920           *
   2921           * @param   srcEP - Sending application's endpoint
   2922           * @param   dstAddr - where you want the message to go
   2923           * @param   pCmd - command payload
   2924           * @param   disableDefaultRsp - disable default response
   2925           * @param   seqNum - ZCL sequence number
   2926           *
   2927           * @return  ZStatus_t
   2928           */
   2929          ZStatus_t zclSE_Tunneling_Send_TunnelClosureNotification( uint8 srcEP, afAddrType_t *dstAddr,
   2930                                                             zclCCTunnelClosureNotification_t *pCmd,
   2931                                                             uint8 disableDefaultRsp, uint8 seqNum )
   2932          {
   2933            uint8 buf[PACKET_LEN_SE_TUNNELING_TUNNEL_CLOSURE];
   2934            ZStatus_t status;
   2935          
   2936            buf[0] = LO_UINT16( pCmd->tunnelId );
   2937            buf[1] = HI_UINT16( pCmd->tunnelId );
   2938          
   2939            status = zcl_SendCommand( srcEP, dstAddr, ZCL_CLUSTER_ID_SE_SE_TUNNELING,
   2940                                      COMMAND_SE_TUNNEL_CLOSURE_NOTIFICATION, TRUE,
   2941                                      ZCL_FRAME_SERVER_CLIENT_DIR, disableDefaultRsp, 0,
   2942                                      seqNum, PACKET_LEN_SE_TUNNELING_TUNNEL_CLOSURE, buf );
   2943          
   2944            return status;
   2945          }
   2946          #endif  //SE_UK_EXT
   2947          #endif  // ZCL_TUNNELING
   2948          
   2949          #ifdef ZCL_TOU
   2950          #ifdef SE_UK_EXT
   2951          /*********************************************************************
   2952           * @fn      zclSE_Tou_Send_PublishCalendar
   2953           *
   2954           * @brief   Call to send out a Publish Calendar Command
   2955           *
   2956           * @param   srcEP - Sending application's endpoint
   2957           * @param   dstAddr - where you want the message to go
   2958           * @param   pCmd - command payload
   2959           * @param   disableDefaultRsp - disable default response
   2960           * @param   seqNum - ZCL sequence number
   2961           *
   2962           * @return  ZStatus_t
   2963           */
   2964          ZStatus_t zclSE_Tou_Send_PublishCalendar( uint8 srcEP, afAddrType_t *dstAddr,
   2965                                                    zclCCPublishCalendar_t *pCmd,
   2966                                                    uint8 disableDefaultRsp, uint8 seqNum )
   2967          {
   2968            uint8 *buf;
   2969            uint8 *pBuf;
   2970            uint16 bufLen;
   2971            ZStatus_t status;
   2972          
   2973            bufLen = PACKET_LEN_SE_PUBLISH_CALENDAR + pCmd->calendarName.strLen;
   2974            buf = osal_mem_alloc( bufLen );
   2975            if ( buf == NULL )
   2976            {
   2977              return ( ZMemError );
   2978            }
   2979          
   2980            pBuf = osal_buffer_uint32( buf, pCmd->issuerCalendarId );
   2981            pBuf = osal_buffer_uint32( pBuf, pCmd->startTime );
   2982            *pBuf++ = pCmd->calendarType;
   2983            *pBuf++ = pCmd->calendarTimeRef;
   2984            *pBuf++ = pCmd->calendarName.strLen;
   2985            pBuf = osal_memcpy( pBuf, pCmd->calendarName.pStr, pCmd->calendarName.strLen );
   2986            *pBuf++ = pCmd->numOfSeasons;
   2987            *pBuf++ = pCmd->numOfWeekProfiles;
   2988            *pBuf = pCmd->numOfDayProfiles;
   2989          
   2990            status = zcl_SendCommand( srcEP, dstAddr, ZCL_CLUSTER_ID_SE_TOU_CALENDAR,
   2991                                      COMMAND_SE_PUBLISH_CALENDAR, TRUE,
   2992                                      ZCL_FRAME_SERVER_CLIENT_DIR, disableDefaultRsp, 0,
   2993                                      seqNum, bufLen, buf );
   2994          
   2995            osal_mem_free( buf );
   2996          
   2997            return status;
   2998          }
   2999          
   3000          /*********************************************************************
   3001           * @fn      zclSE_Tou_Send_PublishDayProfile
   3002           *
   3003           * @brief   Call to send out a Publish Day Profile Command
   3004           *
   3005           * @param   srcEP - Sending application's endpoint
   3006           * @param   dstAddr - where you want the message to go
   3007           * @param   pCmd - command payload
   3008           * @param   disableDefaultRsp - disable default response
   3009           * @param   seqNum - ZCL sequence number
   3010           *
   3011           * @return  ZStatus_t
   3012           */
   3013          ZStatus_t zclSE_Tou_Send_PublishDayProfile( uint8 srcEP, afAddrType_t *dstAddr,
   3014                                                      zclCCPublishDayProfile_t *pCmd,
   3015                                                      uint8 disableDefaultRsp, uint8 seqNum )
   3016          {
   3017            uint8 *buf;
   3018            uint8 *pBuf;
   3019            uint16 bufLen;
   3020            ZStatus_t status;
   3021            uint8 i;
   3022          
   3023            bufLen = PACKET_LEN_SE_PUBLISH_DAY_PROFILE + ( pCmd->numTransferEntries * SE_DAY_SCHEDULE_ENTRY_LEN );
   3024            buf = osal_mem_alloc( bufLen );
   3025            if ( buf == NULL )
   3026            {
   3027              return ( ZMemError );
   3028            }
   3029          
   3030            pBuf = osal_buffer_uint32( buf, pCmd->issuerCalendarId );
   3031            *pBuf++ = pCmd->dayId;
   3032            *pBuf++ = pCmd->totalNumSchedEnt;
   3033            *pBuf++ = pCmd->commandIndex;
   3034          
   3035            for ( i = 0; i < pCmd->numTransferEntries; i++ )
   3036            {
   3037              if ( pCmd->issuerCalendarId <= SE_CALENDAR_TYPE_IMPORT_EXPORT_CALENDAR )
   3038              {
   3039                zclCCRateEntry_t *pRateEntry = (zclCCRateEntry_t *)pCmd->pScheduleEntries;
   3040                pRateEntry += i;
   3041          
   3042                *pBuf++ = LO_UINT16( pRateEntry->startTime );
   3043                *pBuf++ = HI_UINT16( pRateEntry->startTime );
   3044                *pBuf++ = pRateEntry->activePriceTier;
   3045          
   3046              }
   3047              else
   3048              {
   3049                zclCCFriendlyCreditEntry_t *pFriendlyEntry =  (zclCCFriendlyCreditEntry_t *)pCmd->pScheduleEntries;
   3050                pFriendlyEntry += i;
   3051          
   3052                *pBuf++ = LO_UINT16( pFriendlyEntry->startTime );
   3053                *pBuf++ = HI_UINT16( pFriendlyEntry->startTime );
   3054                *pBuf++ = pFriendlyEntry->friendCreditEnable;
   3055              }
   3056            }
   3057          
   3058            status = zcl_SendCommand( srcEP, dstAddr, ZCL_CLUSTER_ID_SE_TOU_CALENDAR,
   3059                                      COMMAND_SE_PUBLISH_DAY_PROFILE, TRUE,
   3060                                      ZCL_FRAME_SERVER_CLIENT_DIR, disableDefaultRsp, 0,
   3061                                      seqNum, bufLen, buf );
   3062          
   3063            osal_mem_free( buf );
   3064          
   3065            return status;
   3066          }
   3067          
   3068          /*********************************************************************
   3069           * @fn      zclSE_Tou_Send_PublishWeekProfile
   3070           *
   3071           * @brief   Call to send out a Publish Week Profile Command
   3072           *
   3073           * @param   srcEP - Sending application's endpoint
   3074           * @param   dstAddr - where you want the message to go
   3075           * @param   pCmd - command payload
   3076           * @param   disableDefaultRsp - disable default response
   3077           * @param   seqNum - ZCL sequence number
   3078           *
   3079           * @return  ZStatus_t
   3080           */
   3081          ZStatus_t zclSE_Tou_Send_PublishWeekProfile( uint8 srcEP, afAddrType_t *dstAddr,
   3082                                                       zclCCPublishWeekProfile_t *pCmd,
   3083                                                       uint8 disableDefaultRsp, uint8 seqNum )
   3084          {
   3085            uint8 *buf;
   3086            uint8 *pBuf;
   3087            ZStatus_t status;
   3088          
   3089            buf = osal_mem_alloc( PACKET_LEN_SE_PUBLISH_WEEK_PROFILE );
   3090            if ( buf == NULL )
   3091            {
   3092              return ( ZMemError );
   3093            }
   3094          
   3095            pBuf = osal_buffer_uint32( buf, pCmd->issuerCalendarId );
   3096            *pBuf++ = pCmd->weekId;
   3097            *pBuf++ = pCmd->dayIdRefMonday;
   3098            *pBuf++ = pCmd->dayIdRefTuestday;
   3099            *pBuf++ = pCmd->dayIdRefWednesday;
   3100            *pBuf++ = pCmd->dayIdRefThursday;
   3101            *pBuf++ = pCmd->dayIdRefFriday;
   3102            *pBuf++ = pCmd->dayIdRefSaturday;
   3103            *pBuf   = pCmd->dayIdRefSunday;
   3104          
   3105            status = zcl_SendCommand( srcEP, dstAddr, ZCL_CLUSTER_ID_SE_TOU_CALENDAR,
   3106                                      COMMAND_SE_PUBLISH_WEEK_PROFILE, TRUE,
   3107                                      ZCL_FRAME_SERVER_CLIENT_DIR, disableDefaultRsp, 0,
   3108                                      seqNum, PACKET_LEN_SE_PUBLISH_WEEK_PROFILE, buf );
   3109          
   3110            osal_mem_free( buf );
   3111          
   3112            return status;
   3113          }
   3114          
   3115          /*********************************************************************
   3116           * @fn      zclSE_Tou_Send_PublishSeasons
   3117           *
   3118           * @brief   Call to send out a Publish Seasons Command
   3119           *
   3120           * @param   srcEP - Sending application's endpoint
   3121           * @param   dstAddr - where you want the message to go
   3122           * @param   pCmd - command payload
   3123           * @param   disableDefaultRsp - disable default response
   3124           * @param   seqNum - ZCL sequence number
   3125           *
   3126           * @return  ZStatus_t
   3127           */
   3128          ZStatus_t zclSE_Tou_Send_PublishSeasons( uint8 srcEP, afAddrType_t *dstAddr,
   3129                                                   zclCCPublishSeasons_t *pCmd,
   3130                                                   uint8 disableDefaultRsp, uint8 seqNum )
   3131          {
   3132            uint8 *buf;
   3133            uint8 *pBuf;
   3134            uint16 bufLen;
   3135            ZStatus_t status;
   3136            uint8 i;
   3137          
   3138            bufLen = PACKET_LEN_SE_PUBLISH_SEASONS + ( pCmd->numTransferEntries * SE_SEASON_ENTRY_LEN );
   3139            buf = osal_mem_alloc( bufLen );
   3140            if ( buf == NULL )
   3141            {
   3142              return ( ZMemError );
   3143            }
   3144          
   3145            pBuf = osal_buffer_uint32( buf, pCmd->issuerCalendarId );
   3146            *pBuf++ = pCmd->commandIndex;
   3147          
   3148          
   3149            for ( i = 0; i < pCmd->numTransferEntries; i++ )
   3150            {
   3151              zclCCSeasonEntry_t *pEntry = &( pCmd->pSeasonEntry[i] );
   3152          
   3153              pBuf = osal_buffer_uint32( pBuf, pEntry->seasonStartDate );
   3154              *pBuf++ = pEntry->weekIdRef;
   3155            }
   3156          
   3157            status = zcl_SendCommand( srcEP, dstAddr, ZCL_CLUSTER_ID_SE_TOU_CALENDAR,
   3158                                      COMMAND_SE_PUBLISH_SEASONS, TRUE,
   3159                                      ZCL_FRAME_SERVER_CLIENT_DIR, disableDefaultRsp, 0,
   3160                                      seqNum, bufLen, buf );
   3161          
   3162            osal_mem_free( buf );
   3163          
   3164            return status;
   3165          }
   3166          
   3167          /*********************************************************************
   3168           * @fn      zclSE_Tou_Send_PublishSpecialDays
   3169           *
   3170           * @brief   Call to send out a Publish Special Days Command
   3171           *
   3172           * @param   srcEP - Sending application's endpoint
   3173           * @param   dstAddr - where you want the message to go
   3174           * @param   pCmd - command payload
   3175           * @param   disableDefaultRsp - disable default response
   3176           * @param   seqNum - ZCL sequence number
   3177           *
   3178           * @return  ZStatus_t
   3179           */
   3180          ZStatus_t zclSE_Tou_Send_PublishSpecialDays( uint8 srcEP, afAddrType_t *dstAddr,
   3181                                                       zclCCPublishSpecialDays_t *pCmd,
   3182                                                       uint8 disableDefaultRsp, uint8 seqNum )
   3183          {
   3184            uint8 *buf;
   3185            uint8 *pBuf;
   3186            uint16 bufLen;
   3187            ZStatus_t status;
   3188            uint8 i;
   3189          
   3190            bufLen = PACKET_LEN_SE_PUBLISH_SPECIAL_DAYS + ( pCmd->numTransferEntries * SE_SPECIAL_DAY_ENTRY_LEN );
   3191            buf = osal_mem_alloc( bufLen );
   3192            if ( buf == NULL )
   3193            {
   3194              return ( ZMemError );
   3195            }
   3196          
   3197            pBuf = osal_buffer_uint32( buf, pCmd->issuerEventId );
   3198            pBuf = osal_buffer_uint32( pBuf, pCmd->startTime );
   3199            *pBuf++ = pCmd->calendarType;
   3200            *pBuf++ = pCmd->totalNumSpecialDays;
   3201            *pBuf++ = pCmd->commandIndex;
   3202          
   3203            for ( i = 0; i < pCmd->numTransferEntries; i++ )
   3204            {
   3205              zclCCSpecialDayEntry_t *pEntry = &( pCmd->pSpecialDayEntry[i] );
   3206          
   3207              pBuf = osal_buffer_uint32( pBuf, pEntry->specialDayDate );
   3208              *pBuf++ = pEntry->dayIdRef;
   3209            }
   3210          
   3211            status = zcl_SendCommand( srcEP, dstAddr, ZCL_CLUSTER_ID_SE_TOU_CALENDAR,
   3212                                      COMMAND_SE_PUBLISH_SPECIAL_DAYS, TRUE,
   3213                                      ZCL_FRAME_SERVER_CLIENT_DIR, disableDefaultRsp, 0,
   3214                                      seqNum, bufLen, buf );
   3215          
   3216            osal_mem_free( buf );
   3217          
   3218            return status;
   3219          }
   3220          
   3221          /*********************************************************************
   3222           * @fn      zclSE_Tou_Send_GetCalendar
   3223           *
   3224           * @brief   Call to send out a Get Calendar Command
   3225           *
   3226           * @param   srcEP - Sending application's endpoint
   3227           * @param   dstAddr - where you want the message to go
   3228           * @param   pCmd - command payload
   3229           * @param   disableDefaultRsp - disable default response
   3230           * @param   seqNum - ZCL sequence number
   3231           *
   3232           * @return  ZStatus_t
   3233           */
   3234          ZStatus_t zclSE_Tou_Send_GetCalendar( uint8 srcEP, afAddrType_t *dstAddr,
   3235                                                zclCCGetCalendar_t *pCmd,
   3236                                                uint8 disableDefaultRsp, uint8 seqNum )
   3237          {
   3238            uint8 buf[PACKET_LEN_SE_GET_CALENDAR];
   3239            ZStatus_t status;
   3240          
   3241            osal_buffer_uint32( buf, pCmd->startTime );
   3242            buf[4] = pCmd->numOfCalendars;
   3243            buf[5] = pCmd->calendarType;
   3244          
   3245            status = zcl_SendCommand( srcEP, dstAddr, ZCL_CLUSTER_ID_SE_TOU_CALENDAR,
   3246                                      COMMAND_SE_GET_CALENDAR, TRUE,
   3247                                      ZCL_FRAME_CLIENT_SERVER_DIR, disableDefaultRsp, 0,
   3248                                      seqNum, PACKET_LEN_SE_GET_CALENDAR, buf );
   3249          
   3250            return status;
   3251          }
   3252          
   3253          /*********************************************************************
   3254           * @fn      zclSE_Tou_Send_GetDayProfiles
   3255           *
   3256           * @brief   Call to send out a Get Day Profiles Command
   3257           *
   3258           * @param   srcEP - Sending application's endpoint
   3259           * @param   dstAddr - where you want the message to go
   3260           * @param   pCmd - command payload
   3261           * @param   disableDefaultRsp - disable default response
   3262           * @param   seqNum - ZCL sequence number
   3263           *
   3264           * @return  ZStatus_t
   3265           */
   3266          ZStatus_t zclSE_Tou_Send_GetDayProfiles( uint8 srcEP, afAddrType_t *dstAddr,
   3267                                                   zclCCGetDayProfiles_t *pCmd,
   3268                                                   uint8 disableDefaultRsp, uint8 seqNum )
   3269          {
   3270            uint8 buf[PACKET_LEN_SE_GET_DAY_PROFILE];
   3271            ZStatus_t status;
   3272          
   3273            osal_buffer_uint32( buf, pCmd->issuerCalendarId );
   3274          
   3275            status = zcl_SendCommand( srcEP, dstAddr, ZCL_CLUSTER_ID_SE_TOU_CALENDAR,
   3276                                      COMMAND_SE_GET_DAY_PROFILES, TRUE,
   3277                                      ZCL_FRAME_CLIENT_SERVER_DIR, disableDefaultRsp, 0,
   3278                                      seqNum, PACKET_LEN_SE_GET_DAY_PROFILE, buf );
   3279          
   3280            return status;
   3281          }
   3282          
   3283          /*********************************************************************
   3284           * @fn      zclSE_Tou_Send_GetWeekProfiles
   3285           *
   3286           * @brief   Call to send out a Get Week Profiles Command
   3287           *
   3288           * @param   srcEP - Sending application's endpoint
   3289           * @param   dstAddr - where you want the message to go
   3290           * @param   pCmd - command payload
   3291           * @param   disableDefaultRsp - disable default response
   3292           * @param   seqNum - ZCL sequence number
   3293           *
   3294           * @return  ZStatus_t
   3295           */
   3296          ZStatus_t zclSE_Tou_Send_GetWeekProfiles( uint8 srcEP, afAddrType_t *dstAddr,
   3297                                                    zclCCGetWeekProfiles_t *pCmd,
   3298                                                    uint8 disableDefaultRsp, uint8 seqNum )
   3299          {
   3300            uint8 buf[PACKET_LEN_SE_GET_WEEK_PROFILE];
   3301            ZStatus_t status;
   3302          
   3303            osal_buffer_uint32( buf, pCmd->issuerCalendarId );
   3304          
   3305            status = zcl_SendCommand( srcEP, dstAddr, ZCL_CLUSTER_ID_SE_TOU_CALENDAR,
   3306                                      COMMAND_SE_GET_WEEK_PROFILES, TRUE,
   3307                                      ZCL_FRAME_CLIENT_SERVER_DIR, disableDefaultRsp, 0,
   3308                                      seqNum, PACKET_LEN_SE_GET_WEEK_PROFILE, buf );
   3309          
   3310            return status;
   3311          }
   3312          
   3313          /*********************************************************************
   3314           * @fn      zclSE_Tou_Send_GetSeasons
   3315           *
   3316           * @brief   Call to send out a Get Seasons Command
   3317           *
   3318           * @param   srcEP - Sending application's endpoint
   3319           * @param   dstAddr - where you want the message to go
   3320           * @param   pCmd - command payload
   3321           * @param   disableDefaultRsp - disable default response
   3322           * @param   seqNum - ZCL sequence number
   3323           *
   3324           * @return  ZStatus_t
   3325           */
   3326          ZStatus_t zclSE_Tou_Send_GetSeasons( uint8 srcEP, afAddrType_t *dstAddr,
   3327                                               zclCCGetSeasons_t *pCmd,
   3328                                               uint8 disableDefaultRsp, uint8 seqNum )
   3329          {
   3330            uint8 buf[PACKET_LEN_SE_GET_SEASONS];
   3331            ZStatus_t status;
   3332          
   3333            osal_buffer_uint32( buf, pCmd->issuerCalendarId );
   3334          
   3335            status = zcl_SendCommand( srcEP, dstAddr, ZCL_CLUSTER_ID_SE_TOU_CALENDAR,
   3336                                      COMMAND_SE_GET_SEASONS, TRUE,
   3337                                      ZCL_FRAME_CLIENT_SERVER_DIR, disableDefaultRsp, 0,
   3338                                      seqNum, PACKET_LEN_SE_GET_SEASONS, buf );
   3339          
   3340            return status;
   3341          }
   3342          
   3343          /*********************************************************************
   3344           * @fn      zclSE_Tou_Send_GetSpecialDays
   3345           *
   3346           * @brief   Call to send out a Get Special Days Command
   3347           *
   3348           * @param   srcEP - Sending application's endpoint
   3349           * @param   dstAddr - where you want the message to go
   3350           * @param   pCmd - command payload
   3351           * @param   disableDefaultRsp - disable default response
   3352           * @param   seqNum - ZCL sequence number
   3353           *
   3354           * @return  ZStatus_t
   3355           */
   3356          ZStatus_t zclSE_Tou_Send_GetSpecialDays( uint8 srcEP, afAddrType_t *dstAddr,
   3357                                                   zclCCGetSpecialDays_t *pCmd,
   3358                                                   uint8 disableDefaultRsp, uint8 seqNum )
   3359          {
   3360            uint8 buf[PACKET_LEN_SE_GET_SPECIAL_DAYS];
   3361            ZStatus_t status;
   3362          
   3363            osal_buffer_uint32( buf, pCmd->startTime );
   3364            buf[4] = pCmd->numOfEvents;
   3365            buf[5] = pCmd->calendarType;
   3366          
   3367            status = zcl_SendCommand( srcEP, dstAddr, ZCL_CLUSTER_ID_SE_TOU_CALENDAR,
   3368                                      COMMAND_SE_GET_SPECIAL_DAYS, TRUE,
   3369                                      ZCL_FRAME_CLIENT_SERVER_DIR, disableDefaultRsp, 0,
   3370                                      seqNum, PACKET_LEN_SE_GET_SPECIAL_DAYS, buf );
   3371          
   3372            return status;
   3373          }
   3374          #endif  // SE_UK_EXT
   3375          #endif  // ZCL_TOU
   3376          
   3377          #ifdef ZCL_DEVICE_MGMT
   3378          #ifdef SE_UK_EXT
   3379          /*********************************************************************
   3380           * @fn      zclSE_DeviceMgmt_Send_GetChangeTenancy
   3381           *
   3382           * @brief   Call to send out a Get Change of Tenancy Command
   3383           *
   3384           * @param   srcEP - Sending application's endpoint
   3385           * @param   dstAddr - where you want the message to go
   3386           * @param   disableDefaultRsp - disable default response
   3387           * @param   seqNum - ZCL sequence number
   3388           *
   3389           * @return  ZStatus_t
   3390           */
   3391          ZStatus_t zclSE_DeviceMgmt_Send_GetChangeTenancy( uint8 srcEP, afAddrType_t *dstAddr,
   3392                                                            uint8 disableDefaultRsp, uint8 seqNum )
   3393          {
   3394            return zcl_SendCommand( srcEP, dstAddr, ZCL_CLUSTER_ID_SE_DEVICE_MGMT,
   3395                                    COMMAND_SE_GET_CHANGE_OF_TENANCY, TRUE,
   3396                                    ZCL_FRAME_CLIENT_SERVER_DIR, disableDefaultRsp, 0,
   3397                                    seqNum, 0, NULL );
   3398          }
   3399          
   3400          /*********************************************************************
   3401           * @fn      zclSE_DeviceMgmt_Send_GetChangeSupplier
   3402           *
   3403           * @brief   Call to send out a Get Change of Supplier Command
   3404           *
   3405           * @param   srcEP - Sending application's endpoint
   3406           * @param   dstAddr - where you want the message to go
   3407           * @param   disableDefaultRsp - disable default response
   3408           * @param   seqNum - ZCL sequence number
   3409           *
   3410           * @return  ZStatus_t
   3411           */
   3412          ZStatus_t zclSE_DeviceMgmt_Send_GetChangeSupplier( uint8 srcEP, afAddrType_t *dstAddr,
   3413                                                             uint8 disableDefaultRsp, uint8 seqNum )
   3414          {
   3415            return zcl_SendCommand( srcEP, dstAddr, ZCL_CLUSTER_ID_SE_DEVICE_MGMT,
   3416                                    COMMAND_SE_GET_CHANGE_OF_SUPPLIER, TRUE,
   3417                                    ZCL_FRAME_CLIENT_SERVER_DIR, disableDefaultRsp, 0,
   3418                                    seqNum, 0, NULL );
   3419          }
   3420          
   3421          /*********************************************************************
   3422           * @fn      zclSE_DeviceMgmt_Send_GetChangeSupply
   3423           *
   3424           * @brief   Call to send out a Get Change Supply Command
   3425           *
   3426           * @param   srcEP - Sending application's endpoint
   3427           * @param   dstAddr - where you want the message to go
   3428           * @param   disableDefaultRsp - disable default response
   3429           * @param   seqNum - ZCL sequence number
   3430           *
   3431           * @return  ZStatus_t
   3432           */
   3433          ZStatus_t zclSE_DeviceMgmt_Send_GetChangeSupply( uint8 srcEP, afAddrType_t *dstAddr,
   3434                                                           uint8 disableDefaultRsp, uint8 seqNum )
   3435          {
   3436            return zcl_SendCommand( srcEP, dstAddr, ZCL_CLUSTER_ID_SE_DEVICE_MGMT,
   3437                                    COMMAND_SE_GET_CHANGE_SUPPLY, TRUE,
   3438                                    ZCL_FRAME_CLIENT_SERVER_DIR, disableDefaultRsp, 0,
   3439                                    seqNum, 0, NULL );
   3440          }
   3441          
   3442          /*********************************************************************
   3443           * @fn      zclSE_DeviceMgmt_Send_SupplyStatusResponse
   3444           *
   3445           * @brief   Call to send out a Supply Status Response Command
   3446           *
   3447           * @param   srcEP - Sending application's endpoint
   3448           * @param   dstAddr - where you want the message to go
   3449           * @param   pCmd - command payload
   3450           * @param   disableDefaultRsp - disable default response
   3451           * @param   seqNum - ZCL sequence number
   3452           *
   3453           * @return  ZStatus_t
   3454           */
   3455          ZStatus_t zclSE_DeviceMgmt_Send_SupplyStatusResponse( uint8 srcEP, afAddrType_t *dstAddr,
   3456                                                                zclCCSupplyStatusResponse_t *pCmd,
   3457                                                                uint8 disableDefaultRsp, uint8 seqNum )
   3458          {
   3459            uint8 *buf;
   3460            uint8 *pBuf;
   3461            ZStatus_t status;
   3462          
   3463            buf = osal_mem_alloc( PACKET_LEN_SE_SUPPLY_STATUS_RESPONSE );
   3464            if ( buf == NULL )
   3465            {
   3466              return ( ZMemError );
   3467            }
   3468          
   3469            pBuf = osal_buffer_uint32( buf, pCmd->supplierId );
   3470            pBuf = osal_buffer_uint32( pBuf, pCmd->issuerEventId );
   3471            pBuf = osal_buffer_uint32( pBuf, pCmd->implementationDateTime );
   3472            *pBuf = pCmd->supplyStatus;
   3473          
   3474            status = zcl_SendCommand( srcEP, dstAddr, ZCL_CLUSTER_ID_SE_DEVICE_MGMT,
   3475                                      COMMAND_SE_SUPPLY_STATUS_RESPONSE, TRUE,
   3476                                      ZCL_FRAME_CLIENT_SERVER_DIR, disableDefaultRsp, 0,
   3477                                      seqNum, PACKET_LEN_SE_SUPPLY_STATUS_RESPONSE, buf );
   3478          
   3479            osal_mem_free( buf );
   3480          
   3481            return status;
   3482          }
   3483          
   3484          /*********************************************************************
   3485           * @fn      zclSE_DeviceMgmt_Send_GetPassword
   3486           *
   3487           * @brief   Call to send out a Get Password Command
   3488           *
   3489           * @param   srcEP - Sending application's endpoint
   3490           * @param   dstAddr - where you want the message to go
   3491           * @param   pCmd - command payload
   3492           * @param   disableDefaultRsp - disable default response
   3493           * @param   seqNum - ZCL sequence number
   3494           *
   3495           * @return  ZStatus_t
   3496           */
   3497          ZStatus_t zclSE_DeviceMgmt_Send_GetPassword( uint8 srcEP, afAddrType_t *dstAddr,
   3498                                                       zclCCGetPassword_t *pCmd,
   3499                                                       uint8 disableDefaultRsp, uint8 seqNum )
   3500          {
   3501            return zcl_SendCommand( srcEP, dstAddr, ZCL_CLUSTER_ID_SE_DEVICE_MGMT,
   3502                                    COMMAND_SE_GET_PASSWORD, TRUE,
   3503                                    ZCL_FRAME_CLIENT_SERVER_DIR, disableDefaultRsp, 0,
   3504                                    seqNum, PACKET_LEN_SE_GET_PASSWORD,
   3505                                    &(pCmd->passwordLevel) );
   3506          }
   3507          
   3508          /*********************************************************************
   3509           * @fn      zclSE_DeviceMgmt_Send_PublishChangeTenancy
   3510           *
   3511           * @brief   Call to send out a Publish Change of Tenancy Command
   3512           *
   3513           * @param   srcEP - Sending application's endpoint
   3514           * @param   dstAddr - where you want the message to go
   3515           * @param   pCmd - command payload
   3516           * @param   disableDefaultRsp - disable default response
   3517           * @param   seqNum - ZCL sequence number
   3518           *
   3519           * @return  ZStatus_t
   3520           */
   3521          ZStatus_t zclSE_DeviceMgmt_Send_PublishChangeTenancy( uint8 srcEP, afAddrType_t *dstAddr,
   3522                                                                zclCCPublishChangeTenancy_t *pCmd,
   3523                                                                uint8 disableDefaultRsp, uint8 seqNum )
   3524          {
   3525            uint8 *buf;
   3526            uint8 *pBuf;
   3527            uint16 bufLen;
   3528            ZStatus_t status;
   3529          
   3530            bufLen = PACKET_LEN_SE_PUBLISH_CHANGE_OF_TENANCY + pCmd->signature.strLen;
   3531            buf = osal_mem_alloc( bufLen );
   3532            if ( buf == NULL )
   3533            {
   3534              return ( ZMemError );
   3535            }
   3536          
   3537            pBuf = osal_buffer_uint32( buf, pCmd->supplierId );
   3538            pBuf = osal_buffer_uint32( pBuf, pCmd->eventId );
   3539            *pBuf++ = pCmd->tariffType;
   3540            pBuf = osal_buffer_uint32( pBuf, pCmd->implementationDateTime );
   3541            pBuf = osal_buffer_uint32( pBuf, pCmd->propTenencyChangeCtrl );
   3542            *pBuf++ = pCmd->signature.strLen;
   3543            (void) osal_memcpy( pBuf, pCmd->signature.pStr, pCmd->signature.strLen );
   3544          
   3545            status = zcl_SendCommand( srcEP, dstAddr, ZCL_CLUSTER_ID_SE_DEVICE_MGMT,
   3546                                      COMMAND_SE_PUBLISH_CHANGE_OF_TENANCY, TRUE,
   3547                                      ZCL_FRAME_SERVER_CLIENT_DIR, disableDefaultRsp, 0,
   3548                                      seqNum, bufLen, buf );
   3549            osal_mem_free( buf );
   3550          
   3551            return status;
   3552          }
   3553          
   3554          /*********************************************************************
   3555           * @fn      zclSE_DeviceMgmt_Send_PublishChangeSupplier
   3556           *
   3557           * @brief   Call to send out a Publish Change of Supplier Command
   3558           *
   3559           * @param   srcEP - Sending application's endpoint
   3560           * @param   dstAddr - where you want the message to go
   3561           * @param   pCmd - command payload
   3562           * @param   disableDefaultRsp - disable default response
   3563           * @param   seqNum - ZCL sequence number
   3564           *
   3565           * @return  ZStatus_t
   3566           */
   3567          ZStatus_t zclSE_DeviceMgmt_Send_PublishChangeSupplier( uint8 srcEP, afAddrType_t *dstAddr,
   3568                                                                 zclCCPublishChangeSupplier_t *pCmd,
   3569                                                                 uint8 disableDefaultRsp, uint8 seqNum )
   3570          {
   3571            uint8 *buf;
   3572            uint8 *pBuf;
   3573            uint16 bufLen;
   3574            ZStatus_t status;
   3575          
   3576            // include in length all variable length fields
   3577            bufLen = PACKET_LEN_SE_PUBLISH_CHANGE_OF_SUPPLIER +
   3578                     pCmd->supplierIdName.strLen +
   3579                     pCmd->signature.strLen;
   3580          
   3581            buf = osal_mem_alloc( bufLen );
   3582            if ( buf == NULL )
   3583            {
   3584              return ( ZMemError );
   3585            }
   3586          
   3587            pBuf = osal_buffer_uint32( buf, pCmd->supplierId );
   3588            pBuf = osal_buffer_uint32( pBuf, pCmd->eventId );
   3589            *pBuf++ = pCmd->tariffType;
   3590            pBuf = osal_buffer_uint32( pBuf, pCmd->propSupplierId );
   3591            pBuf = osal_buffer_uint32( pBuf, pCmd->suppIdImplemDateTime );
   3592            pBuf = osal_buffer_uint32( pBuf, pCmd->supplierChangeCtrl );
   3593            *pBuf++ = pCmd->supplierIdName.strLen;
   3594            pBuf = osal_memcpy( pBuf, pCmd->supplierIdName.pStr, pCmd->supplierIdName.strLen );
   3595            *pBuf++ = pCmd->signature.strLen;
   3596            (void) osal_memcpy( pBuf, pCmd->signature.pStr, pCmd->signature.strLen );
   3597          
   3598            status = zcl_SendCommand( srcEP, dstAddr, ZCL_CLUSTER_ID_SE_DEVICE_MGMT,
   3599                                      COMMAND_SE_PUBLISH_CHANGE_OF_SUPPLIER, TRUE,
   3600                                      ZCL_FRAME_SERVER_CLIENT_DIR, disableDefaultRsp, 0,
   3601                                      seqNum, bufLen, buf );
   3602            osal_mem_free( buf );
   3603          
   3604            return status;
   3605          }
   3606          
   3607          /*********************************************************************
   3608           * @fn      zclSE_DeviceMgmt_Send_ChangeSupply
   3609           *
   3610           * @brief   Call to send out a Change Supply Command
   3611           *
   3612           * @param   srcEP - Sending application's endpoint
   3613           * @param   dstAddr - where you want the message to go
   3614           * @param   pCmd - command payload
   3615           * @param   disableDefaultRsp - disable default response
   3616           * @param   seqNum - ZCL sequence number
   3617           *
   3618           * @return  ZStatus_t
   3619           */
   3620          ZStatus_t zclSE_DeviceMgmt_Send_ChangeSupply( uint8 srcEP, afAddrType_t *dstAddr,
   3621                                                        zclCCChangeSupply_t *pCmd,
   3622                                                        uint8 disableDefaultRsp, uint8 seqNum )
   3623          {
   3624            uint8 *buf;
   3625            uint8 *pBuf;
   3626            uint16 bufLen;
   3627            ZStatus_t status;
   3628          
   3629            bufLen = PACKET_LEN_SE_CHANGE_SUPPLY + pCmd->signature.strLen;
   3630            buf = osal_mem_alloc( bufLen );
   3631            if ( buf == NULL )
   3632            {
   3633              return ( ZMemError );
   3634            }
   3635          
   3636            pBuf = osal_buffer_uint32( buf, pCmd->supplierId );
   3637            pBuf = osal_buffer_uint32( pBuf, pCmd->eventId );
   3638            pBuf = osal_buffer_uint32( pBuf, pCmd->requestDateTime );
   3639            pBuf = osal_buffer_uint32( pBuf, pCmd->implementationDateTime );
   3640            *pBuf++ = pCmd->proposedSupplyStatus;
   3641            *pBuf++ = pCmd->origIdSupplyControlBits;
   3642            *pBuf++ = pCmd->signature.strLen;
   3643            (void) osal_memcpy( pBuf, pCmd->signature.pStr, pCmd->signature.strLen );
   3644          
   3645            status = zcl_SendCommand( srcEP, dstAddr, ZCL_CLUSTER_ID_SE_DEVICE_MGMT,
   3646                                      COMMAND_SE_CHANGE_SUPPLY, TRUE,
   3647                                      ZCL_FRAME_SERVER_CLIENT_DIR, disableDefaultRsp, 0,
   3648                                      seqNum, bufLen, buf );
   3649            osal_mem_free( buf );
   3650          
   3651            return status;
   3652          }
   3653          
   3654          /*********************************************************************
   3655           * @fn      zclSE_DeviceMgmt_Send_ChangePassword
   3656           *
   3657           * @brief   Call to send out a Change Password Command
   3658           *
   3659           * @param   srcEP - Sending application's endpoint
   3660           * @param   dstAddr - where you want the message to go
   3661           * @param   pCmd - command payload
   3662           * @param   disableDefaultRsp - disable default response
   3663           * @param   seqNum - ZCL sequence number
   3664           *
   3665           * @return  ZStatus_t
   3666           */
   3667          ZStatus_t zclSE_DeviceMgmt_Send_ChangePassword( uint8 srcEP, afAddrType_t *dstAddr,
   3668                                                          zclCCChangePassword_t *pCmd,
   3669                                                          uint8 disableDefaultRsp, uint8 seqNum )
   3670          {
   3671            uint8 *buf;
   3672            uint16 bufLen;
   3673            ZStatus_t status;
   3674          
   3675            bufLen = PACKET_LEN_SE_CHANGE_PASSWORD + pCmd->password.strLen;
   3676            buf = osal_mem_alloc( bufLen );
   3677            if ( buf == NULL )
   3678            {
   3679              return ( ZMemError );
   3680            }
   3681          
   3682            buf[0] = pCmd->passwordLevel;
   3683            buf[1] = pCmd->password.strLen;
   3684            (void) osal_memcpy( &(buf[2]), pCmd->password.pStr, pCmd->password.strLen );
   3685          
   3686            status = zcl_SendCommand( srcEP, dstAddr, ZCL_CLUSTER_ID_SE_DEVICE_MGMT,
   3687                                      COMMAND_SE_CHANGE_PASSWORD, TRUE,
   3688                                      ZCL_FRAME_SERVER_CLIENT_DIR, disableDefaultRsp, 0,
   3689                                      seqNum, bufLen, buf );
   3690            osal_mem_free( buf );
   3691          
   3692            return status;
   3693          }
   3694          
   3695          /*********************************************************************
   3696           * @fn      zclSE_DeviceMgmt_Send_LocalChangeSupply
   3697           *
   3698           * @brief   Call to send out a Local Change Supply Command
   3699           *
   3700           * @param   srcEP - Sending application's endpoint
   3701           * @param   dstAddr - where you want the message to go
   3702           * @param   pCmd - command payload
   3703           * @param   disableDefaultRsp - disable default response
   3704           * @param   seqNum - ZCL sequence number
   3705           *
   3706           * @return  ZStatus_t
   3707           */
   3708          ZStatus_t zclSE_DeviceMgmt_Send_LocalChangeSupply( uint8 srcEP, afAddrType_t *dstAddr,
   3709                                                             zclCCLocalChangeSupply_t *pCmd,
   3710                                                             uint8 disableDefaultRsp, uint8 seqNum )
   3711          {
   3712            return zcl_SendCommand( srcEP, dstAddr, ZCL_CLUSTER_ID_SE_DEVICE_MGMT,
   3713                                    COMMAND_SE_LOCAL_CHANGE_SUPPLY, TRUE,
   3714                                    ZCL_FRAME_SERVER_CLIENT_DIR, disableDefaultRsp, 0,
   3715                                    seqNum, PACKET_LEN_SE_LOCAL_CHANGE_SUPPLY,
   3716                                    &(pCmd->propSupplyStatus) );
   3717          }
   3718          #endif  // SE_UK_EXT
   3719          #endif  // ZCL_DEVICE_MGMT
   3720          
   3721          /*********************************************************************
   3722           * @fn      zclSE_RegisterCmdCallbacks
   3723           *
   3724           * @brief   Register an applications command callbacks
   3725           *
   3726           * @param   endpoint - application's endpoint
   3727           * @param   callbacks - pointer to the callback record.
   3728           *
   3729           * @return  ZMemError if not able to allocate
   3730           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3731          ZStatus_t zclSE_RegisterCmdCallbacks( uint8 endpoint, zclSE_AppCallbacks_t *callbacks )
   \                     zclSE_RegisterCmdCallbacks:
   3732          {
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   89..         MOV     ?V0 + 0,R1
   \   000007   EA           MOV     A,R2
   \   000008   FE           MOV     R6,A
   \   000009   EB           MOV     A,R3
   \   00000A   FF           MOV     R7,A
   3733            zclSECBRec_t *pNewItem;
   3734            zclSECBRec_t *pLoop;
   3735          
   3736            // Register as a ZCL Plugin
   3737            if ( !zclSEPluginRegisted )
   \   00000B   90....       MOV     DPTR,#zclSEPluginRegisted
   \   00000E   E0           MOVX    A,@DPTR
   \   00000F   7021         JNZ     ??zclSE_RegisterCmdCallbacks_0
   3738            {
   3739          #ifndef SE_UK_EXT // SE 1.1
   3740              zcl_registerPlugin( ZCL_CLUSTER_ID_SE_PRICING,
   3741                                  ZCL_CLUSTER_ID_SE_PREPAYMENT,
   3742                                  zclSE_HdlIncoming );
   \   000011                ; Setup parameters for call to function zcl_registerPlugin
   \   000011   75....       MOV     ?V0 + 2,#??zclSE_HdlIncoming?relay & 0xff
   \   000014   75....       MOV     ?V0 + 3,#(??zclSE_HdlIncoming?relay >> 8) & 0xff
   \   000017   78..         MOV     R0,#?V0 + 2
   \   000019   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00001C   7C05         MOV     R4,#0x5
   \   00001E   7D07         MOV     R5,#0x7
   \   000020   7A00         MOV     R2,#0x0
   \   000022   7B07         MOV     R3,#0x7
   \   000024   12....       LCALL   ??zcl_registerPlugin?relay
   \   000027   7402         MOV     A,#0x2
   \   000029   12....       LCALL   ?DEALLOC_XSTACK8
   3743          #else
   3744              zcl_registerPlugin( ZCL_CLUSTER_ID_SE_PRICING,
   3745                                  ZCL_CLUSTER_ID_SE_DEVICE_MGMT,
   3746                                  zclSE_HdlIncoming );
   3747          #endif
   3748              zclSEPluginRegisted = TRUE;
   \   00002C   90....       MOV     DPTR,#zclSEPluginRegisted
   \   00002F   7401         MOV     A,#0x1
   \   000031   F0           MOVX    @DPTR,A
   3749            }
   3750          
   3751            // Fill in the new profile list
   3752            pNewItem = osal_mem_alloc( sizeof( zclSECBRec_t ) );
   \                     ??zclSE_RegisterCmdCallbacks_0:
   \   000032                ; Setup parameters for call to function osal_mem_alloc
   \   000032   7A05         MOV     R2,#0x5
   \   000034   7B00         MOV     R3,#0x0
   \   000036   12....       LCALL   ??osal_mem_alloc?relay
   \   000039   8A..         MOV     ?V0 + 2,R2
   \   00003B   8B..         MOV     ?V0 + 3,R3
   \   00003D   A8..         MOV     R0,?V0 + 2
   \   00003F   A9..         MOV     R1,?V0 + 3
   3753            if ( pNewItem == NULL )
   \   000041   E8           MOV     A,R0
   \   000042   49           ORL     A,R1
   \   000043   7004         JNZ     ??zclSE_RegisterCmdCallbacks_1
   3754            {
   3755              return ( ZMemError );
   \   000045   7910         MOV     R1,#0x10
   \   000047   803F         SJMP    ??zclSE_RegisterCmdCallbacks_2
   3756            }
   3757          
   3758            pNewItem->next = (zclSECBRec_t *)NULL;
   \                     ??zclSE_RegisterCmdCallbacks_1:
   \   000049   8882         MOV     DPL,R0
   \   00004B   8983         MOV     DPH,R1
   \   00004D   E4           CLR     A
   \   00004E   F0           MOVX    @DPTR,A
   \   00004F   A3           INC     DPTR
   \   000050   12....       LCALL   ?Subroutine80 & 0xFFFF
   3759            pNewItem->endpoint = endpoint;
   \                     ??CrossCallReturnLabel_129:
   \   000053   A3           INC     DPTR
   \   000054   E5..         MOV     A,?V0 + 0
   \   000056   12....       LCALL   ?Subroutine80 & 0xFFFF
   3760            pNewItem->CBs = callbacks;
   \                     ??CrossCallReturnLabel_130:
   \   000059   A3           INC     DPTR
   \   00005A   A3           INC     DPTR
   \   00005B   EE           MOV     A,R6
   \   00005C   F0           MOVX    @DPTR,A
   \   00005D   A3           INC     DPTR
   \   00005E   EF           MOV     A,R7
   \   00005F   F0           MOVX    @DPTR,A
   3761          
   3762            // Find spot in list
   3763            if ( zclSECBs == NULL )
   \   000060   90....       MOV     DPTR,#zclSECBs
   \   000063   12....       LCALL   ?Subroutine57 & 0xFFFF
   \                     ??CrossCallReturnLabel_75:
   \   000066   EA           MOV     A,R2
   \   000067   4B           ORL     A,R3
   \   000068   7008         JNZ     ??zclSE_RegisterCmdCallbacks_3
   3764            {
   3765              zclSECBs = pNewItem;
   \   00006A   90....       MOV     DPTR,#zclSECBs
   \   00006D   8014         SJMP    ??zclSE_RegisterCmdCallbacks_4
   3766            }
   3767            else
   3768            {
   3769              // Look for end of list
   3770              pLoop = zclSECBs;
   3771              while ( pLoop->next != NULL )
   3772              {
   3773                pLoop = pLoop->next;
   \                     ??zclSE_RegisterCmdCallbacks_5:
   \   00006F   E0           MOVX    A,@DPTR
   \   000070   FA           MOV     R2,A
   \   000071   A3           INC     DPTR
   \                     ??zclSE_RegisterCmdCallbacks_3:
   \   000072   E0           MOVX    A,@DPTR
   \   000073   FB           MOV     R3,A
   3774              }
   \   000074   8A82         MOV     DPL,R2
   \   000076   8B83         MOV     DPH,R3
   \   000078   12....       LCALL   ??Subroutine164_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_337:
   \   00007B   EC           MOV     A,R4
   \   00007C   4D           ORL     A,R5
   \   00007D   8A82         MOV     DPL,R2
   \   00007F   8B83         MOV     DPH,R3
   \   000081   70EC         JNZ     ??zclSE_RegisterCmdCallbacks_5
   3775          
   3776              // Put new item at end of list
   3777              pLoop->next = pNewItem;
   3778            }
   \                     ??zclSE_RegisterCmdCallbacks_4:
   \   000083   12....       LCALL   ?Subroutine123 & 0xFFFF
   3779          
   3780            return ( ZSuccess );
   \                     ??CrossCallReturnLabel_494:
   \   000086   7900         MOV     R1,#0x0
   \                     ??zclSE_RegisterCmdCallbacks_2:
   \   000088   02....       LJMP    ??Subroutine177_0 & 0xFFFF
   3781          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine123:
   \   000000   E8           MOV     A,R0
   \   000001                REQUIRE ??Subroutine163_0
   \   000001                ; // Fall through to label ??Subroutine163_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine163_0:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   A3           INC     DPTR
   \   000002   E9           MOV     A,R1
   \   000003   F0           MOVX    @DPTR,A
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine164_0:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   FC           MOV     R4,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   FD           MOV     R5,A
   \   000005   22           RET
   3782          
   3783          #if defined( ZCL_LOAD_CONTROL ) || defined( ZCL_SIMPLE_METERING ) || \
   3784              defined( ZCL_PRICING ) || defined( ZCL_MESSAGE ) || \
   3785              defined( ZCL_PREPAYMENT ) || defined( ZCL_TUNNELING ) || \
   3786              defined( ZCL_TOU ) || defined( ZCL_DEVICE_MGMT )
   3787          /*********************************************************************
   3788           * @fn      zclSE_FindCallbacks
   3789           *
   3790           * @brief   Find the callbacks for an endpoint
   3791           *
   3792           * @param   endpoint
   3793           *
   3794           * @return  pointer to the callbacks
   3795           */
   3796          static zclSE_AppCallbacks_t *zclSE_FindCallbacks( uint8 endpoint )
   3797          {
   3798            zclSECBRec_t *pCBs;
   3799          
   3800            pCBs = zclSECBs;
   3801            while ( pCBs )
   3802            {
   3803              if ( pCBs->endpoint == endpoint )
   3804              {
   3805                return ( pCBs->CBs );
   3806              }
   3807              pCBs = pCBs->next;
   3808            }
   3809            return ( (zclSE_AppCallbacks_t *)NULL );
   3810          }
   3811          #endif
   3812          
   3813          /*********************************************************************
   3814           * @fn      zclSE_HdlIncoming
   3815           *
   3816           * @brief   Callback from ZCL to process incoming Commands specific
   3817           *          to this cluster library or Profile commands for attributes
   3818           *          that aren't in the attribute list
   3819           *
   3820           * @param   pInMsg - pointer to the incoming message
   3821           *
   3822           * @return  ZStatus_t
   3823           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3824          static ZStatus_t zclSE_HdlIncoming(  zclIncoming_t *pInMsg )
   \                     zclSE_HdlIncoming:
   3825          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
   3826            ZStatus_t stat = ZSuccess;
   3827          
   3828          #if defined ( INTER_PAN )
   3829            if ( StubAPS_InterPan( pInMsg->msg->srcAddr.panId, pInMsg->msg->srcAddr.endPoint ) &&
   3830                 !INTER_PAN_CLUSTER(pInMsg->msg->clusterId) )
   \   000009   8E82         MOV     DPL,R6
   \   00000B   8F83         MOV     DPH,R7
   \   00000D   12....       LCALL   ?Subroutine57 & 0xFFFF
   \                     ??CrossCallReturnLabel_76:
   \   000010                ; Setup parameters for call to function StubAPS_InterPan
   \   000010   EA           MOV     A,R2
   \   000011   240F         ADD     A,#0xf
   \   000013   F582         MOV     DPL,A
   \   000015   EB           MOV     A,R3
   \   000016   12....       LCALL   ??Subroutine170_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_360:
   \   000019   F9           MOV     R1,A
   \   00001A   EA           MOV     A,R2
   \   00001B   2410         ADD     A,#0x10
   \   00001D   F582         MOV     DPL,A
   \   00001F   EB           MOV     A,R3
   \   000020   12....       LCALL   ??Subroutine193_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_515:
   \   000023   12....       LCALL   ?Subroutine57 & 0xFFFF
   \                     ??CrossCallReturnLabel_77:
   \   000026   12....       LCALL   ??StubAPS_InterPan?relay
   \   000029   E9           MOV     A,R1
   \   00002A   6029         JZ      ??zclSE_HdlIncoming_0
   \   00002C   8E82         MOV     DPL,R6
   \   00002E   8F83         MOV     DPH,R7
   \   000030   12....       LCALL   ??Subroutine175_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_385:
   \   000033   7004         JNZ     ??zclSE_HdlIncoming_1
   \   000035   A3           INC     DPTR
   \   000036   E0           MOVX    A,@DPTR
   \   000037   6407         XRL     A,#0x7
   \                     ??zclSE_HdlIncoming_1:
   \   000039   601A         JZ      ??zclSE_HdlIncoming_0
   \   00003B   8E82         MOV     DPL,R6
   \   00003D   8F83         MOV     DPH,R7
   \   00003F   12....       LCALL   ?Subroutine61 & 0xFFFF
   \                     ??CrossCallReturnLabel_81:
   \   000042   A3           INC     DPTR
   \   000043   A3           INC     DPTR
   \   000044   A3           INC     DPTR
   \   000045   A3           INC     DPTR
   \   000046   E0           MOVX    A,@DPTR
   \   000047   6403         XRL     A,#0x3
   \   000049   7004         JNZ     ??zclSE_HdlIncoming_2
   \   00004B   A3           INC     DPTR
   \   00004C   E0           MOVX    A,@DPTR
   \   00004D   6407         XRL     A,#0x7
   \                     ??zclSE_HdlIncoming_2:
   \   00004F   6004         JZ      ??zclSE_HdlIncoming_0
   3831            {
   3832              return ( stat ); // Cluster not supported thru Inter-PAN
   \   000051   7900         MOV     R1,#0x0
   \   000053   8023         SJMP    ??zclSE_HdlIncoming_3
   3833            }
   3834          #endif
   3835            if ( zcl_ClusterCmd( pInMsg->hdr.fc.type ) )
   \                     ??zclSE_HdlIncoming_0:
   \   000055   8E82         MOV     DPL,R6
   \   000057   8F83         MOV     DPH,R7
   \   000059   A3           INC     DPTR
   \   00005A   A3           INC     DPTR
   \   00005B   E0           MOVX    A,@DPTR
   \   00005C   5403         ANL     A,#0x3
   \   00005E   6401         XRL     A,#0x1
   \   000060   7014         JNZ     ??zclSE_HdlIncoming_4
   3836            {
   3837              // Is this a manufacturer specific command?
   3838              if ( pInMsg->hdr.fc.manuSpecific == 0 )
   \   000062   8E82         MOV     DPL,R6
   \   000064   8F83         MOV     DPH,R7
   \   000066   A3           INC     DPTR
   \   000067   A3           INC     DPTR
   \   000068   E0           MOVX    A,@DPTR
   \   000069   5404         ANL     A,#0x4
   \   00006B   7009         JNZ     ??zclSE_HdlIncoming_4
   3839              {
   3840                stat = zclSE_HdlInSpecificCommands( pInMsg );
   \   00006D                ; Setup parameters for call to function zclSE_HdlInSpecificCommands
   \   00006D   EE           MOV     A,R6
   \   00006E   FA           MOV     R2,A
   \   00006F   EF           MOV     A,R7
   \   000070   FB           MOV     R3,A
   \   000071   12....       LCALL   ??zclSE_HdlInSpecificCommands?relay
   \   000074   8002         SJMP    ??zclSE_HdlIncoming_3
   3841              }
   3842              else
   3843              {
   3844                // We don't support any manufacturer specific command.
   3845                stat = ZFailure;
   \                     ??zclSE_HdlIncoming_4:
   \   000076   7901         MOV     R1,#0x1
   3846              }
   3847            }
   3848            else
   3849            {
   3850              // Handle all the normal (Read, Write...) commands -- should never get here
   3851              stat = ZFailure;
   3852            }
   3853          
   3854            return ( stat );
   \                     ??zclSE_HdlIncoming_3:
   \   000078                REQUIRE ?Subroutine6
   \   000078                ; // Fall through to label ?Subroutine6
   3855          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine6:
   \   000000   7F01         MOV     R7,#0x1
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine61:
   \   000000   A3           INC     DPTR
   \   000001   E0           MOVX    A,@DPTR
   \   000002   F583         MOV     DPH,A
   \   000004   8882         MOV     DPL,R0
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine175_0:
   \   000000   12....       LCALL   ?Subroutine110 & 0xFFFF
   \                     ??CrossCallReturnLabel_392:
   \   000003   E0           MOVX    A,@DPTR
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine110:
   \   000000   12....       LCALL   ?Subroutine139 & 0xFFFF
   \                     ??CrossCallReturnLabel_431:
   \   000003   A3           INC     DPTR
   \   000004   A3           INC     DPTR
   \   000005   A3           INC     DPTR
   \   000006   A3           INC     DPTR
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine139:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F8           MOV     R0,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   F583         MOV     DPH,A
   \   000006   8882         MOV     DPL,R0
   \   000008   22           RET
   3856          
   3857          /*********************************************************************
   3858           * @fn      zclSE_HdlInSpecificCommands
   3859           *
   3860           * @brief   Function to process incoming Commands specific
   3861           *          to this cluster library
   3862          
   3863           * @param   pInMsg - pointer to the incoming message
   3864           *
   3865           * @return  ZStatus_t
   3866           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3867          static ZStatus_t zclSE_HdlInSpecificCommands( zclIncoming_t *pInMsg )
   \                     zclSE_HdlInSpecificCommands:
   3868          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   3869            ZStatus_t stat;
   3870            zclSE_AppCallbacks_t *pCBs;
   3871          
   3872            // make sure endpoint exists
   3873          
   3874          #if defined( ZCL_LOAD_CONTROL ) || defined( ZCL_SIMPLE_METERING ) || \
   3875              defined( ZCL_PRICING ) || defined( ZCL_MESSAGE ) || \
   3876              defined( ZCL_PREPAYMENT ) || defined( ZCL_TUNNELING ) || \
   3877              defined( ZCL_TOU ) || defined( ZCL_DEVICE_MGMT )
   3878          
   3879            pCBs = zclSE_FindCallbacks( pInMsg->msg->endPoint );
   \   000005   8A82         MOV     DPL,R2
   \   000007   8B83         MOV     DPH,R3
   \   000009   E0           MOVX    A,@DPTR
   \   00000A   2414         ADD     A,#0x14
   \   00000C   12....       LCALL   ?Subroutine62 & 0xFFFF
   \                     ??CrossCallReturnLabel_85:
   \   00000F   FC           MOV     R4,A
   \   000010   90....       MOV     DPTR,#zclSECBs
   \                     ??zclSE_HdlInSpecificCommands_0:
   \   000013   12....       LCALL   ??Subroutine186_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_436:
   \   000016   604F         JZ      ??zclSE_HdlInSpecificCommands_1
   \   000018   8882         MOV     DPL,R0
   \   00001A   8983         MOV     DPH,R1
   \   00001C   A3           INC     DPTR
   \   00001D   A3           INC     DPTR
   \   00001E   E0           MOVX    A,@DPTR
   \   00001F   6C           XRL     A,R4
   \   000020   8882         MOV     DPL,R0
   \   000022   8983         MOV     DPH,R1
   \   000024   70ED         JNZ     ??zclSE_HdlInSpecificCommands_0
   \   000026   12....       LCALL   ?Subroutine60 & 0xFFFF
   3880            if ( pCBs == NULL )
   \                     ??CrossCallReturnLabel_339:
   \   000029   EC           MOV     A,R4
   \   00002A   4D           ORL     A,R5
   \   00002B   603A         JZ      ??zclSE_HdlInSpecificCommands_1
   3881            {
   3882              return ( ZFailure );
   3883            }
   3884          
   3885          #endif
   3886            switch ( pInMsg->msg->clusterId )			
   \   00002D   8A82         MOV     DPL,R2
   \   00002F   8B83         MOV     DPH,R3
   \   000031   12....       LCALL   ??Subroutine175_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_386:
   \   000034   F5..         MOV     ?V0 + 0,A
   \   000036   A3           INC     DPTR
   \   000037   E0           MOVX    A,@DPTR
   \   000038   F5..         MOV     ?V0 + 1,A
   \   00003A   78..         MOV     R0,#?V0 + 0
   \   00003C   12....       LCALL   ?US_SWITCH_DENSE
   \                     `?<Jumptable for zclSE_HdlInSpecificCommands>_0`:
   \   00003F   0007         DW        1792
   \   000041   04           DB        4
   \   000042   ....         DW        ??zclSE_HdlInSpecificCommands_1
   \   000044   ....         DW        ??zclSE_HdlInSpecificCommands_2
   \   000046   ....         DW        ??zclSE_HdlInSpecificCommands_3
   \   000048   ....         DW        ??zclSE_HdlInSpecificCommands_4
   \   00004A   ....         DW        ??zclSE_HdlInSpecificCommands_5
   \   00004C   ....         DW        ??zclSE_HdlInSpecificCommands_6
   3887            {
   3888          #ifdef ZCL_SIMPLE_METERING
   3889              case ZCL_CLUSTER_ID_SE_SIMPLE_METERING:
   3890                stat = zclSE_ProcessInSimpleMeteringCmds( pInMsg, pCBs );
   \                     ??zclSE_HdlInSpecificCommands_4:
   \   00004E                ; Setup parameters for call to function zclSE_ProcessInSimpleMeteringCmds
   \   00004E   12....       LCALL   ??zclSE_ProcessInSimpleMeteringCmds?relay
   3891                break;
   \   000051   8016         SJMP    ??zclSE_HdlInSpecificCommands_7
   3892          #endif
   3893          
   3894          #ifdef ZCL_PRICING
   3895              case ZCL_CLUSTER_ID_SE_PRICING:
   3896                stat = zclSE_ProcessInPricingCmds( pInMsg, pCBs );
   \                     ??zclSE_HdlInSpecificCommands_2:
   \   000053                ; Setup parameters for call to function zclSE_ProcessInPricingCmds
   \   000053   12....       LCALL   ??zclSE_ProcessInPricingCmds?relay
   3897                break;
   \   000056   8011         SJMP    ??zclSE_HdlInSpecificCommands_7
   3898          #endif
   3899          
   3900          #ifdef ZCL_MESSAGE
   3901              case ZCL_CLUSTER_ID_SE_MESSAGE:
   3902                stat = zclSE_ProcessInMessageCmds( pInMsg, pCBs );
   \                     ??zclSE_HdlInSpecificCommands_5:
   \   000058                ; Setup parameters for call to function zclSE_ProcessInMessageCmds
   \   000058   12....       LCALL   ??zclSE_ProcessInMessageCmds?relay
   3903                break;
   \   00005B   800C         SJMP    ??zclSE_HdlInSpecificCommands_7
   3904          #endif
   3905          
   3906          #ifdef ZCL_LOAD_CONTROL
   3907              case ZCL_CLUSTER_ID_SE_LOAD_CONTROL:
   3908                stat = zclSE_ProcessInLoadControlCmds( pInMsg, pCBs );
   \                     ??zclSE_HdlInSpecificCommands_3:
   \   00005D                ; Setup parameters for call to function zclSE_ProcessInLoadControlCmds
   \   00005D   12....       LCALL   ??zclSE_ProcessInLoadControlCmds?relay
   3909                break;
   \   000060   8007         SJMP    ??zclSE_HdlInSpecificCommands_7
   3910          #endif
   3911          
   3912          #ifdef ZCL_TUNNELING
   3913              case ZCL_CLUSTER_ID_SE_SE_TUNNELING:
   3914                stat = zclSE_ProcessInTunnelingCmds( pInMsg, pCBs );
   \                     ??zclSE_HdlInSpecificCommands_6:
   \   000062                ; Setup parameters for call to function zclSE_ProcessInTunnelingCmds
   \   000062   12....       LCALL   ??zclSE_ProcessInTunnelingCmds?relay
   3915                break;
   \   000065   8002         SJMP    ??zclSE_HdlInSpecificCommands_7
   3916          #endif // ZCL_TUNNELING
   3917          
   3918          #ifdef ZCL_PREPAYMENT
   3919              case ZCL_CLUSTER_ID_SE_PREPAYMENT:
   3920                stat = zclSE_ProcessInPrepaymentCmds( pInMsg, pCBs );
   3921                break;
   3922          #endif // ZCL_PREPAYMENT
   3923          
   3924          #ifdef SE_UK_EXT
   3925          #ifdef ZCL_TOU
   3926              case ZCL_CLUSTER_ID_SE_TOU_CALENDAR:
   3927                stat = zclSE_ProcessInTouCmds( pInMsg, pCBs );
   3928                break;
   3929          #endif  // ZCL_TOU
   3930          
   3931          #ifdef ZCL_DEVICE_MGMT
   3932              case ZCL_CLUSTER_ID_SE_DEVICE_MGMT:
   3933                stat = zclSE_ProcessInDeviceMgmtCmds( pInMsg, pCBs );
   3934                break;
   3935          #endif  // ZCL_DEVICE_MGMT
   3936          #endif  // SE_UK_EXT
   3937          
   3938              default:
   3939                stat = ZFailure;
   \                     ??zclSE_HdlInSpecificCommands_1:
   \   000067   7901         MOV     R1,#0x1
   3940                break;
   3941            }
   3942          
   3943            return ( stat );
   \                     ??zclSE_HdlInSpecificCommands_7:
   \   000069   02....       LJMP    ??Subroutine183_0 & 0xFFFF
   3944          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine62:
   \   000000   F8           MOV     R0,A
   \   000001   A3           INC     DPTR
   \   000002   E0           MOVX    A,@DPTR
   \   000003   12....       LCALL   ?Subroutine126 & 0xFFFF
   \                     ??CrossCallReturnLabel_188:
   \   000006   22           RET
   3945          
   3946          #ifdef ZCL_SIMPLE_METERING
   3947          /*********************************************************************
   3948           * @fn      zclSE_ProcessInSimpleMeteringCmds
   3949           *
   3950           * @brief   Callback from ZCL to process incoming Commands specific
   3951           *          to this cluster library on a command ID basis
   3952           *
   3953           * @param   pInMsg - pointer to the incoming message
   3954           * @param   pCBs - pointer to the application call back function
   3955           *
   3956           * @return  ZStatus_t
   3957           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3958          static ZStatus_t zclSE_ProcessInSimpleMeteringCmds( zclIncoming_t *pInMsg,
   \                     zclSE_ProcessInSimpleMeteringCmds:
   3959                                                               zclSE_AppCallbacks_t *pCBs )
   3960          {
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 13
   \   000005   74F3         MOV     A,#-0xd
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   12....       LCALL   ?Subroutine26 & 0xFFFF
   3961            ZStatus_t stat;
   3962          
   3963            if ( zcl_ServerCmd( pInMsg->hdr.fc.direction ) )
   \                     ??CrossCallReturnLabel_355:
   \   00000D   6003         JZ      $+5
   \   00000F   02....       LJMP    ??zclSE_ProcessInSimpleMeteringCmds_0 & 0xFFFF
   3964            {
   3965              // Process Client commands, received by server
   3966              switch ( pInMsg->hdr.commandID )
   \   000012   E0           MOVX    A,@DPTR
   \   000013   600B         JZ      ??zclSE_ProcessInSimpleMeteringCmds_1
   \   000015   14           DEC     A
   \   000016   6063         JZ      ??zclSE_ProcessInSimpleMeteringCmds_2
   \   000018   14           DEC     A
   \   000019   606F         JZ      ??zclSE_ProcessInSimpleMeteringCmds_3
   \   00001B   14           DEC     A
   \   00001C   607B         JZ      ??zclSE_ProcessInSimpleMeteringCmds_4
   \   00001E   807E         SJMP    ??zclSE_ProcessInSimpleMeteringCmds_5
   3967              {
   3968                case COMMAND_SE_GET_PROFILE_CMD:
   3969                  stat = zclSE_ProcessInCmd_SimpleMeter_GetProfileCmd( pInMsg, pCBs );
   \                     ??zclSE_ProcessInSimpleMeteringCmds_1:
   \   000020   EC           MOV     A,R4
   \   000021   241E         ADD     A,#0x1e
   \   000023   12....       LCALL   ?Subroutine11 & 0xFFFF
   \                     ??CrossCallReturnLabel_453:
   \   000026   6076         JZ      ??zclSE_ProcessInSimpleMeteringCmds_5
   \   000028   12....       LCALL   ?Subroutine47 & 0xFFFF
   \                     ??CrossCallReturnLabel_342:
   \   00002B   C0E0         PUSH    A
   \   00002D   7402         MOV     A,#0x2
   \   00002F   12....       LCALL   ?XSTACK_DISP0_8
   \   000032   D0E0         POP     A
   \   000034   12....       LCALL   ?Subroutine45 & 0xFFFF
   \                     ??CrossCallReturnLabel_346:
   \   000037   7403         MOV     A,#0x3
   \   000039   12....       LCALL   ?XSTACK_DISP0_8
   \   00003C   12....       LCALL   ?XSTORE_R2345
   \   00003F   12....       LCALL   ?Subroutine49 & 0xFFFF
   \                     ??CrossCallReturnLabel_60:
   \   000042   C0E0         PUSH    A
   \   000044   7407         MOV     A,#0x7
   \   000046   12....       LCALL   ?XSTACK_DISP0_8
   \   000049   D0E0         POP     A
   \   00004B   F0           MOVX    @DPTR,A
   \   00004C   7402         MOV     A,#0x2
   \   00004E   12....       LCALL   ?XSTACK_DISP0_8
   \   000051   E0           MOVX    A,@DPTR
   \   000052   C3           CLR     C
   \   000053   9402         SUBB    A,#0x2
   \   000055   4005         JC      ??zclSE_ProcessInSimpleMeteringCmds_6
   \   000057   7985         MOV     R1,#-0x7b
   \   000059   02....       LJMP    ??zclSE_ProcessInSimpleMeteringCmds_7 & 0xFFFF
   \                     ??zclSE_ProcessInSimpleMeteringCmds_6:
   \   00005C                ; Setup parameters for indirect call
   \   00005C   12....       LCALL   ?Subroutine42 & 0xFFFF
   \                     ??CrossCallReturnLabel_349:
   \   00005F   7402         MOV     A,#0x2
   \   000061   12....       LCALL   ?XSTACK_DISP0_8
   \   000064   AA82         MOV     R2,DPL
   \   000066   AB83         MOV     R3,DPH
   \   000068   E5..         MOV     A,?V0 + 2
   \   00006A   241E         ADD     A,#0x1e
   \   00006C   F582         MOV     DPL,A
   \   00006E   E5..         MOV     A,?V0 + 3
   \   000070   12....       LCALL   ??Subroutine180_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_414:
   \   000073   12....       LCALL   ?CALL_IND
   \   000076   79FF         MOV     R1,#-0x1
   \   000078   02....       LJMP    ??zclSE_ProcessInSimpleMeteringCmds_7 & 0xFFFF
   3970                  break;
   3971          
   3972                case COMMAND_SE_REQ_MIRROR_RSP:
   3973                  stat = zclSE_ProcessInCmd_SimpleMeter_ReqMirrorRsp( pInMsg, pCBs );
   \                     ??zclSE_ProcessInSimpleMeteringCmds_2:
   \   00007B   EC           MOV     A,R4
   \   00007C   2420         ADD     A,#0x20
   \   00007E   12....       LCALL   ?Subroutine11 & 0xFFFF
   \                     ??CrossCallReturnLabel_454:
   \   000081   601B         JZ      ??zclSE_ProcessInSimpleMeteringCmds_5
   \   000083   12....       LCALL   ?Subroutine15 & 0xFFFF
   \                     ??CrossCallReturnLabel_10:
   \   000086   2420         ADD     A,#0x20
   \   000088   807E         SJMP    ??zclSE_ProcessInSimpleMeteringCmds_8
   3974                  break;
   3975          
   3976                case COMMAND_SE_MIRROR_REM_RSP:
   3977                  stat = zclSE_ProcessInCmd_SimpleMeter_MirrorRemRsp( pInMsg, pCBs );
   \                     ??zclSE_ProcessInSimpleMeteringCmds_3:
   \   00008A   EC           MOV     A,R4
   \   00008B   2422         ADD     A,#0x22
   \   00008D   12....       LCALL   ?Subroutine11 & 0xFFFF
   \                     ??CrossCallReturnLabel_455:
   \   000090   600C         JZ      ??zclSE_ProcessInSimpleMeteringCmds_5
   \   000092   12....       LCALL   ?Subroutine15 & 0xFFFF
   \                     ??CrossCallReturnLabel_11:
   \   000095   2422         ADD     A,#0x22
   \   000097   806F         SJMP    ??zclSE_ProcessInSimpleMeteringCmds_8
   3978                  break;
   3979          
   3980                case COMMAND_SE_REQ_FAST_POLL_MODE_CMD:
   3981                  stat = zclSE_ProcessInCmd_SimpleMeter_ReqFastPollModeCmd( pInMsg, pCBs );
   \                     ??zclSE_ProcessInSimpleMeteringCmds_4:
   \   000099                ; Setup parameters for call to function zclSE_ProcessInCmd_SimpleMeter_ReqFastPollModeCmd
   \   000099   12....       LCALL   ??zclSE_ProcessInCmd_SimpleMeter_ReqFastPollMod
   3982                  break;
   \   00009C   807A         SJMP    ??zclSE_ProcessInSimpleMeteringCmds_7
   3983          
   3984          #ifdef SE_UK_EXT
   3985                case COMMAND_SE_GET_SNAPSHOT_CMD:
   3986                  stat = zclSE_ProcessInCmd_SimpleMeter_GetSnapshotCmd( pInMsg, pCBs );
   3987                  break;
   3988          
   3989                case COMMAND_SE_TAKE_SNAPSHOT_CMD:
   3990                  stat = zclSE_ProcessInCmd_SimpleMeter_TakeSnapshotCmd( pInMsg, pCBs );
   3991                  break;
   3992          
   3993                case COMMAND_SE_MIRROR_REPORT_ATTR_RSP:
   3994                  stat = zclSE_ProcessInCmd_SimpleMeter_MirrorReportAttrRsp( pInMsg, pCBs );
   3995                  break;
   3996          #endif  // SE_UK_EXT
   3997          
   3998                default:
   3999                  stat = ZFailure;
   \                     ??zclSE_ProcessInSimpleMeteringCmds_5:
   \   00009E   7901         MOV     R1,#0x1
   4000                  break;
   \   0000A0   8076         SJMP    ??zclSE_ProcessInSimpleMeteringCmds_7
   4001              }
   4002            }
   4003            else
   4004            {
   4005              // Process Server commands, received by client
   4006              switch ( pInMsg->hdr.commandID )
   \                     ??zclSE_ProcessInSimpleMeteringCmds_0:
   \   0000A2   E0           MOVX    A,@DPTR
   \   0000A3   600B         JZ      ??zclSE_ProcessInSimpleMeteringCmds_9
   \   0000A5   14           DEC     A
   \   0000A6   600D         JZ      ??zclSE_ProcessInSimpleMeteringCmds_10
   \   0000A8   14           DEC     A
   \   0000A9   601F         JZ      ??zclSE_ProcessInSimpleMeteringCmds_11
   \   0000AB   14           DEC     A
   \   0000AC   602B         JZ      ??zclSE_ProcessInSimpleMeteringCmds_12
   \   0000AE   80EE         SJMP    ??zclSE_ProcessInSimpleMeteringCmds_5
   4007              {
   4008                case COMMAND_SE_GET_PROFILE_RSP:
   4009                  stat = zclSE_ProcessInCmd_SimpleMeter_GetProfileRsp( pInMsg, pCBs );
   \                     ??zclSE_ProcessInSimpleMeteringCmds_9:
   \   0000B0                ; Setup parameters for call to function zclSE_ProcessInCmd_SimpleMeter_GetProfileRsp
   \   0000B0   12....       LCALL   ??zclSE_ProcessInCmd_SimpleMeter_GetProfileRsp?
   4010                  break;
   \   0000B3   8063         SJMP    ??zclSE_ProcessInSimpleMeteringCmds_7
   4011          
   4012                case COMMAND_SE_REQ_MIRROR_CMD:
   4013                  stat = zclSE_ProcessInCmd_SimpleMeter_ReqMirrorCmd( pInMsg, pCBs );
   \                     ??zclSE_ProcessInSimpleMeteringCmds_10:
   \   0000B5   EC           MOV     A,R4
   \   0000B6   2418         ADD     A,#0x18
   \   0000B8   12....       LCALL   ?Subroutine11 & 0xFFFF
   \                     ??CrossCallReturnLabel_456:
   \   0000BB   60E1         JZ      ??zclSE_ProcessInSimpleMeteringCmds_5
   \   0000BD                ; Setup parameters for indirect call
   \   0000BD   12....       LCALL   ?Subroutine29 & 0xFFFF
   \                     ??CrossCallReturnLabel_24:
   \   0000C0   2418         ADD     A,#0x18
   \                     ??zclSE_ProcessInSimpleMeteringCmds_13:
   \   0000C2   F582         MOV     DPL,A
   \   0000C4   ED           MOV     A,R5
   \   0000C5   12....       LCALL   ??Subroutine193_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_516:
   \   0000C8   8046         SJMP    ??zclSE_ProcessInSimpleMeteringCmds_14
   4014                  break;
   4015          
   4016                case COMMAND_SE_MIRROR_REM_CMD:
   4017                  stat = zclSE_ProcessInCmd_SimpleMeter_MirrorRemCmd( pInMsg, pCBs );
   \                     ??zclSE_ProcessInSimpleMeteringCmds_11:
   \   0000CA   EC           MOV     A,R4
   \   0000CB   241A         ADD     A,#0x1a
   \   0000CD   12....       LCALL   ?Subroutine11 & 0xFFFF
   \                     ??CrossCallReturnLabel_457:
   \   0000D0   60CC         JZ      ??zclSE_ProcessInSimpleMeteringCmds_5
   \   0000D2                ; Setup parameters for indirect call
   \   0000D2   12....       LCALL   ?Subroutine29 & 0xFFFF
   \                     ??CrossCallReturnLabel_25:
   \   0000D5   241A         ADD     A,#0x1a
   \   0000D7   80E9         SJMP    ??zclSE_ProcessInSimpleMeteringCmds_13
   4018                  break;
   4019          
   4020                case COMMAND_SE_REQ_FAST_POLL_MODE_RSP:
   4021                  stat = zclSE_ProcessInCmd_SimpleMeter_ReqFastPollModeRsp( pInMsg, pCBs );
   \                     ??zclSE_ProcessInSimpleMeteringCmds_12:
   \   0000D9   EC           MOV     A,R4
   \   0000DA   241C         ADD     A,#0x1c
   \   0000DC   12....       LCALL   ?Subroutine11 & 0xFFFF
   4022                  break;
   4023          
   4024          #ifdef SE_UK_EXT
   4025                case COMMAND_SE_GET_SNAPSHOT_RSP:
   4026                  stat = zclSE_ProcessInCmd_SimpleMeter_GetSnapshotRsp( pInMsg, pCBs );
   4027                  break;
   4028          #endif  // SE_UK_EXT
   4029          
   4030                default:
   4031                  stat = ZFailure;
   4032                  break;
   4033              }
   4034            }
   \                     ??CrossCallReturnLabel_458:
   \   0000DF   60BD         JZ      ??zclSE_ProcessInSimpleMeteringCmds_5
   \   0000E1   12....       LCALL   ?Subroutine47 & 0xFFFF
   \                     ??CrossCallReturnLabel_343:
   \   0000E4   C0E0         PUSH    A
   \   0000E6   7408         MOV     A,#0x8
   \   0000E8   12....       LCALL   ?XSTACK_DISP0_8
   \   0000EB   D0E0         POP     A
   \   0000ED   12....       LCALL   ?Subroutine45 & 0xFFFF
   \                     ??CrossCallReturnLabel_347:
   \   0000F0   7409         MOV     A,#0x9
   \   0000F2   12....       LCALL   ?XSTACK_DISP0_8
   \   0000F5   12....       LCALL   ?XSTORE_R2345
   \   0000F8                ; Setup parameters for indirect call
   \   0000F8   12....       LCALL   ?Subroutine42 & 0xFFFF
   \                     ??CrossCallReturnLabel_350:
   \   0000FB   7408         MOV     A,#0x8
   \   0000FD   12....       LCALL   ?XSTACK_DISP0_8
   \   000100   AA82         MOV     R2,DPL
   \   000102   AB83         MOV     R3,DPH
   \   000104   E5..         MOV     A,?V0 + 2
   \   000106   241C         ADD     A,#0x1c
   \                     ??zclSE_ProcessInSimpleMeteringCmds_8:
   \   000108   F582         MOV     DPL,A
   \   00010A   E5..         MOV     A,?V0 + 3
   \   00010C   12....       LCALL   ??Subroutine170_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_361:
   \   00010F   F8           MOV     R0,A
   \                     ??zclSE_ProcessInSimpleMeteringCmds_14:
   \   000110   12....       LCALL   ?Subroutine61 & 0xFFFF
   \                     ??CrossCallReturnLabel_82:
   \   000113   12....       LCALL   ?CALL_IND
   \   000116   7900         MOV     R1,#0x0
   4035          
   4036            return ( stat );
   \                     ??zclSE_ProcessInSimpleMeteringCmds_7:
   \   000118   740D         MOV     A,#0xd
   \   00011A   02....       LJMP    ??Subroutine176_0 & 0xFFFF
   4037          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine47:
   \   000000   12....       LCALL   ?Subroutine144 & 0xFFFF
   \                     ??CrossCallReturnLabel_211:
   \   000003   85..82       MOV     DPL,?V0 + 0
   \   000006   F583         MOV     DPH,A
   \   000008                REQUIRE ??Subroutine165_0
   \   000008                ; // Fall through to label ??Subroutine165_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine165_0:
   \   000000   12....       LCALL   ?Subroutine111 & 0xFFFF
   \                     ??CrossCallReturnLabel_429:
   \   000003   E0           MOVX    A,@DPTR
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine45:
   \   000000   F0           MOVX    @DPTR,A
   \   000001                ; Setup parameters for call to function osal_build_uint32
   \   000001                ; Setup parameters for call to function osal_build_uint32
   \   000001   7904         MOV     R1,#0x4
   \   000003   85..82       MOV     DPL,?V0 + 0
   \   000006   85..83       MOV     DPH,?V0 + 1
   \   000009   E0           MOVX    A,@DPTR
   \   00000A   2401         ADD     A,#0x1
   \   00000C                REQUIRE ??Subroutine166_0
   \   00000C                ; // Fall through to label ??Subroutine166_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine166_0:
   \   000000   FA           MOV     R2,A
   \   000001   A3           INC     DPTR
   \   000002   E0           MOVX    A,@DPTR
   \   000003   3400         ADDC    A,#0x0
   \   000005   FB           MOV     R3,A
   \   000006   12....       LCALL   ??osal_build_uint32?relay
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine42:
   \   000000   8E82         MOV     DPL,R6
   \   000002   8F83         MOV     DPH,R7
   \   000004                REQUIRE ??Subroutine167_0
   \   000004                ; // Fall through to label ??Subroutine167_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine167_0:
   \   000000   12....       LCALL   ?Subroutine103 & 0xFFFF
   \                     ??CrossCallReturnLabel_406:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine103:
   \   000000   12....       LCALL   ?Subroutine146 & 0xFFFF
   \                     ??CrossCallReturnLabel_354:
   \   000003                REQUIRE ??Subroutine168_0
   \   000003                ; // Fall through to label ??Subroutine168_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine168_0:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   2406         ADD     A,#0x6
   \   000003   FC           MOV     R4,A
   \   000004   A3           INC     DPTR
   \   000005   E0           MOVX    A,@DPTR
   \   000006   3400         ADDC    A,#0x0
   \   000008   FD           MOV     R5,A
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine26:
   \   000000   EA           MOV     A,R2
   \   000001   FE           MOV     R6,A
   \   000002   EB           MOV     A,R3
   \   000003   FF           MOV     R7,A
   \   000004   8C..         MOV     ?V0 + 2,R4
   \   000006   8D..         MOV     ?V0 + 3,R5
   \   000008                REQUIRE ??Subroutine169_0
   \   000008                ; // Fall through to label ??Subroutine169_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine169_0:
   \   000000   8E82         MOV     DPL,R6
   \   000002   8F83         MOV     DPH,R7
   \   000004   A3           INC     DPTR
   \   000005   A3           INC     DPTR
   \   000006   E0           MOVX    A,@DPTR
   \   000007   5408         ANL     A,#0x8
   \   000009   8E82         MOV     DPL,R6
   \   00000B   8F83         MOV     DPH,R7
   \   00000D   A3           INC     DPTR
   \   00000E   A3           INC     DPTR
   \   00000F   A3           INC     DPTR
   \   000010   A3           INC     DPTR
   \   000011   A3           INC     DPTR
   \   000012   A3           INC     DPTR
   \   000013   A3           INC     DPTR
   \   000014   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine15:
   \   000000   EE           MOV     A,R6
   \   000001   2408         ADD     A,#0x8
   \   000003   F5..         MOV     ?V0 + 0,A
   \   000005   EF           MOV     A,R7
   \   000006   3400         ADDC    A,#0x0
   \   000008   85..82       MOV     DPL,?V0 + 0
   \   00000B   F583         MOV     DPH,A
   \   00000D   12....       LCALL   ?Subroutine106 & 0xFFFF
   \                     ??CrossCallReturnLabel_396:
   \   000010   FA           MOV     R2,A
   \   000011   A3           INC     DPTR
   \   000012   E0           MOVX    A,@DPTR
   \   000013   F9           MOV     R1,A
   \   000014   EA           MOV     A,R2
   \   000015   85..82       MOV     DPL,?XSP + 0
   \   000018   85..83       MOV     DPH,?XSP + 1
   \   00001B   12....       LCALL   ??Subroutine163_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_493:
   \   00001E                ; Setup parameters for indirect call
   \   00001E                ; Setup parameters for indirect call
   \   00001E   12....       LCALL   ?Subroutine101 & 0xFFFF
   \                     ??CrossCallReturnLabel_158:
   \   000021   E5..         MOV     A,?V0 + 2
   \   000023   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine49:
   \   000000   85..82       MOV     DPL,?V0 + 0
   \   000003   85..83       MOV     DPH,?V0 + 1
   \   000006   12....       LCALL   ?Subroutine110 & 0xFFFF
   \                     ??CrossCallReturnLabel_391:
   \   000009   A3           INC     DPTR
   \   00000A   E0           MOVX    A,@DPTR
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine144:
   \   000000   EE           MOV     A,R6
   \   000001   2408         ADD     A,#0x8
   \   000003   F5..         MOV     ?V0 + 0,A
   \   000005   EF           MOV     A,R7
   \   000006   3400         ADDC    A,#0x0
   \   000008   F5..         MOV     ?V0 + 1,A
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine101:
   \   000000   12....       LCALL   ?Subroutine136 & 0xFFFF
   \                     ??CrossCallReturnLabel_200:
   \   000003   FC           MOV     R4,A
   \   000004   A3           INC     DPTR
   \   000005   E0           MOVX    A,@DPTR
   \   000006   3400         ADDC    A,#0x0
   \   000008   FD           MOV     R5,A
   \   000009   85..82       MOV     DPL,?XSP + 0
   \   00000C   85..83       MOV     DPH,?XSP + 1
   \   00000F   AA82         MOV     R2,DPL
   \   000011   AB83         MOV     R3,DPH
   \   000013   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine29:
   \   000000   12....       LCALL   ?Subroutine136 & 0xFFFF
   \                     ??CrossCallReturnLabel_199:
   \   000003   FA           MOV     R2,A
   \   000004   A3           INC     DPTR
   \   000005   E0           MOVX    A,@DPTR
   \   000006   3400         ADDC    A,#0x0
   \   000008   FB           MOV     R3,A
   \   000009   EC           MOV     A,R4
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine136:
   \   000000   8E82         MOV     DPL,R6
   \   000002   8F83         MOV     DPH,R7
   \   000004   12....       LCALL   ?Subroutine146 & 0xFFFF
   \                     ??CrossCallReturnLabel_353:
   \   000007   E0           MOVX    A,@DPTR
   \   000008   2406         ADD     A,#0x6
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine146:
   \   000000   A3           INC     DPTR
   \   000001   A3           INC     DPTR
   \   000002   A3           INC     DPTR
   \   000003   A3           INC     DPTR
   \   000004   A3           INC     DPTR
   \   000005   A3           INC     DPTR
   \   000006   E0           MOVX    A,@DPTR
   \   000007   F9           MOV     R1,A
   \   000008   8E82         MOV     DPL,R6
   \   00000A   8F83         MOV     DPH,R7
   \   00000C   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine106:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F8           MOV     R0,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   F9           MOV     R1,A
   \   000005   8882         MOV     DPL,R0
   \   000007   8983         MOV     DPH,R1
   \   000009   E0           MOVX    A,@DPTR
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine116:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F8           MOV     R0,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   F9           MOV     R1,A
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine180_0:
   \   000000   12....       LCALL   ??Subroutine187_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_558:
   \   000003                REQUIRE ??Subroutine181_0
   \   000003                ; // Fall through to label ??Subroutine181_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine181_0:
   \   000000   12....       LCALL   ?Subroutine111 & 0xFFFF
   \                     ??CrossCallReturnLabel_430:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine111:
   \   000000   12....       LCALL   ?Subroutine139 & 0xFFFF
   \                     ??CrossCallReturnLabel_432:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine11:
   \   000000   F582         MOV     DPL,A
   \   000002   ED           MOV     A,R5
   \   000003                REQUIRE ??Subroutine185_0
   \   000003                ; // Fall through to label ??Subroutine185_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine185_0:
   \   000000   12....       LCALL   ??Subroutine187_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_559:
   \   000003                REQUIRE ??Subroutine186_0
   \   000003                ; // Fall through to label ??Subroutine186_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine186_0:
   \   000000   12....       LCALL   ?Subroutine116 & 0xFFFF
   \                     ??CrossCallReturnLabel_474:
   \   000003   E8           MOV     A,R0
   \   000004   49           ORL     A,R1
   \   000005   22           RET
   4038          
   4039          /*********************************************************************
   4040           * @fn      zclSE_ProcessInCmd_SimpleMeter_GetProfileCmd
   4041           *
   4042           * @brief   Process in the received Get Profile Command.
   4043           *
   4044           * @param   pInMsg - pointer to the incoming message
   4045           * @param   pCBs - pointer to the application call back function
   4046           *
   4047           * @return  ZStatus_t - ZFailure @ Unsupported
   4048           *                      ZCL_STATUS_CMD_HAS_RSP @ Supported and do
   4049           *                                           not need default rsp
   4050           *                      ZCL_STATUS_INVALID_FIELD @ Range checking
   4051           *                                           failure
   4052           *
   4053           */
   4054          static ZStatus_t zclSE_ProcessInCmd_SimpleMeter_GetProfileCmd( zclIncoming_t *pInMsg,
   4055                                                                          zclSE_AppCallbacks_t *pCBs )
   4056          {
   4057            if ( pCBs->pfnSimpleMeter_GetProfileCmd )
   4058            {
   4059              zclCCGetProfileCmd_t cmd;
   4060          
   4061              cmd.channel = pInMsg->pData[0];
   4062              cmd.endTime = osal_build_uint32( &pInMsg->pData[1], 4 );
   4063              cmd.numOfPeriods = pInMsg->pData[5];
   4064          
   4065              // Range checking
   4066              if ( cmd.channel > MAX_INTERVAL_CHANNEL_SE_SIMPLE_METERING )
   4067              {
   4068                return ZCL_STATUS_INVALID_FIELD;
   4069              }
   4070              pCBs->pfnSimpleMeter_GetProfileCmd( &cmd, &(pInMsg->msg->srcAddr),
   4071                                                 pInMsg->hdr.transSeqNum  );
   4072          
   4073              return ZCL_STATUS_CMD_HAS_RSP;
   4074            }
   4075          
   4076            return ZFailure;
   4077          }
   4078          
   4079          /*********************************************************************
   4080           * @fn      zclSE_ProcessInCmd_SimpleMeter_GetProfileRsp
   4081           *
   4082           * @brief   Process in the received Get Profile Response.
   4083           *
   4084           * @param   pInMsg - pointer to the incoming message
   4085           * @param   pCBs - pointer to the application call back function
   4086           *
   4087           * @return  ZStatus_t - ZFailure @ Unsupported
   4088           *                      ZSuccess @ Supported and send default rsp
   4089           *                      ZCL_STATUS_INVALID_FIELD @ Range checking
   4090           *                                           failure
   4091           *                      ZCL_STATUS_SOFTWARE_FAILURE @ ZStack memory allocation failure
   4092           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   4093          static ZStatus_t zclSE_ProcessInCmd_SimpleMeter_GetProfileRsp( zclIncoming_t *pInMsg,
   \                     zclSE_ProcessInCmd_SimpleMeter_GetProfileRsp:
   4094                                                                          zclSE_AppCallbacks_t *pCBs )
   4095          {
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 9
   \   000005   74F7         MOV     A,#-0x9
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   EA           MOV     A,R2
   \   00000B   FE           MOV     R6,A
   \   00000C   EB           MOV     A,R3
   \   00000D   FF           MOV     R7,A
   \   00000E   8C..         MOV     ?V0 + 4,R4
   \   000010   8D..         MOV     ?V0 + 5,R5
   4096            if ( pCBs->pfnSimpleMeter_GetProfileRsp )
   \   000012   EC           MOV     A,R4
   \   000013   2416         ADD     A,#0x16
   \   000015   12....       LCALL   ?Subroutine11 & 0xFFFF
   \                     ??CrossCallReturnLabel_459:
   \   000018   7003         JNZ     $+5
   \   00001A   02....       LJMP    ??zclSE_ProcessInCmd_SimpleMeter_GetProfileRsp_0 & 0xFFFF
   4097            {
   4098              uint24 *pBuf24;
   4099              uint8  *pBuf8;
   4100              uint8  i;
   4101              zclCCGetProfileRsp_t cmd;
   4102          
   4103              cmd.endTime = osal_build_uint32( &pInMsg->pData[0], 4 );
   \   00001D   12....       LCALL   ?Subroutine56 & 0xFFFF
   \                     ??CrossCallReturnLabel_72:
   \   000020   85..82       MOV     DPL,?XSP + 0
   \   000023   85..83       MOV     DPH,?XSP + 1
   \   000026   12....       LCALL   ?XSTORE_R2345
   4104              cmd.status = pInMsg->pData[4];
   \   000029   12....       LCALL   ?Subroutine18 & 0xFFFF
   \                     ??CrossCallReturnLabel_388:
   \   00002C   C0E0         PUSH    A
   \   00002E   7404         MOV     A,#0x4
   \   000030   12....       LCALL   ?XSTACK_DISP0_8
   \   000033   D0E0         POP     A
   \   000035   F0           MOVX    @DPTR,A
   4105              cmd.profileIntervalPeriod = pInMsg->pData[5];
   \   000036   12....       LCALL   ?Subroutine49 & 0xFFFF
   \                     ??CrossCallReturnLabel_61:
   \   000039   F8           MOV     R0,A
   \   00003A   7405         MOV     A,#0x5
   \   00003C   12....       LCALL   ?XSTACK_DISP0_8
   \   00003F   E8           MOV     A,R0
   \   000040   F0           MOVX    @DPTR,A
   4106              cmd.numOfPeriodDelivered = pInMsg->pData[6];
   \   000041   85..82       MOV     DPL,?V0 + 0
   \   000044   85..83       MOV     DPH,?V0 + 1
   \   000047   12....       LCALL   ?Subroutine63 & 0xFFFF
   \                     ??CrossCallReturnLabel_87:
   \   00004A   A3           INC     DPTR
   \   00004B   A3           INC     DPTR
   \   00004C   A3           INC     DPTR
   \   00004D   A3           INC     DPTR
   \   00004E   A3           INC     DPTR
   \   00004F   A3           INC     DPTR
   \   000050   E0           MOVX    A,@DPTR
   \   000051   C0E0         PUSH    A
   \   000053   7406         MOV     A,#0x6
   \   000055   12....       LCALL   ?XSTACK_DISP0_8
   \   000058   D0E0         POP     A
   \   00005A   F0           MOVX    @DPTR,A
   4107          
   4108              // Range Checking
   4109              if ( cmd.profileIntervalPeriod > MAX_PROFILE_INTERVAL_PERIOD_SE_SIMPLE_METERING )
   \   00005B   E8           MOV     A,R0
   \   00005C   C3           CLR     C
   \   00005D   9408         SUBB    A,#0x8
   \   00005F   4005         JC      ??zclSE_ProcessInCmd_SimpleMeter_GetProfileRsp_1
   4110              {
   4111                 return ZCL_STATUS_INVALID_FIELD;
   \   000061   7985         MOV     R1,#-0x7b
   \   000063   02....       LJMP    ??zclSE_ProcessInCmd_SimpleMeter_GetProfileRsp_2 & 0xFFFF
   4112              }
   4113          
   4114              // Convert the byte stream to array of uint24
   4115              pBuf8 = &pInMsg->pData[7];  // Pointer to the start of the array of bytes
   \                     ??zclSE_ProcessInCmd_SimpleMeter_GetProfileRsp_1:
   \   000066   8E82         MOV     DPL,R6
   \   000068   8F83         MOV     DPH,R7
   \   00006A   A3           INC     DPTR
   \   00006B   A3           INC     DPTR
   \   00006C   A3           INC     DPTR
   \   00006D   A3           INC     DPTR
   \   00006E   A3           INC     DPTR
   \   00006F   A3           INC     DPTR
   \   000070   A3           INC     DPTR
   \   000071   A3           INC     DPTR
   \   000072   E0           MOVX    A,@DPTR
   \   000073   2407         ADD     A,#0x7
   \   000075   F5..         MOV     ?V0 + 0,A
   \   000077   A3           INC     DPTR
   \   000078   E0           MOVX    A,@DPTR
   \   000079   3400         ADDC    A,#0x0
   \   00007B   F5..         MOV     ?V0 + 1,A
   4116          
   4117              // Pointer to the start of the array of uint24
   4118              pBuf24 = (uint24*)osal_mem_alloc( cmd.numOfPeriodDelivered *
   4119                                               sizeof(uint24) );
   \   00007D                ; Setup parameters for call to function osal_mem_alloc
   \   00007D   7406         MOV     A,#0x6
   \   00007F   12....       LCALL   ?XSTACK_DISP0_8
   \   000082   E0           MOVX    A,@DPTR
   \   000083   F5..         MOV     ?V0 + 2,A
   \   000085   75..00       MOV     ?V0 + 3,#0x0
   \   000088   7402         MOV     A,#0x2
   \   00008A   78..         MOV     R0,#?V0 + 2
   \   00008C   12....       LCALL   ?S_SHL
   \   00008F   AA..         MOV     R2,?V0 + 2
   \   000091   AB..         MOV     R3,?V0 + 3
   \   000093   12....       LCALL   ??osal_mem_alloc?relay
   \   000096   8A..         MOV     ?V0 + 2,R2
   \   000098   8B..         MOV     ?V0 + 3,R3
   4120              if ( pBuf24 == NULL )
   \   00009A   EA           MOV     A,R2
   \   00009B   45..         ORL     A,?V0 + 3
   \   00009D   7004         JNZ     ??zclSE_ProcessInCmd_SimpleMeter_GetProfileRsp_3
   4121              {
   4122                return ZCL_STATUS_SOFTWARE_FAILURE;  // Memory allocation error
   \   00009F   79C1         MOV     R1,#-0x3f
   \   0000A1   8067         SJMP    ??zclSE_ProcessInCmd_SimpleMeter_GetProfileRsp_2
   4123              }
   4124          
   4125              cmd.intervals = pBuf24;
   \                     ??zclSE_ProcessInCmd_SimpleMeter_GetProfileRsp_3:
   \   0000A3   7407         MOV     A,#0x7
   \   0000A5   12....       LCALL   ?XSTACK_DISP0_8
   \   0000A8   EA           MOV     A,R2
   \   0000A9   F0           MOVX    @DPTR,A
   \   0000AA   A3           INC     DPTR
   \   0000AB   EB           MOV     A,R3
   \   0000AC   F0           MOVX    @DPTR,A
   4126              for ( i = 0; i < cmd.numOfPeriodDelivered; i++ )
   \   0000AD   75..00       MOV     ?V0 + 6,#0x0
   \   0000B0   802C         SJMP    ??zclSE_ProcessInCmd_SimpleMeter_GetProfileRsp_4
   4127              {
   4128                *(pBuf24++) = osal_build_uint32( pBuf8, 3 );
   \                     ??zclSE_ProcessInCmd_SimpleMeter_GetProfileRsp_5:
   \   0000B2                ; Setup parameters for call to function osal_build_uint32
   \   0000B2   7903         MOV     R1,#0x3
   \   0000B4   AA..         MOV     R2,?V0 + 0
   \   0000B6   AB..         MOV     R3,?V0 + 1
   \   0000B8   12....       LCALL   ??osal_build_uint32?relay
   \   0000BB   85..82       MOV     DPL,?V0 + 2
   \   0000BE   85..83       MOV     DPH,?V0 + 3
   \   0000C1   12....       LCALL   ?XSTORE_R2345
   \   0000C4   E5..         MOV     A,?V0 + 2
   \   0000C6   2404         ADD     A,#0x4
   \   0000C8   F5..         MOV     ?V0 + 2,A
   \   0000CA   E5..         MOV     A,?V0 + 3
   \   0000CC   3400         ADDC    A,#0x0
   \   0000CE   F5..         MOV     ?V0 + 3,A
   4129                pBuf8 += 3;
   \   0000D0   E5..         MOV     A,?V0 + 0
   \   0000D2   2403         ADD     A,#0x3
   \   0000D4   F5..         MOV     ?V0 + 0,A
   \   0000D6   E5..         MOV     A,?V0 + 1
   \   0000D8   3400         ADDC    A,#0x0
   \   0000DA   F5..         MOV     ?V0 + 1,A
   4130              }
   \   0000DC   05..         INC     ?V0 + 6
   \                     ??zclSE_ProcessInCmd_SimpleMeter_GetProfileRsp_4:
   \   0000DE   7406         MOV     A,#0x6
   \   0000E0   12....       LCALL   ?XSTACK_DISP0_8
   \   0000E3   E0           MOVX    A,@DPTR
   \   0000E4   F8           MOV     R0,A
   \   0000E5   E5..         MOV     A,?V0 + 6
   \   0000E7   C3           CLR     C
   \   0000E8   98           SUBB    A,R0
   \   0000E9   40C7         JC      ??zclSE_ProcessInCmd_SimpleMeter_GetProfileRsp_5
   4131          
   4132              pCBs->pfnSimpleMeter_GetProfileRsp( &cmd, &(pInMsg->msg->srcAddr),
   4133                                                 pInMsg->hdr.transSeqNum );
   \   0000EB                ; Setup parameters for indirect call
   \   0000EB   12....       LCALL   ?Subroutine30 & 0xFFFF
   \                     ??CrossCallReturnLabel_27:
   \   0000EE   E5..         MOV     A,?V0 + 4
   \   0000F0   2416         ADD     A,#0x16
   \   0000F2   F582         MOV     DPL,A
   \   0000F4   E5..         MOV     A,?V0 + 5
   \   0000F6   12....       LCALL   ??Subroutine180_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_415:
   \   0000F9   12....       LCALL   ?CALL_IND
   4134          
   4135              osal_mem_free( cmd.intervals );
   \   0000FC                ; Setup parameters for call to function osal_mem_free
   \   0000FC   7407         MOV     A,#0x7
   \   0000FE   12....       LCALL   ?XSTACK_DISP0_8
   \   000101   12....       LCALL   ?Subroutine48 & 0xFFFF
   4136          
   4137              return ZSuccess;
   \                     ??CrossCallReturnLabel_57:
   \   000104   7900         MOV     R1,#0x0
   \   000106   8002         SJMP    ??zclSE_ProcessInCmd_SimpleMeter_GetProfileRsp_2
   4138            }
   4139          
   4140            return ZFailure;
   \                     ??zclSE_ProcessInCmd_SimpleMeter_GetProfileRsp_0:
   \   000108   7901         MOV     R1,#0x1
   \                     ??zclSE_ProcessInCmd_SimpleMeter_GetProfileRsp_2:
   \   00010A   7409         MOV     A,#0x9
   \   00010C   02....       LJMP    ?Subroutine4 & 0xFFFF
   4141          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine63:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F9           MOV     R1,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   F583         MOV     DPH,A
   \   000006   8982         MOV     DPL,R1
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine56:
   \   000000   12....       LCALL   ?Subroutine131 & 0xFFFF
   \                     ??CrossCallReturnLabel_198:
   \   000003   12....       LCALL   ?Subroutine114 & 0xFFFF
   \                     ??CrossCallReturnLabel_377:
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine114:
   \   000000   F583         MOV     DPH,A
   \   000002   E0           MOVX    A,@DPTR
   \   000003   FA           MOV     R2,A
   \   000004   A3           INC     DPTR
   \   000005   E0           MOVX    A,@DPTR
   \   000006   FB           MOV     R3,A
   \   000007   12....       LCALL   ??osal_build_uint32?relay
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine131:
   \   000000   12....       LCALL   ?Subroutine144 & 0xFFFF
   \                     ??CrossCallReturnLabel_212:
   \   000003                ; Setup parameters for call to function osal_build_uint32
   \   000003                ; Setup parameters for call to function osal_build_uint32
   \   000003                ; Setup parameters for call to function osal_build_uint32
   \   000003                ; Setup parameters for call to function osal_build_uint32
   \   000003   7904         MOV     R1,#0x4
   \   000005   85..82       MOV     DPL,?V0 + 0
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine30:
   \   000000   12....       LCALL   ?Subroutine101 & 0xFFFF
   \                     ??CrossCallReturnLabel_160:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine48:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   FA           MOV     R2,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   FB           MOV     R3,A
   \   000005   12....       LCALL   ??osal_mem_free?relay
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine18:
   \   000000   85..82       MOV     DPL,?V0 + 0
   \   000003   85..83       MOV     DPH,?V0 + 1
   \   000006                REQUIRE ??Subroutine175_0
   \   000006                ; // Fall through to label ??Subroutine175_0
   4142          
   4143          /*********************************************************************
   4144           * @fn      zclSE_ProcessInCmd_SimpleMeter_ReqMirrorCmd
   4145           *
   4146           * @brief   Process in the received Request Mirror Command.
   4147           *
   4148           * @param   pInMsg - pointer to the incoming message
   4149           * @param   pCBs - pointer to the application call back function
   4150           *
   4151           * @return  ZStatus_t - ZFailure @ Unsupported
   4152           *                      ZSuccess @ Supported and send default rsp
   4153           */
   4154          static ZStatus_t zclSE_ProcessInCmd_SimpleMeter_ReqMirrorCmd( zclIncoming_t *pInMsg,
   4155                                                                            zclSE_AppCallbacks_t *pCBs )
   4156          {
   4157            if ( pCBs->pfnSimpleMeter_ReqMirrorCmd )
   4158            {
   4159              pCBs->pfnSimpleMeter_ReqMirrorCmd( &(pInMsg->msg->srcAddr),
   4160                                                 pInMsg->hdr.transSeqNum );
   4161              return ZSuccess;
   4162            }
   4163          
   4164            return ZFailure;
   4165          }
   4166          
   4167          /*********************************************************************
   4168           * @fn      zclSE_ProcessInCmd_SimpleMeter_ReqMirrorRsp
   4169           *
   4170           * @brief   Process in the received Request Mirror Response.
   4171           *
   4172           * @param   pInMsg - pointer to the incoming message
   4173           * @param   pCBs - pointer to the application call back function
   4174           *
   4175           * @return  ZStatus_t - ZFailure @ Unsupported
   4176           *                      ZSuccess @ Supported and send default rsp
   4177           */
   4178          static ZStatus_t zclSE_ProcessInCmd_SimpleMeter_ReqMirrorRsp( zclIncoming_t *pInMsg,
   4179                                                                            zclSE_AppCallbacks_t *pCBs )
   4180          {
   4181            if ( pCBs->pfnSimpleMeter_ReqMirrorRsp )
   4182            {
   4183              zclCCReqMirrorRsp_t cmd;
   4184          
   4185              cmd.endpointId = BUILD_UINT16( pInMsg->pData[0], pInMsg->pData[1] );
   4186          
   4187              pCBs->pfnSimpleMeter_ReqMirrorRsp( &cmd, &(pInMsg->msg->srcAddr),
   4188                                                 pInMsg->hdr.transSeqNum );
   4189              return ZSuccess ;
   4190            }
   4191          
   4192            return ZFailure;
   4193          }
   4194          
   4195          /*********************************************************************
   4196           * @fn      zclSE_ProcessInCmd_SimpleMeter_MirrorRemCmd
   4197           *
   4198           * @brief   Process in the received Mirror Removed Command.
   4199           *
   4200           * @param   pInMsg - pointer to the incoming message
   4201           * @param   pCBs - pointer to the application call back function
   4202           *
   4203           * @return  ZStatus_t - ZFailure @ Unsupported
   4204           *                      ZSuccess @ Supported and send default rsp
   4205           */
   4206          static ZStatus_t zclSE_ProcessInCmd_SimpleMeter_MirrorRemCmd( zclIncoming_t *pInMsg,
   4207                                                                            zclSE_AppCallbacks_t *pCBs )
   4208          {
   4209            if ( pCBs->pfnSimpleMeter_MirrorRemCmd )
   4210            {
   4211              pCBs->pfnSimpleMeter_MirrorRemCmd( &(pInMsg->msg->srcAddr),
   4212                                                 pInMsg->hdr.transSeqNum );
   4213              return ZSuccess;
   4214            }
   4215          
   4216            return ZFailure;
   4217          }
   4218          
   4219          /*********************************************************************
   4220           * @fn      zclSE_ProcessInCmd_SimpleMeter_MirrorRemRsp
   4221           *
   4222           * @brief   Process in the received Mirror Removed Response.
   4223           *
   4224           * @param   pInMsg - pointer to the incoming message
   4225           * @param   pCBs - pointer to the application call back function
   4226           *
   4227           * @return  ZStatus_t - ZFailure @ Unsupported
   4228           *                      ZSuccess @ Supported and send default rsp
   4229           */
   4230          static ZStatus_t zclSE_ProcessInCmd_SimpleMeter_MirrorRemRsp( zclIncoming_t *pInMsg,
   4231                                                                            zclSE_AppCallbacks_t *pCBs )
   4232          {
   4233            if ( pCBs->pfnSimpleMeter_MirrorRemRsp )
   4234            {
   4235              zclCCMirrorRemRsp_t cmd;
   4236          
   4237              cmd.endpointId = pInMsg->pData[0] | ( (uint16)pInMsg->pData[1] << 8 );
   4238          
   4239              pCBs->pfnSimpleMeter_MirrorRemRsp( &cmd, &(pInMsg->msg->srcAddr),
   4240                                                 pInMsg->hdr.transSeqNum );
   4241              return ZSuccess;
   4242            }
   4243          
   4244            return ZFailure;
   4245          }
   4246          
   4247          
   4248          /*********************************************************************
   4249           * @fn      zclSE_ProcessInCmd_SimpleMeter_ReqFastPollModeCmd
   4250           *
   4251           * @brief   Process in the received Request Fast Poll Mode Command
   4252           *
   4253           * @param   pInMsg - pointer to the incoming message
   4254           * @param   pCBs - pointer to the application call back function
   4255           *
   4256           * @return  ZStatus_t - ZFailure @ Unsupported
   4257           *                      ZCL_STATUS_CMD_HAS_RSP @ Supported and do
   4258           *                                           not need default rsp
   4259           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   4260          static ZStatus_t zclSE_ProcessInCmd_SimpleMeter_ReqFastPollModeCmd( zclIncoming_t *pInMsg,
   \                     zclSE_ProcessInCmd_SimpleMeter_ReqFastPollModeCmd:
   4261                                                                             zclSE_AppCallbacks_t *pCBs )
   4262          {
   \   000000   74F2         MOV     A,#-0xe
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 11
   \   000005   74F5         MOV     A,#-0xb
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   EA           MOV     A,R2
   \   00000B   FE           MOV     R6,A
   \   00000C   EB           MOV     A,R3
   \   00000D   FF           MOV     R7,A
   \   00000E   8C..         MOV     ?V0 + 0,R4
   \   000010   8D..         MOV     ?V0 + 1,R5
   4263            if ( pCBs->pfnSimpleMeter_ReqFastPollModeCmd )
   \   000012   EC           MOV     A,R4
   \   000013   2424         ADD     A,#0x24
   \   000015   12....       LCALL   ?Subroutine11 & 0xFFFF
   \                     ??CrossCallReturnLabel_460:
   \   000018   7003         JNZ     $+5
   \   00001A   02....       LJMP    ??zclSE_ProcessInCmd_SimpleMeter_ReqFastPollMod_1 & 0xFFFF
   4264            {
   4265              zclCCReqFastPollModeCmd_t cmd;
   4266              zclAttrRec_t attrRec;
   4267              uint8 fastPollUpdatePeriodAttr = 0;
   \   00001D   85..82       MOV     DPL,?XSP + 0
   \   000020   85..83       MOV     DPH,?XSP + 1
   \   000023   E4           CLR     A
   \   000024   F0           MOVX    @DPTR,A
   4268          
   4269              // Retrieve Fast Poll Update Period Attribute Record and save value to local variable
   4270              if ( zclFindAttrRec( pInMsg->msg->endPoint, pInMsg->msg->clusterId,
   4271                                   ATTRID_SE_FAST_POLL_UPDATE_PERIOD, &attrRec ) )
   \   000025   8E82         MOV     DPL,R6
   \   000027   8F83         MOV     DPH,R7
   \   000029   12....       LCALL   ?Subroutine116 & 0xFFFF
   \                     ??CrossCallReturnLabel_471:
   \   00002C   88..         MOV     ?V0 + 2,R0
   \   00002E                ; Setup parameters for call to function zclFindAttrRec
   \   00002E   7403         MOV     A,#0x3
   \   000030   12....       LCALL   ?XSTACK_DISP0_8
   \   000033   8582..       MOV     ?V0 + 4,DPL
   \   000036   8583..       MOV     ?V0 + 5,DPH
   \   000039   78..         MOV     R0,#?V0 + 4
   \   00003B   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00003E   7C0B         MOV     R4,#0xb
   \   000040   7D00         MOV     R5,#0x0
   \   000042   85..82       MOV     DPL,?V0 + 2
   \   000045   8983         MOV     DPH,R1
   \   000047   A3           INC     DPTR
   \   000048   A3           INC     DPTR
   \   000049   A3           INC     DPTR
   \   00004A   A3           INC     DPTR
   \   00004B   12....       LCALL   ?Subroutine57 & 0xFFFF
   \                     ??CrossCallReturnLabel_78:
   \   00004E   E5..         MOV     A,?V0 + 2
   \   000050   2414         ADD     A,#0x14
   \   000052   F582         MOV     DPL,A
   \   000054   E9           MOV     A,R1
   \   000055   12....       LCALL   ??Subroutine170_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_362:
   \   000058   F9           MOV     R1,A
   \   000059   12....       LCALL   ??zclFindAttrRec?relay
   \   00005C   7402         MOV     A,#0x2
   \   00005E   12....       LCALL   ?DEALLOC_XSTACK8
   \   000061   E9           MOV     A,R1
   \   000062   6024         JZ      ??zclSE_ProcessInCmd_SimpleMeter_ReqFastPollMod_2
   4272              {
   4273                zclReadAttrData( (uint8 *)&fastPollUpdatePeriodAttr, &attrRec, NULL );
   \   000064                ; Setup parameters for call to function zclReadAttrData
   \   000064   E4           CLR     A
   \   000065   F5..         MOV     ?V0 + 2,A
   \   000067   F5..         MOV     ?V0 + 3,A
   \   000069   78..         MOV     R0,#?V0 + 2
   \   00006B   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00006E   7405         MOV     A,#0x5
   \   000070   12....       LCALL   ?XSTACK_DISP0_8
   \   000073   AC82         MOV     R4,DPL
   \   000075   AD83         MOV     R5,DPH
   \   000077   7402         MOV     A,#0x2
   \   000079   12....       LCALL   ?XSTACK_DISP0_8
   \   00007C   AA82         MOV     R2,DPL
   \   00007E   AB83         MOV     R3,DPH
   \   000080   12....       LCALL   ??zclReadAttrData?relay
   \   000083   7402         MOV     A,#0x2
   \   000085   12....       LCALL   ?DEALLOC_XSTACK8
   4274              }
   4275          
   4276              // Value has been set by application
   4277              if (( fastPollUpdatePeriodAttr > 0 ) && (pInMsg->pData[0] < fastPollUpdatePeriodAttr))
   \                     ??zclSE_ProcessInCmd_SimpleMeter_ReqFastPollMod_2:
   \   000088   85..82       MOV     DPL,?XSP + 0
   \   00008B   85..83       MOV     DPH,?XSP + 1
   \   00008E   E0           MOVX    A,@DPTR
   \   00008F   601D         JZ      ??zclSE_ProcessInCmd_SimpleMeter_ReqFastPollMod_3
   \   000091   F8           MOV     R0,A
   \   000092   8E82         MOV     DPL,R6
   \   000094   8F83         MOV     DPH,R7
   \   000096   A3           INC     DPTR
   \   000097   A3           INC     DPTR
   \   000098   A3           INC     DPTR
   \   000099   A3           INC     DPTR
   \   00009A   A3           INC     DPTR
   \   00009B   A3           INC     DPTR
   \   00009C   A3           INC     DPTR
   \   00009D   A3           INC     DPTR
   \   00009E   12....       LCALL   ?Subroutine63 & 0xFFFF
   \                     ??CrossCallReturnLabel_88:
   \   0000A1   E0           MOVX    A,@DPTR
   \   0000A2   C3           CLR     C
   \   0000A3   98           SUBB    A,R0
   \   0000A4   5008         JNC     ??zclSE_ProcessInCmd_SimpleMeter_ReqFastPollMod_3
   4278              {
   4279                // the minimum acceptable value is defined by the attribute value
   4280                cmd.fastPollUpdatePeriod = fastPollUpdatePeriodAttr;
   \   0000A6   7401         MOV     A,#0x1
   \   0000A8   12....       LCALL   ?XSTACK_DISP0_8
   \   0000AB   E8           MOV     A,R0
   \   0000AC   8018         SJMP    ??zclSE_ProcessInCmd_SimpleMeter_ReqFastPollMod_4
   4281              }
   4282              else
   4283              {
   4284                // use received update period
   4285                cmd.fastPollUpdatePeriod = pInMsg->pData[0];
   \                     ??zclSE_ProcessInCmd_SimpleMeter_ReqFastPollMod_3:
   \   0000AE   8E82         MOV     DPL,R6
   \   0000B0   8F83         MOV     DPH,R7
   \   0000B2   A3           INC     DPTR
   \   0000B3   A3           INC     DPTR
   \   0000B4   A3           INC     DPTR
   \   0000B5   A3           INC     DPTR
   \   0000B6   A3           INC     DPTR
   \   0000B7   A3           INC     DPTR
   \   0000B8   A3           INC     DPTR
   \   0000B9   A3           INC     DPTR
   \   0000BA   12....       LCALL   ??Subroutine165_0 & 0xFFFF
   4286              }
   \                     ??CrossCallReturnLabel_341:
   \   0000BD   C0E0         PUSH    A
   \   0000BF   7401         MOV     A,#0x1
   \   0000C1   12....       LCALL   ?XSTACK_DISP0_8
   \   0000C4   D0E0         POP     A
   \                     ??zclSE_ProcessInCmd_SimpleMeter_ReqFastPollMod_4:
   \   0000C6   12....       LCALL   ?Subroutine122 & 0xFFFF
   4287          
   4288              // As per SE 1.1 spec: maximum duration value will be used if received exceeds it
   4289              cmd.duration = MIN(pInMsg->pData[1], MAX_DURATION_IN_MINUTES_FAST_POLL_MODE);
   \                     ??CrossCallReturnLabel_179:
   \   0000C9   A3           INC     DPTR
   \   0000CA   A3           INC     DPTR
   \   0000CB   12....       LCALL   ??Subroutine181_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_409:
   \   0000CE   A3           INC     DPTR
   \   0000CF   E0           MOVX    A,@DPTR
   \   0000D0   C3           CLR     C
   \   0000D1   940F         SUBB    A,#0xf
   \   0000D3   5013         JNC     ??zclSE_ProcessInCmd_SimpleMeter_ReqFastPollMod_5
   \   0000D5   8E82         MOV     DPL,R6
   \   0000D7   8F83         MOV     DPH,R7
   \   0000D9   A3           INC     DPTR
   \   0000DA   A3           INC     DPTR
   \   0000DB   A3           INC     DPTR
   \   0000DC   A3           INC     DPTR
   \   0000DD   A3           INC     DPTR
   \   0000DE   A3           INC     DPTR
   \   0000DF   A3           INC     DPTR
   \   0000E0   A3           INC     DPTR
   \   0000E1   12....       LCALL   ?Subroutine61 & 0xFFFF
   \                     ??CrossCallReturnLabel_83:
   \   0000E4   A3           INC     DPTR
   \   0000E5   E0           MOVX    A,@DPTR
   \   0000E6   8002         SJMP    ??zclSE_ProcessInCmd_SimpleMeter_ReqFastPollMod_6
   \                     ??zclSE_ProcessInCmd_SimpleMeter_ReqFastPollMod_5:
   \   0000E8   740F         MOV     A,#0xf
   \                     ??zclSE_ProcessInCmd_SimpleMeter_ReqFastPollMod_6:
   \   0000EA   C0E0         PUSH    A
   \   0000EC   7402         MOV     A,#0x2
   \   0000EE   12....       LCALL   ?XSTACK_DISP0_8
   \   0000F1   D0E0         POP     A
   \   0000F3   12....       LCALL   ?Subroutine20 & 0xFFFF
   4290          
   4291              pCBs->pfnSimpleMeter_ReqFastPollModeCmd(&cmd, &(pInMsg->msg->srcAddr),
   4292                                                      pInMsg->hdr.transSeqNum );
   \                     ??CrossCallReturnLabel_367:
   \   0000F6   12....       LCALL   ?XSTACK_DISP0_8
   \   0000F9   AA82         MOV     R2,DPL
   \   0000FB   AB83         MOV     R3,DPH
   \   0000FD   E5..         MOV     A,?V0 + 0
   \   0000FF   2424         ADD     A,#0x24
   \   000101   12....       LCALL   ?Subroutine50 & 0xFFFF
   \                     ??CrossCallReturnLabel_421:
   \   000104   12....       LCALL   ?CALL_IND
   4293          
   4294              return ZCL_STATUS_CMD_HAS_RSP;
   \   000107   79FF         MOV     R1,#-0x1
   \   000109   8002         SJMP    ??zclSE_ProcessInCmd_SimpleMeter_ReqFastPollMod_7
   4295            }
   4296          
   4297            return ZFailure;
   \                     ??zclSE_ProcessInCmd_SimpleMeter_ReqFastPollMod_1:
   \   00010B   7901         MOV     R1,#0x1
   \                     ??zclSE_ProcessInCmd_SimpleMeter_ReqFastPollMod_7:
   \   00010D   740B         MOV     A,#0xb
   \   00010F   12....       LCALL   ?DEALLOC_XSTACK8
   \   000112   7F06         MOV     R7,#0x6
   \   000114   02....       LJMP    ?BANKED_LEAVE_XDATA
   4298          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine20:
   \   000000   12....       LCALL   ?Subroutine122 & 0xFFFF
   \                     ??CrossCallReturnLabel_180:
   \   000003   E0           MOVX    A,@DPTR
   \   000004   F9           MOV     R1,A
   \   000005                REQUIRE ??Subroutine171_0
   \   000005                ; // Fall through to label ??Subroutine171_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine171_0:
   \   000000   8E82         MOV     DPL,R6
   \   000002   8F83         MOV     DPH,R7
   \   000004                REQUIRE ??Subroutine172_0
   \   000004                ; // Fall through to label ??Subroutine172_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine172_0:
   \   000000   12....       LCALL   ??Subroutine168_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_407:
   \   000003   7401         MOV     A,#0x1
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine122:
   \   000000   12....       LCALL   ?Subroutine141 & 0xFFFF
   \                     ??CrossCallReturnLabel_205:
   \   000003   A3           INC     DPTR
   \   000004   A3           INC     DPTR
   \   000005   A3           INC     DPTR
   \   000006   A3           INC     DPTR
   \   000007   A3           INC     DPTR
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine50:
   \   000000   F582         MOV     DPL,A
   \   000002   E5..         MOV     A,?V0 + 1
   \   000004                REQUIRE ??Subroutine180_0
   \   000004                ; // Fall through to label ??Subroutine180_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine141:
   \   000000   F0           MOVX    @DPTR,A
   \   000001                ; Setup parameters for indirect call
   \   000001                ; Setup parameters for indirect call
   \   000001                ; Setup parameters for indirect call
   \   000001                ; Setup parameters for indirect call
   \   000001   8E82         MOV     DPL,R6
   \   000003   8F83         MOV     DPH,R7
   \   000005   A3           INC     DPTR
   \   000006   22           RET
   4299          
   4300          /*********************************************************************
   4301           * @fn      zclSE_ProcessInCmd_SimpleMeter_ReqFastPollModeRsp
   4302           *
   4303           * @brief   Process in the received Request Fast Poll Mode Response
   4304           *
   4305           * @param   pInMsg - pointer to the incoming message
   4306           * @param   pCBs - pointer to the application call back function
   4307           *
   4308           * @return  ZStatus_t - ZFailure @ Unsupported
   4309           *                      ZSuccess @ Supported and send default rsp
   4310           */
   4311          static ZStatus_t zclSE_ProcessInCmd_SimpleMeter_ReqFastPollModeRsp( zclIncoming_t *pInMsg,
   4312                                                                             zclSE_AppCallbacks_t *pCBs )
   4313          {
   4314            if ( pCBs->pfnSimpleMeter_ReqFastPollModeRsp )
   4315            {
   4316              zclCCReqFastPollModeRsp_t cmd;
   4317          
   4318              cmd.appliedUpdatePeriod = pInMsg->pData[0];
   4319          
   4320              cmd.fastPollModeEndTime = osal_build_uint32( &pInMsg->pData[1], 4 );
   4321          
   4322              pCBs->pfnSimpleMeter_ReqFastPollModeRsp(&cmd, &(pInMsg->msg->srcAddr),
   4323                                                      pInMsg->hdr.transSeqNum );
   4324          
   4325              return ZSuccess;
   4326            }
   4327          
   4328            return ZFailure;
   4329          }
   4330          
   4331          #ifdef SE_UK_EXT
   4332          /*********************************************************************
   4333           * @fn      zclSE_ProcessInCmd_SimpleMeter_GetSnapshotCmd
   4334           *
   4335           * @brief   Process in the received Get Snapshot Command
   4336           *
   4337           * @param   pInMsg - pointer to the incoming message
   4338           * @param   pCBs - pointer to the application call back function
   4339           *
   4340           * @return  ZStatus_t - ZFailure @ Unsupported
   4341           *                      ZCL_STATUS_CMD_HAS_RSP @ Supported and do
   4342           *                                           not need default rsp
   4343           */
   4344          static ZStatus_t zclSE_ProcessInCmd_SimpleMeter_GetSnapshotCmd( zclIncoming_t *pInMsg,
   4345                                                                          zclSE_AppCallbacks_t *pCBs )
   4346          {
   4347            if ( pCBs->pfnSimpleMeter_GetSnapshotCmd )
   4348            {
   4349              zclCCReqGetSnapshotCmd_t cmd;
   4350          
   4351              cmd.StartTime = osal_build_uint32( &pInMsg->pData[0], 4 );
   4352              cmd.NumberOfSnapshots = pInMsg->pData[4];
   4353              cmd.SnapshotCause = BUILD_UINT16( pInMsg->pData[5], pInMsg->pData[6] );
   4354          
   4355              pCBs->pfnSimpleMeter_GetSnapshotCmd(&cmd, &(pInMsg->msg->srcAddr),
   4356                                                  pInMsg->hdr.transSeqNum );
   4357          
   4358              return ZCL_STATUS_CMD_HAS_RSP;
   4359            }
   4360          
   4361            return ZFailure;
   4362          }
   4363          
   4364          /*********************************************************************
   4365           * @fn      zclSE_ProcessInCmd_SimpleMeter_GetSnapshotRsp
   4366           *
   4367           * @brief   Process in the received Get Snapshot Response
   4368           *
   4369           * @param   pInMsg - pointer to the incoming message
   4370           * @param   pCBs - pointer to the application call back function
   4371           *
   4372           * @return  ZStatus_t - ZFailure @ Unsupported
   4373           *                      ZSuccess @ Supported and send default rsp
   4374           */
   4375          static ZStatus_t zclSE_ProcessInCmd_SimpleMeter_GetSnapshotRsp( zclIncoming_t *pInMsg,
   4376                                                                          zclSE_AppCallbacks_t *pCBs )
   4377          {
   4378            if ( pCBs->pfnSimpleMeter_GetSnapshotRsp )
   4379            {
   4380              zclCCReqGetSnapshotRsp_t cmd;
   4381          
   4382              cmd.IssuerEventID = osal_build_uint32( &pInMsg->pData[0], 4 );
   4383              cmd.SnapshotTime = osal_build_uint32( &pInMsg->pData[4], 4 );
   4384              cmd.CommandIndex = pInMsg->pData[8];
   4385              cmd.SnapshotCause = BUILD_UINT16( pInMsg->pData[9], pInMsg->pData[10] );
   4386              cmd.SnapshotPayloadType = pInMsg->pData[11];
   4387          
   4388              cmd.pSnapshotPayload = pInMsg->pData + 12;
   4389          
   4390              pCBs->pfnSimpleMeter_GetSnapshotRsp(&cmd, &(pInMsg->msg->srcAddr),
   4391                                                  pInMsg->hdr.transSeqNum );
   4392          
   4393              return ZSuccess;
   4394            }
   4395          
   4396            return ZFailure;
   4397          }
   4398          
   4399          /*********************************************************************
   4400           * @fn      zclSE_ProcessInCmd_SimpleMeter_TakeSnapshotCmd
   4401           *
   4402           * @brief   Process in the received Take Snapshot Command
   4403           *
   4404           * @param   pInMsg - pointer to the incoming message
   4405           * @param   pCBs - pointer to the application call back function
   4406           *
   4407           * @return  ZStatus_t - ZFailure @ Unsupported
   4408           *                      ZSuccess @ Supported and send default rsp
   4409           */
   4410          static ZStatus_t zclSE_ProcessInCmd_SimpleMeter_TakeSnapshotCmd( zclIncoming_t *pInMsg,
   4411                                                                           zclSE_AppCallbacks_t *pCBs )
   4412          {
   4413            if ( pCBs->pfnSimpleMeter_TakeSnapshotCmd )
   4414            {
   4415              pCBs->pfnSimpleMeter_TakeSnapshotCmd( &(pInMsg->msg->srcAddr),
   4416                                                    pInMsg->hdr.transSeqNum );
   4417          
   4418              return ZSuccess;
   4419            }
   4420          
   4421            return ZFailure;
   4422          }
   4423          
   4424          /*********************************************************************
   4425           * @fn      zclSE_ProcessInCmd_SimpleMeter_MirrorReportAttrRsp
   4426           *
   4427           * @brief   Process in the received Mirror Report Attribute Response
   4428           *
   4429           * @param   pInMsg - pointer to the incoming message
   4430           * @param   pCBs - pointer to the application call back function
   4431           *
   4432           * @return  ZStatus_t - ZFailure @ Unsupported
   4433           *                      ZSuccess @ Supported and send default rsp
   4434           */
   4435          static ZStatus_t zclSE_ProcessInCmd_SimpleMeter_MirrorReportAttrRsp( zclIncoming_t *pInMsg,
   4436                                                                               zclSE_AppCallbacks_t *pCBs )
   4437          {
   4438            if ( pCBs->pfnSimpleMeter_MirrorReportAttrRsp )
   4439            {
   4440              zclCCReqMirrorReportAttrRsp_t cmd;
   4441          
   4442              cmd.NotificationFlags = pInMsg->pData[0];
   4443              cmd.PriceNotificationFlags = BUILD_UINT16( pInMsg->pData[1], pInMsg->pData[2] );
   4444              cmd.CalendarNotificationFlags = pInMsg->pData[3];
   4445              cmd.PrePayNotificationFlags = BUILD_UINT16( pInMsg->pData[4], pInMsg->pData[5] );
   4446              cmd.DeviceMgmtNotificationFlags = pInMsg->pData[6];
   4447          
   4448              pCBs->pfnSimpleMeter_MirrorReportAttrRsp(&cmd, &(pInMsg->msg->srcAddr),
   4449                                                      pInMsg->hdr.transSeqNum );
   4450          
   4451              return ZSuccess;
   4452            }
   4453          
   4454            return ZFailure;
   4455          }
   4456          #endif  // SE_UK_EXT
   4457          #endif  // ZCL_SIMPLE_METERING
   4458          
   4459          
   4460          #ifdef ZCL_PRICING
   4461          /*********************************************************************
   4462           * @fn      zclSE_ProcessInPricingCmds
   4463           *
   4464           * @brief   Callback from ZCL to process incoming Commands specific
   4465           *          to this cluster library on a command ID basis
   4466           *
   4467           * @param   pInMsg - pointer to the incoming message
   4468           * @param   pCBs - pointer to the application call back function
   4469           *
   4470           * @return  ZStatus_t
   4471           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   4472          static ZStatus_t zclSE_ProcessInPricingCmds( zclIncoming_t *pInMsg,
   \                     zclSE_ProcessInPricingCmds:
   4473                                                        zclSE_AppCallbacks_t *pCBs )
   4474          {
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 19
   \   000005   74ED         MOV     A,#-0x13
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   12....       LCALL   ?Subroutine26 & 0xFFFF
   4475            ZStatus_t stat;
   4476          
   4477            if ( zcl_ServerCmd( pInMsg->hdr.fc.direction ) )
   \                     ??CrossCallReturnLabel_356:
   \   00000D   6003         JZ      $+5
   \   00000F   02....       LJMP    ??zclSE_ProcessInPricingCmds_0 & 0xFFFF
   4478            {
   4479              // Process Client commands, received by server
   4480              switch ( pInMsg->hdr.commandID )
   \   000012   E0           MOVX    A,@DPTR
   \   000013   600F         JZ      ??zclSE_ProcessInPricingCmds_1
   \   000015   14           DEC     A
   \   000016   6037         JZ      ??zclSE_ProcessInPricingCmds_2
   \   000018   14           DEC     A
   \   000019   606F         JZ      ??zclSE_ProcessInPricingCmds_3
   \   00001B   14           DEC     A
   \   00001C   7003         JNZ     $+5
   \   00001E   02....       LJMP    ??zclSE_ProcessInPricingCmds_4 & 0xFFFF
   \   000021   02....       LJMP    ??zclSE_ProcessInPricingCmds_5 & 0xFFFF
   4481              {
   4482                case COMMAND_SE_GET_CURRENT_PRICE:
   4483                  stat = zclSE_ProcessInCmd_Pricing_GetCurrentPrice( pInMsg, pCBs );
   \                     ??zclSE_ProcessInPricingCmds_1:
   \   000024   8C82         MOV     DPL,R4
   \   000026   8D83         MOV     DPH,R5
   \   000028   A3           INC     DPTR
   \   000029   A3           INC     DPTR
   \   00002A   A3           INC     DPTR
   \   00002B   A3           INC     DPTR
   \   00002C   12....       LCALL   ??Subroutine186_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_437:
   \   00002F   7003         JNZ     $+5
   \   000031   02....       LJMP    ??zclSE_ProcessInPricingCmds_5 & 0xFFFF
   \   000034   12....       LCALL   ?Subroutine36 & 0xFFFF
   \                     ??CrossCallReturnLabel_381:
   \   000037                ; Setup parameters for indirect call
   \   000037   12....       LCALL   ?Subroutine30 & 0xFFFF
   \                     ??CrossCallReturnLabel_28:
   \   00003A   85..82       MOV     DPL,?V0 + 2
   \   00003D   85..83       MOV     DPH,?V0 + 3
   \                     ??zclSE_ProcessInPricingCmds_6:
   \   000040   A3           INC     DPTR
   \   000041   A3           INC     DPTR
   \   000042   A3           INC     DPTR
   \   000043   A3           INC     DPTR
   \   000044   12....       LCALL   ??Subroutine181_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_410:
   \   000047   12....       LCALL   ?CALL_IND
   \   00004A   79FF         MOV     R1,#-0x1
   \   00004C   02....       LJMP    ??zclSE_ProcessInPricingCmds_7 & 0xFFFF
   4484                  break;
   4485          
   4486                case COMMAND_SE_GET_SCHEDULED_PRICE:
   4487                  stat = zclSE_ProcessInCmd_Pricing_GetScheduledPrice( pInMsg, pCBs );
   \                     ??zclSE_ProcessInPricingCmds_2:
   \   00004F   8C82         MOV     DPL,R4
   \   000051   8D83         MOV     DPH,R5
   \   000053   A3           INC     DPTR
   \   000054   A3           INC     DPTR
   \   000055   A3           INC     DPTR
   \   000056   A3           INC     DPTR
   \   000057   A3           INC     DPTR
   \   000058   A3           INC     DPTR
   \   000059   12....       LCALL   ??Subroutine186_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_438:
   \   00005C   7003         JNZ     $+5
   \   00005E   02....       LJMP    ??zclSE_ProcessInPricingCmds_5 & 0xFFFF
   \   000061   12....       LCALL   ?Subroutine40 & 0xFFFF
   \                     ??CrossCallReturnLabel_375:
   \   000064   12....       LCALL   ?XSTACK_DISP0_8
   \   000067   12....       LCALL   ?XSTORE_R2345
   \   00006A   12....       LCALL   ?Subroutine18 & 0xFFFF
   \                     ??CrossCallReturnLabel_389:
   \   00006D   C0E0         PUSH    A
   \   00006F   7405         MOV     A,#0x5
   \   000071   12....       LCALL   ?XSTACK_DISP0_8
   \   000074   D0E0         POP     A
   \   000076   12....       LCALL   ?Subroutine20 & 0xFFFF
   \                     ??CrossCallReturnLabel_371:
   \   000079   12....       LCALL   ?XSTACK_DISP0_8
   \   00007C   AA82         MOV     R2,DPL
   \   00007E   AB83         MOV     R3,DPH
   \   000080   85..82       MOV     DPL,?V0 + 2
   \   000083   85..83       MOV     DPH,?V0 + 3
   \                     ??zclSE_ProcessInPricingCmds_8:
   \   000086   A3           INC     DPTR
   \   000087   A3           INC     DPTR
   \   000088   80B6         SJMP    ??zclSE_ProcessInPricingCmds_6
   4488                  break;
   4489          
   4490                case COMMAND_SE_PRICE_ACKNOWLEDGEMENT:
   4491                  stat = zclSE_ProcessInCmd_Pricing_PriceAcknowledgement ( pInMsg, pCBs );
   \                     ??zclSE_ProcessInPricingCmds_3:
   \   00008A   8C82         MOV     DPL,R4
   \   00008C   8D83         MOV     DPH,R5
   \   00008E   A3           INC     DPTR
   \   00008F   A3           INC     DPTR
   \   000090   A3           INC     DPTR
   \   000091   A3           INC     DPTR
   \   000092   A3           INC     DPTR
   \   000093   A3           INC     DPTR
   \   000094   A3           INC     DPTR
   \   000095   A3           INC     DPTR
   \   000096   12....       LCALL   ??Subroutine186_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_439:
   \   000099   7003         JNZ     $+5
   \   00009B   02....       LJMP    ??zclSE_ProcessInPricingCmds_5 & 0xFFFF
   \   00009E   12....       LCALL   ?Subroutine56 & 0xFFFF
   \                     ??CrossCallReturnLabel_73:
   \   0000A1   7406         MOV     A,#0x6
   \   0000A3   12....       LCALL   ?XSTACK_DISP0_8
   \   0000A6   12....       LCALL   ?XSTORE_R2345
   \   0000A9                ; Setup parameters for call to function osal_build_uint32
   \   0000A9   7904         MOV     R1,#0x4
   \   0000AB   85..82       MOV     DPL,?V0 + 0
   \   0000AE   85..83       MOV     DPH,?V0 + 1
   \   0000B1   E0           MOVX    A,@DPTR
   \   0000B2   2404         ADD     A,#0x4
   \   0000B4   12....       LCALL   ??Subroutine166_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_344:
   \   0000B7   740A         MOV     A,#0xa
   \   0000B9   12....       LCALL   ?XSTACK_DISP0_8
   \   0000BC   12....       LCALL   ?XSTORE_R2345
   \   0000BF                ; Setup parameters for call to function osal_build_uint32
   \   0000BF   7904         MOV     R1,#0x4
   \   0000C1   85..82       MOV     DPL,?V0 + 0
   \   0000C4   85..83       MOV     DPH,?V0 + 1
   \   0000C7   E0           MOVX    A,@DPTR
   \   0000C8   2408         ADD     A,#0x8
   \   0000CA   12....       LCALL   ??Subroutine166_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_345:
   \   0000CD   740E         MOV     A,#0xe
   \   0000CF   12....       LCALL   ?XSTACK_DISP0_8
   \   0000D2   12....       LCALL   ?XSTORE_R2345
   \   0000D5   85..82       MOV     DPL,?V0 + 0
   \   0000D8   85..83       MOV     DPH,?V0 + 1
   \   0000DB   E0           MOVX    A,@DPTR
   \   0000DC   240C         ADD     A,#0xc
   \   0000DE   12....       LCALL   ?Subroutine62 & 0xFFFF
   \                     ??CrossCallReturnLabel_86:
   \   0000E1   C0E0         PUSH    A
   \   0000E3   7412         MOV     A,#0x12
   \   0000E5   12....       LCALL   ?XSTACK_DISP0_8
   \   0000E8   D0E0         POP     A
   \   0000EA   F0           MOVX    @DPTR,A
   \   0000EB                ; Setup parameters for indirect call
   \   0000EB   12....       LCALL   ?Subroutine41 & 0xFFFF
   \                     ??CrossCallReturnLabel_51:
   \   0000EE   12....       LCALL   ?XSTACK_DISP0_8
   \   0000F1   AA82         MOV     R2,DPL
   \   0000F3   AB83         MOV     R3,DPH
   \   0000F5   85..82       MOV     DPL,?V0 + 2
   \   0000F8   85..83       MOV     DPH,?V0 + 3
   \   0000FB   A3           INC     DPTR
   \   0000FC   A3           INC     DPTR
   \   0000FD   A3           INC     DPTR
   \   0000FE   A3           INC     DPTR
   \   0000FF   A3           INC     DPTR
   \   000100   A3           INC     DPTR
   \   000101   A3           INC     DPTR
   \   000102   A3           INC     DPTR
   \   000103   12....       LCALL   ??Subroutine181_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_411:
   \   000106   12....       LCALL   ?CALL_IND
   \   000109   7900         MOV     R1,#0x0
   \   00010B   8053         SJMP    ??zclSE_ProcessInPricingCmds_7
   4492                  break;
   4493          
   4494                case COMMAND_SE_GET_BLOCK_PERIOD:
   4495                  stat = zclSE_ProcessInCmd_Pricing_GetBlockPeriod ( pInMsg, pCBs );
   \                     ??zclSE_ProcessInPricingCmds_4:
   \   00010D   8C82         MOV     DPL,R4
   \   00010F   8D83         MOV     DPH,R5
   \   000111   A3           INC     DPTR
   \   000112   A3           INC     DPTR
   \   000113   A3           INC     DPTR
   \   000114   A3           INC     DPTR
   \   000115   A3           INC     DPTR
   \   000116   A3           INC     DPTR
   \   000117   A3           INC     DPTR
   \   000118   A3           INC     DPTR
   \   000119   A3           INC     DPTR
   \   00011A   A3           INC     DPTR
   \   00011B   12....       LCALL   ??Subroutine186_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_440:
   \   00011E   602C         JZ      ??zclSE_ProcessInPricingCmds_5
   \   000120   12....       LCALL   ?Subroutine40 & 0xFFFF
   \                     ??CrossCallReturnLabel_376:
   \   000123   12....       LCALL   ?XSTACK_DISP0_8
   \   000126   12....       LCALL   ?XSTORE_R2345
   \   000129   12....       LCALL   ?Subroutine18 & 0xFFFF
   \                     ??CrossCallReturnLabel_390:
   \   00012C   C0E0         PUSH    A
   \   00012E   7405         MOV     A,#0x5
   \   000130   12....       LCALL   ?XSTACK_DISP0_8
   \   000133   D0E0         POP     A
   \   000135   12....       LCALL   ?Subroutine20 & 0xFFFF
   \                     ??CrossCallReturnLabel_372:
   \   000138   12....       LCALL   ?XSTACK_DISP0_8
   \   00013B   AA82         MOV     R2,DPL
   \   00013D   AB83         MOV     R3,DPH
   \   00013F   85..82       MOV     DPL,?V0 + 2
   \   000142   85..83       MOV     DPH,?V0 + 3
   \   000145   A3           INC     DPTR
   \   000146   A3           INC     DPTR
   \   000147   A3           INC     DPTR
   \   000148   A3           INC     DPTR
   \   000149   02....       LJMP    ??zclSE_ProcessInPricingCmds_8 & 0xFFFF
   4496                  break;
   4497          
   4498          #ifdef SE_UK_EXT
   4499                case COMMAND_SE_GET_TARIFF_INFO:
   4500                  stat = zclSE_ProcessInCmd_Pricing_GetTariffInformation ( pInMsg, pCBs );
   4501                  break;
   4502          
   4503                case COMMAND_SE_GET_PRICE_MATRIX:
   4504                  stat = zclSE_ProcessInCmd_Pricing_GetPriceMatrix ( pInMsg, pCBs );
   4505                  break;
   4506          
   4507                case COMMAND_SE_GET_BLOCK_THRESHOLD:
   4508                  stat = zclSE_ProcessInCmd_Pricing_GetBlockThresholds ( pInMsg, pCBs );
   4509                  break;
   4510          
   4511                case COMMAND_SE_GET_CONVERSION_FACTOR:
   4512                  stat = zclSE_ProcessInCmd_Pricing_GetConversionFactor ( pInMsg, pCBs );
   4513                  break;
   4514          
   4515                case COMMAND_SE_GET_CALORIFIC_VALUE:
   4516                  stat = zclSE_ProcessInCmd_Pricing_GetCalorificValue ( pInMsg, pCBs );
   4517                  break;
   4518          
   4519                case COMMAND_SE_GET_CO2_VALUE:
   4520                  stat = zclSE_ProcessInCmd_Pricing_GetCO2Value ( pInMsg, pCBs );
   4521                  break;
   4522          
   4523                case COMMAND_SE_GET_BILLING_PERIOD:
   4524                  stat = zclSE_ProcessInCmd_Pricing_GetBillingPeriod ( pInMsg, pCBs );
   4525                  break;
   4526          
   4527                case COMMAND_SE_GET_CONSOLIDATED_BILL:
   4528                  stat = zclSE_ProcessInCmd_Pricing_GetConsolidatedBill ( pInMsg, pCBs );
   4529                  break;
   4530          
   4531                case COMMAND_SE_CPP_EVENT_RESPONSE:
   4532                  stat = zclSE_ProcessInCmd_Pricing_CPPEventResponse ( pInMsg, pCBs );
   4533                  break;
   4534          #endif  // SE_UK_EXT
   4535          
   4536                default:
   4537                  stat = ZFailure;
   \                     ??zclSE_ProcessInPricingCmds_5:
   \   00014C   7901         MOV     R1,#0x1
   4538                  break;
   \   00014E   8010         SJMP    ??zclSE_ProcessInPricingCmds_7
   4539              }
   4540            }
   4541            else
   4542            {
   4543              // Process Server commands, received by client
   4544              switch ( pInMsg->hdr.commandID )
   \                     ??zclSE_ProcessInPricingCmds_0:
   \   000150   E0           MOVX    A,@DPTR
   \   000151   6005         JZ      ??zclSE_ProcessInPricingCmds_9
   \   000153   14           DEC     A
   \   000154   6007         JZ      ??zclSE_ProcessInPricingCmds_10
   \   000156   80F4         SJMP    ??zclSE_ProcessInPricingCmds_5
   4545              {
   4546                case COMMAND_SE_PUBLISH_PRICE:
   4547                  stat = zclSE_ProcessInCmd_Pricing_PublishPrice( pInMsg, pCBs );
   \                     ??zclSE_ProcessInPricingCmds_9:
   \   000158                ; Setup parameters for call to function zclSE_ProcessInCmd_Pricing_PublishPrice
   \   000158   12....       LCALL   ??zclSE_ProcessInCmd_Pricing_PublishPrice?relay
   4548                  break;
   \   00015B   8003         SJMP    ??zclSE_ProcessInPricingCmds_7
   4549          
   4550                case COMMAND_SE_PUBLISH_BLOCK_PERIOD:
   4551                  stat = zclSE_ProcessInCmd_Pricing_PublishBlockPeriod( pInMsg, pCBs );
   \                     ??zclSE_ProcessInPricingCmds_10:
   \   00015D                ; Setup parameters for call to function zclSE_ProcessInCmd_Pricing_PublishBlockPeriod
   \   00015D   12....       LCALL   ??zclSE_ProcessInCmd_Pricing_PublishBlockPeriod
   4552                  break;
   4553          
   4554          #ifdef SE_UK_EXT
   4555                case COMMAND_SE_PUBLISH_TARIFF_INFO:
   4556                  stat = zclSE_ProcessInCmd_Pricing_PublishTariffInformation( pInMsg, pCBs );
   4557                  break;
   4558          
   4559                case COMMAND_SE_PUBLISH_PRICE_MATRIX:
   4560                  stat = zclSE_ProcessInCmd_Pricing_PublishPriceMatrix( pInMsg, pCBs );
   4561                  break;
   4562          
   4563                case COMMAND_SE_PUBLISH_BLOCK_THRESHOLD:
   4564                  stat = zclSE_ProcessInCmd_Pricing_PublishBlockThreshold( pInMsg, pCBs );
   4565                  break;
   4566          
   4567                case COMMAND_SE_PUBLISH_CONVERSION_FACTOR:
   4568                  stat = zclSE_ProcessInCmd_Pricing_PublishConversionFactor( pInMsg, pCBs );
   4569                  break;
   4570          
   4571                case COMMAND_SE_PUBLISH_CALORIFIC_VALUE:
   4572                  stat = zclSE_ProcessInCmd_Pricing_PublishCalorificValue( pInMsg, pCBs );
   4573                  break;
   4574          
   4575                case COMMAND_SE_PUBLISH_CO2_VALUE:
   4576                  stat = zclSE_ProcessInCmd_Pricing_PublishCO2Value( pInMsg, pCBs );
   4577                  break;
   4578          
   4579                case COMMAND_SE_PUBLISH_CPP_EVENT:
   4580                  stat = zclSE_ProcessInCmd_Pricing_PublishCPPEvent( pInMsg, pCBs );
   4581                  break;
   4582          
   4583                case COMMAND_SE_PUBLISH_BILLING_PERIOD:
   4584                  stat = zclSE_ProcessInCmd_Pricing_PublishBillingPeriod( pInMsg, pCBs );
   4585                  break;
   4586          
   4587                case COMMAND_SE_PUBLISH_CONSOLIDATED_BILL:
   4588                  stat = zclSE_ProcessInCmd_Pricing_PublishConsolidatedBill( pInMsg, pCBs );
   4589                  break;
   4590          
   4591                case COMMAND_SE_PUBLISH_CREDIT_PAYMENT_INFO:
   4592                  stat = zclSE_ProcessInCmd_Pricing_PublishCreditPaymentInfo( pInMsg, pCBs );
   4593                  break;
   4594          #endif  // SE_UK_EXT
   4595          
   4596                default:
   4597                  stat = ZFailure;
   4598                  break;
   4599              }
   4600            }
   4601          
   4602            return ( stat );
   \                     ??zclSE_ProcessInPricingCmds_7:
   \   000160                REQUIRE ?Subroutine8
   \   000160                ; // Fall through to label ?Subroutine8
   4603          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine8:
   \   000000   7413         MOV     A,#0x13
   \   000002   02....       LJMP    ??Subroutine176_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine40:
   \   000000   12....       LCALL   ?Subroutine131 & 0xFFFF
   \                     ??CrossCallReturnLabel_197:
   \   000003                REQUIRE ??Subroutine173_0
   \   000003                ; // Fall through to label ??Subroutine173_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine173_0:
   \   000000   12....       LCALL   ?Subroutine114 & 0xFFFF
   \                     ??CrossCallReturnLabel_378:
   \   000003   7401         MOV     A,#0x1
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine36:
   \   000000   8E82         MOV     DPL,R6
   \   000002   8F83         MOV     DPH,R7
   \   000004   A3           INC     DPTR
   \   000005   A3           INC     DPTR
   \   000006   A3           INC     DPTR
   \   000007   A3           INC     DPTR
   \   000008   A3           INC     DPTR
   \   000009   A3           INC     DPTR
   \   00000A   A3           INC     DPTR
   \   00000B   A3           INC     DPTR
   \   00000C   12....       LCALL   ?Subroutine111 & 0xFFFF
   \                     ??CrossCallReturnLabel_428:
   \   00000F                REQUIRE ??Subroutine174_0
   \   00000F                ; // Fall through to label ??Subroutine174_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine41:
   \   000000   8E82         MOV     DPL,R6
   \   000002   8F83         MOV     DPH,R7
   \   000004   12....       LCALL   ?Subroutine103 & 0xFFFF
   \                     ??CrossCallReturnLabel_405:
   \   000007   7406         MOV     A,#0x6
   \   000009   22           RET
   4604          
   4605          /*********************************************************************
   4606           * @fn      zclSE_ProcessInCmd_Pricing_GetCurrentPrice
   4607           *
   4608           * @brief   Process in the received Get Current Price.
   4609           *
   4610           * @param   pInMsg - pointer to the incoming message
   4611           * @param   pCBs - pointer to the application call back function
   4612           *
   4613           * @return  ZStatus_t - ZFailure @ Unsupported
   4614           *                      ZCL_STATUS_CMD_HAS_RSP @ Supported and do
   4615           *                                           not need default rsp
   4616           */
   4617          static ZStatus_t zclSE_ProcessInCmd_Pricing_GetCurrentPrice( zclIncoming_t *pInMsg,
   4618                                                                        zclSE_AppCallbacks_t *pCBs )
   4619          {
   4620            if ( pCBs->pfnPricing_GetCurrentPrice )
   4621            {
   4622              zclCCGetCurrentPrice_t cmd;
   4623          
   4624              cmd.option = pInMsg->pData[0];
   4625          
   4626              pCBs->pfnPricing_GetCurrentPrice( &cmd,  &(pInMsg->msg->srcAddr),
   4627                                               pInMsg->hdr.transSeqNum );
   4628          
   4629              return ZCL_STATUS_CMD_HAS_RSP;
   4630            }
   4631          
   4632            return ZFailure;
   4633          }
   4634          
   4635          /*********************************************************************
   4636           * @fn      zclSE_ProcessInCmd_Pricing_GetScheduledPrice
   4637           *
   4638           * @brief   Process in the received Get Scheduled Price.
   4639           *
   4640           * @param   pInMsg - pointer to the incoming message
   4641           * @param   pCBs - pointer to the application call back function
   4642           *
   4643           * @return  ZStatus_t - ZFailure @ Unsupported
   4644           *                      ZCL_STATUS_CMD_HAS_RSP @ Supported and do
   4645           *                                           not need default rsp
   4646           */
   4647          static ZStatus_t zclSE_ProcessInCmd_Pricing_GetScheduledPrice( zclIncoming_t *pInMsg,
   4648                                                                          zclSE_AppCallbacks_t *pCBs )
   4649          {
   4650            if ( pCBs->pfnPricing_GetScheduledPrice )
   4651            {
   4652              zclCCGetScheduledPrice_t cmd;
   4653          
   4654              cmd.startTime = osal_build_uint32( pInMsg->pData, 4 );
   4655              cmd.numEvents = pInMsg->pData[4];
   4656          
   4657              pCBs->pfnPricing_GetScheduledPrice( &cmd, &(pInMsg->msg->srcAddr),
   4658                                                 pInMsg->hdr.transSeqNum );
   4659              return ZCL_STATUS_CMD_HAS_RSP;
   4660            }
   4661          
   4662            return ZFailure;
   4663          }
   4664          
   4665          /*********************************************************************
   4666           * @fn      zclSE_ProcessInCmd_Pricing_PublishPrice
   4667           *
   4668           * @brief   Process in the received Publish Price.
   4669           *
   4670           * @param   pInMsg - pointer to the incoming message
   4671           * @param   pCBs - pointer to the application call back function
   4672           *
   4673           * @return  ZStatus_t - ZFailure @ Unsupported
   4674           *                      ZSuccess @ Supported and need default rsp
   4675           *                      ZCL_STATUS_CMD_HAS_RSP @ Supported and do
   4676           *                                           not need default rsp
   4677           *                      ZCL_STATUS_SOFTWARE_FAILURE @ ZStack memory allocation failure
   4678           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   4679          static ZStatus_t zclSE_ProcessInCmd_Pricing_PublishPrice( zclIncoming_t *pInMsg,
   \                     zclSE_ProcessInCmd_Pricing_PublishPrice:
   4680                                                                     zclSE_AppCallbacks_t *pCBs )
   4681          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 44
   \   000005   74D4         MOV     A,#-0x2c
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   EA           MOV     A,R2
   \   00000B   FE           MOV     R6,A
   \   00000C   EB           MOV     A,R3
   \   00000D   FF           MOV     R7,A
   \   00000E   8C..         MOV     ?V0 + 0,R4
   \   000010   8D..         MOV     ?V0 + 1,R5
   4682            if ( pCBs->pfnPricing_PublishPrice )
   \   000012   8C82         MOV     DPL,R4
   \   000014   8D83         MOV     DPH,R5
   \   000016   12....       LCALL   ??Subroutine186_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_441:
   \   000019   605F         JZ      ??zclSE_ProcessInCmd_Pricing_PublishPrice_0
   4683            {
   4684              zclCCPublishPrice_t cmd;
   4685          
   4686              // Parse the command and do range check
   4687              if ( zclSE_ParseInCmd_PublishPrice( &cmd, &(pInMsg->pData[0]),
   4688                                                  pInMsg->pDataLen ) == ZSuccess )
   \   00001B                ; Setup parameters for call to function zclSE_ParseInCmd_PublishPrice
   \   00001B   12....       LCALL   ?Subroutine12 & 0xFFFF
   \                     ??CrossCallReturnLabel_0:
   \   00001E   12....       LCALL   ??zclSE_ParseInCmd_PublishPrice?relay
   \   000021   E9           MOV     A,R1
   \   000022   7052         JNZ     ??zclSE_ProcessInCmd_Pricing_PublishPrice_1
   4689              {
   4690                pCBs->pfnPricing_PublishPrice( &cmd, &(pInMsg->msg->srcAddr),
   4691                                              pInMsg->hdr.transSeqNum );
   \   000024                ; Setup parameters for indirect call
   \   000024   12....       LCALL   ?Subroutine27 & 0xFFFF
   \                     ??CrossCallReturnLabel_18:
   \   000027   12....       LCALL   ??Subroutine181_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_412:
   \   00002A   12....       LCALL   ?CALL_IND
   4692          
   4693                // Free the memory allocated in zclSE_ParseInCmd_PublishPrice()
   4694                if ( cmd.rateLabel.pStr != NULL )
   \   00002D   7405         MOV     A,#0x5
   \   00002F   12....       LCALL   ?XSTACK_DISP0_8
   \   000032   12....       LCALL   ??Subroutine186_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_442:
   \   000035   6008         JZ      ??CrossCallReturnLabel_58
   4695                {
   4696                  osal_mem_free( cmd.rateLabel.pStr );
   \   000037                ; Setup parameters for call to function osal_mem_free
   \   000037   7405         MOV     A,#0x5
   \   000039   12....       LCALL   ?XSTACK_DISP0_8
   \   00003C   12....       LCALL   ?Subroutine48 & 0xFFFF
   4697                }
   4698          
   4699                // SE 1.1
   4700                if ((pInMsg->pDataLen - cmd.rateLabel.strLen) > PACKET_LEN_SE_PUBLISH_PRICE_SE_1_0)
   \                     ??CrossCallReturnLabel_58:
   \   00003F   8E82         MOV     DPL,R6
   \   000041   8F83         MOV     DPH,R7
   \   000043   A3           INC     DPTR
   \   000044   A3           INC     DPTR
   \   000045   A3           INC     DPTR
   \   000046   A3           INC     DPTR
   \   000047   A3           INC     DPTR
   \   000048   A3           INC     DPTR
   \   000049   A3           INC     DPTR
   \   00004A   A3           INC     DPTR
   \   00004B   A3           INC     DPTR
   \   00004C   A3           INC     DPTR
   \   00004D   C082         PUSH    DPL
   \   00004F   C083         PUSH    DPH
   \   000051   7404         MOV     A,#0x4
   \   000053   12....       LCALL   ?XSTACK_DISP0_8
   \   000056   E0           MOVX    A,@DPTR
   \   000057   F8           MOV     R0,A
   \   000058   D083         POP     DPH
   \   00005A   D082         POP     DPL
   \   00005C   E0           MOVX    A,@DPTR
   \   00005D   C3           CLR     C
   \   00005E   98           SUBB    A,R0
   \   00005F   F8           MOV     R0,A
   \   000060   A3           INC     DPTR
   \   000061   E0           MOVX    A,@DPTR
   \   000062   9400         SUBB    A,#0x0
   \   000064   F9           MOV     R1,A
   \   000065   C3           CLR     C
   \   000066   E8           MOV     A,R0
   \   000067   9423         SUBB    A,#0x23
   \   000069   E9           MOV     A,R1
   \   00006A   9400         SUBB    A,#0x0
   \   00006C   4004         JC      ??zclSE_ProcessInCmd_Pricing_PublishPrice_2
   4701                {
   4702                  return ZCL_STATUS_CMD_HAS_RSP;
   \   00006E   79FF         MOV     R1,#-0x1
   \   000070   800A         SJMP    ??zclSE_ProcessInCmd_Pricing_PublishPrice_3
   4703                }
   4704                else
   4705                {
   4706                  // SE 1.0 backwards compatibility
   4707                  return ZSuccess;
   \                     ??zclSE_ProcessInCmd_Pricing_PublishPrice_2:
   \   000072   7900         MOV     R1,#0x0
   \   000074   8006         SJMP    ??zclSE_ProcessInCmd_Pricing_PublishPrice_3
   4708                }
   4709              }
   4710              else
   4711              {
   4712                return ZCL_STATUS_SOFTWARE_FAILURE;
   \                     ??zclSE_ProcessInCmd_Pricing_PublishPrice_1:
   \   000076   79C1         MOV     R1,#-0x3f
   \   000078   8002         SJMP    ??zclSE_ProcessInCmd_Pricing_PublishPrice_3
   4713              }
   4714            }
   4715          
   4716            return ZFailure;
   \                     ??zclSE_ProcessInCmd_Pricing_PublishPrice_0:
   \   00007A   7901         MOV     R1,#0x1
   \                     ??zclSE_ProcessInCmd_Pricing_PublishPrice_3:
   \   00007C   742C         MOV     A,#0x2c
   \   00007E   02....       LJMP    ??Subroutine182_0 & 0xFFFF
   4717          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine27:
   \   000000   12....       LCALL   ?Subroutine101 & 0xFFFF
   \                     ??CrossCallReturnLabel_159:
   \   000003   85..82       MOV     DPL,?V0 + 0
   \   000006   85..83       MOV     DPH,?V0 + 1
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine12:
   \   000000   12....       LCALL   ?Subroutine104 & 0xFFFF
   \                     ??CrossCallReturnLabel_161:
   \   000003   85..82       MOV     DPL,?XSP + 0
   \   000006   85..83       MOV     DPH,?XSP + 1
   \   000009   AA82         MOV     R2,DPL
   \   00000B   AB83         MOV     R3,DPH
   \   00000D   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine104:
   \   000000   8E82         MOV     DPL,R6
   \   000002   8F83         MOV     DPH,R7
   \   000004   A3           INC     DPTR
   \   000005   A3           INC     DPTR
   \   000006   A3           INC     DPTR
   \   000007   A3           INC     DPTR
   \   000008   12....       LCALL   ?Subroutine146 & 0xFFFF
   \                     ??CrossCallReturnLabel_352:
   \   00000B   A3           INC     DPTR
   \   00000C   A3           INC     DPTR
   \   00000D   A3           INC     DPTR
   \   00000E   A3           INC     DPTR
   \   00000F   A3           INC     DPTR
   \   000010   A3           INC     DPTR
   \   000011   A3           INC     DPTR
   \   000012   A3           INC     DPTR
   \   000013   E0           MOVX    A,@DPTR
   \   000014   FC           MOV     R4,A
   \   000015   A3           INC     DPTR
   \   000016   E0           MOVX    A,@DPTR
   \   000017   FD           MOV     R5,A
   \   000018   22           RET
   4718          
   4719          /*********************************************************************
   4720           * @fn      zclSE_ProcessInCmd_Pricing_PriceAcknowledgement
   4721           *
   4722           * @brief   Process in the received Price Acknowledgement
   4723           *
   4724           * @param   pInMsg - pointer to the incoming message
   4725           * @param   pCBs - pointer to the application call back function
   4726           *
   4727           * @return  ZStatus_t - ZFailure @ Unsupported
   4728           *                      ZSuccess @ Supported and need default rsp
   4729           */
   4730          static ZStatus_t zclSE_ProcessInCmd_Pricing_PriceAcknowledgement( zclIncoming_t *pInMsg,
   4731                                                                            zclSE_AppCallbacks_t *pCBs )
   4732          {
   4733            if ( pCBs->pfnPricing_PriceAcknowledgement )
   4734            {
   4735              zclCCPriceAcknowledgement_t cmd;
   4736          
   4737              cmd.providerId = osal_build_uint32( pInMsg->pData, 4 );
   4738              cmd.issuerEventId = osal_build_uint32( &pInMsg->pData[4], 4 );
   4739              cmd.priceAckTime = osal_build_uint32( &pInMsg->pData[8], 4 );
   4740              cmd.control = pInMsg->pData[12];
   4741          
   4742              pCBs->pfnPricing_PriceAcknowledgement( &cmd, &(pInMsg->msg->srcAddr),
   4743                                                 pInMsg->hdr.transSeqNum );
   4744              return ZSuccess;
   4745            }
   4746          
   4747            return ZFailure;
   4748          }
   4749          
   4750          /*********************************************************************
   4751           * @fn      zclSE_ProcessInCmd_Pricing_GetBlockPeriod
   4752           *
   4753           * @brief   Process in the received Get Block Period.
   4754           *
   4755           * @param   pInMsg - pointer to the incoming message
   4756           * @param   pCBs - pointer to the application call back function
   4757           *
   4758           * @return  ZStatus_t - ZFailure @ Unsupported
   4759           *                      ZCL_STATUS_CMD_HAS_RSP @ Supported and do
   4760           *                                           not need default rsp
   4761           */
   4762          static ZStatus_t zclSE_ProcessInCmd_Pricing_GetBlockPeriod( zclIncoming_t *pInMsg,
   4763                                                                      zclSE_AppCallbacks_t *pCBs )
   4764          {
   4765            if ( pCBs->pfnPricing_GetBlockPeriod )
   4766            {
   4767              zclCCGetBlockPeriod_t cmd;
   4768          
   4769              cmd.startTime = osal_build_uint32( pInMsg->pData, 4 );
   4770              cmd.numEvents = pInMsg->pData[4];
   4771          
   4772              pCBs->pfnPricing_GetBlockPeriod( &cmd, &(pInMsg->msg->srcAddr),
   4773                                               pInMsg->hdr.transSeqNum );
   4774              return ZCL_STATUS_CMD_HAS_RSP;
   4775            }
   4776          
   4777            return ZFailure;
   4778          }
   4779          
   4780          /*********************************************************************
   4781           * @fn      zclSE_ProcessInCmd_Pricing_PublishBlockPeriod
   4782           *
   4783           * @brief   Process in the received Publish Block Period.
   4784           *
   4785           * @param   pInMsg - pointer to the incoming message
   4786           * @param   pCBs - pointer to the application call back function
   4787           *
   4788           * @return  ZStatus_t - ZFailure @ Unsupported
   4789           *                      ZCL_STATUS_CMD_HAS_RSP @ Supported and do
   4790           *                                           not need default rsp
   4791           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   4792          static ZStatus_t zclSE_ProcessInCmd_Pricing_PublishBlockPeriod( zclIncoming_t *pInMsg,
   \                     zclSE_ProcessInCmd_Pricing_PublishBlockPeriod:
   4793                                                                          zclSE_AppCallbacks_t *pCBs )
   4794          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 19
   \   000005   74ED         MOV     A,#-0x13
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   EA           MOV     A,R2
   \   00000B   FE           MOV     R6,A
   \   00000C   EB           MOV     A,R3
   \   00000D   FF           MOV     R7,A
   \   00000E   8C..         MOV     ?V0 + 0,R4
   \   000010   8D..         MOV     ?V0 + 1,R5
   4795            if ( pCBs->pfnPricing_PublishBlockPeriod )
   \   000012   8C82         MOV     DPL,R4
   \   000014   8D83         MOV     DPH,R5
   \   000016   A3           INC     DPTR
   \   000017   A3           INC     DPTR
   \   000018   12....       LCALL   ??Subroutine186_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_443:
   \   00001B   6015         JZ      ??zclSE_ProcessInCmd_Pricing_PublishBlockPeriod_1
   4796            {
   4797              zclCCPublishBlockPeriod_t cmd;
   4798          
   4799              // Parse the command and do range check
   4800              zclSE_ParseInCmd_PublishBlockPeriod( &cmd, &(pInMsg->pData[0]), pInMsg->pDataLen );
   \   00001D                ; Setup parameters for call to function zclSE_ParseInCmd_PublishBlockPeriod
   \   00001D   12....       LCALL   ?Subroutine12 & 0xFFFF
   \                     ??CrossCallReturnLabel_1:
   \   000020   12....       LCALL   ??zclSE_ParseInCmd_PublishBlockPeriod?relay
   4801          
   4802              pCBs->pfnPricing_PublishBlockPeriod( &cmd, &(pInMsg->msg->srcAddr),
   4803                                                   pInMsg->hdr.transSeqNum );
   \   000023                ; Setup parameters for indirect call
   \   000023   12....       LCALL   ?Subroutine27 & 0xFFFF
   \                     ??CrossCallReturnLabel_19:
   \   000026   A3           INC     DPTR
   \   000027   A3           INC     DPTR
   \   000028   12....       LCALL   ??Subroutine181_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_413:
   \   00002B   12....       LCALL   ?CALL_IND
   4804              return ZCL_STATUS_CMD_HAS_RSP;
   \   00002E   79FF         MOV     R1,#-0x1
   \   000030   8002         SJMP    ??zclSE_ProcessInCmd_Pricing_PublishBlockPeriod_2
   4805            }
   4806          
   4807            return ZFailure;
   \                     ??zclSE_ProcessInCmd_Pricing_PublishBlockPeriod_1:
   \   000032   7901         MOV     R1,#0x1
   \                     ??zclSE_ProcessInCmd_Pricing_PublishBlockPeriod_2:
   \   000034   7413         MOV     A,#0x13
   \   000036   02....       LJMP    ??Subroutine182_0 & 0xFFFF
   4808          }
   4809          
   4810          #ifdef SE_UK_EXT
   4811          /*********************************************************************
   4812           * @fn      zclSE_ProcessInCmd_Pricing_PublishTariffInformation
   4813           *
   4814           * @brief   Process in the received Publish Tarif Information.
   4815           *
   4816           * @param   pInMsg - pointer to the incoming message
   4817           * @param   pCBs - pointer to the application call back function
   4818           *
   4819           * @return  ZStatus_t - ZFailure @ Unsupported
   4820           *                      ZCL_STATUS_CMD_HAS_RSP @ Supported and do
   4821           *                                           not need default rsp
   4822           */
   4823          static ZStatus_t zclSE_ProcessInCmd_Pricing_PublishTariffInformation( zclIncoming_t *pInMsg,
   4824                                                                                zclSE_AppCallbacks_t *pCBs )
   4825          {
   4826            if ( pCBs->pfnPricing_PublishTariffInformation )
   4827            {
   4828              zclCCPublishTariffInformation_t cmd;
   4829          
   4830              zclSE_ParseInCmd_PublishTariffInformation( &cmd, &(pInMsg->pData[0]),
   4831                                                         pInMsg->pDataLen );
   4832          
   4833              pCBs->pfnPricing_PublishTariffInformation( &cmd, &(pInMsg->msg->srcAddr),
   4834                                                         pInMsg->hdr.transSeqNum );
   4835              return ZCL_STATUS_CMD_HAS_RSP;
   4836            }
   4837          
   4838            return ZFailure;
   4839          }
   4840          
   4841          /*********************************************************************
   4842           * @fn      zclSE_ProcessInCmd_Pricing_PublishPriceMatrix
   4843           *
   4844           * @brief   Process in the received Publish Price Matrix.
   4845           *
   4846           * @param   pInMsg - pointer to the incoming message
   4847           * @param   pCBs - pointer to the application call back function
   4848           *
   4849           * @return  ZStatus_t - ZFailure @ Unsupported
   4850           *                      ZCL_STATUS_CMD_HAS_RSP @ Supported and do
   4851           *                                           not need default rsp
   4852           *                      ZCL_STATUS_SOFTWARE_FAILURE @ ZStack memory allocation failure
   4853           */
   4854          static ZStatus_t zclSE_ProcessInCmd_Pricing_PublishPriceMatrix( zclIncoming_t *pInMsg,
   4855                                                                          zclSE_AppCallbacks_t *pCBs )
   4856          {
   4857            if ( pCBs->pfnPricing_PublishPriceMatrix )
   4858            {
   4859              zclCCPublishPriceMatrix_t cmd;
   4860          
   4861              if ( zclSE_ParseInCmd_PublishPriceMatrix( &cmd, &(pInMsg->pData[0]),
   4862                                                       pInMsg->pDataLen ) == ZSuccess )
   4863              {
   4864                pCBs->pfnPricing_PublishPriceMatrix( &cmd, &(pInMsg->msg->srcAddr),
   4865                                                           pInMsg->hdr.transSeqNum );
   4866          
   4867                if ( cmd.pTierBlockPrice != NULL )
   4868                {
   4869                  osal_mem_free( cmd.pTierBlockPrice );
   4870                }
   4871          
   4872                return ZCL_STATUS_CMD_HAS_RSP;
   4873              }
   4874              else
   4875              {
   4876                return ZCL_STATUS_SOFTWARE_FAILURE;
   4877              }
   4878            }
   4879          
   4880            return ZFailure;
   4881          }
   4882          
   4883          /*********************************************************************
   4884           * @fn      zclSE_ProcessInCmd_Pricing_PublishBlockThreshold
   4885           *
   4886           * @brief   Process in the received Publish Block Threshold.
   4887           *
   4888           * @param   pInMsg - pointer to the incoming message
   4889           * @param   pCBs - pointer to the application call back function
   4890           *
   4891           * @return  ZStatus_t - ZFailure @ Unsupported
   4892           *                      ZCL_STATUS_CMD_HAS_RSP @ Supported and do
   4893           *                                           not need default rsp
   4894           *                      ZCL_STATUS_SOFTWARE_FAILURE @ ZStack memory allocation failure
   4895           */
   4896          static ZStatus_t zclSE_ProcessInCmd_Pricing_PublishBlockThreshold( zclIncoming_t *pInMsg,
   4897                                                                             zclSE_AppCallbacks_t *pCBs )
   4898          {
   4899            if ( pCBs->pfnPricing_PublishBlockThresholds )
   4900            {
   4901              zclCCPublishBlockThresholds_t cmd;
   4902          
   4903              if ( zclSE_ParseInCmd_PublishBlockThresholds( &cmd, &(pInMsg->pData[0]),
   4904                                                       pInMsg->pDataLen ) == ZSuccess )
   4905              {
   4906                pCBs->pfnPricing_PublishBlockThresholds( &cmd, &(pInMsg->msg->srcAddr),
   4907                                                         pInMsg->hdr.transSeqNum );
   4908          
   4909                if ( cmd.pTierBlockThreshold != NULL )
   4910                {
   4911                  osal_mem_free( cmd.pTierBlockThreshold );
   4912                }
   4913          
   4914                return ZCL_STATUS_CMD_HAS_RSP;
   4915              }
   4916              else
   4917              {
   4918                return ZCL_STATUS_SOFTWARE_FAILURE;
   4919              }
   4920            }
   4921          
   4922            return ZFailure;
   4923          }
   4924          
   4925          /*********************************************************************
   4926           * @fn      zclSE_ProcessInCmd_Pricing_PublishConversionFactor
   4927           *
   4928           * @brief   Process in the received Publish Conversion Factor.
   4929           *
   4930           * @param   pInMsg - pointer to the incoming message
   4931           * @param   pCBs - pointer to the application call back function
   4932           *
   4933           * @return  ZStatus_t - ZFailure @ Unsupported
   4934           *                      ZCL_STATUS_CMD_HAS_RSP @ Supported and do
   4935           *                                           not need default rsp
   4936           */
   4937          static ZStatus_t zclSE_ProcessInCmd_Pricing_PublishConversionFactor( zclIncoming_t *pInMsg,
   4938                                                                               zclSE_AppCallbacks_t *pCBs )
   4939          {
   4940            if ( pCBs->pfnPricing_PublishConversionFactor )
   4941            {
   4942              zclCCPublishConversionFactor_t cmd;
   4943          
   4944              zclSE_ParseInCmd_PublishConversionFactor( &cmd, &(pInMsg->pData[0]),
   4945                                                        pInMsg->pDataLen );
   4946          
   4947              pCBs->pfnPricing_PublishConversionFactor( &cmd, &(pInMsg->msg->srcAddr),
   4948                                                        pInMsg->hdr.transSeqNum );
   4949              return ZCL_STATUS_CMD_HAS_RSP;
   4950            }
   4951          
   4952            return ZFailure;
   4953          }
   4954          
   4955          /*********************************************************************
   4956           * @fn      zclSE_ProcessInCmd_Pricing_PublishCalorificValue
   4957           *
   4958           * @brief   Process in the received Publish Calorific Value.
   4959           *
   4960           * @param   pInMsg - pointer to the incoming message
   4961           * @param   pCBs - pointer to the application call back function
   4962           *
   4963           * @return  ZStatus_t - ZFailure @ Unsupported
   4964           *                      ZCL_STATUS_CMD_HAS_RSP @ Supported and do
   4965           *                                           not need default rsp
   4966           */
   4967          static ZStatus_t zclSE_ProcessInCmd_Pricing_PublishCalorificValue( zclIncoming_t *pInMsg,
   4968                                                                             zclSE_AppCallbacks_t *pCBs )
   4969          {
   4970            if ( pCBs->pfnPricing_PublishCalorificValue )
   4971            {
   4972              zclCCPublishCalorificValue_t cmd;
   4973          
   4974              zclSE_ParseInCmd_PublishCalorificValue( &cmd, &(pInMsg->pData[0]),
   4975                                                      pInMsg->pDataLen );
   4976          
   4977              pCBs->pfnPricing_PublishCalorificValue( &cmd, &(pInMsg->msg->srcAddr),
   4978                                                      pInMsg->hdr.transSeqNum );
   4979              return ZCL_STATUS_CMD_HAS_RSP;
   4980            }
   4981          
   4982            return ZFailure;
   4983          }
   4984          
   4985          /*********************************************************************
   4986           * @fn      zclSE_ProcessInCmd_Pricing_PublishCO2Value
   4987           *
   4988           * @brief   Process in the received Publish CO2 Value.
   4989           *
   4990           * @param   pInMsg - pointer to the incoming message
   4991           * @param   pCBs - pointer to the application call back function
   4992           *
   4993           * @return  ZStatus_t - ZFailure @ Unsupported
   4994           *                      ZCL_STATUS_CMD_HAS_RSP @ Supported and do
   4995           *                                           not need default rsp
   4996           */
   4997          static ZStatus_t zclSE_ProcessInCmd_Pricing_PublishCO2Value( zclIncoming_t *pInMsg,
   4998                                                                       zclSE_AppCallbacks_t *pCBs )
   4999          {
   5000            if ( pCBs->pfnPricing_PublishCO2Value )
   5001            {
   5002              zclCCPublishCO2Value_t cmd;
   5003          
   5004              zclSE_ParseInCmd_PublishCO2Value( &cmd, &(pInMsg->pData[0]),
   5005                                                pInMsg->pDataLen );
   5006          
   5007              pCBs->pfnPricing_PublishCO2Value( &cmd, &(pInMsg->msg->srcAddr),
   5008                                                pInMsg->hdr.transSeqNum );
   5009              return ZCL_STATUS_CMD_HAS_RSP;
   5010            }
   5011          
   5012            return ZFailure;
   5013          }
   5014          
   5015          /*********************************************************************
   5016           * @fn      zclSE_ProcessInCmd_Pricing_PublishCPPEvent
   5017           *
   5018           * @brief   Process in the received Publish CPP Event.
   5019           *
   5020           * @param   pInMsg - pointer to the incoming message
   5021           * @param   pCBs - pointer to the application call back function
   5022           *
   5023           * @return  ZStatus_t - ZFailure @ Unsupported
   5024           *                      ZCL_STATUS_CMD_HAS_RSP @ Supported and do
   5025           *                                           not need default rsp
   5026           */
   5027          static ZStatus_t zclSE_ProcessInCmd_Pricing_PublishCPPEvent( zclIncoming_t *pInMsg,
   5028                                                                       zclSE_AppCallbacks_t *pCBs )
   5029          {
   5030            if ( pCBs->pfnPricing_PublishCPPEvent )
   5031            {
   5032              zclCCPublishCPPEvent_t cmd;
   5033          
   5034              zclSE_ParseInCmd_PublishCPPEvent( &cmd, &(pInMsg->pData[0]), pInMsg->pDataLen );
   5035          
   5036              pCBs->pfnPricing_PublishCPPEvent( &cmd, &(pInMsg->msg->srcAddr),
   5037                                                pInMsg->hdr.transSeqNum );
   5038              return ZCL_STATUS_CMD_HAS_RSP;
   5039            }
   5040          
   5041            return ZFailure;
   5042          }
   5043          
   5044          /*********************************************************************
   5045           * @fn      zclSE_ProcessInCmd_Pricing_PublishBillingPeriod
   5046           *
   5047           * @brief   Process in the received Publish Billing Period.
   5048           *
   5049           * @param   pInMsg - pointer to the incoming message
   5050           * @param   pCBs - pointer to the application call back function
   5051           *
   5052           * @return  ZStatus_t - ZFailure @ Unsupported
   5053           *                      ZCL_STATUS_CMD_HAS_RSP @ Supported and do
   5054           *                                           not need default rsp
   5055           */
   5056          static ZStatus_t zclSE_ProcessInCmd_Pricing_PublishBillingPeriod( zclIncoming_t *pInMsg, zclSE_AppCallbacks_t *pCBs )
   5057          {
   5058            if ( pCBs->pfnPricing_PublishBillingPeriod )
   5059            {
   5060              zclCCPublishBillingPeriod_t cmd;
   5061          
   5062              zclSE_ParseInCmd_PublishBillingPeriod( &cmd, &(pInMsg->pData[0]),
   5063                                                    pInMsg->pDataLen );
   5064          
   5065              pCBs->pfnPricing_PublishBillingPeriod( &cmd, &(pInMsg->msg->srcAddr),
   5066                                                           pInMsg->hdr.transSeqNum );
   5067              return ZCL_STATUS_CMD_HAS_RSP;
   5068            }
   5069          
   5070            return ZFailure;
   5071          }
   5072          
   5073          /*********************************************************************
   5074           * @fn      zclSE_ProcessInCmd_Pricing_PublishConsolidatedBill
   5075           *
   5076           * @brief   Process in the received Publish Consolidated Bill.
   5077           *
   5078           * @param   pInMsg - pointer to the incoming message
   5079           * @param   pCBs - pointer to the application call back function
   5080           *
   5081           * @return  ZStatus_t - ZFailure @ Unsupported
   5082           *                      ZCL_STATUS_CMD_HAS_RSP @ Supported and do
   5083           *                                           not need default rsp
   5084           */
   5085          static ZStatus_t zclSE_ProcessInCmd_Pricing_PublishConsolidatedBill( zclIncoming_t *pInMsg, zclSE_AppCallbacks_t *pCBs )
   5086          {
   5087            if ( pCBs->pfnPricing_PublishConsolidatedBill )
   5088            {
   5089              zclCCPublishConsolidatedBill_t cmd;
   5090          
   5091              zclSE_ParseInCmd_PublishConsolidatedBill( &cmd, &(pInMsg->pData[0]),
   5092                                                        pInMsg->pDataLen );
   5093          
   5094              pCBs->pfnPricing_PublishConsolidatedBill( &cmd, &(pInMsg->msg->srcAddr),
   5095                                                        pInMsg->hdr.transSeqNum );
   5096              return ZCL_STATUS_CMD_HAS_RSP;
   5097            }
   5098          
   5099            return ZFailure;
   5100          }
   5101          
   5102          /*********************************************************************
   5103           * @fn      zclSE_ProcessInCmd_Pricing_PublishCreditPaymentInfo
   5104           *
   5105           * @brief   Process in the received Publish Credit Payment Information.
   5106           *
   5107           * @param   pInMsg - pointer to the incoming message
   5108           * @param   pCBs - pointer to the application call back function
   5109           *
   5110           * @return  ZStatus_t - ZFailure @ Unsupported
   5111           *                      ZCL_STATUS_CMD_HAS_RSP @ Supported and do
   5112           *                                           not need default rsp
   5113           */
   5114          static ZStatus_t zclSE_ProcessInCmd_Pricing_PublishCreditPaymentInfo( zclIncoming_t *pInMsg,
   5115                                                                                zclSE_AppCallbacks_t *pCBs )
   5116          {
   5117            if ( pCBs->pfnPricing_PublishCreditPaymentInfo )
   5118            {
   5119              zclCCPublishCreditPaymentInfo_t cmd;
   5120          
   5121              zclSE_ParseInCmd_PublishCreditPaymentInfo( &cmd, &(pInMsg->pData[0]),
   5122                                                         pInMsg->pDataLen );
   5123          
   5124              pCBs->pfnPricing_PublishCreditPaymentInfo( &cmd, &(pInMsg->msg->srcAddr),
   5125                                                         pInMsg->hdr.transSeqNum );
   5126          
   5127              return ZCL_STATUS_CMD_HAS_RSP;
   5128            }
   5129          
   5130            return ZFailure;
   5131          }
   5132          
   5133          /*********************************************************************
   5134           * @fn      zclSE_ProcessInCmd_Pricing_GetTariffInformation
   5135           *
   5136           * @brief   Process in the received Get Tariff Information.
   5137           *
   5138           * @param   pInMsg - pointer to the incoming message
   5139           * @param   pCBs - pointer to the application call back function
   5140           *
   5141           * @return  ZStatus_t - ZFailure @ Unsupported
   5142           *                      ZCL_STATUS_CMD_HAS_RSP @ Supported and do
   5143           *                                           not need default rsp
   5144           */
   5145          static ZStatus_t zclSE_ProcessInCmd_Pricing_GetTariffInformation( zclIncoming_t *pInMsg,
   5146                                                                            zclSE_AppCallbacks_t *pCBs )
   5147          {
   5148            if ( pCBs->pfnPricing_GetTariffInformation )
   5149            {
   5150              zclCCGetTariffInformation_t cmd;
   5151          
   5152              zclSE_ParseInCmd_GetTariffInformation( &cmd, &(pInMsg->pData[0]),
   5153                                                    pInMsg->pDataLen );
   5154          
   5155              pCBs->pfnPricing_GetTariffInformation( &cmd, &(pInMsg->msg->srcAddr),
   5156                                                    pInMsg->hdr.transSeqNum );
   5157              return ZCL_STATUS_CMD_HAS_RSP;
   5158            }
   5159          
   5160            return ZFailure;
   5161          }
   5162          
   5163          /*********************************************************************
   5164           * @fn      zclSE_ProcessInCmd_Pricing_GetPriceMatrix
   5165           *
   5166           * @brief   Process in the received Get Price Matrix.
   5167           *
   5168           * @param   pInMsg - pointer to the incoming message
   5169           * @param   pCBs - pointer to the application call back function
   5170           *
   5171           * @return  ZStatus_t - ZFailure @ Unsupported
   5172           *                      ZCL_STATUS_CMD_HAS_RSP @ Supported and do
   5173           *                                           not need default rsp
   5174           *                      ZCL_STATUS_SOFTWARE_FAILURE @ ZStack memory allocation failure
   5175           */
   5176          static ZStatus_t zclSE_ProcessInCmd_Pricing_GetPriceMatrix( zclIncoming_t *pInMsg, zclSE_AppCallbacks_t *pCBs )
   5177          {
   5178            if ( pCBs->pfnPricing_GetPriceMatrix )
   5179            {
   5180              uint32 issuerTariffId = osal_build_uint32( pInMsg->pData, 4 );
   5181          
   5182              pCBs->pfnPricing_GetPriceMatrix( issuerTariffId, &(pInMsg->msg->srcAddr),
   5183                                                         pInMsg->hdr.transSeqNum );
   5184          
   5185              return ZCL_STATUS_CMD_HAS_RSP;
   5186            }
   5187          
   5188            return ZFailure;
   5189          }
   5190          
   5191          /*********************************************************************
   5192           * @fn      zclSE_ProcessInCmd_Pricing_GetBlockThresholds
   5193           *
   5194           * @brief   Process in the received Get Block Thresholds.
   5195           *
   5196           * @param   pInMsg - pointer to the incoming message
   5197           * @param   pCBs - pointer to the application call back function
   5198           *
   5199           * @return  ZStatus_t - ZFailure @ Unsupported
   5200           *                      ZCL_STATUS_CMD_HAS_RSP @ Supported and do
   5201           *                                           not need default rsp
   5202           *                      ZCL_STATUS_SOFTWARE_FAILURE @ ZStack memory allocation failure
   5203           */
   5204          static ZStatus_t zclSE_ProcessInCmd_Pricing_GetBlockThresholds( zclIncoming_t *pInMsg, zclSE_AppCallbacks_t *pCBs )
   5205          {
   5206            if ( pCBs->pfnPricing_GetBlockThresholds )
   5207            {
   5208              uint32 issuerTariffId = osal_build_uint32( pInMsg->pData, 4 );
   5209          
   5210              pCBs->pfnPricing_GetBlockThresholds( issuerTariffId, &(pInMsg->msg->srcAddr),
   5211                                                           pInMsg->hdr.transSeqNum );
   5212          
   5213              return ZCL_STATUS_CMD_HAS_RSP;
   5214            }
   5215          
   5216            return ZFailure;
   5217          }
   5218          
   5219          /*********************************************************************
   5220           * @fn      zclSE_ProcessInCmd_Pricing_GetConversionFactor
   5221           *
   5222           * @brief   Process in the received Get Conversion Factor.
   5223           *
   5224           * @param   pInMsg - pointer to the incoming message
   5225           * @param   pCBs - pointer to the application call back function
   5226           *
   5227           * @return  ZStatus_t - ZFailure @ Unsupported
   5228           *                      ZCL_STATUS_CMD_HAS_RSP @ Supported and do
   5229           *                                           not need default rsp
   5230           */
   5231          static ZStatus_t zclSE_ProcessInCmd_Pricing_GetConversionFactor( zclIncoming_t *pInMsg,
   5232                                                                           zclSE_AppCallbacks_t *pCBs )
   5233          {
   5234            if ( pCBs->pfnPricing_GetConversionFactor )
   5235            {
   5236              zclCCGetConversionFactor_t cmd;
   5237          
   5238              zclSE_ParseInCmd_GetConversionFactor( &cmd, &(pInMsg->pData[0]),
   5239                                                    pInMsg->pDataLen );
   5240          
   5241              pCBs->pfnPricing_GetConversionFactor( &cmd, &(pInMsg->msg->srcAddr),
   5242                                                    pInMsg->hdr.transSeqNum );
   5243              return ZCL_STATUS_CMD_HAS_RSP;
   5244            }
   5245          
   5246            return ZFailure;
   5247          }
   5248          
   5249          /*********************************************************************
   5250           * @fn      zclSE_ProcessInCmd_Pricing_GetCalorificValue
   5251           *
   5252           * @brief   Process in the received Get Calorific Value.
   5253           *
   5254           * @param   pInMsg - pointer to the incoming message
   5255           * @param   pCBs - pointer to the application call back function
   5256           *
   5257           * @return  ZStatus_t - ZFailure @ Unsupported
   5258           *                      ZCL_STATUS_CMD_HAS_RSP @ Supported and do
   5259           *                                           not need default rsp
   5260           */
   5261          static ZStatus_t zclSE_ProcessInCmd_Pricing_GetCalorificValue( zclIncoming_t *pInMsg,
   5262                                                                         zclSE_AppCallbacks_t *pCBs )
   5263          {
   5264            if ( pCBs->pfnPricing_GetCalorificValue )
   5265            {
   5266              zclCCGetCalorificValue_t cmd;
   5267          
   5268              zclSE_ParseInCmd_GetCalorificValue( &cmd, &(pInMsg->pData[0]),
   5269                                                  pInMsg->pDataLen );
   5270          
   5271              pCBs->pfnPricing_GetCalorificValue( &cmd, &(pInMsg->msg->srcAddr),
   5272                                                  pInMsg->hdr.transSeqNum );
   5273              return ZCL_STATUS_CMD_HAS_RSP;
   5274            }
   5275          
   5276            return ZFailure;
   5277          }
   5278          
   5279          /*********************************************************************
   5280           * @fn      zclSE_ProcessInCmd_Pricing_GetCO2Value
   5281           *
   5282           * @brief   Process in the received Get CO2 Value.
   5283           *
   5284           * @param   pInMsg - pointer to the incoming message
   5285           * @param   pCBs - pointer to the application call back function
   5286           *
   5287           * @return  ZStatus_t - ZFailure @ Unsupported
   5288           *                      ZCL_STATUS_CMD_HAS_RSP @ Supported and do
   5289           *                                           not need default rsp
   5290           */
   5291          static ZStatus_t zclSE_ProcessInCmd_Pricing_GetCO2Value( zclIncoming_t *pInMsg, zclSE_AppCallbacks_t *pCBs )
   5292          {
   5293            if ( pCBs->pfnPricing_GetCO2Value )
   5294            {
   5295              zclCCGetCO2Value_t cmd;
   5296          
   5297              zclSE_ParseInCmd_GetCO2Value( &cmd, &(pInMsg->pData[0]),
   5298                                            pInMsg->pDataLen );
   5299          
   5300              pCBs->pfnPricing_GetCO2Value( &cmd, &(pInMsg->msg->srcAddr),
   5301                                            pInMsg->hdr.transSeqNum );
   5302              return ZCL_STATUS_CMD_HAS_RSP;
   5303            }
   5304          
   5305            return ZFailure;
   5306          }
   5307          
   5308          /*********************************************************************
   5309           * @fn      zclSE_ProcessInCmd_Pricing_GetBillingPeriod
   5310           *
   5311           * @brief   Process in the received Get Billing Period.
   5312           *
   5313           * @param   pInMsg - pointer to the incoming message
   5314           * @param   pCBs - pointer to the application call back function
   5315           *
   5316           * @return  ZStatus_t - ZFailure @ Unsupported
   5317           *                      ZCL_STATUS_CMD_HAS_RSP @ Supported and do
   5318           *                                           not need default rsp
   5319           */
   5320          static ZStatus_t zclSE_ProcessInCmd_Pricing_GetBillingPeriod( zclIncoming_t *pInMsg,
   5321                                                                        zclSE_AppCallbacks_t *pCBs )
   5322          {
   5323            if ( pCBs->pfnPricing_GetBillingPeriod )
   5324            {
   5325              zclCCGetBillingPeriod_t cmd;
   5326          
   5327              zclSE_ParseInCmd_GetBillingPeriod( &cmd, &(pInMsg->pData[0]),
   5328                                                 pInMsg->pDataLen );
   5329          
   5330              pCBs->pfnPricing_GetBillingPeriod( &cmd, &(pInMsg->msg->srcAddr),
   5331                                                 pInMsg->hdr.transSeqNum );
   5332          
   5333              return ZCL_STATUS_CMD_HAS_RSP;
   5334            }
   5335          
   5336            return ZFailure;
   5337          }
   5338          
   5339          /*********************************************************************
   5340           * @fn      zclSE_ProcessInCmd_Pricing_GetConsolidatedBill
   5341           *
   5342           * @brief   Process in the received Get Consolidated Bill.
   5343           *
   5344           * @param   pInMsg - pointer to the incoming message
   5345           * @param   pCBs - pointer to the application call back function
   5346           *
   5347           * @return  ZStatus_t - ZFailure @ Unsupported
   5348           *                      ZCL_STATUS_CMD_HAS_RSP @ Supported and do
   5349           *                                           not need default rsp
   5350           */
   5351          static ZStatus_t zclSE_ProcessInCmd_Pricing_GetConsolidatedBill( zclIncoming_t *pInMsg,
   5352                                                                           zclSE_AppCallbacks_t *pCBs )
   5353          {
   5354            if ( pCBs->pfnPricing_GetConsolidatedBill )
   5355            {
   5356              zclCCGetConsolidatedBill_t cmd;
   5357          
   5358              zclSE_ParseInCmd_GetConsolidatedBill( &cmd, &(pInMsg->pData[0]),
   5359                                                    pInMsg->pDataLen );
   5360          
   5361              pCBs->pfnPricing_GetConsolidatedBill( &cmd, &(pInMsg->msg->srcAddr),
   5362                                                    pInMsg->hdr.transSeqNum );
   5363              return ZCL_STATUS_CMD_HAS_RSP;
   5364            }
   5365          
   5366            return ZFailure;
   5367          }
   5368          
   5369          /*********************************************************************
   5370           * @fn      zclSE_ProcessInCmd_Pricing_CPPEventResponse
   5371           *
   5372           * @brief   Process in the received a CPP Event Response.
   5373           *
   5374           * @param   pInMsg - pointer to the incoming message
   5375           * @param   pCBs - pointer to the application call back function
   5376           *
   5377           * @return  ZStatus_t - ZFailure @ Unsupported
   5378           *                      ZCL_STATUS_CMD_HAS_RSP @ Supported and do
   5379           *                                           not need default rsp
   5380           */
   5381          static ZStatus_t zclSE_ProcessInCmd_Pricing_CPPEventResponse( zclIncoming_t *pInMsg,
   5382                                                                        zclSE_AppCallbacks_t *pCBs )
   5383          {
   5384            if ( pCBs->pfnPricing_CPPEventResponse )
   5385            {
   5386              zclCCCPPEventResponse_t cmd;
   5387          
   5388              zclSE_ParseInCmd_CPPEventResponse( &cmd, &(pInMsg->pData[0]),
   5389                                                 pInMsg->pDataLen );
   5390          
   5391              pCBs->pfnPricing_CPPEventResponse( &cmd, &(pInMsg->msg->srcAddr),
   5392                                                 pInMsg->hdr.transSeqNum );
   5393              return ZCL_STATUS_CMD_HAS_RSP;
   5394            }
   5395          
   5396            return ZFailure;
   5397          }
   5398          #endif  // SE_UK_EXT
   5399          #endif  // ZCL_PRICING
   5400          
   5401          
   5402          #ifdef ZCL_MESSAGE
   5403          /*********************************************************************
   5404           * @fn      zclSE_ProcessInMessageCmds
   5405           *
   5406           * @brief   Callback from ZCL to process incoming Commands specific
   5407           *          to this cluster library on a command ID basis
   5408           *
   5409           * @param   pInMsg - pointer to the incoming message
   5410           * @param   pCBs - pointer to the application call back function
   5411           *
   5412           * @return  ZStatus_t
   5413           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   5414          static ZStatus_t zclSE_ProcessInMessageCmds( zclIncoming_t *pInMsg,
   \                     zclSE_ProcessInMessageCmds:
   5415                                                        zclSE_AppCallbacks_t *pCBs )
   5416          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 20
   \   000005   74EC         MOV     A,#-0x14
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   EA           MOV     A,R2
   \   00000B   FE           MOV     R6,A
   \   00000C   EB           MOV     A,R3
   \   00000D   FF           MOV     R7,A
   \   00000E   8C..         MOV     ?V0 + 0,R4
   \   000010   8D..         MOV     ?V0 + 1,R5
   5417            ZStatus_t stat;
   5418          
   5419            if ( zcl_ServerCmd( pInMsg->hdr.fc.direction ) )
   \   000012   12....       LCALL   ??Subroutine169_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_357:
   \   000015   7052         JNZ     ??zclSE_ProcessInMessageCmds_0
   5420            {
   5421              // Process Client commands, received by server
   5422              switch ( pInMsg->hdr.commandID )
   \   000017   E0           MOVX    A,@DPTR
   \   000018   6005         JZ      ??zclSE_ProcessInMessageCmds_1
   \   00001A   14           DEC     A
   \   00001B   601F         JZ      ??zclSE_ProcessInMessageCmds_2
   \   00001D   8046         SJMP    ??zclSE_ProcessInMessageCmds_3
   5423              {
   5424                case COMMAND_SE_GET_LAST_MESSAGE:
   5425                  stat = zclSE_ProcessInCmd_Message_GetLastMessage( pInMsg, pCBs );
   \                     ??zclSE_ProcessInMessageCmds_1:
   \   00001F   EC           MOV     A,R4
   \   000020   242A         ADD     A,#0x2a
   \   000022   12....       LCALL   ?Subroutine11 & 0xFFFF
   \                     ??CrossCallReturnLabel_461:
   \   000025   603E         JZ      ??zclSE_ProcessInMessageCmds_3
   \   000027                ; Setup parameters for indirect call
   \   000027   12....       LCALL   ?Subroutine29 & 0xFFFF
   \                     ??CrossCallReturnLabel_26:
   \   00002A   242A         ADD     A,#0x2a
   \   00002C   F582         MOV     DPL,A
   \   00002E   ED           MOV     A,R5
   \   00002F   12....       LCALL   ??Subroutine193_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_517:
   \   000032   12....       LCALL   ?Subroutine61 & 0xFFFF
   \                     ??CrossCallReturnLabel_84:
   \   000035   12....       LCALL   ?CALL_IND
   \   000038   79FF         MOV     R1,#-0x1
   \   00003A   8055         SJMP    ??zclSE_ProcessInMessageCmds_4
   5426                  break;
   5427          
   5428                case COMMAND_SE_MESSAGE_CONFIRMATION:
   5429                  stat = zclSE_ProcessInCmd_Message_MessageConfirmation( pInMsg, pCBs );
   \                     ??zclSE_ProcessInMessageCmds_2:
   \   00003C   EC           MOV     A,R4
   \   00003D   242C         ADD     A,#0x2c
   \   00003F   12....       LCALL   ?Subroutine11 & 0xFFFF
   \                     ??CrossCallReturnLabel_462:
   \   000042   6021         JZ      ??zclSE_ProcessInMessageCmds_3
   \   000044                ; Setup parameters for call to function zclSE_ParseInCmd_MessageConfirmation
   \   000044   12....       LCALL   ?Subroutine35 & 0xFFFF
   \                     ??CrossCallReturnLabel_39:
   \   000047   7409         MOV     A,#0x9
   \   000049   12....       LCALL   ?XSTACK_DISP0_8
   \   00004C   AA82         MOV     R2,DPL
   \   00004E   AB83         MOV     R3,DPH
   \   000050   12....       LCALL   ??zclSE_ParseInCmd_MessageConfirmation?relay
   \   000053                ; Setup parameters for indirect call
   \   000053   12....       LCALL   ?Subroutine42 & 0xFFFF
   \                     ??CrossCallReturnLabel_351:
   \   000056   7409         MOV     A,#0x9
   \   000058   12....       LCALL   ?XSTACK_DISP0_8
   \   00005B   AA82         MOV     R2,DPL
   \   00005D   AB83         MOV     R3,DPH
   \   00005F   E5..         MOV     A,?V0 + 0
   \   000061   242C         ADD     A,#0x2c
   \   000063   8024         SJMP    ??zclSE_ProcessInMessageCmds_5
   5430                  break;
   5431          
   5432                default:
   5433                  stat = ZFailure;
   \                     ??zclSE_ProcessInMessageCmds_3:
   \   000065   7901         MOV     R1,#0x1
   5434                  break;
   \   000067   8028         SJMP    ??zclSE_ProcessInMessageCmds_4
   5435              }
   5436            }
   5437            else
   5438            {
   5439              // Process Server commands, received by client
   5440              switch ( pInMsg->hdr.commandID )
   \                     ??zclSE_ProcessInMessageCmds_0:
   \   000069   E0           MOVX    A,@DPTR
   \   00006A   6005         JZ      ??zclSE_ProcessInMessageCmds_6
   \   00006C   14           DEC     A
   \   00006D   6007         JZ      ??zclSE_ProcessInMessageCmds_7
   \   00006F   80F4         SJMP    ??zclSE_ProcessInMessageCmds_3
   5441              {
   5442                case COMMAND_SE_DISPLAY_MESSAGE:
   5443                  stat = zclSE_ProcessInCmd_Message_DisplayMessage( pInMsg, pCBs );
   \                     ??zclSE_ProcessInMessageCmds_6:
   \   000071                ; Setup parameters for call to function zclSE_ProcessInCmd_Message_DisplayMessage
   \   000071   12....       LCALL   ??zclSE_ProcessInCmd_Message_DisplayMessage?rel
   5444                  break;
   \   000074   801B         SJMP    ??zclSE_ProcessInMessageCmds_4
   5445          
   5446                case COMMAND_SE_CANCEL_MESSAGE:
   5447                  stat = zclSE_ProcessInCmd_Message_CancelMessage( pInMsg, pCBs );
   \                     ??zclSE_ProcessInMessageCmds_7:
   \   000076   EC           MOV     A,R4
   \   000077   2428         ADD     A,#0x28
   \   000079   12....       LCALL   ?Subroutine11 & 0xFFFF
   5448                  break;
   5449          
   5450                default:
   5451                  stat = ZFailure;
   5452                  break;
   5453              }
   5454            }
   \                     ??CrossCallReturnLabel_463:
   \   00007C   60E7         JZ      ??zclSE_ProcessInMessageCmds_3
   \   00007E                ; Setup parameters for call to function zclSE_ParseInCmd_CancelMessage
   \   00007E   12....       LCALL   ?Subroutine12 & 0xFFFF
   \                     ??CrossCallReturnLabel_2:
   \   000081   12....       LCALL   ??zclSE_ParseInCmd_CancelMessage?relay
   \   000084                ; Setup parameters for indirect call
   \   000084   12....       LCALL   ?Subroutine13 & 0xFFFF
   \                     ??CrossCallReturnLabel_6:
   \   000087   2428         ADD     A,#0x28
   \                     ??zclSE_ProcessInMessageCmds_5:
   \   000089   12....       LCALL   ?Subroutine50 & 0xFFFF
   \                     ??CrossCallReturnLabel_422:
   \   00008C   12....       LCALL   ?CALL_IND
   \   00008F   7900         MOV     R1,#0x0
   5455          
   5456            return ( stat );
   \                     ??zclSE_ProcessInMessageCmds_4:
   \   000091   7414         MOV     A,#0x14
   \   000093   02....       LJMP    ??Subroutine182_0 & 0xFFFF
   5457          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine35:
   \   000000   12....       LCALL   ?Subroutine104 & 0xFFFF
   \                     ??CrossCallReturnLabel_162:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine13:
   \   000000   12....       LCALL   ?Subroutine101 & 0xFFFF
   \                     ??CrossCallReturnLabel_157:
   \   000003   E5..         MOV     A,?V0 + 0
   \   000005   22           RET
   5458          
   5459          /*********************************************************************
   5460           * @fn      zclSE_ProcessInCmd_Message_DisplayMessage
   5461           *
   5462           * @brief   Process in the received Display Message Command.
   5463           *
   5464           * @param   pInMsg - pointer to the incoming message
   5465           * @param   pCBs - pointer to the application call back function
   5466           *
   5467           * @return  ZStatus_t - ZFailure @ Unsupported
   5468           *                      ZSuccess @ Supported and send default rsp
   5469           *                      ZCL_STATUS_SOFTWARE_FAILURE @ ZStack memory allocation failure
   5470           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   5471          static ZStatus_t zclSE_ProcessInCmd_Message_DisplayMessage( zclIncoming_t *pInMsg,
   \                     zclSE_ProcessInCmd_Message_DisplayMessage:
   5472                                                                       zclSE_AppCallbacks_t *pCBs )
   5473          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 18
   \   000005   74EE         MOV     A,#-0x12
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   EA           MOV     A,R2
   \   00000B   FE           MOV     R6,A
   \   00000C   EB           MOV     A,R3
   \   00000D   FF           MOV     R7,A
   \   00000E   8C..         MOV     ?V0 + 0,R4
   \   000010   8D..         MOV     ?V0 + 1,R5
   5474            if ( pCBs->pfnMessage_DisplayMessage )
   \   000012   EC           MOV     A,R4
   \   000013   2426         ADD     A,#0x26
   \   000015   12....       LCALL   ?Subroutine11 & 0xFFFF
   \                     ??CrossCallReturnLabel_464:
   \   000018   602E         JZ      ??zclSE_ProcessInCmd_Message_DisplayMessage_0
   5475            {
   5476              zclCCDisplayMessage_t cmd;
   5477          
   5478              if ( zclSE_ParseInCmd_DisplayMessage( &cmd,  &(pInMsg->pData[0]), pInMsg->pDataLen ) == ZSuccess )
   \   00001A                ; Setup parameters for call to function zclSE_ParseInCmd_DisplayMessage
   \   00001A   12....       LCALL   ?Subroutine12 & 0xFFFF
   \                     ??CrossCallReturnLabel_3:
   \   00001D   12....       LCALL   ??zclSE_ParseInCmd_DisplayMessage?relay
   \   000020   E9           MOV     A,R1
   \   000021   7021         JNZ     ??zclSE_ProcessInCmd_Message_DisplayMessage_1
   5479              {
   5480                pCBs->pfnMessage_DisplayMessage( &cmd, &(pInMsg->msg->srcAddr),
   5481                                              pInMsg->hdr.transSeqNum );
   \   000023                ; Setup parameters for indirect call
   \   000023   12....       LCALL   ?Subroutine13 & 0xFFFF
   \                     ??CrossCallReturnLabel_7:
   \   000026   2426         ADD     A,#0x26
   \   000028   12....       LCALL   ?Subroutine50 & 0xFFFF
   \                     ??CrossCallReturnLabel_423:
   \   00002B   12....       LCALL   ?CALL_IND
   5482          
   5483                // Free memory allocated in zclSE_ParseInCmd_DiplayMessage()
   5484                if ( cmd.msgString.pStr != NULL )
   \   00002E   7410         MOV     A,#0x10
   \   000030   12....       LCALL   ?XSTACK_DISP0_8
   \   000033   12....       LCALL   ??Subroutine186_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_444:
   \   000036   6008         JZ      ??CrossCallReturnLabel_59
   5485                {
   5486                  osal_mem_free( cmd.msgString.pStr );
   \   000038                ; Setup parameters for call to function osal_mem_free
   \   000038   7410         MOV     A,#0x10
   \   00003A   12....       LCALL   ?XSTACK_DISP0_8
   \   00003D   12....       LCALL   ?Subroutine48 & 0xFFFF
   5487                }
   5488          
   5489                return ZSuccess;
   \                     ??CrossCallReturnLabel_59:
   \   000040   7900         MOV     R1,#0x0
   \   000042   8006         SJMP    ??zclSE_ProcessInCmd_Message_DisplayMessage_2
   5490              }
   5491              else
   5492              {
   5493                return ZCL_STATUS_SOFTWARE_FAILURE;
   \                     ??zclSE_ProcessInCmd_Message_DisplayMessage_1:
   \   000044   79C1         MOV     R1,#-0x3f
   \   000046   8002         SJMP    ??zclSE_ProcessInCmd_Message_DisplayMessage_2
   5494              }
   5495            }
   5496          
   5497            return ZFailure;
   \                     ??zclSE_ProcessInCmd_Message_DisplayMessage_0:
   \   000048   7901         MOV     R1,#0x1
   \                     ??zclSE_ProcessInCmd_Message_DisplayMessage_2:
   \   00004A   7412         MOV     A,#0x12
   \   00004C   02....       LJMP    ??Subroutine182_0 & 0xFFFF
   5498          }
   5499          
   5500          /*********************************************************************
   5501           * @fn      zclSE_ProcessInCmd_Message_CancelMessage
   5502           *
   5503           * @brief   Process in the received Cancel Message Command.
   5504           *
   5505           * @param   pInMsg - pointer to the incoming message
   5506           * @param   pCBs - pointer to the application call back function
   5507           *
   5508           * @return  ZStatus_t - ZFailure @ Unsupported
   5509           *                      ZSuccess @ Supported and send default rsp
   5510           */
   5511          static ZStatus_t zclSE_ProcessInCmd_Message_CancelMessage( zclIncoming_t *pInMsg,
   5512                                                                      zclSE_AppCallbacks_t *pCBs )
   5513          {
   5514            if ( pCBs->pfnMessage_CancelMessage )
   5515            {
   5516              zclCCCancelMessage_t cmd;
   5517          
   5518              zclSE_ParseInCmd_CancelMessage( &cmd,  &(pInMsg->pData[0]), pInMsg->pDataLen );
   5519          
   5520              pCBs->pfnMessage_CancelMessage( &cmd, &(pInMsg->msg->srcAddr),
   5521                                             pInMsg->hdr.transSeqNum );
   5522              return ZSuccess;
   5523            }
   5524          
   5525            return ZFailure;
   5526          }
   5527          
   5528          /*********************************************************************
   5529           * @fn      zclSE_ProcessInCmd_Message_GetLastMessage
   5530           *
   5531           * @brief   Process in the received Get Last Message Command.
   5532           *
   5533           * @param   pInMsg - pointer to the incoming message
   5534           * @param   pCBs - pointer to the application call back function
   5535           *
   5536           * @return  ZStatus_t - ZFailure @ Unsupported
   5537           *                      ZCL_STATUS_CMD_HAS_RSP @ Supported and do
   5538           *                                           not need default rsp
   5539           */
   5540          static ZStatus_t zclSE_ProcessInCmd_Message_GetLastMessage( zclIncoming_t *pInMsg,
   5541                                                                       zclSE_AppCallbacks_t *pCBs )
   5542          {
   5543            if ( pCBs->pfnMessage_GetLastMessage )
   5544            {
   5545              pCBs->pfnMessage_GetLastMessage( &(pInMsg->msg->srcAddr), pInMsg->hdr.transSeqNum );
   5546              return ZCL_STATUS_CMD_HAS_RSP;
   5547            }
   5548          
   5549            return ZFailure;
   5550          }
   5551          
   5552          /*********************************************************************
   5553           * @fn      zclSE_ProcessInCmd_Message_MessageConfirmation
   5554           *
   5555           * @brief   Process in the received Message Confirmation.
   5556           *
   5557           * @param   pInMsg - pointer to the incoming message
   5558           * @param   pCBs - pointer to the application call back function
   5559           *
   5560           * @return  ZStatus_t - ZFailure @ Unsupported
   5561           *                      ZSuccess @ Supported and send default rsp
   5562           */
   5563          static ZStatus_t zclSE_ProcessInCmd_Message_MessageConfirmation( zclIncoming_t *pInMsg,
   5564                                                                           zclSE_AppCallbacks_t *pCBs )
   5565          {
   5566            if ( pCBs->pfnMessage_MessageConfirmation )
   5567            {
   5568              zclCCMessageConfirmation_t cmd;
   5569          
   5570              zclSE_ParseInCmd_MessageConfirmation( &cmd, &(pInMsg->pData[0]),
   5571                                                    pInMsg->pDataLen );
   5572              pCBs->pfnMessage_MessageConfirmation( &cmd, &(pInMsg->msg->srcAddr),
   5573                                                    pInMsg->hdr.transSeqNum );
   5574              return ZSuccess;
   5575            }
   5576          
   5577            return ZFailure;
   5578          }
   5579          #endif  // ZCL_MESSAGE
   5580          
   5581          
   5582          #ifdef ZCL_LOAD_CONTROL
   5583          /*********************************************************************
   5584           * @fn      zclSE_ProcessInLoadControlCmds
   5585           *
   5586           * @brief   Callback from ZCL to process incoming Commands specific
   5587           *          to this cluster library on a command ID basis
   5588           *
   5589           * @param   pInMsg - pointer to the incoming message
   5590           * @param   pCBs - pointer to the application call back function
   5591           *
   5592           * @return  ZStatus_t
   5593           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   5594          static ZStatus_t zclSE_ProcessInLoadControlCmds( zclIncoming_t *pInMsg,
   \                     zclSE_ProcessInLoadControlCmds:
   5595                                                            zclSE_AppCallbacks_t *pCBs )
   5596          {
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 19
   \   000005   74ED         MOV     A,#-0x13
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   EA           MOV     A,R2
   \   00000B   FE           MOV     R6,A
   \   00000C   EB           MOV     A,R3
   \   00000D   FF           MOV     R7,A
   \   00000E   8C..         MOV     ?V0 + 0,R4
   \   000010   8D..         MOV     ?V0 + 1,R5
   5597            ZStatus_t stat;
   5598          
   5599            if ( zcl_ServerCmd( pInMsg->hdr.fc.direction ) )
   \   000012   12....       LCALL   ??Subroutine169_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_358:
   \   000015   7054         JNZ     ??zclSE_ProcessInLoadControlCmds_0
   5600            {
   5601              // Process Client commands, received by server
   5602              switch ( pInMsg->hdr.commandID )
   \   000017   E0           MOVX    A,@DPTR
   \   000018   6005         JZ      ??zclSE_ProcessInLoadControlCmds_1
   \   00001A   14           DEC     A
   \   00001B   6008         JZ      ??zclSE_ProcessInLoadControlCmds_2
   \   00001D   8048         SJMP    ??zclSE_ProcessInLoadControlCmds_3
   5603              {
   5604                case COMMAND_SE_REPORT_EVENT_STATUS:
   5605                  stat = zclSE_ProcessInCmd_LoadControl_ReportEventStatus( pInMsg, pCBs );
   \                     ??zclSE_ProcessInLoadControlCmds_1:
   \   00001F                ; Setup parameters for call to function zclSE_ProcessInCmd_LoadControl_ReportEventStatus
   \   00001F   12....       LCALL   ??zclSE_ProcessInCmd_LoadControl_ReportEventSta
   5606                  break;
   \   000022   02....       LJMP    ??zclSE_ProcessInLoadControlCmds_4 & 0xFFFF
   5607          
   5608                case COMMAND_SE_GET_SCHEDULED_EVENT:
   5609                  stat = zclSE_ProcessInCmd_LoadControl_GetScheduledEvents( pInMsg, pCBs );
   \                     ??zclSE_ProcessInLoadControlCmds_2:
   \   000025   EC           MOV     A,R4
   \   000026   2414         ADD     A,#0x14
   \   000028   12....       LCALL   ?Subroutine11 & 0xFFFF
   \                     ??CrossCallReturnLabel_465:
   \   00002B   603A         JZ      ??zclSE_ProcessInLoadControlCmds_3
   \   00002D   EE           MOV     A,R6
   \   00002E   2408         ADD     A,#0x8
   \   000030   F5..         MOV     ?V0 + 2,A
   \   000032   EF           MOV     A,R7
   \   000033   3400         ADDC    A,#0x0
   \   000035   F5..         MOV     ?V0 + 3,A
   \   000037                ; Setup parameters for call to function osal_build_uint32
   \   000037   7904         MOV     R1,#0x4
   \   000039   85..82       MOV     DPL,?V0 + 2
   \   00003C   12....       LCALL   ??Subroutine173_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_374:
   \   00003F   12....       LCALL   ?XSTACK_DISP0_8
   \   000042   12....       LCALL   ?XSTORE_R2345
   \   000045   85..82       MOV     DPL,?V0 + 2
   \   000048   85..83       MOV     DPH,?V0 + 3
   \   00004B   12....       LCALL   ??Subroutine175_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_387:
   \   00004E   C0E0         PUSH    A
   \   000050   7405         MOV     A,#0x5
   \   000052   12....       LCALL   ?XSTACK_DISP0_8
   \   000055   D0E0         POP     A
   \   000057   12....       LCALL   ?Subroutine20 & 0xFFFF
   \                     ??CrossCallReturnLabel_373:
   \   00005A   12....       LCALL   ?XSTACK_DISP0_8
   \   00005D   AA82         MOV     R2,DPL
   \   00005F   AB83         MOV     R3,DPH
   \   000061   E5..         MOV     A,?V0 + 0
   \   000063   2414         ADD     A,#0x14
   \   000065   804B         SJMP    ??zclSE_ProcessInLoadControlCmds_5
   5610                  break;
   5611          
   5612                default:
   5613                  stat = ZFailure;
   \                     ??zclSE_ProcessInLoadControlCmds_3:
   \   000067   7901         MOV     R1,#0x1
   5614                  break;
   \   000069   804F         SJMP    ??zclSE_ProcessInLoadControlCmds_4
   5615              }
   5616            }
   5617            else
   5618            {
   5619              // Process Server commands, received by client
   5620              switch ( pInMsg->hdr.commandID )
   \                     ??zclSE_ProcessInLoadControlCmds_0:
   \   00006B   E0           MOVX    A,@DPTR
   \   00006C   6008         JZ      ??zclSE_ProcessInLoadControlCmds_6
   \   00006E   14           DEC     A
   \   00006F   600A         JZ      ??zclSE_ProcessInLoadControlCmds_7
   \   000071   14           DEC     A
   \   000072   602E         JZ      ??zclSE_ProcessInLoadControlCmds_8
   \   000074   80F1         SJMP    ??zclSE_ProcessInLoadControlCmds_3
   5621              {
   5622                case COMMAND_SE_LOAD_CONTROL_EVENT:
   5623                  stat = zclSE_ProcessInCmd_LoadControl_LoadControlEvent( pInMsg, pCBs );
   \                     ??zclSE_ProcessInLoadControlCmds_6:
   \   000076                ; Setup parameters for call to function zclSE_ProcessInCmd_LoadControl_LoadControlEvent
   \   000076   12....       LCALL   ??zclSE_ProcessInCmd_LoadControl_LoadControlEve
   5624                  break;
   \   000079   803F         SJMP    ??zclSE_ProcessInLoadControlCmds_4
   5625          
   5626                case COMMAND_SE_CANCEL_LOAD_CONTROL_EVENT:
   5627                  stat = zclSE_ProcessInCmd_LoadControl_CancelLoadControlEvent( pInMsg, pCBs );
   \                     ??zclSE_ProcessInLoadControlCmds_7:
   \   00007B   EC           MOV     A,R4
   \   00007C   240E         ADD     A,#0xe
   \   00007E   12....       LCALL   ?Subroutine11 & 0xFFFF
   \                     ??CrossCallReturnLabel_466:
   \   000081   60E4         JZ      ??zclSE_ProcessInLoadControlCmds_3
   \   000083                ; Setup parameters for call to function zclSE_ParseInCmd_CancelLoadControlEvent
   \   000083   12....       LCALL   ?Subroutine35 & 0xFFFF
   \                     ??CrossCallReturnLabel_40:
   \   000086   7406         MOV     A,#0x6
   \   000088   12....       LCALL   ?XSTACK_DISP0_8
   \   00008B   AA82         MOV     R2,DPL
   \   00008D   AB83         MOV     R3,DPH
   \   00008F   12....       LCALL   ??zclSE_ParseInCmd_CancelLoadControlEvent?relay
   \   000092                ; Setup parameters for indirect call
   \   000092   12....       LCALL   ?Subroutine41 & 0xFFFF
   \                     ??CrossCallReturnLabel_52:
   \   000095   12....       LCALL   ?XSTACK_DISP0_8
   \   000098   AA82         MOV     R2,DPL
   \   00009A   AB83         MOV     R3,DPH
   \   00009C   E5..         MOV     A,?V0 + 0
   \   00009E   240E         ADD     A,#0xe
   \   0000A0   8010         SJMP    ??zclSE_ProcessInLoadControlCmds_5
   5628                  break;
   5629          
   5630                case COMMAND_SE_CANCEL_ALL_LOAD_CONTROL_EVENT:
   5631                  stat = zclSE_ProcessInCmd_LoadControl_CancelAllLoadControlEvents( pInMsg, pCBs );
   \                     ??zclSE_ProcessInLoadControlCmds_8:
   \   0000A2   EC           MOV     A,R4
   \   0000A3   2410         ADD     A,#0x10
   \   0000A5   12....       LCALL   ?Subroutine11 & 0xFFFF
   5632                  break;
   5633          
   5634                default:
   5635                  stat = ZFailure;
   5636                  break;
   5637              }
   5638            }
   \                     ??CrossCallReturnLabel_467:
   \   0000A8   60BD         JZ      ??zclSE_ProcessInLoadControlCmds_3
   \   0000AA   12....       LCALL   ?Subroutine36 & 0xFFFF
   \                     ??CrossCallReturnLabel_382:
   \   0000AD                ; Setup parameters for indirect call
   \   0000AD   12....       LCALL   ?Subroutine13 & 0xFFFF
   \                     ??CrossCallReturnLabel_8:
   \   0000B0   2410         ADD     A,#0x10
   \                     ??zclSE_ProcessInLoadControlCmds_5:
   \   0000B2   12....       LCALL   ?Subroutine50 & 0xFFFF
   \                     ??CrossCallReturnLabel_424:
   \   0000B5   12....       LCALL   ?CALL_IND
   \   0000B8   7900         MOV     R1,#0x0
   5639          
   5640            return ( stat );
   \                     ??zclSE_ProcessInLoadControlCmds_4:
   \   0000BA   02....       LJMP    ?Subroutine8 & 0xFFFF
   5641          }
   5642          
   5643          /*********************************************************************
   5644           * @fn      zclSE_ProcessInCmd_LoadControl_LoadControlEvent
   5645           *
   5646           * @brief   Process in the received Load Control Event.
   5647           *
   5648           * @param   pInMsg - pointer to the incoming message
   5649           * @param   pCBs - pointer to the application call back function
   5650           *
   5651           * @return  ZStatus_t - ZFailure @ Unsupported
   5652           *                      ZCL_STATUS_CMD_HAS_RSP @ Supported and do
   5653           *                                           not need default rsp
   5654           *                      ZCL_STATUS_INVALID_FIELD @ Invalid field value
   5655           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   5656          static ZStatus_t zclSE_ProcessInCmd_LoadControl_LoadControlEvent( zclIncoming_t *pInMsg,
   \                     zclSE_ProcessInCmd_LoadControl_LoadControlEvent:
   5657                                                                            zclSE_AppCallbacks_t *pCBs )
   5658          {
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 24
   \   000005   74E8         MOV     A,#-0x18
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   EA           MOV     A,R2
   \   00000B   FE           MOV     R6,A
   \   00000C   EB           MOV     A,R3
   \   00000D   FF           MOV     R7,A
   \   00000E   8C..         MOV     ?V0 + 0,R4
   \   000010   8D..         MOV     ?V0 + 1,R5
   5659            uint8 status = ZSuccess;
   \   000012   75..00       MOV     ?V0 + 2,#0x0
   5660          
   5661            if ( pCBs->pfnLoadControl_LoadControlEvent )
   \   000015   EC           MOV     A,R4
   \   000016   240C         ADD     A,#0xc
   \   000018   12....       LCALL   ?Subroutine11 & 0xFFFF
   \                     ??CrossCallReturnLabel_468:
   \   00001B   7003         JNZ     $+5
   \   00001D   02....       LJMP    ??zclSE_ProcessInCmd_LoadControl_LoadControlEve_1 & 0xFFFF
   5662            {
   5663              zclCCLoadControlEvent_t cmd;
   5664          
   5665              zclSE_ParseInCmd_LoadControlEvent( &cmd, &(pInMsg->pData[0]), pInMsg->pDataLen );
   \   000020                ; Setup parameters for call to function zclSE_ParseInCmd_LoadControlEvent
   \   000020   12....       LCALL   ?Subroutine12 & 0xFFFF
   \                     ??CrossCallReturnLabel_4:
   \   000023   12....       LCALL   ??zclSE_ParseInCmd_LoadControlEvent?relay
   5666          
   5667              // Range checking
   5668              if ( cmd.durationInMinutes > MAX_DURATION_IN_MINUTES_SE_LOAD_CONTROL )
   \   000026   740C         MOV     A,#0xc
   \   000028   12....       LCALL   ?XSTACK_DISP0_8
   \   00002B   C3           CLR     C
   \   00002C   E0           MOVX    A,@DPTR
   \   00002D   94A1         SUBB    A,#-0x5f
   \   00002F   A3           INC     DPTR
   \   000030   E0           MOVX    A,@DPTR
   \   000031   9405         SUBB    A,#0x5
   \   000033   4003         JC      ??zclSE_ProcessInCmd_LoadControl_LoadControlEve_2
   5669              {
   5670                status = ZCL_STATUS_INVALID_FIELD;
   \   000035   75..85       MOV     ?V0 + 2,#-0x7b
   5671              }
   5672          
   5673              if ( cmd.criticalityLevel > MAX_CRITICAL_LEVEL_SE_LOAD_CONTROL )
   \                     ??zclSE_ProcessInCmd_LoadControl_LoadControlEve_2:
   \   000038   740E         MOV     A,#0xe
   \   00003A   12....       LCALL   ?XSTACK_DISP0_8
   \   00003D   E0           MOVX    A,@DPTR
   \   00003E   C3           CLR     C
   \   00003F   9410         SUBB    A,#0x10
   \   000041   4003         JC      ??zclSE_ProcessInCmd_LoadControl_LoadControlEve_3
   5674              {
   5675                status = ZCL_STATUS_INVALID_FIELD;
   \   000043   75..85       MOV     ?V0 + 2,#-0x7b
   5676              }
   5677          
   5678              if ( cmd. coolingTemperatureSetPoint != SE_OPTIONAL_FIELD_TEMPERATURE_SET_POINT &&
   5679                   cmd. coolingTemperatureSetPoint > MAX_TEMPERATURE_SETPOINT_SE_LOAD_CONTROL )
   \                     ??zclSE_ProcessInCmd_LoadControl_LoadControlEve_3:
   \   000046   7411         MOV     A,#0x11
   \   000048   12....       LCALL   ?XSTACK_DISP0_8
   \   00004B   E0           MOVX    A,@DPTR
   \   00004C   7004         JNZ     ??zclSE_ProcessInCmd_LoadControl_LoadControlEve_4
   \   00004E   A3           INC     DPTR
   \   00004F   E0           MOVX    A,@DPTR
   \   000050   6480         XRL     A,#0x80
   \                     ??zclSE_ProcessInCmd_LoadControl_LoadControlEve_4:
   \   000052   600F         JZ      ??zclSE_ProcessInCmd_LoadControl_LoadControlEve_5
   \   000054   7411         MOV     A,#0x11
   \   000056   12....       LCALL   ?XSTACK_DISP0_8
   \   000059   C3           CLR     C
   \   00005A   A3           INC     DPTR
   \   00005B   E0           MOVX    A,@DPTR
   \   00005C   9480         SUBB    A,#-0x80
   \   00005E   4003         JC      ??zclSE_ProcessInCmd_LoadControl_LoadControlEve_5
   5680              {
   5681                status = ZCL_STATUS_INVALID_FIELD;
   \   000060   75..85       MOV     ?V0 + 2,#-0x7b
   5682              }
   5683          
   5684              if ( cmd. heatingTemperatureSetPoint != SE_OPTIONAL_FIELD_TEMPERATURE_SET_POINT &&
   5685                   cmd. heatingTemperatureSetPoint > MAX_TEMPERATURE_SETPOINT_SE_LOAD_CONTROL )
   \                     ??zclSE_ProcessInCmd_LoadControl_LoadControlEve_5:
   \   000063   7413         MOV     A,#0x13
   \   000065   12....       LCALL   ?XSTACK_DISP0_8
   \   000068   E0           MOVX    A,@DPTR
   \   000069   7004         JNZ     ??zclSE_ProcessInCmd_LoadControl_LoadControlEve_6
   \   00006B   A3           INC     DPTR
   \   00006C   E0           MOVX    A,@DPTR
   \   00006D   6480         XRL     A,#0x80
   \                     ??zclSE_ProcessInCmd_LoadControl_LoadControlEve_6:
   \   00006F   600F         JZ      ??zclSE_ProcessInCmd_LoadControl_LoadControlEve_7
   \   000071   7413         MOV     A,#0x13
   \   000073   12....       LCALL   ?XSTACK_DISP0_8
   \   000076   C3           CLR     C
   \   000077   A3           INC     DPTR
   \   000078   E0           MOVX    A,@DPTR
   \   000079   9480         SUBB    A,#-0x80
   \   00007B   4003         JC      ??zclSE_ProcessInCmd_LoadControl_LoadControlEve_7
   5686              {
   5687                status = ZCL_STATUS_INVALID_FIELD;
   \   00007D   75..85       MOV     ?V0 + 2,#-0x7b
   5688              }
   5689          
   5690              if ( cmd.averageLoadAdjustmentPercentage != SE_OPTIONAL_FIELD_INT8 &&
   5691                  (cmd.averageLoadAdjustmentPercentage < MIN_AVERAGE_LOAD_ADJUSTMENT_PERCENTAGE_SE ||
   5692                   cmd.averageLoadAdjustmentPercentage > MAX_AVERAGE_LOAD_ADJUSTMENT_PERCENTAGE_SE ) )
   \                     ??zclSE_ProcessInCmd_LoadControl_LoadControlEve_7:
   \   000080   7415         MOV     A,#0x15
   \   000082   12....       LCALL   ?XSTACK_DISP0_8
   \   000085   E0           MOVX    A,@DPTR
   \   000086   6480         XRL     A,#0x80
   \   000088   600B         JZ      ??zclSE_ProcessInCmd_LoadControl_LoadControlEve_8
   \   00008A   E0           MOVX    A,@DPTR
   \   00008B   2464         ADD     A,#0x64
   \   00008D   C3           CLR     C
   \   00008E   94C9         SUBB    A,#-0x37
   \   000090   4003         JC      ??zclSE_ProcessInCmd_LoadControl_LoadControlEve_8
   5693              {
   5694                status = ZCL_STATUS_INVALID_FIELD;
   \   000092   75..85       MOV     ?V0 + 2,#-0x7b
   5695              }
   5696          
   5697              if ( cmd. dutyCycle != SE_OPTIONAL_FIELD_UINT8 &&
   5698                   cmd. dutyCycle > MAX_DUTY_CYCLE_SE_LOAD_CONTROL )
   \                     ??zclSE_ProcessInCmd_LoadControl_LoadControlEve_8:
   \   000095   7416         MOV     A,#0x16
   \   000097   12....       LCALL   ?XSTACK_DISP0_8
   \   00009A   E0           MOVX    A,@DPTR
   \   00009B   F4           CPL     A
   \   00009C   6009         JZ      ??zclSE_ProcessInCmd_LoadControl_LoadControlEve_9
   \   00009E   E0           MOVX    A,@DPTR
   \   00009F   C3           CLR     C
   \   0000A0   9465         SUBB    A,#0x65
   \   0000A2   4003         JC      ??zclSE_ProcessInCmd_LoadControl_LoadControlEve_9
   5699              {
   5700                status = ZCL_STATUS_INVALID_FIELD;
   \   0000A4   75..85       MOV     ?V0 + 2,#-0x7b
   5701              }
   5702          
   5703              // If any of the four fields is optional, set them all to optional
   5704              if ( cmd.coolingTemperatureOffset == SE_OPTIONAL_FIELD_UINT8 ||
   5705                   cmd.heatingTemperatureOffset == SE_OPTIONAL_FIELD_UINT8 ||
   5706                   cmd.coolingTemperatureSetPoint == SE_OPTIONAL_FIELD_UINT16 ||
   5707                   cmd.heatingTemperatureSetPoint == SE_OPTIONAL_FIELD_UINT16 )
   \                     ??zclSE_ProcessInCmd_LoadControl_LoadControlEve_9:
   \   0000A7   740F         MOV     A,#0xf
   \   0000A9   12....       LCALL   ?XSTACK_DISP0_8
   \   0000AC   E0           MOVX    A,@DPTR
   \   0000AD   F4           CPL     A
   \   0000AE   6025         JZ      ??zclSE_ProcessInCmd_LoadControl_LoadControlEve_10
   \   0000B0   7410         MOV     A,#0x10
   \   0000B2   12....       LCALL   ?XSTACK_DISP0_8
   \   0000B5   E0           MOVX    A,@DPTR
   \   0000B6   F4           CPL     A
   \   0000B7   601C         JZ      ??zclSE_ProcessInCmd_LoadControl_LoadControlEve_10
   \   0000B9   7411         MOV     A,#0x11
   \   0000BB   12....       LCALL   ?XSTACK_DISP0_8
   \   0000BE   E0           MOVX    A,@DPTR
   \   0000BF   F4           CPL     A
   \   0000C0   7003         JNZ     ??zclSE_ProcessInCmd_LoadControl_LoadControlEve_11
   \   0000C2   A3           INC     DPTR
   \   0000C3   E0           MOVX    A,@DPTR
   \   0000C4   F4           CPL     A
   \                     ??zclSE_ProcessInCmd_LoadControl_LoadControlEve_11:
   \   0000C5   600E         JZ      ??zclSE_ProcessInCmd_LoadControl_LoadControlEve_10
   \   0000C7   7413         MOV     A,#0x13
   \   0000C9   12....       LCALL   ?XSTACK_DISP0_8
   \   0000CC   E0           MOVX    A,@DPTR
   \   0000CD   F4           CPL     A
   \   0000CE   7003         JNZ     ??zclSE_ProcessInCmd_LoadControl_LoadControlEve_12
   \   0000D0   A3           INC     DPTR
   \   0000D1   E0           MOVX    A,@DPTR
   \   0000D2   F4           CPL     A
   \                     ??zclSE_ProcessInCmd_LoadControl_LoadControlEve_12:
   \   0000D3   7024         JNZ     ??zclSE_ProcessInCmd_LoadControl_LoadControlEve_13
   5708              {
   5709                cmd.coolingTemperatureOffset = SE_OPTIONAL_FIELD_UINT8;
   \                     ??zclSE_ProcessInCmd_LoadControl_LoadControlEve_10:
   \   0000D5   740F         MOV     A,#0xf
   \   0000D7   12....       LCALL   ?XSTACK_DISP0_8
   \   0000DA   74FF         MOV     A,#-0x1
   \   0000DC   F0           MOVX    @DPTR,A
   5710                cmd.heatingTemperatureOffset = SE_OPTIONAL_FIELD_UINT8;
   \   0000DD   7410         MOV     A,#0x10
   \   0000DF   12....       LCALL   ?XSTACK_DISP0_8
   \   0000E2   74FF         MOV     A,#-0x1
   \   0000E4   F0           MOVX    @DPTR,A
   5711                cmd.coolingTemperatureSetPoint = SE_OPTIONAL_FIELD_UINT16;
   \   0000E5   7411         MOV     A,#0x11
   \   0000E7   12....       LCALL   ?XSTACK_DISP0_8
   \   0000EA   74FF         MOV     A,#-0x1
   \   0000EC   F0           MOVX    @DPTR,A
   \   0000ED   A3           INC     DPTR
   \   0000EE   F0           MOVX    @DPTR,A
   5712                cmd.heatingTemperatureSetPoint = SE_OPTIONAL_FIELD_UINT16;
   \   0000EF   7413         MOV     A,#0x13
   \   0000F1   12....       LCALL   ?XSTACK_DISP0_8
   \   0000F4   74FF         MOV     A,#-0x1
   \   0000F6   F0           MOVX    @DPTR,A
   \   0000F7   A3           INC     DPTR
   \   0000F8   F0           MOVX    @DPTR,A
   5713              }
   5714          
   5715              pCBs->pfnLoadControl_LoadControlEvent( &cmd, &(pInMsg->msg->srcAddr), status, pInMsg->hdr.transSeqNum );
   \                     ??zclSE_ProcessInCmd_LoadControl_LoadControlEve_13:
   \   0000F9                ; Setup parameters for indirect call
   \   0000F9   8E82         MOV     DPL,R6
   \   0000FB   8F83         MOV     DPH,R7
   \   0000FD   A3           INC     DPTR
   \   0000FE   A3           INC     DPTR
   \   0000FF   A3           INC     DPTR
   \   000100   A3           INC     DPTR
   \   000101   A3           INC     DPTR
   \   000102   A3           INC     DPTR
   \   000103   E0           MOVX    A,@DPTR
   \   000104   F5..         MOV     ?V0 + 3,A
   \   000106   78..         MOV     R0,#?V0 + 3
   \   000108   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00010B   A9..         MOV     R1,?V0 + 2
   \   00010D   12....       LCALL   ??Subroutine171_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_370:
   \   000110   12....       LCALL   ?XSTACK_DISP0_8
   \   000113   AA82         MOV     R2,DPL
   \   000115   AB83         MOV     R3,DPH
   \   000117   E5..         MOV     A,?V0 + 0
   \   000119   240C         ADD     A,#0xc
   \   00011B   12....       LCALL   ?Subroutine50 & 0xFFFF
   \                     ??CrossCallReturnLabel_425:
   \   00011E   12....       LCALL   ?CALL_IND
   \   000121   7401         MOV     A,#0x1
   \   000123   12....       LCALL   ?DEALLOC_XSTACK8
   5716          
   5717              // The Load Control Event command has response, therefore,
   5718              // inform zclto not to send default response.
   5719              return ZCL_STATUS_CMD_HAS_RSP;
   \   000126   79FF         MOV     R1,#-0x1
   \   000128   8002         SJMP    ??zclSE_ProcessInCmd_LoadControl_LoadControlEve_14
   5720            }
   5721          
   5722            return ZFailure;  // Not supported
   \                     ??zclSE_ProcessInCmd_LoadControl_LoadControlEve_1:
   \   00012A   7901         MOV     R1,#0x1
   \                     ??zclSE_ProcessInCmd_LoadControl_LoadControlEve_14:
   \   00012C   7418         MOV     A,#0x18
   \   00012E   80..         SJMP    ??Subroutine176_0
   5723          }
   5724          
   5725          /*********************************************************************
   5726           * @fn      zclSE_ProcessInCmd_LoadControl_CancelLoadControlEvent
   5727           *
   5728           * @brief   Process in the received Cancel Load Control Event.
   5729           *
   5730           * @param   pInMsg - pointer to the incoming message
   5731           * @param   pCBs - pointer to the application call back function
   5732           *
   5733           * @return  ZStatus_t - ZFailure @ Unsupported
   5734           *                      ZSuccess @ Supported and send default rsp
   5735           */
   5736          static ZStatus_t zclSE_ProcessInCmd_LoadControl_CancelLoadControlEvent( zclIncoming_t *pInMsg,
   5737                                                                                  zclSE_AppCallbacks_t *pCBs )
   5738          {
   5739            if ( pCBs->pfnLoadControl_CancelLoadControlEvent )
   5740            {
   5741              zclCCCancelLoadControlEvent_t cmd;
   5742          
   5743              zclSE_ParseInCmd_CancelLoadControlEvent( &cmd, &(pInMsg->pData[0]), pInMsg->pDataLen );
   5744          
   5745              pCBs->pfnLoadControl_CancelLoadControlEvent( &cmd, &(pInMsg->msg->srcAddr), pInMsg->hdr.transSeqNum );
   5746              return ZSuccess;
   5747            }
   5748          
   5749            return ZFailure;
   5750          }
   5751          
   5752          /*********************************************************************
   5753           * @fn      zclSE_ProcessInCmd_LoadControl_CancelAllLoadControlEvent
   5754           *
   5755           * @brief   Process in the received Cancel All Load Control Event.
   5756           *
   5757           * @param   pInMsg - pointer to the incoming message
   5758           * @param   pCBs - pointer to the application call back function
   5759           *
   5760           * @return  ZStatus_t - ZFailure @ Unsupported
   5761           *                      ZSuccess @ Supported and send default rsp
   5762           */
   5763          static ZStatus_t zclSE_ProcessInCmd_LoadControl_CancelAllLoadControlEvents( zclIncoming_t *pInMsg,
   5764                                                                                       zclSE_AppCallbacks_t *pCBs )
   5765          {
   5766            if ( pCBs->pfnLoadControl_CancelAllLoadControlEvents )
   5767            {
   5768              zclCCCancelAllLoadControlEvents_t cmd;
   5769          
   5770              cmd.cancelControl = pInMsg->pData[0];
   5771          
   5772              pCBs->pfnLoadControl_CancelAllLoadControlEvents( &cmd, &(pInMsg->msg->srcAddr), pInMsg->hdr.transSeqNum );
   5773              return ZSuccess;
   5774            }
   5775          
   5776            return ZFailure;
   5777          }
   5778          
   5779          /*********************************************************************
   5780           * @fn      zclSE_ProcessInCmd_LoadControl_ReportEventStatus
   5781           *
   5782           * @brief   Process in the received Load Control Event.
   5783           *
   5784           * @param   pInMsg - pointer to the incoming message
   5785           * @param   pCBs - pointer to the application call back function
   5786           *
   5787           * @return  ZStatus_t - ZFailure @ Unsupported
   5788           *                      ZSuccess @ Supported and send default rsp
   5789           *                      ZCL_STATUS_INVALID_FIELD @ Range checking
   5790           *                                           failure
   5791           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   5792          static ZStatus_t zclSE_ProcessInCmd_LoadControl_ReportEventStatus( zclIncoming_t *pInMsg,
   \                     zclSE_ProcessInCmd_LoadControl_ReportEventStatus:
   5793                                                                             zclSE_AppCallbacks_t *pCBs )
   5794          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 60
   \   000005   74C4         MOV     A,#-0x3c
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   EA           MOV     A,R2
   \   00000B   FE           MOV     R6,A
   \   00000C   EB           MOV     A,R3
   \   00000D   FF           MOV     R7,A
   \   00000E   8C..         MOV     ?V0 + 0,R4
   \   000010   8D..         MOV     ?V0 + 1,R5
   5795            if ( pCBs->pfnLoadControl_ReportEventStatus )
   \   000012   EC           MOV     A,R4
   \   000013   2412         ADD     A,#0x12
   \   000015   12....       LCALL   ?Subroutine11 & 0xFFFF
   \                     ??CrossCallReturnLabel_469:
   \   000018   7003         JNZ     $+5
   \   00001A   02....       LJMP    ??zclSE_ProcessInCmd_LoadControl_ReportEventSta_1 & 0xFFFF
   5796            {
   5797          
   5798              zclCCReportEventStatus_t cmd;
   5799          
   5800              zclSE_ParseInCmd_ReportEventStatus( &cmd, &(pInMsg->pData[0]), pInMsg->pDataLen );
   \   00001D                ; Setup parameters for call to function zclSE_ParseInCmd_ReportEventStatus
   \   00001D   12....       LCALL   ?Subroutine12 & 0xFFFF
   \                     ??CrossCallReturnLabel_5:
   \   000020   12....       LCALL   ??zclSE_ParseInCmd_ReportEventStatus?relay
   5801          
   5802              // Range Checking
   5803              if ( cmd.eventStatus != EVENT_STATUS_LOAD_CONTROL_EVENT_REJECTED &&
   5804                  (cmd.eventStatus == 0 ||
   5805                   cmd.eventStatus > EVENT_STATUS_LOAD_CONTROL_EVENT_SUPERSEDED ) )
   \   000023   7408         MOV     A,#0x8
   \   000025   12....       LCALL   ?XSTACK_DISP0_8
   \   000028   E0           MOVX    A,@DPTR
   \   000029   64FE         XRL     A,#0xfe
   \   00002B   600C         JZ      ??zclSE_ProcessInCmd_LoadControl_ReportEventSta_2
   \   00002D   E0           MOVX    A,@DPTR
   \   00002E   6005         JZ      ??zclSE_ProcessInCmd_LoadControl_ReportEventSta_3
   \   000030   C3           CLR     C
   \   000031   9408         SUBB    A,#0x8
   \   000033   4004         JC      ??zclSE_ProcessInCmd_LoadControl_ReportEventSta_2
   5806              {
   5807                return ZCL_STATUS_INVALID_FIELD;
   \                     ??zclSE_ProcessInCmd_LoadControl_ReportEventSta_3:
   \   000035   7985         MOV     R1,#-0x7b
   \   000037   8071         SJMP    ??zclSE_ProcessInCmd_LoadControl_ReportEventSta_4
   5808              }
   5809          
   5810              if ( cmd.criticalityLevelApplied > MAX_CRITICAL_LEVEL_SE_LOAD_CONTROL )
   \                     ??zclSE_ProcessInCmd_LoadControl_ReportEventSta_2:
   \   000039   7409         MOV     A,#0x9
   \   00003B   12....       LCALL   ?XSTACK_DISP0_8
   \   00003E   E0           MOVX    A,@DPTR
   \   00003F   C3           CLR     C
   \   000040   9410         SUBB    A,#0x10
   \   000042   50F1         JNC     ??zclSE_ProcessInCmd_LoadControl_ReportEventSta_3
   5811              {
   5812                return ZCL_STATUS_INVALID_FIELD;
   5813              }
   5814          
   5815              if ( cmd.coolingTemperatureSetPointApplied != SE_OPTIONAL_FIELD_TEMPERATURE_SET_POINT &&
   5816                   cmd.coolingTemperatureSetPointApplied > MAX_TEMPERATURE_SETPOINT_SE_LOAD_CONTROL )
   \   000044   740A         MOV     A,#0xa
   \   000046   12....       LCALL   ?XSTACK_DISP0_8
   \   000049   E0           MOVX    A,@DPTR
   \   00004A   7004         JNZ     ??zclSE_ProcessInCmd_LoadControl_ReportEventSta_5
   \   00004C   A3           INC     DPTR
   \   00004D   E0           MOVX    A,@DPTR
   \   00004E   6480         XRL     A,#0x80
   \                     ??zclSE_ProcessInCmd_LoadControl_ReportEventSta_5:
   \   000050   600C         JZ      ??zclSE_ProcessInCmd_LoadControl_ReportEventSta_6
   \   000052   740A         MOV     A,#0xa
   \   000054   12....       LCALL   ?XSTACK_DISP0_8
   \   000057   C3           CLR     C
   \   000058   A3           INC     DPTR
   \   000059   E0           MOVX    A,@DPTR
   \   00005A   9480         SUBB    A,#-0x80
   \   00005C   50D7         JNC     ??zclSE_ProcessInCmd_LoadControl_ReportEventSta_3
   5817              {
   5818                return ZCL_STATUS_INVALID_FIELD;
   5819              }
   5820          
   5821              if ( cmd.heatingTemperatureSetPointApplied != SE_OPTIONAL_FIELD_TEMPERATURE_SET_POINT &&
   5822                   cmd.heatingTemperatureSetPointApplied > MAX_TEMPERATURE_SETPOINT_SE_LOAD_CONTROL )
   \                     ??zclSE_ProcessInCmd_LoadControl_ReportEventSta_6:
   \   00005E   740C         MOV     A,#0xc
   \   000060   12....       LCALL   ?XSTACK_DISP0_8
   \   000063   E0           MOVX    A,@DPTR
   \   000064   7004         JNZ     ??zclSE_ProcessInCmd_LoadControl_ReportEventSta_7
   \   000066   A3           INC     DPTR
   \   000067   E0           MOVX    A,@DPTR
   \   000068   6480         XRL     A,#0x80
   \                     ??zclSE_ProcessInCmd_LoadControl_ReportEventSta_7:
   \   00006A   600C         JZ      ??zclSE_ProcessInCmd_LoadControl_ReportEventSta_8
   \   00006C   740C         MOV     A,#0xc
   \   00006E   12....       LCALL   ?XSTACK_DISP0_8
   \   000071   C3           CLR     C
   \   000072   A3           INC     DPTR
   \   000073   E0           MOVX    A,@DPTR
   \   000074   9480         SUBB    A,#-0x80
   \   000076   50BD         JNC     ??zclSE_ProcessInCmd_LoadControl_ReportEventSta_3
   5823              {
   5824                return ZCL_STATUS_INVALID_FIELD;
   5825              }
   5826          
   5827              if ( cmd.averageLoadAdjustment != SE_OPTIONAL_FIELD_INT8 &&
   5828                  (cmd.averageLoadAdjustment < MIN_AVERAGE_LOAD_ADJUSTMENT_PERCENTAGE_SE ||
   5829                   cmd.averageLoadAdjustment > MAX_AVERAGE_LOAD_ADJUSTMENT_PERCENTAGE_SE ) )
   \                     ??zclSE_ProcessInCmd_LoadControl_ReportEventSta_8:
   \   000078   740E         MOV     A,#0xe
   \   00007A   12....       LCALL   ?XSTACK_DISP0_8
   \   00007D   E0           MOVX    A,@DPTR
   \   00007E   6480         XRL     A,#0x80
   \   000080   6008         JZ      ??zclSE_ProcessInCmd_LoadControl_ReportEventSta_9
   \   000082   E0           MOVX    A,@DPTR
   \   000083   2464         ADD     A,#0x64
   \   000085   C3           CLR     C
   \   000086   94C9         SUBB    A,#-0x37
   \   000088   50AB         JNC     ??zclSE_ProcessInCmd_LoadControl_ReportEventSta_3
   5830              {
   5831                return ZCL_STATUS_INVALID_FIELD;
   5832              }
   5833          
   5834              if ( cmd.dutyCycleApplied != SE_OPTIONAL_FIELD_UINT8 &&
   5835                   cmd.dutyCycleApplied > MAX_DUTY_CYCLE_SE_LOAD_CONTROL )
   \                     ??zclSE_ProcessInCmd_LoadControl_ReportEventSta_9:
   \   00008A   740F         MOV     A,#0xf
   \   00008C   12....       LCALL   ?XSTACK_DISP0_8
   \   00008F   E0           MOVX    A,@DPTR
   \   000090   F4           CPL     A
   \   000091   6006         JZ      ??zclSE_ProcessInCmd_LoadControl_ReportEventSta_10
   \   000093   E0           MOVX    A,@DPTR
   \   000094   C3           CLR     C
   \   000095   9465         SUBB    A,#0x65
   \   000097   509C         JNC     ??zclSE_ProcessInCmd_LoadControl_ReportEventSta_3
   5836              {
   5837                return ZCL_STATUS_INVALID_FIELD;
   5838              }
   5839          
   5840              pCBs->pfnLoadControl_ReportEventStatus( &cmd, &(pInMsg->msg->srcAddr), pInMsg->hdr.transSeqNum );
   \                     ??zclSE_ProcessInCmd_LoadControl_ReportEventSta_10:
   \   000099                ; Setup parameters for indirect call
   \   000099   12....       LCALL   ?Subroutine13 & 0xFFFF
   \                     ??CrossCallReturnLabel_9:
   \   00009C   2412         ADD     A,#0x12
   \   00009E   12....       LCALL   ?Subroutine50 & 0xFFFF
   \                     ??CrossCallReturnLabel_426:
   \   0000A1   12....       LCALL   ?CALL_IND
   5841          
   5842              return ZSuccess;
   \   0000A4   7900         MOV     R1,#0x0
   \   0000A6   8002         SJMP    ??zclSE_ProcessInCmd_LoadControl_ReportEventSta_4
   5843            }
   5844          
   5845            return ZFailure;
   \                     ??zclSE_ProcessInCmd_LoadControl_ReportEventSta_1:
   \   0000A8   7901         MOV     R1,#0x1
   \                     ??zclSE_ProcessInCmd_LoadControl_ReportEventSta_4:
   \   0000AA   743C         MOV     A,#0x3c
   \   0000AC   02....       LJMP    ??Subroutine182_0 & 0xFFFF
   5846          }
   5847          
   5848          /*********************************************************************
   5849           * @fn      zclSE_ProcessInCmd_LoadControl_GetScheduledEvents
   5850           *
   5851           * @brief   Process in the received Get Scheduled Event.
   5852           *
   5853           * @param   pInMsg - pointer to the incoming message
   5854           * @param   pCBs - pointer to the application call back function
   5855           *
   5856           * @return  ZStatus_t - ZFailure @ Unsupported
   5857           *                      ZSuccess @ Supported and send default rsp
   5858           */
   5859          static ZStatus_t zclSE_ProcessInCmd_LoadControl_GetScheduledEvents( zclIncoming_t *pInMsg,
   5860                                                                              zclSE_AppCallbacks_t *pCBs )
   5861          {
   5862            if ( pCBs->pfnLoadControl_GetScheduledEvents )
   5863            {
   5864              zclCCGetScheduledEvent_t cmd;
   5865          
   5866              cmd.startTime = osal_build_uint32( pInMsg->pData, 4);
   5867              cmd.numEvents = pInMsg->pData[4];
   5868          
   5869              pCBs->pfnLoadControl_GetScheduledEvents( &cmd, &(pInMsg->msg->srcAddr), pInMsg->hdr.transSeqNum );
   5870              return ZSuccess;
   5871            }
   5872          
   5873            return ZFailure;
   5874          }
   5875          
   5876          #endif  // ZCL_LOAD_CONTROL
   5877          
   5878          #ifdef ZCL_PREPAYMENT
   5879          /*********************************************************************
   5880           * @fn      zclSE_ProcessInPrepaymentCmds
   5881           *
   5882           * @brief   Callback from ZCL to process incoming Commands specific
   5883           *          to this cluster library on a command ID basis
   5884           *
   5885           * @param   pInMsg - pointer to the incoming message
   5886           * @param   pCBs - pointer to the application call back function
   5887           *
   5888           * @return  ZStatus_t
   5889           */
   5890          static ZStatus_t zclSE_ProcessInPrepaymentCmds( zclIncoming_t *pInMsg,
   5891                                                          zclSE_AppCallbacks_t *pCBs )
   5892          {
   5893            ZStatus_t stat;
   5894          
   5895            if ( zcl_ServerCmd( pInMsg->hdr.fc.direction ) )
   5896            {
   5897              // Process Client commands, received by server
   5898              switch ( pInMsg->hdr.commandID )
   5899              {
   5900                case COMMAND_SE_SEL_AVAIL_EMERGENCY_CREDIT:
   5901                  stat = zclSE_ProcessInCmd_Prepayment_SelAvailEmergencyCredit( pInMsg, pCBs );
   5902                  break;
   5903          
   5904          #ifndef SE_UK_EXT   // this is SE 1.1 command definition
   5905                case COMMAND_SE_CHANGE_SUPPLY:
   5906                  stat = zclSE_ProcessInCmd_Prepayment_ChangeSupply( pInMsg, pCBs );
   5907                  break;
   5908          #else
   5909                case COMMAND_SE_CHANGE_DEBT:
   5910                  stat = zclSE_ProcessInCmd_Prepayment_ChangeDebt( pInMsg, pCBs );
   5911                  break;
   5912          
   5913                case COMMAND_SE_EMERGENCY_CREDIT_SETUP:
   5914                  stat = zclSE_ProcessInCmd_Prepayment_EmergencyCreditSetup( pInMsg, pCBs );
   5915                  break;
   5916          
   5917                case COMMAND_SE_CONSUMER_TOPUP:
   5918                  stat = zclSE_ProcessInCmd_Prepayment_ConsumerTopup( pInMsg, pCBs );
   5919                  break;
   5920          
   5921                case COMMAND_SE_CREDIT_ADJUSTMENT:
   5922                  stat = zclSE_ProcessInCmd_Prepayment_CreditAdjustment( pInMsg, pCBs );
   5923                  break;
   5924          
   5925                case COMMAND_SE_CHANGE_PAYMENT_MODE:
   5926                  stat = zclSE_ProcessInCmd_Prepayment_ChangePaymentMode( pInMsg, pCBs );
   5927                  break;
   5928          
   5929                case COMMAND_SE_GET_PREPAY_SNAPSHOT:
   5930                  stat = zclSE_ProcessInCmd_Prepayment_GetPrepaySnapshot( pInMsg, pCBs );
   5931                  break;
   5932          
   5933                case COMMAND_SE_GET_TOPUP_LOG:
   5934                  stat = zclSE_ProcessInCmd_Prepayment_GetTopupLog( pInMsg, pCBs );
   5935                  break;
   5936          
   5937                case COMMAND_SE_SET_LOW_CREDIT_WARNING_LEVEL:
   5938                  stat = zclSE_ProcessInCmd_Prepayment_SetLowCreditWarningLevel( pInMsg, pCBs );
   5939                  break;
   5940          
   5941                case COMMAND_SE_GET_DEBT_REPAYMENT_LOG:
   5942                  stat = zclSE_ProcessInCmd_Prepayment_GetDebtRepaymentLog( pInMsg, pCBs );
   5943                  break;
   5944          #endif  // SE_UK_EXT
   5945          
   5946                default:
   5947                  stat = ZFailure;
   5948                  break;
   5949              }
   5950            }
   5951            else
   5952            {
   5953              // Process Server commands, received by client
   5954              switch ( pInMsg->hdr.commandID )
   5955              {
   5956          #ifndef SE_UK_EXT   // this is SE 1.1 command definition
   5957                case COMMAND_SE_SUPPLY_STATUS_RESPONSE:
   5958                  stat = zclSE_ProcessInCmd_Prepayment_SupplyStatusResponse( pInMsg, pCBs );
   5959                  break;
   5960          
   5961          #else // SE_UK_EXT
   5962              case COMMAND_SE_GET_PREPAY_SNAPSHOT_RESPONSE:
   5963                  stat = zclSE_ProcessInCmd_Prepayment_GetPrepaySnapshotResponse( pInMsg, pCBs );
   5964                  break;
   5965          
   5966              case COMMAND_SE_CHANGE_PAYMENT_MODE_RESPONSE:
   5967                  stat = zclSE_ProcessInCmd_Prepayment_ChangePaymentModeResponse( pInMsg, pCBs );
   5968                  break;
   5969          
   5970              case COMMAND_SE_CONSUMER_TOPUP_RESPONSE:
   5971                  stat = zclSE_ProcessInCmd_Prepayment_ConsumerTopupResponse( pInMsg, pCBs );
   5972                  break;
   5973          
   5974              case COMMAND_SE_GET_COMMANDS:
   5975                  stat = zclSE_ProcessInCmd_Prepayment_GetCommands( pInMsg, pCBs );
   5976                  break;
   5977          
   5978              case COMMAND_SE_PUBLISH_TOPUP_LOG:
   5979                  stat = zclSE_ProcessInCmd_Prepayment_PublishTopupLog( pInMsg, pCBs );
   5980                  break;
   5981          
   5982              case COMMAND_SE_PUBLISH_DEBT_LOG:
   5983                  stat = zclSE_ProcessInCmd_Prepayment_PublishDebtLog( pInMsg, pCBs );
   5984                  break;
   5985          #endif  // SE_UK_EXT
   5986          
   5987                default:
   5988                  stat = ZFailure;
   5989                  break;
   5990              }
   5991            }
   5992          
   5993            return ( stat );
   5994          }
   5995          
   5996          /*********************************************************************
   5997           * @fn      zclSE_ProcessInCmd_Prepayment_SelAvailEmergencyCredit
   5998           *
   5999           * @brief   Process in the received Select Available Emergency Credit
   6000           *
   6001           * @param   pInMsg - pointer to the incoming message
   6002           * @param   pCBs - pointer to the application call back function
   6003           *
   6004           * @return  ZStatus_t - ZFailure @ Unsupported
   6005           *                      ZSuccess @ Supported and send default rsp
   6006           */
   6007          static ZStatus_t zclSE_ProcessInCmd_Prepayment_SelAvailEmergencyCredit( zclIncoming_t *pInMsg,
   6008                                                                              zclSE_AppCallbacks_t *pCBs )
   6009          {
   6010            if ( pCBs->pfnPrepayment_SelAvailEmergencyCredit )
   6011            {
   6012              zclCCSelAvailEmergencyCredit_t cmd;
   6013          
   6014              zclSE_ParseInCmd_SelAvailEmergencyCredit( &cmd, &(pInMsg->pData[0]),
   6015                                                        pInMsg->pDataLen );
   6016          
   6017              // Callback to process message
   6018              pCBs->pfnPrepayment_SelAvailEmergencyCredit( &cmd, &(pInMsg->msg->srcAddr),
   6019                                                           pInMsg->hdr.transSeqNum );
   6020              return ZSuccess;
   6021            }
   6022          
   6023            return ZFailure;
   6024          }
   6025          
   6026          #ifndef SE_UK_EXT
   6027          /*********************************************************************
   6028           * @fn      zclSE_ProcessInCmd_Prepayment_ChangeSupply
   6029           *
   6030           * @brief   Process in the received Change Supply
   6031           *
   6032           * @param   pInMsg - pointer to the incoming message
   6033           * @param   pCBs - pointer to the application call back function
   6034           *
   6035           * @return  ZStatus_t - ZFailure @ Unsupported
   6036           *                      ZCL_STATUS_CMD_HAS_RSP @ Supported and do
   6037           *                                           not need default rsp
   6038           */
   6039          static ZStatus_t zclSE_ProcessInCmd_Prepayment_ChangeSupply( zclIncoming_t *pInMsg,
   6040                                                                       zclSE_AppCallbacks_t *pCBs )
   6041          {
   6042            if ( pCBs->pfnPrepayment_ChangeSupply )
   6043            {
   6044              zclCCChangeSupply_t cmd;
   6045          
   6046              zclSE_ParseInCmd_ChangeSupply( &cmd, &(pInMsg->pData[0]), pInMsg->pDataLen );
   6047          
   6048              // Callback to process message
   6049              pCBs->pfnPrepayment_ChangeSupply( &cmd, &(pInMsg->msg->srcAddr), pInMsg->hdr.transSeqNum );
   6050          
   6051              return ZCL_STATUS_CMD_HAS_RSP;
   6052            }
   6053          
   6054            return ZFailure;
   6055          }
   6056          
   6057          /*********************************************************************
   6058           * @fn      zclSE_ProcessInCmd_Prepayment_SupplyStatusResponse
   6059           *
   6060           * @brief   Process in the received Supply Status Response
   6061           *
   6062           * @param   pInMsg - pointer to the incoming message
   6063           * @param   pCBs - pointer to the application call back function
   6064           *
   6065           * @return  ZStatus_t - ZFailure @ Unsupported
   6066           *                      ZSuccess @ Supported and send default rsp
   6067           */
   6068          static ZStatus_t zclSE_ProcessInCmd_Prepayment_SupplyStatusResponse( zclIncoming_t *pInMsg,
   6069                                                                              zclSE_AppCallbacks_t *pCBs )
   6070          {
   6071            if ( pCBs->pfnPrepayment_SupplyStatusResponse )
   6072            {
   6073              zclCCSupplyStatusResponse_t cmd;
   6074          
   6075              cmd.providerId = osal_build_uint32( pInMsg->pData, 4);
   6076              cmd.implementationDateTime = osal_build_uint32( &pInMsg->pData[4], 4);
   6077              cmd.supplyStatus = pInMsg->pData[8];
   6078          
   6079              pCBs->pfnPrepayment_SupplyStatusResponse( &cmd, &(pInMsg->msg->srcAddr),
   6080                                                        pInMsg->hdr.transSeqNum );
   6081          
   6082              return ZSuccess;
   6083            }
   6084          
   6085            return ZFailure;
   6086          }
   6087          
   6088          #else // SE_UK_EXT
   6089          /*********************************************************************
   6090           * @fn      zclSE_ProcessInCmd_Prepayment_ChangeDebt
   6091           *
   6092           * @brief   Process in the received Change Debt
   6093           *
   6094           * @param   pInMsg - pointer to the incoming message
   6095           * @param   pCBs - pointer to the application call back function
   6096           *
   6097           * @return  ZStatus_t - ZFailure @ Unsupported
   6098           *                      ZSuccess @ Supported and send default rsp
   6099           */
   6100          static ZStatus_t zclSE_ProcessInCmd_Prepayment_ChangeDebt( zclIncoming_t *pInMsg,
   6101                                                                     zclSE_AppCallbacks_t *pCBs )
   6102          {
   6103            if ( pCBs->pfnPrepayment_ChangeDebt )
   6104            {
   6105              zclCCChangeDebt_t cmd;
   6106          
   6107              zclSE_ParseInCmd_ChangeDebt( &cmd, &(pInMsg->pData[0]), pInMsg->pDataLen );
   6108          
   6109              pCBs->pfnPrepayment_ChangeDebt( &cmd, &(pInMsg->msg->srcAddr),
   6110                                              pInMsg->hdr.transSeqNum );
   6111              return ZSuccess;
   6112            }
   6113          
   6114            return ZFailure;
   6115          }
   6116          
   6117          /*********************************************************************
   6118           * @fn      zclSE_ProcessInCmd_Prepayment_EmergencyCreditSetup
   6119           *
   6120           * @brief   Process in the received Emergency Credit Setup
   6121           *
   6122           * @param   pInMsg - pointer to the incoming message
   6123           * @param   pCBs - pointer to the application call back function
   6124           *
   6125           * @return  ZStatus_t - ZFailure @ Unsupported
   6126           *                      ZSuccess @ Supported and send default rsp
   6127           */
   6128          static ZStatus_t zclSE_ProcessInCmd_Prepayment_EmergencyCreditSetup( zclIncoming_t *pInMsg,
   6129                                                                               zclSE_AppCallbacks_t *pCBs )
   6130          {
   6131            if ( pCBs->pfnPrepayment_EmergencyCreditSetup )
   6132            {
   6133              zclCCEmergencyCreditSetup_t cmd;
   6134          
   6135              zclSE_ParseInCmd_EmergencyCreditSetup( &cmd, &(pInMsg->pData[0]),
   6136                                                     pInMsg->pDataLen );
   6137          
   6138              pCBs->pfnPrepayment_EmergencyCreditSetup( &cmd, &(pInMsg->msg->srcAddr),
   6139                                                        pInMsg->hdr.transSeqNum );
   6140              return ZSuccess;
   6141            }
   6142          
   6143            return ZFailure;
   6144          }
   6145          
   6146          /*********************************************************************
   6147           * @fn      zclSE_ProcessInCmd_Prepayment_ConsumerTopup
   6148           *
   6149           * @brief   Process in the received Consumer Topup
   6150           *
   6151           * @param   pInMsg - pointer to the incoming message
   6152           * @param   pCBs - pointer to the application call back function
   6153           *
   6154           * @return  ZStatus_t - ZFailure @ Unsupported
   6155           *                      ZSuccess @ Supported and send default rsp
   6156           */
   6157          static ZStatus_t zclSE_ProcessInCmd_Prepayment_ConsumerTopup( zclIncoming_t *pInMsg,
   6158                                                                        zclSE_AppCallbacks_t *pCBs )
   6159          {
   6160            if ( pCBs->pfnPrepayment_ConsumerTopup )
   6161            {
   6162              zclCCConsumerTopup_t cmd;
   6163          
   6164              zclSE_ParseInCmd_ConsumerTopup( &cmd, &(pInMsg->pData[0]), pInMsg->pDataLen );
   6165          
   6166              pCBs->pfnPrepayment_ConsumerTopup( &cmd, &(pInMsg->msg->srcAddr),
   6167                                                 pInMsg->hdr.transSeqNum );
   6168              return ZSuccess;
   6169            }
   6170          
   6171            return ZFailure;
   6172          }
   6173          
   6174          /*********************************************************************
   6175           * @fn      zclSE_ProcessInCmd_Prepayment_CreditAdjustment
   6176           *
   6177           * @brief   Process in the received Credit Adjustment
   6178           *
   6179           * @param   pInMsg - pointer to the incoming message
   6180           * @param   pCBs - pointer to the application call back function
   6181           *
   6182           * @return  ZStatus_t - ZFailure @ Unsupported
   6183           *                      ZSuccess @ Supported and send default rsp
   6184           */
   6185          static ZStatus_t zclSE_ProcessInCmd_Prepayment_CreditAdjustment( zclIncoming_t *pInMsg,
   6186                                                                           zclSE_AppCallbacks_t *pCBs )
   6187          {
   6188            if ( pCBs->pfnPrepayment_CreditAdjustment )
   6189            {
   6190              zclCCCreditAdjustment_t cmd;
   6191          
   6192              zclSE_ParseInCmd_CreditAdjustment( &cmd, &(pInMsg->pData[0]), pInMsg->pDataLen );
   6193          
   6194              pCBs->pfnPrepayment_CreditAdjustment( &cmd, &(pInMsg->msg->srcAddr),
   6195                                                    pInMsg->hdr.transSeqNum );
   6196              return ZSuccess;
   6197            }
   6198          
   6199            return ZFailure;
   6200          }
   6201          
   6202          /*********************************************************************
   6203           * @fn      zclSE_ProcessInCmd_Prepayment_ChangePaymentMode
   6204           *
   6205           * @brief   Process in the received Change Payment Mode
   6206           *
   6207           * @param   pInMsg - pointer to the incoming message
   6208           * @param   pCBs - pointer to the application call back function
   6209           *
   6210           * @return  ZStatus_t - ZFailure @ Unsupported
   6211           *                      ZSuccess @ Supported and send default rsp
   6212           */
   6213          static ZStatus_t zclSE_ProcessInCmd_Prepayment_ChangePaymentMode( zclIncoming_t *pInMsg,
   6214                                                                            zclSE_AppCallbacks_t *pCBs )
   6215          {
   6216            if ( pCBs->pfnPrepayment_ChangePaymentMode )
   6217            {
   6218              zclCCChangePaymentMode_t cmd;
   6219          
   6220              zclSE_ParseInCmd_ChangePaymentMode( &cmd, &(pInMsg->pData[0]), pInMsg->pDataLen );
   6221          
   6222              pCBs->pfnPrepayment_ChangePaymentMode( &cmd, &(pInMsg->msg->srcAddr),
   6223                                                     pInMsg->hdr.transSeqNum );
   6224              return ZSuccess;
   6225            }
   6226          
   6227            return ZFailure;
   6228          }
   6229          
   6230          /*********************************************************************
   6231           * @fn      zclSE_ProcessInCmd_Prepayment_GetPrepaySnapshot
   6232           *
   6233           * @brief   Process in the received Get Prepay Snapshot
   6234           *
   6235           * @param   pInMsg - pointer to the incoming message
   6236           * @param   pCBs - pointer to the application call back function
   6237           *
   6238           * @return  ZStatus_t - ZFailure @ Unsupported
   6239           *                      ZSuccess @ Supported and send default rsp
   6240           */
   6241          static ZStatus_t zclSE_ProcessInCmd_Prepayment_GetPrepaySnapshot( zclIncoming_t *pInMsg,
   6242                                                                            zclSE_AppCallbacks_t *pCBs )
   6243          {
   6244            if ( pCBs->pfnPrepayment_GetPrepaySnapshot )
   6245            {
   6246              zclCCGetPrepaySnapshot_t cmd;
   6247          
   6248              zclSE_ParseInCmd_GetPrepaySnapshot( &cmd, &(pInMsg->pData[0]), pInMsg->pDataLen );
   6249          
   6250              pCBs->pfnPrepayment_GetPrepaySnapshot( &cmd, &(pInMsg->msg->srcAddr),
   6251                                                     pInMsg->hdr.transSeqNum );
   6252              return ZSuccess;
   6253            }
   6254          
   6255            return ZFailure;
   6256          }
   6257          
   6258          /*********************************************************************
   6259           * @fn      zclSE_ProcessInCmd_Prepayment_GetTopupLog
   6260           *
   6261           * @brief   Process in the received Get Topup Log
   6262           *
   6263           * @param   pInMsg - pointer to the incoming message
   6264           * @param   pCBs - pointer to the application call back function
   6265           *
   6266           * @return  ZStatus_t - ZFailure @ Unsupported
   6267           *                      ZSuccess @ Supported and send default rsp
   6268           */
   6269          static ZStatus_t zclSE_ProcessInCmd_Prepayment_GetTopupLog( zclIncoming_t *pInMsg,
   6270                                                                      zclSE_AppCallbacks_t *pCBs )
   6271          {
   6272            if ( pCBs->pfnPrepayment_GetTopupLog )
   6273            {
   6274              pCBs->pfnPrepayment_GetTopupLog( pInMsg->pData[0], &(pInMsg->msg->srcAddr),
   6275                                               pInMsg->hdr.transSeqNum );
   6276              return ZSuccess;
   6277            }
   6278          
   6279            return ZFailure;
   6280          }
   6281          
   6282          /*********************************************************************
   6283           * @fn      zclSE_ProcessInCmd_Prepayment_SetLowCreditWarningLevel
   6284           *
   6285           * @brief   Process in the received Set Low Credit Warning Level
   6286           *
   6287           * @param   pInMsg - pointer to the incoming message
   6288           * @param   pCBs - pointer to the application call back function
   6289           *
   6290           * @return  ZStatus_t - ZFailure @ Unsupported
   6291           *                      ZSuccess @ Supported and send default rsp
   6292           */
   6293          static ZStatus_t zclSE_ProcessInCmd_Prepayment_SetLowCreditWarningLevel( zclIncoming_t *pInMsg,
   6294                                                                                   zclSE_AppCallbacks_t *pCBs )
   6295          {
   6296            if ( pCBs->pfnPrepayment_SetLowCreditWarningLevel )
   6297            {
   6298              pCBs->pfnPrepayment_SetLowCreditWarningLevel( pInMsg->pData[0],
   6299                                                            &(pInMsg->msg->srcAddr),
   6300                                                            pInMsg->hdr.transSeqNum );
   6301              return ZSuccess;
   6302            }
   6303          
   6304            return ZFailure;
   6305          }
   6306          
   6307          /*********************************************************************
   6308           * @fn      zclSE_ProcessInCmd_Prepayment_GetDebtRepaymentLog
   6309           *
   6310           * @brief   Process in the received Get Debt Repayment Log
   6311           *
   6312           * @param   pInMsg - pointer to the incoming message
   6313           * @param   pCBs - pointer to the application call back function
   6314           *
   6315           * @return  ZStatus_t - ZFailure @ Unsupported
   6316           *                      ZSuccess @ Supported and send default rsp
   6317           */
   6318          static ZStatus_t zclSE_ProcessInCmd_Prepayment_GetDebtRepaymentLog( zclIncoming_t *pInMsg,
   6319                                                                              zclSE_AppCallbacks_t *pCBs )
   6320          {
   6321            if ( pCBs->pfnPrepayment_GetDebtRepaymentLog )
   6322            {
   6323              zclCCGetDebtRepaymentLog_t cmd;
   6324          
   6325              zclSE_ParseInCmd_GetDebtRepaymentLog( &cmd, &(pInMsg->pData[0]),
   6326                                                    pInMsg->pDataLen );
   6327          
   6328              pCBs->pfnPrepayment_GetDebtRepaymentLog( &cmd, &(pInMsg->msg->srcAddr),
   6329                                                       pInMsg->hdr.transSeqNum );
   6330              return ZSuccess;
   6331            }
   6332          
   6333            return ZFailure;
   6334          }
   6335          
   6336          /*********************************************************************
   6337           * @fn      zclSE_ProcessInCmd_Prepayment_GetPrepaySnapshotResponse
   6338           *
   6339           * @brief   Process in the received Get Prepay Snapshot Response
   6340           *
   6341           * @param   pInMsg - pointer to the incoming message
   6342           * @param   pCBs - pointer to the application call back function
   6343           *
   6344           * @return  ZStatus_t - ZFailure @ Unsupported
   6345           *                      ZSuccess @ Supported and send default rsp
   6346           */
   6347          static ZStatus_t zclSE_ProcessInCmd_Prepayment_GetPrepaySnapshotResponse( zclIncoming_t *pInMsg,
   6348                                                                                    zclSE_AppCallbacks_t *pCBs )
   6349          {
   6350            if ( pCBs->pfnPrepayment_GetPrepaySnapshotResponse )
   6351            {
   6352              zclCCGetPrepaySnapshotResponse_t cmd;
   6353          
   6354              zclSE_ParseInCmd_GetPrepaySnapshotResponse( &cmd, &(pInMsg->pData[0]),
   6355                                                          pInMsg->pDataLen );
   6356          
   6357              pCBs->pfnPrepayment_GetPrepaySnapshotResponse( &cmd, &(pInMsg->msg->srcAddr),
   6358                                                             pInMsg->hdr.transSeqNum );
   6359          
   6360              return ZSuccess;
   6361            }
   6362          
   6363            return ZFailure;
   6364          }
   6365          
   6366          /*********************************************************************
   6367           * @fn      zclSE_ProcessInCmd_Prepayment_ChangePaymentModeResponse
   6368           *
   6369           * @brief   Process in the received Change Payment Mode Response
   6370           *
   6371           * @param   pInMsg - pointer to the incoming message
   6372           * @param   pCBs - pointer to the application call back function
   6373           *
   6374           * @return  ZStatus_t - ZFailure @ Unsupported
   6375           *                      ZSuccess @ Supported and send default rsp
   6376           */
   6377          static ZStatus_t zclSE_ProcessInCmd_Prepayment_ChangePaymentModeResponse( zclIncoming_t *pInMsg,
   6378                                                                                    zclSE_AppCallbacks_t *pCBs )
   6379          {
   6380            if ( pCBs->pfnPrepayment_ChangePaymentModeResponse )
   6381            {
   6382              zclCCChangePaymentModeResponse_t cmd;
   6383          
   6384              zclSE_ParseInCmd_ChangePaymentModeResponse( &cmd, &(pInMsg->pData[0]),
   6385                                                         pInMsg->pDataLen );
   6386          
   6387              pCBs->pfnPrepayment_ChangePaymentModeResponse( &cmd, &(pInMsg->msg->srcAddr),
   6388                                                             pInMsg->hdr.transSeqNum );
   6389              return ZSuccess;
   6390            }
   6391          
   6392            return ZFailure;
   6393          }
   6394          
   6395          /*********************************************************************
   6396           * @fn      zclSE_ProcessInCmd_Prepayment_ConsumerTopupResponse
   6397           *
   6398           * @brief   Process in the received Consumer Topup Response
   6399           *
   6400           * @param   pInMsg - pointer to the incoming message
   6401           * @param   pCBs - pointer to the application call back function
   6402           *
   6403           * @return  ZStatus_t - ZFailure @ Unsupported
   6404           *                      ZSuccess @ Supported and send default rsp
   6405           */
   6406          static ZStatus_t zclSE_ProcessInCmd_Prepayment_ConsumerTopupResponse( zclIncoming_t *pInMsg,
   6407                                                                                zclSE_AppCallbacks_t *pCBs )
   6408          {
   6409            if ( pCBs->pfnPrepayment_ConsumerTopupResponse )
   6410            {
   6411              zclCCConsumerTopupResponse_t cmd;
   6412          
   6413              zclSE_ParseInCmd_ConsumerTopupResponse( &cmd, &(pInMsg->pData[0]),
   6414                                                      pInMsg->pDataLen );
   6415          
   6416              pCBs->pfnPrepayment_ConsumerTopupResponse( &cmd, &(pInMsg->msg->srcAddr),
   6417                                                         pInMsg->hdr.transSeqNum );
   6418              return ZSuccess;
   6419            }
   6420          
   6421            return ZFailure;
   6422          }
   6423          
   6424          /*********************************************************************
   6425           * @fn      zclSE_ProcessInCmd_Prepayment_GetCommands
   6426           *
   6427           * @brief   Process in the received Get Commands
   6428           *
   6429           * @param   pInMsg - pointer to the incoming message
   6430           * @param   pCBs - pointer to the application call back function
   6431           *
   6432           * @return  ZStatus_t - ZFailure @ Unsupported
   6433           *                      ZSuccess @ Supported and send default rsp
   6434           */
   6435          static ZStatus_t zclSE_ProcessInCmd_Prepayment_GetCommands( zclIncoming_t *pInMsg, zclSE_AppCallbacks_t *pCBs )
   6436          {
   6437            if ( pCBs->pfnPrepayment_GetCommands )
   6438            {
   6439              pCBs->pfnPrepayment_GetCommands( pInMsg->pData[0], &(pInMsg->msg->srcAddr), pInMsg->hdr.transSeqNum );
   6440              return ZSuccess;
   6441            }
   6442          
   6443            return ZFailure;
   6444          }
   6445          
   6446          /*********************************************************************
   6447           * @fn      zclSE_ProcessInCmd_Prepayment_PublishTopupLog
   6448           *
   6449           * @brief   Process in the received Publish Topup Log
   6450           *
   6451           * @param   pInMsg - pointer to the incoming message
   6452           * @param   pCBs - pointer to the application call back function
   6453           *
   6454           * @return  ZStatus_t - ZFailure @ Unsupported
   6455           *                      ZSuccess @ Supported and send default rsp
   6456           *                      ZCL_STATUS_SOFTWARE_FAILURE @ ZStack memory allocation failure
   6457           */
   6458          static ZStatus_t zclSE_ProcessInCmd_Prepayment_PublishTopupLog( zclIncoming_t *pInMsg,
   6459                                                                          zclSE_AppCallbacks_t *pCBs )
   6460          {
   6461            if ( pCBs->pfnPrepayment_PublishTopupLog )
   6462            {
   6463              zclCCPublishTopupLog_t cmd;
   6464          
   6465              if ( zclSE_ParseInCmd_PublishTopupLog( &cmd, &(pInMsg->pData[0]),
   6466                                                          pInMsg->pDataLen ) == ZSuccess )
   6467              {
   6468                pCBs->pfnPrepayment_PublishTopupLog( &cmd, &(pInMsg->msg->srcAddr),
   6469                                                     pInMsg->hdr.transSeqNum );
   6470          
   6471                // Free memory
   6472                if ( cmd.pPayload != NULL )
   6473                {
   6474                  osal_mem_free( cmd.pPayload );
   6475                }
   6476          
   6477                return ZSuccess;
   6478              }
   6479              else
   6480              {
   6481                return ZCL_STATUS_SOFTWARE_FAILURE;
   6482              }
   6483            }
   6484          
   6485            return ZFailure;
   6486          }
   6487          
   6488          /*********************************************************************
   6489           * @fn      zclSE_ProcessInCmd_Prepayment_PublishDebtLog
   6490           *
   6491           * @brief   Process in the received Publish Debt Log
   6492           *
   6493           * @param   pInMsg - pointer to the incoming message
   6494           * @param   pCBs - pointer to the application call back function
   6495           *
   6496           * @return  ZStatus_t - ZFailure @ Unsupported
   6497           *                      ZSuccess @ Supported and send default rsp
   6498           *                      ZCL_STATUS_SOFTWARE_FAILURE @ ZStack memory allocation failure
   6499           */
   6500          static ZStatus_t zclSE_ProcessInCmd_Prepayment_PublishDebtLog( zclIncoming_t *pInMsg,
   6501                                                                         zclSE_AppCallbacks_t *pCBs )
   6502          {
   6503            if ( pCBs->pfnPrepayment_PublishDebtLog )
   6504            {
   6505              zclCCPublishDebtLog_t cmd;
   6506          
   6507              if ( zclSE_ParseInCmd_PublishDebtLog( &cmd, &(pInMsg->pData[0]),
   6508                                                          pInMsg->pDataLen ) == ZSuccess )
   6509              {
   6510                pCBs->pfnPrepayment_PublishDebtLog( &cmd, &(pInMsg->msg->srcAddr),
   6511                                                    pInMsg->hdr.transSeqNum );
   6512          
   6513                // Free memory
   6514                if ( cmd.pPayload != NULL )
   6515                {
   6516                  osal_mem_free( cmd.pPayload );
   6517                }
   6518          
   6519                return ZSuccess;
   6520              }
   6521              else
   6522              {
   6523                return ZCL_STATUS_SOFTWARE_FAILURE;
   6524              }
   6525            }
   6526          
   6527            return ZFailure;
   6528          }
   6529          #endif  // SE_UK_EXT
   6530          #endif  // ZCL_PREPAYMENT
   6531          
   6532          #ifdef ZCL_TUNNELING
   6533          /*********************************************************************
   6534           * @fn      zclSE_ProcessInTunnelingCmds
   6535           *
   6536           * @brief   Callback from ZCL to process incoming Commands specific
   6537           *          to this cluster library on a command ID basis
   6538           *
   6539           * @param   pInMsg - pointer to the incoming message
   6540           * @param   pCBs - pointer to the application call back function
   6541           *
   6542           * @return  ZStatus_t
   6543           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   6544          static ZStatus_t zclSE_ProcessInTunnelingCmds( zclIncoming_t *pInMsg, zclSE_AppCallbacks_t *pCBs )
   \                     zclSE_ProcessInTunnelingCmds:
   6545          {
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 7
   \   000005   74F9         MOV     A,#-0x7
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   EC           MOV     A,R4
   \   00000B   FE           MOV     R6,A
   \   00000C   ED           MOV     A,R5
   \   00000D   FF           MOV     R7,A
   6546            ZStatus_t stat;
   6547          
   6548            if ( zcl_ServerCmd( pInMsg->hdr.fc.direction ) )
   \   00000E   8A82         MOV     DPL,R2
   \   000010   8B83         MOV     DPH,R3
   \   000012   A3           INC     DPTR
   \   000013   A3           INC     DPTR
   \   000014   E0           MOVX    A,@DPTR
   \   000015   5408         ANL     A,#0x8
   \   000017   8A82         MOV     DPL,R2
   \   000019   8B83         MOV     DPH,R3
   \   00001B   A3           INC     DPTR
   \   00001C   A3           INC     DPTR
   \   00001D   A3           INC     DPTR
   \   00001E   A3           INC     DPTR
   \   00001F   A3           INC     DPTR
   \   000020   A3           INC     DPTR
   \   000021   A3           INC     DPTR
   \   000022   705C         JNZ     ??zclSE_ProcessInTunnelingCmds_0
   6549            {
   6550              // Process Client commands, received by Server
   6551              switch ( pInMsg->hdr.commandID )
   \   000024   E0           MOVX    A,@DPTR
   \   000025   6011         JZ      ??zclSE_ProcessInTunnelingCmds_1
   \   000027   14           DEC     A
   \   000028   6014         JZ      ??zclSE_ProcessInTunnelingCmds_2
   \                     ??zclSE_ProcessInTunnelingCmds_3:
   \   00002A   14           DEC     A
   \   00002B   6039         JZ      ??zclSE_ProcessInTunnelingCmds_4
   \   00002D   14           DEC     A
   \   00002E   603C         JZ      ??zclSE_ProcessInTunnelingCmds_5
   \   000030   14           DEC     A
   \   000031   603F         JZ      ??zclSE_ProcessInTunnelingCmds_6
   \   000033   14           DEC     A
   \   000034   6041         JZ      ??zclSE_ProcessInTunnelingCmds_7
   \   000036   8044         SJMP    ??zclSE_ProcessInTunnelingCmds_8
   6552              {
   6553                case COMMAND_SE_REQUEST_TUNNEL:
   6554                  stat = zclSE_ProcessInCmd_Tunneling_RequestTunnel( pInMsg, pCBs );
   \                     ??zclSE_ProcessInTunnelingCmds_1:
   \   000038                ; Setup parameters for call to function zclSE_ProcessInCmd_Tunneling_RequestTunnel
   \   000038   12....       LCALL   ??zclSE_ProcessInCmd_Tunneling_RequestTunnel?re
   6555                  break;
   \   00003B   02....       LJMP    ??zclSE_ProcessInTunnelingCmds_9 & 0xFFFF
   6556          
   6557                case COMMAND_SE_CLOSE_TUNNEL:
   6558                  stat = zclSE_ProcessInCmd_Tunneling_CloseTunnel( pInMsg, pCBs );
   \                     ??zclSE_ProcessInTunnelingCmds_2:
   \   00003E   EE           MOV     A,R6
   \   00003F   243A         ADD     A,#0x3a
   \   000041   F582         MOV     DPL,A
   \   000043   EF           MOV     A,R7
   \   000044   12....       LCALL   ??Subroutine185_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_447:
   \   000047   6033         JZ      ??zclSE_ProcessInTunnelingCmds_8
   \   000049   EA           MOV     A,R2
   \   00004A   2408         ADD     A,#0x8
   \   00004C   FC           MOV     R4,A
   \   00004D   EB           MOV     A,R3
   \   00004E   3400         ADDC    A,#0x0
   \   000050   12....       LCALL   ?Subroutine44 & 0xFFFF
   \                     ??CrossCallReturnLabel_394:
   \   000053   FC           MOV     R4,A
   \   000054   A3           INC     DPTR
   \   000055   E0           MOVX    A,@DPTR
   \   000056   F9           MOV     R1,A
   \   000057   EC           MOV     A,R4
   \   000058   85..82       MOV     DPL,?XSP + 0
   \   00005B   85..83       MOV     DPH,?XSP + 1
   \   00005E   12....       LCALL   ?Subroutine21 & 0xFFFF
   \                     ??CrossCallReturnLabel_401:
   \   000061   243A         ADD     A,#0x3a
   \   000063   02....       LJMP    ??zclSE_ProcessInTunnelingCmds_10 & 0xFFFF
   6559                  break;
   6560          
   6561                case COMMAND_SE_DATA_CLIENT_SERVER_DIR:
   6562                  stat = zclSE_ProcessInCmd_Tunneling_TransferData( pInMsg, pCBs );
   \                     ??zclSE_ProcessInTunnelingCmds_4:
   \   000066                ; Setup parameters for call to function zclSE_ProcessInCmd_Tunneling_TransferData
   \   000066   12....       LCALL   ??zclSE_ProcessInCmd_Tunneling_TransferData?rel
   6563                  break;
   \   000069   02....       LJMP    ??zclSE_ProcessInTunnelingCmds_9 & 0xFFFF
   6564          
   6565                case COMMAND_SE_DATA_ERROR_CLIENT_SERVER_DIR:
   6566                  stat = zclSE_ProcessInCmd_Tunneling_TransferDataError( pInMsg, pCBs );
   \                     ??zclSE_ProcessInTunnelingCmds_5:
   \   00006C                ; Setup parameters for call to function zclSE_ProcessInCmd_Tunneling_TransferDataError
   \   00006C   12....       LCALL   ??zclSE_ProcessInCmd_Tunneling_TransferDataErro
   6567                  break;
   \   00006F   02....       LJMP    ??zclSE_ProcessInTunnelingCmds_9 & 0xFFFF
   6568          
   6569                case COMMAND_SE_ACK_CLIENT_SERVER_DIR:
   6570                  stat = zclSE_ProcessInCmd_Tunneling_AckTransferData( pInMsg, pCBs );
   \                     ??zclSE_ProcessInTunnelingCmds_6:
   \   000072                ; Setup parameters for call to function zclSE_ProcessInCmd_Tunneling_AckTransferData
   \   000072   12....       LCALL   ??zclSE_ProcessInCmd_Tunneling_AckTransferData?
   6571                  break;
   \   000075   807E         SJMP    ??zclSE_ProcessInTunnelingCmds_9
   6572          
   6573                case COMMAND_SE_READY_DATA_CLIENT_SERVER_DIR:
   6574                  stat = zclSE_ProcessInCmd_Tunneling_ReadyData( pInMsg, pCBs );
   \                     ??zclSE_ProcessInTunnelingCmds_7:
   \   000077                ; Setup parameters for call to function zclSE_ProcessInCmd_Tunneling_ReadyData
   \   000077   12....       LCALL   ??zclSE_ProcessInCmd_Tunneling_ReadyData?relay
   6575                  break;
   \   00007A   8079         SJMP    ??zclSE_ProcessInTunnelingCmds_9
   6576          
   6577          #ifdef SE_UK_EXT
   6578                case COMMAND_SE_GET_SUPP_TUNNEL_PROTOCOLS:
   6579                  stat = zclSE_ProcessInCmd_Tunneling_GetSuppTunnelProt( pInMsg, pCBs );
   6580                  break;
   6581          #endif  //SE_UK_EXT
   6582          
   6583                default:
   6584                  stat = ZFailure;
   \                     ??zclSE_ProcessInTunnelingCmds_8:
   \   00007C   7901         MOV     R1,#0x1
   6585                  break;
   \   00007E   8075         SJMP    ??zclSE_ProcessInTunnelingCmds_9
   6586              }
   6587            }
   6588            else
   6589            {
   6590              // Process Server commands, received by Client
   6591              switch ( pInMsg->hdr.commandID )
   \                     ??zclSE_ProcessInTunnelingCmds_0:
   \   000080   E0           MOVX    A,@DPTR
   \   000081   70A7         JNZ     ??zclSE_ProcessInTunnelingCmds_3
   6592              {
   6593                case COMMAND_SE_REQUEST_TUNNEL_RESPONSE:
   6594                  stat = zclSE_ProcessInCmd_Tunneling_ReqTunnelRsp( pInMsg, pCBs );
   \   000083   EE           MOV     A,R6
   \   000084   242E         ADD     A,#0x2e
   \   000086   F582         MOV     DPL,A
   \   000088   EF           MOV     A,R7
   \   000089   12....       LCALL   ??Subroutine185_0 & 0xFFFF
   6595                  break;
   6596          
   6597                case COMMAND_SE_DATA_SERVER_CLIENT_DIR:
   6598                  stat = zclSE_ProcessInCmd_Tunneling_TransferData( pInMsg, pCBs );
   6599                  break;
   6600          
   6601                case COMMAND_SE_DATA_ERROR_SERVER_CLIENT_DIR:
   6602                  stat = zclSE_ProcessInCmd_Tunneling_TransferDataError( pInMsg, pCBs );
   6603                  break;
   6604          
   6605                case COMMAND_SE_ACK_SERVER_CLIENT_DIR:
   6606                  stat = zclSE_ProcessInCmd_Tunneling_AckTransferData( pInMsg, pCBs );
   6607                  break;
   6608          
   6609                case COMMAND_SE_READY_DATA_SERVER_CLIENT_DIR:
   6610                  stat = zclSE_ProcessInCmd_Tunneling_ReadyData( pInMsg, pCBs );
   6611                  break;
   6612          
   6613          #ifdef SE_UK_EXT
   6614                case COMMAND_SE_SUPP_TUNNEL_PROTOCOLS_RSP:
   6615                  stat = zclSE_ProcessInCmd_Tunneling_SuppTunnelProtRsp( pInMsg, pCBs );
   6616                  break;
   6617          
   6618                case COMMAND_SE_TUNNEL_CLOSURE_NOTIFICATION:
   6619                  stat = zclSE_ProcessInCmd_Tunneling_TunnelClosureNotification( pInMsg, pCBs );
   6620                  break;
   6621          #endif  // SE_UK_EXT
   6622                default:
   6623                  stat = ZFailure;
   6624                  break;
   6625              }
   6626            }
   \                     ??CrossCallReturnLabel_448:
   \   00008C   60EE         JZ      ??zclSE_ProcessInTunnelingCmds_8
   \   00008E   EA           MOV     A,R2
   \   00008F   2408         ADD     A,#0x8
   \   000091   F8           MOV     R0,A
   \   000092   EB           MOV     A,R3
   \   000093   3400         ADDC    A,#0x0
   \   000095   F9           MOV     R1,A
   \   000096   E8           MOV     A,R0
   \   000097   FC           MOV     R4,A
   \   000098   E9           MOV     A,R1
   \   000099   12....       LCALL   ?Subroutine44 & 0xFFFF
   \                     ??CrossCallReturnLabel_395:
   \   00009C   F5..         MOV     ?V0 + 2,A
   \   00009E   A3           INC     DPTR
   \   00009F   E0           MOVX    A,@DPTR
   \   0000A0   F5..         MOV     ?V0 + 1,A
   \   0000A2   E5..         MOV     A,?V0 + 2
   \   0000A4   F5..         MOV     ?V0 + 0,A
   \   0000A6   7402         MOV     A,#0x2
   \   0000A8   12....       LCALL   ?XSTACK_DISP0_8
   \   0000AB   E5..         MOV     A,?V0 + 0
   \   0000AD   F0           MOVX    @DPTR,A
   \   0000AE   A3           INC     DPTR
   \   0000AF   E5..         MOV     A,?V0 + 1
   \   0000B1   12....       LCALL   ?Subroutine79 & 0xFFFF
   \                     ??CrossCallReturnLabel_126:
   \   0000B4   C0E0         PUSH    A
   \   0000B6   7404         MOV     A,#0x4
   \   0000B8   12....       LCALL   ?XSTACK_DISP0_8
   \   0000BB   D0E0         POP     A
   \   0000BD   F0           MOVX    @DPTR,A
   \   0000BE   8C82         MOV     DPL,R4
   \   0000C0   8D83         MOV     DPH,R5
   \   0000C2   12....       LCALL   ?Subroutine53 & 0xFFFF
   \                     ??CrossCallReturnLabel_66:
   \   0000C5   12....       LCALL   ?Subroutine55 & 0xFFFF
   \                     ??CrossCallReturnLabel_70:
   \   0000C8   E0           MOVX    A,@DPTR
   \   0000C9   F9           MOV     R1,A
   \   0000CA   EC           MOV     A,R4
   \   0000CB   F8           MOV     R0,A
   \   0000CC   7405         MOV     A,#0x5
   \   0000CE   12....       LCALL   ?XSTACK_DISP0_8
   \   0000D1   12....       LCALL   ?Subroutine123 & 0xFFFF
   \                     ??CrossCallReturnLabel_495:
   \   0000D4                ; Setup parameters for indirect call
   \   0000D4   8A82         MOV     DPL,R2
   \   0000D6   8B83         MOV     DPH,R3
   \   0000D8   12....       LCALL   ??Subroutine184_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_433:
   \   0000DB   12....       LCALL   ??Subroutine168_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_404:
   \   0000DE   7402         MOV     A,#0x2
   \   0000E0   12....       LCALL   ?XSTACK_DISP0_8
   \   0000E3   AA82         MOV     R2,DPL
   \   0000E5   AB83         MOV     R3,DPH
   \   0000E7   EE           MOV     A,R6
   \   0000E8   242E         ADD     A,#0x2e
   \                     ??zclSE_ProcessInTunnelingCmds_10:
   \   0000EA   F582         MOV     DPL,A
   \   0000EC   EF           MOV     A,R7
   \   0000ED   12....       LCALL   ??Subroutine180_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_416:
   \   0000F0   12....       LCALL   ?CALL_IND
   \   0000F3   7900         MOV     R1,#0x0
   6627          
   6628          
   6629            return ( stat );
   \                     ??zclSE_ProcessInTunnelingCmds_9:
   \   0000F5   7407         MOV     A,#0x7
   \   0000F7   02....       LJMP    ??Subroutine176_0 & 0xFFFF
   6630          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine44:
   \   000000   FD           MOV     R5,A
   \   000001   8C82         MOV     DPL,R4
   \   000003   8D83         MOV     DPH,R5
   \   000005                REQUIRE ??Subroutine178_0
   \   000005                ; // Fall through to label ??Subroutine178_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine178_0:
   \   000000   12....       LCALL   ?Subroutine106 & 0xFFFF
   \                     ??CrossCallReturnLabel_398:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine21:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   A3           INC     DPTR
   \   000002   E9           MOV     A,R1
   \   000003                REQUIRE ??Subroutine179_0
   \   000003                ; // Fall through to label ??Subroutine179_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine179_0:
   \   000000   12....       LCALL   ?Subroutine121 & 0xFFFF
   \                     ??CrossCallReturnLabel_402:
   \   000003   F9           MOV     R1,A
   \   000004   8A82         MOV     DPL,R2
   \   000006   8B83         MOV     DPH,R3
   \   000008   12....       LCALL   ??Subroutine168_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_408:
   \   00000B   85..82       MOV     DPL,?XSP + 0
   \   00000E   85..83       MOV     DPH,?XSP + 1
   \   000011   AA82         MOV     R2,DPL
   \   000013   AB83         MOV     R3,DPH
   \   000015   EE           MOV     A,R6
   \   000016   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine55:
   \   000000   12....       LCALL   ?Subroutine113 & 0xFFFF
   \                     ??CrossCallReturnLabel_171:
   \   000003   A3           INC     DPTR
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine53:
   \   000000   12....       LCALL   ?Subroutine116 & 0xFFFF
   \                     ??CrossCallReturnLabel_473:
   \   000003   8882         MOV     DPL,R0
   \   000005   8983         MOV     DPH,R1
   \   000007   A3           INC     DPTR
   \   000008   A3           INC     DPTR
   \   000009   A3           INC     DPTR
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine79:
   \   000000   12....       LCALL   ?Subroutine124 & 0xFFFF
   \                     ??CrossCallReturnLabel_182:
   \   000003   A3           INC     DPTR
   \   000004   E0           MOVX    A,@DPTR
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine184_0:
   \   000000   A3           INC     DPTR
   \   000001   A3           INC     DPTR
   \   000002   A3           INC     DPTR
   \   000003   A3           INC     DPTR
   \   000004   A3           INC     DPTR
   \   000005   A3           INC     DPTR
   \   000006   E0           MOVX    A,@DPTR
   \   000007   F9           MOV     R1,A
   \   000008   8A82         MOV     DPL,R2
   \   00000A   8B83         MOV     DPH,R3
   \   00000C   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine121:
   \   000000   F0           MOVX    @DPTR,A
   \   000001                ; Setup parameters for indirect call
   \   000001                ; Setup parameters for indirect call
   \   000001                ; Setup parameters for indirect call
   \   000001                ; Setup parameters for indirect call
   \   000001                ; Setup parameters for indirect call
   \   000001   8A82         MOV     DPL,R2
   \   000003   8B83         MOV     DPH,R3
   \   000005   A3           INC     DPTR
   \   000006   A3           INC     DPTR
   \   000007   A3           INC     DPTR
   \   000008   A3           INC     DPTR
   \   000009   A3           INC     DPTR
   \   00000A   A3           INC     DPTR
   \   00000B   E0           MOVX    A,@DPTR
   \   00000C   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine113:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   FC           MOV     R4,A
   \   000002   8882         MOV     DPL,R0
   \   000004   8983         MOV     DPH,R1
   \   000006   A3           INC     DPTR
   \   000007   A3           INC     DPTR
   \   000008   A3           INC     DPTR
   \   000009   22           RET
   6631          
   6632          /*********************************************************************
   6633           * @fn      zclSE_ProcessInCmd_Tunneling_RequestTunnel
   6634           *
   6635           * @brief   process in the received tunnel request
   6636           *
   6637           * @param   pInMsg - pointer to the incoming message
   6638           * @param   pCBs - pointer to the application call back function
   6639           *
   6640           * @return  ZStatus_t - ZFailure @ Unsupported
   6641           *                      ZCL_STATUS_CMD_HAS_RSP @ Supported and do
   6642           *                                           not need default rsp
   6643           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   6644          static ZStatus_t zclSE_ProcessInCmd_Tunneling_RequestTunnel( zclIncoming_t *pInMsg,
   \                     zclSE_ProcessInCmd_Tunneling_RequestTunnel:
   6645                                                                       zclSE_AppCallbacks_t *pCBs )
   6646          {
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 6
   \   000005   74FA         MOV     A,#-0x6
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   EC           MOV     A,R4
   \   00000B   FE           MOV     R6,A
   \   00000C   ED           MOV     A,R5
   \   00000D   FF           MOV     R7,A
   6647            if ( pCBs->pfnTunneling_RequestTunnel )
   \   00000E   EE           MOV     A,R6
   \   00000F   2438         ADD     A,#0x38
   \   000011   F582         MOV     DPL,A
   \   000013   EF           MOV     A,R7
   \   000014   12....       LCALL   ??Subroutine185_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_449:
   \   000017   6073         JZ      ??zclSE_ProcessInCmd_Tunneling_RequestTunnel_0
   6648            {
   6649              zclCCRequestTunnel_t  cmd;
   6650          
   6651              cmd.protocolId = pInMsg->pData[0];
   \   000019   EA           MOV     A,R2
   \   00001A   2408         ADD     A,#0x8
   \   00001C   F8           MOV     R0,A
   \   00001D   EB           MOV     A,R3
   \   00001E   12....       LCALL   ?Subroutine90 & 0xFFFF
   \                     ??CrossCallReturnLabel_145:
   \   000021   E0           MOVX    A,@DPTR
   \   000022   FC           MOV     R4,A
   \   000023   A3           INC     DPTR
   \   000024   E0           MOVX    A,@DPTR
   \   000025   F583         MOV     DPH,A
   \   000027   8C82         MOV     DPL,R4
   \   000029   12....       LCALL   ??Subroutine174_0 & 0xFFFF
   6652              cmd.manufacturerCode = BUILD_UINT16( pInMsg->pData[1], pInMsg->pData[2] );
   \                     ??CrossCallReturnLabel_380:
   \   00002C   8882         MOV     DPL,R0
   \   00002E   8983         MOV     DPH,R1
   \   000030   12....       LCALL   ??Subroutine164_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_338:
   \   000033   8C82         MOV     DPL,R4
   \   000035   8D83         MOV     DPH,R5
   \   000037   A3           INC     DPTR
   \   000038   E0           MOVX    A,@DPTR
   \   000039   F5..         MOV     ?V0 + 2,A
   \   00003B   8C82         MOV     DPL,R4
   \   00003D   8D83         MOV     DPH,R5
   \   00003F   A3           INC     DPTR
   \   000040   A3           INC     DPTR
   \   000041   E0           MOVX    A,@DPTR
   \   000042   F5..         MOV     ?V0 + 1,A
   \   000044   E5..         MOV     A,?V0 + 2
   \   000046   F5..         MOV     ?V0 + 0,A
   \   000048   7401         MOV     A,#0x1
   \   00004A   12....       LCALL   ?XSTACK_DISP0_8
   \   00004D   E5..         MOV     A,?V0 + 0
   \   00004F   F0           MOVX    @DPTR,A
   \   000050   A3           INC     DPTR
   \   000051   E5..         MOV     A,?V0 + 1
   \   000053   F0           MOVX    @DPTR,A
   6653              cmd.flowControlSupport = pInMsg->pData[3];
   \   000054   8C82         MOV     DPL,R4
   \   000056   8D83         MOV     DPH,R5
   \   000058   A3           INC     DPTR
   \   000059   A3           INC     DPTR
   \   00005A   A3           INC     DPTR
   \   00005B   E0           MOVX    A,@DPTR
   \   00005C   C0E0         PUSH    A
   \   00005E   7403         MOV     A,#0x3
   \   000060   12....       LCALL   ?XSTACK_DISP0_8
   \   000063   D0E0         POP     A
   \   000065   12....       LCALL   ?Subroutine140 & 0xFFFF
   6654              cmd.maxInTransferSize = BUILD_UINT16( pInMsg->pData[4], pInMsg->pData[5] );
   \                     ??CrossCallReturnLabel_202:
   \   000068   12....       LCALL   ?Subroutine53 & 0xFFFF
   \                     ??CrossCallReturnLabel_67:
   \   00006B   A3           INC     DPTR
   \   00006C   12....       LCALL   ?Subroutine55 & 0xFFFF
   \                     ??CrossCallReturnLabel_71:
   \   00006F   A3           INC     DPTR
   \   000070   E0           MOVX    A,@DPTR
   \   000071   F9           MOV     R1,A
   \   000072   EC           MOV     A,R4
   \   000073   F8           MOV     R0,A
   \   000074   7404         MOV     A,#0x4
   \   000076   12....       LCALL   ?XSTACK_DISP0_8
   \   000079   E8           MOV     A,R0
   \   00007A   12....       LCALL   ?Subroutine21 & 0xFFFF
   6655          
   6656              pCBs->pfnTunneling_RequestTunnel( &cmd, &(pInMsg->msg->srcAddr),
   6657                                                pInMsg->hdr.transSeqNum );
   \                     ??CrossCallReturnLabel_399:
   \   00007D   2438         ADD     A,#0x38
   \   00007F   F582         MOV     DPL,A
   \   000081   EF           MOV     A,R7
   \   000082   12....       LCALL   ??Subroutine180_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_417:
   \   000085   12....       LCALL   ?CALL_IND
   6658              return ZCL_STATUS_CMD_HAS_RSP;
   \   000088   79FF         MOV     R1,#-0x1
   \   00008A   8002         SJMP    ??zclSE_ProcessInCmd_Tunneling_RequestTunnel_1
   6659            }
   6660          
   6661            return ZFailure;
   \                     ??zclSE_ProcessInCmd_Tunneling_RequestTunnel_0:
   \   00008C   7901         MOV     R1,#0x1
   \                     ??zclSE_ProcessInCmd_Tunneling_RequestTunnel_1:
   \   00008E   7406         MOV     A,#0x6
   \   000090   02....       LJMP    ??Subroutine176_0 & 0xFFFF
   6662          }
   6663          
   6664          /*********************************************************************
   6665           * @fn      zclSE_ProcessInCmd_Tunneling_ReqTunnelRsp
   6666           *
   6667           * @brief  process in the received tunnel response
   6668           *
   6669           * @param   pInMsg - pointer to the incoming message
   6670           * @param   pCBs - pointer to the application call back function
   6671           *
   6672           * @return  ZStatus_t - ZFailure @ Unsupported
   6673           *                      ZSuccess @ Supported and send default rsp
   6674           */
   6675          static ZStatus_t zclSE_ProcessInCmd_Tunneling_ReqTunnelRsp( zclIncoming_t *pInMsg,
   6676                                                                      zclSE_AppCallbacks_t *pCBs )
   6677          {
   6678            if ( pCBs->pfnTunneling_ReqTunnelRsp )
   6679            {
   6680          
   6681              zclCCReqTunnelRsp_t cmd;
   6682          
   6683              cmd.tunnelId = BUILD_UINT16( pInMsg->pData[0], pInMsg->pData[1] );
   6684              cmd.tunnelStatus = pInMsg->pData[2];
   6685              cmd.maxInTransferSize = BUILD_UINT16( pInMsg->pData[3], pInMsg->pData[4] );
   6686          
   6687              pCBs->pfnTunneling_ReqTunnelRsp( &cmd, &(pInMsg->msg->srcAddr),
   6688                                               pInMsg->hdr.transSeqNum );
   6689              return ZSuccess;
   6690            }
   6691          
   6692            return ZFailure;
   6693          }
   6694          
   6695          /*********************************************************************
   6696           * @fn      zclSE_ProcessInCmd_Tunneling_CloseTunnel
   6697           *
   6698           * @brief   process in the received tunnel close
   6699           *
   6700           * @param   pInMsg - pointer to the incoming message
   6701           * @param   pCBs - pointer to the application call back function
   6702           *
   6703           * @return  ZStatus_t - ZFailure @ Unsupported
   6704           *                      ZSuccess @ Supported and send default rsp
   6705           */
   6706          static ZStatus_t zclSE_ProcessInCmd_Tunneling_CloseTunnel( zclIncoming_t *pInMsg,
   6707                                                                     zclSE_AppCallbacks_t *pCBs )
   6708          {
   6709            if ( pCBs->pfnTunneling_CloseTunnel )
   6710            {
   6711              zclCCCloseTunnel_t cmd;
   6712          
   6713              cmd.tunnelId = BUILD_UINT16( pInMsg->pData[0], pInMsg->pData[1] );
   6714          
   6715              pCBs->pfnTunneling_CloseTunnel( &cmd, &(pInMsg->msg->srcAddr),
   6716                                              pInMsg->hdr.transSeqNum );
   6717              return ZSuccess;
   6718            }
   6719          
   6720            return ZFailure;
   6721          }
   6722          
   6723          /*********************************************************************
   6724           * @fn      zclSE_ProcessInCmd_Tunneling_TransferData
   6725           *
   6726           * @brief   process in the received tunnel transfer data
   6727           *
   6728           * @param   pInMsg - pointer to the incoming message
   6729           * @param   pCBs - pointer to the application call back function
   6730           *
   6731           * @return  ZStatus_t - ZFailure @ Unsupported
   6732           *                      ZCL_STATUS_CMD_HAS_RSP @ Supported and do
   6733           *                                           not need default rsp
   6734           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine60:
   \   000000   A3           INC     DPTR
   \   000001   A3           INC     DPTR
   \   000002   A3           INC     DPTR
   \   000003                REQUIRE ??Subroutine164_0
   \   000003                ; // Fall through to label ??Subroutine164_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   6735          static ZStatus_t zclSE_ProcessInCmd_Tunneling_TransferData( zclIncoming_t *pInMsg,
   \                     zclSE_ProcessInCmd_Tunneling_TransferData:
   6736                                                                      zclSE_AppCallbacks_t *pCBs )
   6737          {
   \   000000   74F3         MOV     A,#-0xd
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 13
   \   000005                ; Auto size: 4
   \   000005   74FC         MOV     A,#-0x4
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   EA           MOV     A,R2
   \   00000B   FE           MOV     R6,A
   \   00000C   EB           MOV     A,R3
   \   00000D   FF           MOV     R7,A
   \   00000E   8C..         MOV     ?V0 + 0,R4
   \   000010   8D..         MOV     ?V0 + 1,R5
   6738            if ( pCBs->pfnTunneling_TransferData )
   \   000012   EC           MOV     A,R4
   \   000013   2430         ADD     A,#0x30
   \   000015   12....       LCALL   ?Subroutine11 & 0xFFFF
   \                     ??CrossCallReturnLabel_470:
   \   000018   6071         JZ      ??zclSE_ProcessInCmd_Tunneling_TransferData_0
   6739            {
   6740              zclCCTransferData_t cmd;
   6741              uint16 dataLen = pInMsg->pDataLen - PACKET_LEN_SE_TUNNELING_TRANSFER_DATA;
   \   00001A   8E82         MOV     DPL,R6
   \   00001C   8F83         MOV     DPH,R7
   \   00001E   A3           INC     DPTR
   \   00001F   A3           INC     DPTR
   \   000020   A3           INC     DPTR
   \   000021   A3           INC     DPTR
   \   000022   A3           INC     DPTR
   \   000023   A3           INC     DPTR
   \   000024   A3           INC     DPTR
   \   000025   A3           INC     DPTR
   \   000026   A3           INC     DPTR
   \   000027   A3           INC     DPTR
   \   000028   12....       LCALL   ?Subroutine116 & 0xFFFF
   \                     ??CrossCallReturnLabel_472:
   \   00002B   E8           MOV     A,R0
   \   00002C   24FE         ADD     A,#-0x2
   \   00002E   F5..         MOV     ?V0 + 2,A
   \   000030   E9           MOV     A,R1
   \   000031   34FF         ADDC    A,#-0x1
   \   000033   F5..         MOV     ?V0 + 3,A
   6742          
   6743              zclSE_ParseInCmd_TransferData( &cmd, &(pInMsg->pData[0]), pInMsg->pDataLen );
   \   000035                ; Setup parameters for call to function zclSE_ParseInCmd_TransferData
   \   000035   E8           MOV     A,R0
   \   000036   F9           MOV     R1,A
   \   000037   8E82         MOV     DPL,R6
   \   000039   8F83         MOV     DPH,R7
   \   00003B   A3           INC     DPTR
   \   00003C   A3           INC     DPTR
   \   00003D   A3           INC     DPTR
   \   00003E   A3           INC     DPTR
   \   00003F   A3           INC     DPTR
   \   000040   12....       LCALL   ?Subroutine60 & 0xFFFF
   \                     ??CrossCallReturnLabel_340:
   \   000043   85..82       MOV     DPL,?XSP + 0
   \   000046   85..83       MOV     DPH,?XSP + 1
   \   000049   AA82         MOV     R2,DPL
   \   00004B   AB83         MOV     R3,DPH
   \   00004D   12....       LCALL   ??zclSE_ParseInCmd_TransferData?relay
   6744          
   6745              pCBs->pfnTunneling_TransferData( &cmd, &(pInMsg->msg->srcAddr),
   6746                                               pInMsg->hdr.commandID, dataLen,
   6747                                               pInMsg->hdr.transSeqNum );
   \   000050                ; Setup parameters for indirect call
   \   000050   8E82         MOV     DPL,R6
   \   000052   8F83         MOV     DPH,R7
   \   000054   A3           INC     DPTR
   \   000055   A3           INC     DPTR
   \   000056   A3           INC     DPTR
   \   000057   A3           INC     DPTR
   \   000058   A3           INC     DPTR
   \   000059   A3           INC     DPTR
   \   00005A   E0           MOVX    A,@DPTR
   \   00005B   F5..         MOV     ?V0 + 4,A
   \   00005D   78..         MOV     R0,#?V0 + 4
   \   00005F   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000062   78..         MOV     R0,#?V0 + 2
   \   000064   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000067   8E82         MOV     DPL,R6
   \   000069   8F83         MOV     DPH,R7
   \   00006B   A3           INC     DPTR
   \   00006C   12....       LCALL   ??Subroutine167_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_348:
   \   00006F   7403         MOV     A,#0x3
   \   000071   12....       LCALL   ?XSTACK_DISP0_8
   \   000074   AA82         MOV     R2,DPL
   \   000076   AB83         MOV     R3,DPH
   \   000078   E5..         MOV     A,?V0 + 0
   \   00007A   2430         ADD     A,#0x30
   \   00007C   12....       LCALL   ?Subroutine50 & 0xFFFF
   \                     ??CrossCallReturnLabel_427:
   \   00007F   12....       LCALL   ?CALL_IND
   \   000082   7403         MOV     A,#0x3
   \   000084   12....       LCALL   ?DEALLOC_XSTACK8
   6748              return ZCL_STATUS_CMD_HAS_RSP;
   \   000087   79FF         MOV     R1,#-0x1
   \   000089   8002         SJMP    ??zclSE_ProcessInCmd_Tunneling_TransferData_1
   6749            }
   6750          
   6751            return ZFailure;
   \                     ??zclSE_ProcessInCmd_Tunneling_TransferData_0:
   \   00008B   7901         MOV     R1,#0x1
   \                     ??zclSE_ProcessInCmd_Tunneling_TransferData_1:
   \   00008D   7404         MOV     A,#0x4
   \   00008F   02....       LJMP    ??Subroutine153_0 & 0xFFFF
   6752          }
   6753          
   6754          /*********************************************************************
   6755           * @fn      zclSE_ProcessInCmd_Tunneling_TransferDataError
   6756           *
   6757           * @brief   process in the transfer data error
   6758           *
   6759           * @param   pInMsg - pointer to the incoming message
   6760           * @param   pCBs - pointer to the application call back function
   6761           *
   6762           * @return  ZStatus_t - ZFailure @ Unsupported
   6763           *                      ZSuccess @ Supported and send default rsp
   6764           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   6765          static ZStatus_t zclSE_ProcessInCmd_Tunneling_TransferDataError( zclIncoming_t *pInMsg,
   \                     zclSE_ProcessInCmd_Tunneling_TransferDataError:
   6766                                                                           zclSE_AppCallbacks_t *pCBs )
   6767          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 3
   \   000005   74FD         MOV     A,#-0x3
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   EC           MOV     A,R4
   \   00000B   FE           MOV     R6,A
   \   00000C   ED           MOV     A,R5
   \   00000D   FF           MOV     R7,A
   6768            if ( pCBs->pfnTunneling_TransferDataError )
   \   00000E   EE           MOV     A,R6
   \   00000F   2432         ADD     A,#0x32
   \   000011   F582         MOV     DPL,A
   \   000013   EF           MOV     A,R7
   \   000014   12....       LCALL   ??Subroutine185_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_450:
   \   000017   6030         JZ      ??zclSE_ProcessInCmd_Tunneling_TransferDataErro_1
   6769            {
   6770              zclCCTransferDataError_t cmd;
   6771          
   6772              cmd.tunnelId = BUILD_UINT16( pInMsg->pData[0], pInMsg->pData[1] );
   \   000019   8A82         MOV     DPL,R2
   \   00001B   8B83         MOV     DPH,R3
   \   00001D   A3           INC     DPTR
   \   00001E   A3           INC     DPTR
   \   00001F   A3           INC     DPTR
   \   000020   A3           INC     DPTR
   \   000021   A3           INC     DPTR
   \   000022   A3           INC     DPTR
   \   000023   A3           INC     DPTR
   \   000024   A3           INC     DPTR
   \   000025   12....       LCALL   ??Subroutine178_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_393:
   \   000028   12....       LCALL   ?Subroutine109 & 0xFFFF
   \                     ??CrossCallReturnLabel_165:
   \   00002B   12....       LCALL   ?Subroutine79 & 0xFFFF
   6773              cmd.transferDataStatus = pInMsg->pData[2];
   \                     ??CrossCallReturnLabel_125:
   \   00002E   C0E0         PUSH    A
   \   000030   7402         MOV     A,#0x2
   \   000032   12....       LCALL   ?XSTACK_DISP0_8
   \   000035   D0E0         POP     A
   \   000037   12....       LCALL   ??Subroutine179_0 & 0xFFFF
   6774          
   6775              pCBs->pfnTunneling_TransferDataError( &cmd, &(pInMsg->msg->srcAddr),
   6776                                                    pInMsg->hdr.transSeqNum );
   \                     ??CrossCallReturnLabel_400:
   \   00003A   2432         ADD     A,#0x32
   \   00003C   F582         MOV     DPL,A
   \   00003E   EF           MOV     A,R7
   \   00003F   12....       LCALL   ??Subroutine180_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_418:
   \   000042   12....       LCALL   ?CALL_IND
   6777              return ZSuccess;
   \   000045   7900         MOV     R1,#0x0
   \   000047   8002         SJMP    ??zclSE_ProcessInCmd_Tunneling_TransferDataErro_2
   6778            }
   6779          
   6780            return ZFailure;
   \                     ??zclSE_ProcessInCmd_Tunneling_TransferDataErro_1:
   \   000049   7901         MOV     R1,#0x1
   \                     ??zclSE_ProcessInCmd_Tunneling_TransferDataErro_2:
   \   00004B   7403         MOV     A,#0x3
   \   00004D   80..         SJMP    ??Subroutine182_0
   6781          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine109:
   \   000000   F5..         MOV     ?V0 + 0,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   FD           MOV     R5,A
   \   000005   E5..         MOV     A,?V0 + 0
   \   000007   85..82       MOV     DPL,?XSP + 0
   \   00000A   85..83       MOV     DPH,?XSP + 1
   \   00000D   F0           MOVX    @DPTR,A
   \   00000E   A3           INC     DPTR
   \   00000F   ED           MOV     A,R5
   \   000010   22           RET
   6782          
   6783          /*********************************************************************
   6784           * @fn      zclSE_ProcessInCmd_Tunneling_AckTransferData
   6785           *
   6786           * @brief   Process in the received Ack Transfer Data
   6787           *
   6788           * @param   pInMsg - pointer to the incoming message
   6789           * @param   pCBs - pointer to the application call back function
   6790           *
   6791           * @return  ZStatus_t - ZFailure @ Unsupported
   6792           *                      ZSuccess @ Supported and send default rsp
   6793           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   6794          static ZStatus_t zclSE_ProcessInCmd_Tunneling_AckTransferData( zclIncoming_t *pInMsg,
   \                     zclSE_ProcessInCmd_Tunneling_AckTransferData:
   6795                                                                         zclSE_AppCallbacks_t *pCBs )
   6796          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 4
   \   000005   74FC         MOV     A,#-0x4
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   EC           MOV     A,R4
   \   00000B   FE           MOV     R6,A
   \   00000C   ED           MOV     A,R5
   \   00000D   FF           MOV     R7,A
   6797            if ( pCBs->pfnTunneling_AckTransferData )
   \   00000E   EE           MOV     A,R6
   \   00000F   2434         ADD     A,#0x34
   \   000011   F582         MOV     DPL,A
   \   000013   EF           MOV     A,R7
   \   000014   12....       LCALL   ??Subroutine185_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_451:
   \   000017   602E         JZ      ??zclSE_ProcessInCmd_Tunneling_AckTransferData_0
   6798            {
   6799              zclCCAckTransferData_t cmd;
   6800          
   6801              cmd.tunnelId = BUILD_UINT16( pInMsg->pData[0], pInMsg->pData[1] );
   \   000019   12....       LCALL   ?Subroutine22 & 0xFFFF
   6802              cmd.numberOfBytesLeft = BUILD_UINT16( pInMsg->pData[2], pInMsg->pData[3] );
   \                     ??CrossCallReturnLabel_14:
   \   00001C   12....       LCALL   ?XSTACK_DISP0_8
   \   00001F   12....       LCALL   ?Subroutine71 & 0xFFFF
   6803          
   6804              pCBs->pfnTunneling_AckTransferData( &cmd, &(pInMsg->msg->srcAddr),
   6805                                                  pInMsg->hdr.commandID,
   6806                                                  pInMsg->hdr.transSeqNum );
   \                     ??CrossCallReturnLabel_108:
   \   000022   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000025   12....       LCALL   ?Subroutine58 & 0xFFFF
   \                     ??CrossCallReturnLabel_434:
   \   000028   12....       LCALL   ??Subroutine172_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_368:
   \   00002B   12....       LCALL   ?XSTACK_DISP0_8
   \   00002E   AA82         MOV     R2,DPL
   \   000030   AB83         MOV     R3,DPH
   \   000032   EE           MOV     A,R6
   \   000033   2434         ADD     A,#0x34
   \   000035   F582         MOV     DPL,A
   \   000037   EF           MOV     A,R7
   \   000038   12....       LCALL   ??Subroutine180_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_419:
   \   00003B   12....       LCALL   ?CALL_IND
   \   00003E   7401         MOV     A,#0x1
   \   000040   12....       LCALL   ?DEALLOC_XSTACK8
   6807              return ZSuccess;
   \   000043   7900         MOV     R1,#0x0
   \   000045   8002         SJMP    ??zclSE_ProcessInCmd_Tunneling_AckTransferData_1
   6808            }
   6809          
   6810            return ZFailure;
   \                     ??zclSE_ProcessInCmd_Tunneling_AckTransferData_0:
   \   000047   7901         MOV     R1,#0x1
   \                     ??zclSE_ProcessInCmd_Tunneling_AckTransferData_1:
   \   000049                REQUIRE ?Subroutine10
   \   000049                ; // Fall through to label ?Subroutine10
   6811          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine10:
   \   000000   7404         MOV     A,#0x4
   \   000002   80..         SJMP    ??Subroutine182_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine58:
   \   000000   8A82         MOV     DPL,R2
   \   000002   8B83         MOV     DPH,R3
   \   000004   A3           INC     DPTR
   \   000005                REQUIRE ??Subroutine184_0
   \   000005                ; // Fall through to label ??Subroutine184_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine71:
   \   000000   E8           MOV     A,R0
   \   000001   F0           MOVX    @DPTR,A
   \   000002   A3           INC     DPTR
   \   000003   E9           MOV     A,R1
   \   000004   12....       LCALL   ?Subroutine121 & 0xFFFF
   \                     ??CrossCallReturnLabel_403:
   \   000007   F5..         MOV     ?V0 + 0,A
   \   000009   78..         MOV     R0,#?V0 + 0
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine22:
   \   000000   8A82         MOV     DPL,R2
   \   000002   8B83         MOV     DPH,R3
   \   000004   A3           INC     DPTR
   \   000005   A3           INC     DPTR
   \   000006   A3           INC     DPTR
   \   000007   A3           INC     DPTR
   \   000008   A3           INC     DPTR
   \   000009   A3           INC     DPTR
   \   00000A   A3           INC     DPTR
   \   00000B   A3           INC     DPTR
   \   00000C   12....       LCALL   ?Subroutine106 & 0xFFFF
   \                     ??CrossCallReturnLabel_397:
   \   00000F   12....       LCALL   ?Subroutine109 & 0xFFFF
   \                     ??CrossCallReturnLabel_166:
   \   000012   12....       LCALL   ?Subroutine124 & 0xFFFF
   \                     ??CrossCallReturnLabel_183:
   \   000015   A3           INC     DPTR
   \   000016   12....       LCALL   ?Subroutine113 & 0xFFFF
   \                     ??CrossCallReturnLabel_170:
   \   000019   E0           MOVX    A,@DPTR
   \   00001A   F9           MOV     R1,A
   \   00001B   EC           MOV     A,R4
   \   00001C   F8           MOV     R0,A
   \   00001D   7402         MOV     A,#0x2
   \   00001F   22           RET
   6812          
   6813          /*********************************************************************
   6814           * @fn      zclSE_ProcessInCmd_Tunneling_ReadyData
   6815           *
   6816           * @brief   Process in the received Ready Data
   6817           *
   6818           * @param   pInMsg - pointer to the incoming message
   6819           * @param   pCBs - pointer to the application call back function
   6820           *
   6821           * @return  ZStatus_t - ZFailure @ Unsupported
   6822           *                      ZSuccess @ Supported and send default rsp
   6823           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   6824          static ZStatus_t zclSE_ProcessInCmd_Tunneling_ReadyData( zclIncoming_t *pInMsg,
   \                     zclSE_ProcessInCmd_Tunneling_ReadyData:
   6825                                                                   zclSE_AppCallbacks_t *pCBs )
   6826          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 4
   \   000005   74FC         MOV     A,#-0x4
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   EC           MOV     A,R4
   \   00000B   FE           MOV     R6,A
   \   00000C   ED           MOV     A,R5
   \   00000D   FF           MOV     R7,A
   6827            if ( pCBs->pfnTunneling_ReadyData )
   \   00000E   EE           MOV     A,R6
   \   00000F   2436         ADD     A,#0x36
   \   000011   F582         MOV     DPL,A
   \   000013   EF           MOV     A,R7
   \   000014   12....       LCALL   ??Subroutine185_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_452:
   \   000017   602E         JZ      ??zclSE_ProcessInCmd_Tunneling_ReadyData_0
   6828            {
   6829              zclCCReadyData_t cmd;
   6830          
   6831              cmd.tunnelId = BUILD_UINT16( pInMsg->pData[0], pInMsg->pData[1] );
   \   000019   12....       LCALL   ?Subroutine22 & 0xFFFF
   6832              cmd.numberOfOctetsLeft = BUILD_UINT16( pInMsg->pData[2], pInMsg->pData[3] );
   \                     ??CrossCallReturnLabel_15:
   \   00001C   12....       LCALL   ?XSTACK_DISP0_8
   \   00001F   12....       LCALL   ?Subroutine71 & 0xFFFF
   6833          
   6834              pCBs->pfnTunneling_ReadyData( &cmd, &(pInMsg->msg->srcAddr),
   6835                                            pInMsg->hdr.commandID,
   6836                                            pInMsg->hdr.transSeqNum );
   \                     ??CrossCallReturnLabel_109:
   \   000022   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000025   12....       LCALL   ?Subroutine58 & 0xFFFF
   \                     ??CrossCallReturnLabel_435:
   \   000028   12....       LCALL   ??Subroutine172_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_369:
   \   00002B   12....       LCALL   ?XSTACK_DISP0_8
   \   00002E   AA82         MOV     R2,DPL
   \   000030   AB83         MOV     R3,DPH
   \   000032   EE           MOV     A,R6
   \   000033   2436         ADD     A,#0x36
   \   000035   F582         MOV     DPL,A
   \   000037   EF           MOV     A,R7
   \   000038   12....       LCALL   ??Subroutine180_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_420:
   \   00003B   12....       LCALL   ?CALL_IND
   \   00003E   7401         MOV     A,#0x1
   \   000040   12....       LCALL   ?DEALLOC_XSTACK8
   6837              return ZSuccess;
   \   000043   7900         MOV     R1,#0x0
   \   000045   8002         SJMP    ??zclSE_ProcessInCmd_Tunneling_ReadyData_1
   6838            }
   6839          
   6840            return ZFailure;
   \                     ??zclSE_ProcessInCmd_Tunneling_ReadyData_0:
   \   000047   7901         MOV     R1,#0x1
   \                     ??zclSE_ProcessInCmd_Tunneling_ReadyData_1:
   \   000049   80..         SJMP    ?Subroutine10
   6841          }
   6842          
   6843          #ifdef SE_UK_EXT
   6844          /*********************************************************************
   6845           * @fn      zclSE_ProcessInCmd_Tunneling_GetSuppTunnelProt
   6846           *
   6847           * @brief   Process in the received Get Supported Tunnel Protocols
   6848           *
   6849           * @param   pInMsg - pointer to the incoming message
   6850           * @param   pCBs - pointer to the application call back function
   6851           *
   6852           * @return  ZStatus_t - ZFailure @ Unsupported
   6853           *                      ZCL_STATUS_CMD_HAS_RSP @ Supported and do
   6854           *                                           not need default rsp
   6855           */
   6856          static ZStatus_t zclSE_ProcessInCmd_Tunneling_GetSuppTunnelProt( zclIncoming_t *pInMsg,
   6857                                                                           zclSE_AppCallbacks_t *pCBs )
   6858          {
   6859            if ( pCBs->pfnTunneling_GetSuppTunnelProt )
   6860            {
   6861              zclCCGetSuppTunnProt_t cmd;
   6862          
   6863              cmd.protocolOffset = pInMsg->pData[0];
   6864          
   6865              pCBs->pfnTunneling_GetSuppTunnelProt( &cmd, &(pInMsg->msg->srcAddr),
   6866                                                    pInMsg->hdr.transSeqNum );
   6867          
   6868              return ZCL_STATUS_CMD_HAS_RSP;
   6869            }
   6870          
   6871            return ZFailure;
   6872          }
   6873          
   6874          /*********************************************************************
   6875           * @fn      zclSE_ProcessInCmd_Tunneling_SuppTunnelProtRsp
   6876           *
   6877           * @brief   Process in the received Supported Tunnel Protocols Response
   6878           *
   6879           * @param   pInMsg - pointer to the incoming message
   6880           * @param   pCBs - pointer to the application call back function
   6881           *
   6882           * @return  ZStatus_t - ZFailure @ Unsupported
   6883           *                      ZCL_STATUS_CMD_HAS_RSP @ Supported and do
   6884           *                                           not need default rsp
   6885           *                      ZCL_STATUS_SOFTWARE_FAILURE @ ZStack memory allocation failure
   6886           */
   6887          static ZStatus_t zclSE_ProcessInCmd_Tunneling_SuppTunnelProtRsp( zclIncoming_t *pInMsg,
   6888                                                                          zclSE_AppCallbacks_t *pCBs )
   6889          {
   6890            if ( pCBs->pfnTunneling_SuppTunnelProtRsp )
   6891            {
   6892              zclCCSuppTunnProtRsp_t *pCmd;
   6893              uint8 i;
   6894              uint8 *buf;
   6895          
   6896              pCmd = ( zclCCSuppTunnProtRsp_t * )osal_mem_alloc( sizeof( zclCCSuppTunnProtRsp_t ) +
   6897                                                              (sizeof( zclCCProtocolPayload_t ) * pInMsg->pData[1]) );
   6898              if ( pCmd != NULL )
   6899              {
   6900                buf = &(pInMsg->pData[0]);
   6901          
   6902                pCmd->protocolListComp = *buf++;
   6903                pCmd->protocolCount = *buf++;
   6904          
   6905                for ( i = 0; i < pCmd->protocolCount; i++ )
   6906                {
   6907                  pCmd->protocol[i].manufacturerCode = BUILD_UINT16( buf[0], buf[1] );
   6908                  buf += 2;
   6909                  pCmd->protocol[i].protocolId = *buf++;
   6910                }
   6911          
   6912                pCBs->pfnTunneling_SuppTunnelProtRsp( pCmd, &(pInMsg->msg->srcAddr), pInMsg->hdr.transSeqNum );
   6913          
   6914                osal_mem_free( pCmd );
   6915          
   6916                return ZCL_STATUS_CMD_HAS_RSP;
   6917              }
   6918              else
   6919              {
   6920                return ZCL_STATUS_SOFTWARE_FAILURE;
   6921              }
   6922            }
   6923          
   6924            return ZFailure;
   6925          }
   6926          
   6927          /*********************************************************************
   6928           * @fn      zclSE_ProcessInCmd_Tunneling_TunnelClosureNotification
   6929           *
   6930           * @brief   Process in the received Tunnel Closure Notification
   6931           *
   6932           * @param   pInMsg - pointer to the incoming message
   6933           * @param   pCBs - pointer to the application call back function
   6934           *
   6935           * @return  ZStatus_t - ZFailure @ Unsupported
   6936           *                      ZSuccess @ Supported and send default rsp
   6937           */
   6938          static ZStatus_t zclSE_ProcessInCmd_Tunneling_TunnelClosureNotification( zclIncoming_t *pInMsg,
   6939                                                                                   zclSE_AppCallbacks_t *pCBs )
   6940          {
   6941            if ( pCBs->pfnTunneling_TunnelClosureNotification )
   6942            {
   6943              zclCCTunnelClosureNotification_t cmd;
   6944          
   6945              cmd.tunnelId = BUILD_UINT16( pInMsg->pData[0], pInMsg->pData[1] );
   6946          
   6947              pCBs->pfnTunneling_TunnelClosureNotification( &cmd, &(pInMsg->msg->srcAddr),
   6948                                                            pInMsg->hdr.transSeqNum );
   6949          
   6950              return ZSuccess;
   6951            }
   6952          
   6953            return ZFailure;
   6954          }
   6955          #endif  // SE_UK_EXT
   6956          #endif  // ZCL_TUNNELING
   6957          
   6958          #ifdef ZCL_TOU
   6959          #ifdef SE_UK_EXT
   6960          /*********************************************************************
   6961           * @fn      zclSE_ProcessInTouCmds
   6962           *
   6963           * @brief   Callback from ZCL to process incoming Commands specific
   6964           *          to this cluster library on a command ID basis
   6965           *
   6966           * @param   pInMsg - pointer to the incoming message
   6967           * @param   pCBs - pointer to the application call back function
   6968           *
   6969           * @return  ZStatus_t
   6970           */
   6971          static ZStatus_t zclSE_ProcessInTouCmds( zclIncoming_t *pInMsg, zclSE_AppCallbacks_t *pCBs )
   6972          {
   6973            ZStatus_t stat;
   6974          
   6975            if ( zcl_ServerCmd( pInMsg->hdr.fc.direction ) )
   6976            {
   6977              // Process Client commands, received by Server
   6978              switch ( pInMsg->hdr.commandID )
   6979              {
   6980                case COMMAND_SE_GET_CALENDAR:
   6981                  stat = zclSE_ProcessInCmd_Tou_GetCalendar( pInMsg, pCBs );
   6982                  break;
   6983          
   6984                case COMMAND_SE_GET_DAY_PROFILES:
   6985                  stat = zclSE_ProcessInCmd_Tou_GetDayProfiles( pInMsg, pCBs );
   6986                  break;
   6987          
   6988                case COMMAND_SE_GET_WEEK_PROFILES:
   6989                  stat = zclSE_ProcessInCmd_Tou_GetWeekProfiles( pInMsg, pCBs );
   6990                  break;
   6991          
   6992                case COMMAND_SE_GET_SEASONS:
   6993                  stat = zclSE_ProcessInCmd_Tou_GetSeasons( pInMsg, pCBs );
   6994                  break;
   6995          
   6996                case COMMAND_SE_GET_SPECIAL_DAYS:
   6997                  stat = zclSE_ProcessInCmd_Tou_GetSpecialDays( pInMsg, pCBs );
   6998                  break;
   6999          
   7000                default:
   7001                  stat = ZFailure;
   7002                  break;
   7003              }
   7004            }
   7005            else
   7006            {
   7007              // Process Server commands, received by Client
   7008              switch ( pInMsg->hdr.commandID )
   7009              {
   7010                case COMMAND_SE_PUBLISH_CALENDAR:
   7011                  stat = zclSE_ProcessInCmd_Tou_PublishCalendar( pInMsg, pCBs );
   7012                  break;
   7013          
   7014                case COMMAND_SE_PUBLISH_DAY_PROFILE:
   7015                  stat = zclSE_ProcessInCmd_Tou_PublishDayProfile( pInMsg, pCBs );
   7016                  break;
   7017          
   7018                case COMMAND_SE_PUBLISH_WEEK_PROFILE:
   7019                  stat = zclSE_ProcessInCmd_Tou_PublishWeekProfile( pInMsg, pCBs );
   7020                  break;
   7021          
   7022                case COMMAND_SE_PUBLISH_SEASONS:
   7023                  stat = zclSE_ProcessInCmd_Tou_PublishSeasons( pInMsg, pCBs );
   7024                  break;
   7025          
   7026                case COMMAND_SE_PUBLISH_SPECIAL_DAYS:
   7027                  stat = zclSE_ProcessInCmd_Tou_PublishSpecialDays( pInMsg, pCBs );
   7028                  break;
   7029          
   7030                default:
   7031                  stat = ZFailure;
   7032                  break;
   7033              }
   7034            }
   7035          
   7036            return ( stat );
   7037          }
   7038          
   7039          /*********************************************************************
   7040           * @fn      zclSE_ProcessInCmd_Tou_PublishCalendar
   7041           *
   7042           * @brief   process in the received Publish Calendar
   7043           *
   7044           * @param   pInMsg - pointer to the incoming message
   7045           * @param   pCBs - pointer to the application call back function
   7046           *
   7047           * @return  ZStatus_t - ZFailure @ Unsupported
   7048           *                      ZSuccess @ Supported and need default rsp
   7049           */
   7050          static ZStatus_t zclSE_ProcessInCmd_Tou_PublishCalendar( zclIncoming_t *pInMsg,
   7051                                                                   zclSE_AppCallbacks_t *pCBs )
   7052          {
   7053            if ( pCBs->pfnTou_PublishCalendar )
   7054            {
   7055              zclCCPublishCalendar_t cmd;
   7056          
   7057              zclSE_ParseInCmd_PublishCalendar( &cmd, &(pInMsg->pData[0]), pInMsg->pDataLen );
   7058          
   7059              pCBs->pfnTou_PublishCalendar( &cmd, &(pInMsg->msg->srcAddr),
   7060                                            pInMsg->hdr.transSeqNum );
   7061              return ZSuccess;
   7062            }
   7063          
   7064            return ZFailure;
   7065          }
   7066          
   7067          /*********************************************************************
   7068           * @fn      zclSE_ProcessInCmd_Tou_PublishDayProfile
   7069           *
   7070           * @brief   process in the received Publish Day Profile
   7071           *
   7072           * @param   pInMsg - pointer to the incoming message
   7073           * @param   pCBs - pointer to the application call back function
   7074           *
   7075           * @return  ZStatus_t - ZFailure @ Unsupported
   7076           *                      ZSuccess @ Supported and need default rsp
   7077           *                      ZCL_STATUS_SOFTWARE_FAILURE @ ZStack memory allocation failure
   7078           */
   7079          static ZStatus_t zclSE_ProcessInCmd_Tou_PublishDayProfile( zclIncoming_t *pInMsg,
   7080                                                                     zclSE_AppCallbacks_t *pCBs )
   7081          {
   7082            if ( pCBs->pfnTou_PublishDayProfile )
   7083            {
   7084              zclCCPublishDayProfile_t cmd;
   7085          
   7086              if ( zclSE_ParseInCmd_PublishDayProfile( &cmd, &(pInMsg->pData[0]),
   7087                                                          pInMsg->pDataLen ) == ZSuccess )
   7088              {
   7089                pCBs->pfnTou_PublishDayProfile( &cmd, &(pInMsg->msg->srcAddr),
   7090                                                pInMsg->hdr.transSeqNum );
   7091          
   7092                // Free the memory allocated in zclSE_ParseInCmd_PublishDayProfile()
   7093                if ( cmd.pScheduleEntries != NULL )
   7094                {
   7095                  osal_mem_free( cmd.pScheduleEntries );
   7096                }
   7097          
   7098                return ZSuccess;
   7099              }
   7100              else
   7101              {
   7102                return ZCL_STATUS_SOFTWARE_FAILURE;
   7103              }
   7104            }
   7105          
   7106            return ZFailure;
   7107          }
   7108          
   7109          /*********************************************************************
   7110           * @fn      zclSE_ProcessInCmd_Tou_PublishWeekProfile
   7111           *
   7112           * @brief   process in the received Publish Week Profile
   7113           *
   7114           * @param   pInMsg - pointer to the incoming message
   7115           * @param   pCBs - pointer to the application call back function
   7116           *
   7117           * @return  ZStatus_t - ZFailure @ Unsupported
   7118           *                      ZSuccess @ Supported and need default rsp
   7119           */
   7120          static ZStatus_t zclSE_ProcessInCmd_Tou_PublishWeekProfile( zclIncoming_t *pInMsg, zclSE_AppCallbacks_t *pCBs )
   7121          {
   7122            if ( pCBs->pfnTou_PublishWeekProfile )
   7123            {
   7124              zclCCPublishWeekProfile_t cmd;
   7125          
   7126              // Parse the command buffer
   7127              cmd.issuerCalendarId = osal_build_uint32( pInMsg->pData, 4 );
   7128          
   7129              cmd.weekId = pInMsg->pData[4];
   7130              cmd.dayIdRefMonday    = pInMsg->pData[5];
   7131              cmd.dayIdRefTuestday  = pInMsg->pData[6];
   7132              cmd.dayIdRefWednesday = pInMsg->pData[7];
   7133              cmd.dayIdRefThursday  = pInMsg->pData[8];
   7134              cmd.dayIdRefFriday    = pInMsg->pData[9];
   7135              cmd.dayIdRefSaturday  = pInMsg->pData[10];
   7136              cmd.dayIdRefSunday    = pInMsg->pData[11];
   7137          
   7138              pCBs->pfnTou_PublishWeekProfile( &cmd, &(pInMsg->msg->srcAddr),
   7139                                               pInMsg->hdr.transSeqNum );
   7140          
   7141              return ZSuccess;
   7142            }
   7143          
   7144            return ZFailure;
   7145          }
   7146          
   7147          /*********************************************************************
   7148           * @fn      zclSE_ProcessInCmd_Tou_PublishSeasons
   7149           *
   7150           * @brief   process in the received Publish Seasons
   7151           *
   7152           * @param   pInMsg - pointer to the incoming message
   7153           * @param   pCBs - pointer to the application call back function
   7154           *
   7155           * @return  ZStatus_t - ZFailure @ Unsupported
   7156           *                      ZSuccess @ Supported and need default rsp
   7157           *                      ZCL_STATUS_SOFTWARE_FAILURE @ ZStack memory allocation failure
   7158           */
   7159          static ZStatus_t zclSE_ProcessInCmd_Tou_PublishSeasons( zclIncoming_t *pInMsg,
   7160                                                                  zclSE_AppCallbacks_t *pCBs )
   7161          {
   7162            if ( pCBs->pfnTou_PublishSeasons )
   7163            {
   7164              zclCCPublishSeasons_t cmd;
   7165          
   7166              // Parse the command
   7167              if ( zclSE_ParseInCmd_PublishSeasons( &cmd, &(pInMsg->pData[0]),
   7168                                                          pInMsg->pDataLen ) == ZSuccess )
   7169              {
   7170                pCBs->pfnTou_PublishSeasons( &cmd, &(pInMsg->msg->srcAddr),
   7171                                             pInMsg->hdr.transSeqNum );
   7172          
   7173                // Free the memory allocated in zclSE_ParseInCmd_PublishSeasons()
   7174                if ( cmd.pSeasonEntry != NULL )
   7175                {
   7176                  osal_mem_free( cmd.pSeasonEntry );
   7177                }
   7178          
   7179                return ZSuccess;
   7180              }
   7181              else
   7182              {
   7183                return ZCL_STATUS_SOFTWARE_FAILURE;
   7184              }
   7185            }
   7186          
   7187            return ZFailure;
   7188          }
   7189          
   7190          /*********************************************************************
   7191           * @fn      zclSE_ProcessInCmd_Tou_PublishSpecialDays
   7192           *
   7193           * @brief   process in the received Publish Special Days
   7194           *
   7195           * @param   pInMsg - pointer to the incoming message
   7196           * @param   pCBs - pointer to the application call back function
   7197           *
   7198           * @return  ZStatus_t - ZFailure @ Unsupported
   7199           *                      ZSuccess @ Supported and need default rsp
   7200           *                      ZCL_STATUS_SOFTWARE_FAILURE @ ZStack memory allocation failure
   7201           */
   7202          static ZStatus_t zclSE_ProcessInCmd_Tou_PublishSpecialDays( zclIncoming_t *pInMsg,
   7203                                                                      zclSE_AppCallbacks_t *pCBs )
   7204          {
   7205            if ( pCBs->pfnTou_PublishSpecialDays )
   7206            {
   7207              zclCCPublishSpecialDays_t cmd;
   7208          
   7209              // Parse the command
   7210              if ( zclSE_ParseInCmd_PublishSpecialDays( &cmd, &(pInMsg->pData[0]),
   7211                                                          pInMsg->pDataLen ) == ZSuccess )
   7212              {
   7213                pCBs->pfnTou_PublishSpecialDays( &cmd, &(pInMsg->msg->srcAddr),
   7214                                                 pInMsg->hdr.transSeqNum );
   7215          
   7216                // Free the memory allocated in zclSE_ParseInCmd_PublishSpecialDays()
   7217                if ( cmd.pSpecialDayEntry != NULL )
   7218                {
   7219                  osal_mem_free( cmd.pSpecialDayEntry );
   7220                }
   7221          
   7222                return ZSuccess;
   7223              }
   7224              else
   7225              {
   7226                return ZCL_STATUS_SOFTWARE_FAILURE;
   7227              }
   7228            }
   7229          
   7230            return ZFailure;
   7231          }
   7232          
   7233          /*********************************************************************
   7234           * @fn      zclSE_ProcessInCmd_Tou_GetCalendar
   7235           *
   7236           * @brief   process in the received Get Calendar
   7237           *
   7238           * @param   pInMsg - pointer to the incoming message
   7239           * @param   pCBs - pointer to the application call back function
   7240           *
   7241           * @return  ZStatus_t - ZFailure @ Unsupported
   7242           *                      ZCL_STATUS_CMD_HAS_RSP @ Supported and do
   7243           *                                           not need default rsp
   7244           */
   7245          static ZStatus_t zclSE_ProcessInCmd_Tou_GetCalendar( zclIncoming_t *pInMsg, zclSE_AppCallbacks_t *pCBs )
   7246          {
   7247            if ( pCBs->pfnTou_GetCalendar )
   7248            {
   7249              zclCCGetCalendar_t cmd;
   7250          
   7251              // Parse the command buffer
   7252              cmd.startTime = osal_build_uint32( pInMsg->pData, 4 );
   7253          
   7254              cmd.numOfCalendars = pInMsg->pData[4];
   7255              cmd.calendarType   = pInMsg->pData[5];
   7256          
   7257              pCBs->pfnTou_GetCalendar( &cmd, &(pInMsg->msg->srcAddr),
   7258                                        pInMsg->hdr.transSeqNum );
   7259          
   7260              return ZCL_STATUS_CMD_HAS_RSP;
   7261            }
   7262          
   7263            return ZFailure;
   7264          }
   7265          
   7266          /*********************************************************************
   7267           * @fn      zclSE_ProcessInCmd_Tou_GetDayProfiles
   7268           *
   7269           * @brief   process in the received Get Day Profiles
   7270           *
   7271           * @param   pInMsg - pointer to the incoming message
   7272           * @param   pCBs - pointer to the application call back function
   7273           *
   7274           * @return  ZStatus_t - ZFailure @ Unsupported
   7275           *                      ZCL_STATUS_CMD_HAS_RSP @ Supported and do
   7276           *                                           not need default rsp
   7277           */
   7278          static ZStatus_t zclSE_ProcessInCmd_Tou_GetDayProfiles( zclIncoming_t *pInMsg, zclSE_AppCallbacks_t *pCBs )
   7279          {
   7280            if ( pCBs->pfnTou_GetDayProfiles )
   7281            {
   7282              zclCCGetDayProfiles_t cmd;
   7283          
   7284              // Parse the command buffer
   7285              cmd.issuerCalendarId = osal_build_uint32( pInMsg->pData, 4 );
   7286          
   7287              pCBs->pfnTou_GetDayProfiles( &cmd, &(pInMsg->msg->srcAddr),
   7288                                           pInMsg->hdr.transSeqNum );
   7289          
   7290              return ZCL_STATUS_CMD_HAS_RSP;
   7291            }
   7292          
   7293            return ZFailure;
   7294          }
   7295          
   7296          /*********************************************************************
   7297           * @fn      zclSE_ProcessInCmd_Tou_GetWeekProfiles
   7298           *
   7299           * @brief   process in the received Get Week Profiles
   7300           *
   7301           * @param   pInMsg - pointer to the incoming message
   7302           * @param   pCBs - pointer to the application call back function
   7303           *
   7304           * @return  ZStatus_t - ZFailure @ Unsupported
   7305           *                      ZCL_STATUS_CMD_HAS_RSP @ Supported and do
   7306           *                                           not need default rsp
   7307           */
   7308          static ZStatus_t zclSE_ProcessInCmd_Tou_GetWeekProfiles( zclIncoming_t *pInMsg, zclSE_AppCallbacks_t *pCBs )
   7309          {
   7310            if ( pCBs->pfnTou_GetWeekProfiles )
   7311            {
   7312              zclCCGetWeekProfiles_t cmd;
   7313          
   7314              // Parse the command buffer
   7315              cmd.issuerCalendarId = osal_build_uint32( pInMsg->pData, 4 );
   7316          
   7317              pCBs->pfnTou_GetWeekProfiles( &cmd, &(pInMsg->msg->srcAddr),
   7318                                            pInMsg->hdr.transSeqNum );
   7319          
   7320              return ZCL_STATUS_CMD_HAS_RSP;
   7321            }
   7322          
   7323            return ZFailure;
   7324          }
   7325          
   7326          /*********************************************************************
   7327           * @fn      zclSE_ProcessInCmd_Tou_GetSeasons
   7328           *
   7329           * @brief   process in the received Get Seasons
   7330           *
   7331           * @param   pInMsg - pointer to the incoming message
   7332           * @param   pCBs - pointer to the application call back function
   7333           *
   7334           * @return  ZStatus_t - ZFailure @ Unsupported
   7335           *                      ZCL_STATUS_CMD_HAS_RSP @ Supported and do
   7336           *                                           not need default rsp
   7337           */
   7338          static ZStatus_t zclSE_ProcessInCmd_Tou_GetSeasons( zclIncoming_t *pInMsg, zclSE_AppCallbacks_t *pCBs )
   7339          {
   7340            if ( pCBs->pfnTou_GetSeasons )
   7341            {
   7342              zclCCGetSeasons_t cmd;
   7343          
   7344              // Parse the command buffer
   7345              cmd.issuerCalendarId = osal_build_uint32( pInMsg->pData, 4 );
   7346          
   7347              pCBs->pfnTou_GetSeasons( &cmd, &(pInMsg->msg->srcAddr),
   7348                                       pInMsg->hdr.transSeqNum );
   7349          
   7350              return ZCL_STATUS_CMD_HAS_RSP;
   7351            }
   7352          
   7353            return ZFailure;
   7354          }
   7355          
   7356          /*********************************************************************
   7357           * @fn      zclSE_ProcessInCmd_Tou_GetSpecialDays
   7358           *
   7359           * @brief   process in the received Get Special Days
   7360           *
   7361           * @param   pInMsg - pointer to the incoming message
   7362           * @param   pCBs - pointer to the application call back function
   7363           *
   7364           * @return  ZStatus_t - ZFailure @ Unsupported
   7365           *                      ZCL_STATUS_CMD_HAS_RSP @ Supported and do
   7366           *                                           not need default rsp
   7367           */
   7368          static ZStatus_t zclSE_ProcessInCmd_Tou_GetSpecialDays( zclIncoming_t *pInMsg, zclSE_AppCallbacks_t *pCBs )
   7369          {
   7370            if ( pCBs->pfnTou_GetSpecialDays )
   7371            {
   7372              zclCCGetSpecialDays_t cmd;
   7373          
   7374              // Parse the command buffer
   7375              cmd.startTime = osal_build_uint32( pInMsg->pData, 4 );
   7376          
   7377              cmd.numOfEvents  = pInMsg->pData[4];
   7378              cmd.calendarType = pInMsg->pData[5];
   7379          
   7380              pCBs->pfnTou_GetSpecialDays( &cmd, &(pInMsg->msg->srcAddr),
   7381                                           pInMsg->hdr.transSeqNum );
   7382          
   7383              return ZCL_STATUS_CMD_HAS_RSP;
   7384            }
   7385          
   7386            return ZFailure;
   7387          }
   7388          #endif  // SE_UK_EXT
   7389          #endif  // ZCL_TOU
   7390          
   7391          #ifdef ZCL_DEVICE_MGMT
   7392          #ifdef SE_UK_EXT
   7393          /*********************************************************************
   7394           * @fn      zclSE_ProcessInDeviceMgmtCmds
   7395           *
   7396           * @brief   Callback from ZCL to process incoming Commands specific
   7397           *          to this cluster library on a command ID basis
   7398           *
   7399           * @param   pInMsg - pointer to the incoming message
   7400           * @param   pCBs - pointer to the application call back function
   7401           *
   7402           * @return  ZStatus_t
   7403           */
   7404          static ZStatus_t zclSE_ProcessInDeviceMgmtCmds( zclIncoming_t *pInMsg, zclSE_AppCallbacks_t *pCBs )
   7405          {
   7406            ZStatus_t stat;
   7407          
   7408            if ( zcl_ServerCmd( pInMsg->hdr.fc.direction ) )
   7409            {
   7410              // Process Client commands, received by Server
   7411              switch ( pInMsg->hdr.commandID )
   7412              {
   7413                case COMMAND_SE_GET_CHANGE_OF_TENANCY:
   7414                  stat = zclSE_ProcessInCmd_DeviceMgmt_GetChangeTenancy( pInMsg, pCBs );
   7415                  break;
   7416          
   7417                case COMMAND_SE_GET_CHANGE_OF_SUPPLIER:
   7418                  stat = zclSE_ProcessInCmd_DeviceMgmt_GetChangeSupplier( pInMsg, pCBs );
   7419                  break;
   7420          
   7421                case COMMAND_SE_GET_CHANGE_SUPPLY:
   7422                  stat = zclSE_ProcessInCmd_DeviceMgmt_GetChangeSupply( pInMsg, pCBs );
   7423                  break;
   7424          
   7425                case COMMAND_SE_SUPPLY_STATUS_RESPONSE:
   7426                  stat = zclSE_ProcessInCmd_DeviceMgmt_SupplyStatusResponse( pInMsg, pCBs );
   7427                  break;
   7428          
   7429                case COMMAND_SE_GET_PASSWORD:
   7430                  stat = zclSE_ProcessInCmd_DeviceMgmt_GetPassword( pInMsg, pCBs );
   7431                  break;
   7432          
   7433                default:
   7434                  stat = ZFailure;
   7435                  break;
   7436              }
   7437            }
   7438            else
   7439            {
   7440              // Process Server commands, received by Client
   7441              switch ( pInMsg->hdr.commandID )
   7442              {
   7443                case COMMAND_SE_PUBLISH_CHANGE_OF_TENANCY:
   7444                  stat = zclSE_ProcessInCmd_DeviceMgmt_PublishChangeTenancy( pInMsg, pCBs );
   7445                  break;
   7446          
   7447                case COMMAND_SE_PUBLISH_CHANGE_OF_SUPPLIER:
   7448                  stat = zclSE_ProcessInCmd_DeviceMgmt_PublishChangeSupplier( pInMsg, pCBs );
   7449                  break;
   7450          
   7451                case COMMAND_SE_CHANGE_SUPPLY:
   7452                  stat = zclSE_ProcessInCmd_DeviceMgmt_ChangeSupply( pInMsg, pCBs );
   7453                  break;
   7454          
   7455                case COMMAND_SE_CHANGE_PASSWORD:
   7456                  stat = zclSE_ProcessInCmd_DeviceMgmt_ChangePassword( pInMsg, pCBs );
   7457                  break;
   7458          
   7459                case COMMAND_SE_LOCAL_CHANGE_SUPPLY:
   7460                  stat = zclSE_ProcessInCmd_DeviceMgmt_LocalChangeSupply( pInMsg, pCBs );
   7461                  break;
   7462          
   7463                default:
   7464                  stat = ZFailure;
   7465                  break;
   7466              }
   7467            }
   7468          
   7469            return ( stat );
   7470          }
   7471          
   7472          /*********************************************************************
   7473           * @fn      zclSE_ProcessInCmd_DeviceMgmt_GetChangeTenancy
   7474           *
   7475           * @brief   Process in the received Get Change Of Tenancy
   7476           *
   7477           * @param   pInMsg - pointer to the incoming message
   7478           * @param   pCBs - pointer to the application call back function
   7479           *
   7480           * @return  ZStatus_t - ZFailure @ Unsupported
   7481           *                      ZCL_STATUS_CMD_HAS_RSP @ Supported and do
   7482           *                                           not need default rsp
   7483           */
   7484          static ZStatus_t zclSE_ProcessInCmd_DeviceMgmt_GetChangeTenancy( zclIncoming_t *pInMsg,
   7485                                                                           zclSE_AppCallbacks_t *pCBs )
   7486          {
   7487            if ( pCBs->pfnDeviceMgmt_GetChangeTenancy )
   7488            {
   7489              pCBs->pfnDeviceMgmt_GetChangeTenancy( &(pInMsg->msg->srcAddr),
   7490                                                    pInMsg->hdr.transSeqNum );
   7491          
   7492              return ZCL_STATUS_CMD_HAS_RSP;
   7493            }
   7494          
   7495            return ZFailure;
   7496          }
   7497          
   7498          /*********************************************************************
   7499           * @fn      zclSE_ProcessInCmd_DeviceMgmt_GetChangeSupplier
   7500           *
   7501           * @brief   Process in the received Get Change Of Supplier
   7502           *
   7503           * @param   pInMsg - pointer to the incoming message
   7504           * @param   pCBs - pointer to the application call back function
   7505           *
   7506           * @return  ZStatus_t - ZFailure @ Unsupported
   7507           *                      ZCL_STATUS_CMD_HAS_RSP @ Supported and do
   7508           *                                           not need default rsp
   7509           */
   7510          static ZStatus_t zclSE_ProcessInCmd_DeviceMgmt_GetChangeSupplier( zclIncoming_t *pInMsg,
   7511                                                                            zclSE_AppCallbacks_t *pCBs )
   7512          {
   7513            if ( pCBs->pfnDeviceMgmt_GetChangeSupplier )
   7514            {
   7515              pCBs->pfnDeviceMgmt_GetChangeSupplier( &(pInMsg->msg->srcAddr),
   7516                                                     pInMsg->hdr.transSeqNum );
   7517          
   7518              return ZCL_STATUS_CMD_HAS_RSP;
   7519            }
   7520          
   7521            return ZFailure;
   7522          }
   7523          
   7524          /*********************************************************************
   7525           * @fn      zclSE_ProcessInCmd_DeviceMgmt_GetChangeSupply
   7526           *
   7527           * @brief   Process in the received Get Change Supply
   7528           *
   7529           * @param   pInMsg - pointer to the incoming message
   7530           * @param   pCBs - pointer to the application call back function
   7531           *
   7532           * @return  ZStatus_t - ZFailure @ Unsupported
   7533           *                      ZCL_STATUS_CMD_HAS_RSP @ Supported and do
   7534           *                                           not need default rsp
   7535           */
   7536          static ZStatus_t zclSE_ProcessInCmd_DeviceMgmt_GetChangeSupply( zclIncoming_t *pInMsg,
   7537                                                                          zclSE_AppCallbacks_t *pCBs )
   7538          {
   7539            if ( pCBs->pfnDeviceMgmt_GetChangeSupply )
   7540            {
   7541              pCBs->pfnDeviceMgmt_GetChangeSupply( &(pInMsg->msg->srcAddr),
   7542                                                     pInMsg->hdr.transSeqNum );
   7543          
   7544              return ZCL_STATUS_CMD_HAS_RSP;
   7545            }
   7546          
   7547            return ZFailure;
   7548          }
   7549          
   7550          /*********************************************************************
   7551           * @fn      zclSE_ProcessInCmd_DeviceMgmt_SupplyStatusResponse
   7552           *
   7553           * @brief   Process in the received Supply Status Response
   7554           *
   7555           * @param   pInMsg - pointer to the incoming message
   7556           * @param   pCBs - pointer to the application call back function
   7557           *
   7558           * @return  ZStatus_t - ZFailure @ Unsupported
   7559           *                      ZSuccess @ Supported and send default rsp
   7560           */
   7561          static ZStatus_t zclSE_ProcessInCmd_DeviceMgmt_SupplyStatusResponse( zclIncoming_t *pInMsg,
   7562                                                                               zclSE_AppCallbacks_t *pCBs )
   7563          {
   7564            if ( pCBs->pfnDeviceMgmt_SupplyStatusResponse )
   7565            {
   7566              zclCCSupplyStatusResponse_t cmd;
   7567          
   7568              cmd.supplierId = osal_build_uint32( pInMsg->pData, 4);
   7569              cmd.issuerEventId = osal_build_uint32( &pInMsg->pData[4], 4);
   7570              cmd.implementationDateTime = osal_build_uint32( &pInMsg->pData[8], 4);
   7571              cmd.supplyStatus = pInMsg->pData[12];
   7572          
   7573              pCBs->pfnDeviceMgmt_SupplyStatusResponse( &cmd, &(pInMsg->msg->srcAddr), pInMsg->hdr.transSeqNum );
   7574          
   7575              return ZSuccess;
   7576            }
   7577          
   7578            return ZFailure;
   7579          }
   7580          
   7581          /*********************************************************************
   7582           * @fn      zclSE_ProcessInCmd_DeviceMgmt_GetPassword
   7583           *
   7584           * @brief   Process in the received Get Password
   7585           *
   7586           * @param   pInMsg - pointer to the incoming message
   7587           * @param   pCBs - pointer to the application call back function
   7588           *
   7589           * @return  ZStatus_t - ZFailure @ Unsupported
   7590           *                      ZCL_STATUS_CMD_HAS_RSP @ Supported and do
   7591           *                                           not need default rsp
   7592           */
   7593          static ZStatus_t zclSE_ProcessInCmd_DeviceMgmt_GetPassword( zclIncoming_t *pInMsg,
   7594                                                                      zclSE_AppCallbacks_t *pCBs )
   7595          {
   7596            if ( pCBs->pfnDeviceMgmt_GetPassword )
   7597            {
   7598              zclCCGetPassword_t cmd;
   7599          
   7600              cmd.passwordLevel = pInMsg->pData[0];
   7601          
   7602              pCBs->pfnDeviceMgmt_GetPassword( &cmd, &(pInMsg->msg->srcAddr), pInMsg->hdr.transSeqNum );
   7603          
   7604              return ZCL_STATUS_CMD_HAS_RSP;
   7605            }
   7606          
   7607            return ZFailure;
   7608          }
   7609          
   7610          /*********************************************************************
   7611           * @fn      zclSE_ProcessInCmd_DeviceMgmt_PublishChangeTenancy
   7612           *
   7613           * @brief   Process in the received Publish Change of Tenancy
   7614           *
   7615           * @param   pInMsg - pointer to the incoming message
   7616           * @param   pCBs - pointer to the application call back function
   7617           *
   7618           * @return  ZStatus_t - ZFailure @ Unsupported
   7619           *                      ZSuccess @ Supported and need default rsp
   7620           */
   7621          static ZStatus_t zclSE_ProcessInCmd_DeviceMgmt_PublishChangeTenancy( zclIncoming_t *pInMsg,
   7622                                                                               zclSE_AppCallbacks_t *pCBs )
   7623          {
   7624            if ( pCBs->pfnDeviceMgmt_PublishChangeTenancy )
   7625            {
   7626              zclCCPublishChangeTenancy_t cmd;
   7627          
   7628              // Parse the command
   7629              zclSE_ParseInCmd_PublishChangeTenancy( &cmd, &(pInMsg->pData[0]),
   7630                                                    pInMsg->pDataLen );
   7631          
   7632              pCBs->pfnDeviceMgmt_PublishChangeTenancy( &cmd, &(pInMsg->msg->srcAddr),
   7633                                                       pInMsg->hdr.transSeqNum );
   7634              return ZSuccess;
   7635            }
   7636          
   7637            return ZFailure;
   7638          }
   7639          
   7640          /*********************************************************************
   7641           * @fn      zclSE_ProcessInCmd_DeviceMgmt_PublishChangeSupplier
   7642           *
   7643           * @brief   Process in the received Publish Change of Supplier
   7644           *
   7645           * @param   pInMsg - pointer to the incoming message
   7646           * @param   pCBs - pointer to the application call back function
   7647           *
   7648           * @return  ZStatus_t - ZFailure @ Unsupported
   7649           *                      ZSuccess @ Supported and need default rsp
   7650           */
   7651          static ZStatus_t zclSE_ProcessInCmd_DeviceMgmt_PublishChangeSupplier( zclIncoming_t *pInMsg,
   7652                                                                                zclSE_AppCallbacks_t *pCBs )
   7653          {
   7654            if ( pCBs->pfnDeviceMgmt_PublishChangeSupplier )
   7655            {
   7656              zclCCPublishChangeSupplier_t cmd;
   7657          
   7658              // Parse the command
   7659              zclSE_ParseInCmd_PublishChangeSupplier( &cmd, &(pInMsg->pData[0]),
   7660                                                     pInMsg->pDataLen );
   7661          
   7662              pCBs->pfnDeviceMgmt_PublishChangeSupplier( &cmd, &(pInMsg->msg->srcAddr),
   7663                                                        pInMsg->hdr.transSeqNum );
   7664              return ZSuccess;
   7665            }
   7666          
   7667            return ZFailure;
   7668          }
   7669          
   7670          /*********************************************************************
   7671           * @fn      zclSE_ProcessInCmd_DeviceMgmt_ChangeSupply
   7672           *
   7673           * @brief   Process in the received Change Supply
   7674           *
   7675           * @param   pInMsg - pointer to the incoming message
   7676           * @param   pCBs - pointer to the application call back function
   7677           *
   7678           * @return  ZStatus_t - ZFailure @ Unsupported
   7679           *                      ZCL_STATUS_CMD_HAS_RSP @ Supported and do
   7680           *                                           not need default rsp
   7681           */
   7682          static ZStatus_t zclSE_ProcessInCmd_DeviceMgmt_ChangeSupply( zclIncoming_t *pInMsg,
   7683                                                                       zclSE_AppCallbacks_t *pCBs )
   7684          {
   7685            if ( pCBs->pfnDeviceMgmt_ChangeSupply )
   7686            {
   7687              zclCCChangeSupply_t cmd;
   7688          
   7689              // Parse the command
   7690              zclSE_ParseInCmd_ChangeSupply( &cmd, &(pInMsg->pData[0]), pInMsg->pDataLen );
   7691          
   7692              pCBs->pfnDeviceMgmt_ChangeSupply( &cmd, &(pInMsg->msg->srcAddr),
   7693                                                pInMsg->hdr.transSeqNum );
   7694              return ZCL_STATUS_CMD_HAS_RSP;
   7695            }
   7696          
   7697            return ZFailure;
   7698          }
   7699          
   7700          /*********************************************************************
   7701           * @fn      zclSE_ProcessInCmd_DeviceMgmt_ChangePassword
   7702           *
   7703           * @brief   Process in the received Change Password
   7704           *
   7705           * @param   pInMsg - pointer to the incoming message
   7706           * @param   pCBs - pointer to the application call back function
   7707           *
   7708           * @return  ZStatus_t - ZFailure @ Unsupported
   7709           *                      ZSuccess @ Supported and need default rsp
   7710           */
   7711          static ZStatus_t zclSE_ProcessInCmd_DeviceMgmt_ChangePassword( zclIncoming_t *pInMsg,
   7712                                                                         zclSE_AppCallbacks_t *pCBs )
   7713          {
   7714            if ( pCBs->pfnDeviceMgmt_ChangePassword )
   7715            {
   7716              zclCCChangePassword_t cmd;
   7717          
   7718              // Parse the command
   7719              zclSE_ParseInCmd_ChangePassword( &cmd, &(pInMsg->pData[0]), pInMsg->pDataLen );
   7720          
   7721              pCBs->pfnDeviceMgmt_ChangePassword( &cmd, &(pInMsg->msg->srcAddr),
   7722                                                 pInMsg->hdr.transSeqNum );
   7723              return ZSuccess;
   7724            }
   7725          
   7726            return ZFailure;
   7727          }
   7728          
   7729          /*********************************************************************
   7730           * @fn      zclSE_ProcessInCmd_DeviceMgmt_LocalChangeSupply
   7731           *
   7732           * @brief   Process in the received Local Change Supply
   7733           *
   7734           * @param   pInMsg - pointer to the incoming message
   7735           * @param   pCBs - pointer to the application call back function
   7736           *
   7737           * @return  ZStatus_t - ZFailure @ Unsupported
   7738           *                      ZSuccess @ Supported and need default rsp
   7739           */
   7740          static ZStatus_t zclSE_ProcessInCmd_DeviceMgmt_LocalChangeSupply( zclIncoming_t *pInMsg, zclSE_AppCallbacks_t *pCBs )
   7741          {
   7742            if ( pCBs->pfnDeviceMgmt_LocalChangeSupply )
   7743            {
   7744              zclCCLocalChangeSupply_t cmd;
   7745          
   7746              cmd.propSupplyStatus = pInMsg->pData[0];
   7747          
   7748              pCBs->pfnDeviceMgmt_LocalChangeSupply( &cmd, &(pInMsg->msg->srcAddr),
   7749                                                     pInMsg->hdr.transSeqNum );
   7750          
   7751              return ZSuccess;
   7752            }
   7753          
   7754            return ZFailure;
   7755          }
   7756          #endif  // SE_UK_EXT
   7757          #endif  // ZCL_DEVICE_MGMT
   7758          
   7759          #ifdef ZCL_PRICING
   7760          /*********************************************************************
   7761           * @fn      zclSE_ParseInCmd_PublishPrice
   7762           *
   7763           * @brief   Parse received Publish Price Command.
   7764           *
   7765           * @param   pCmd - pointer to the output data struct
   7766           * @param   buf - pointer to the input data buffer
   7767           * @param   len - length of the input buffer
   7768           *
   7769           * @return  ZStatus_t - ZSuccess @ Parse successful
   7770           *                      ZMemError @ Memory allocation failure
   7771           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine130:
   \   000000   F582         MOV     DPL,A
   \   000002   E5..         MOV     A,?V0 + 1
   \   000004                REQUIRE ??Subroutine187_0
   \   000004                ; // Fall through to label ??Subroutine187_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   7772          ZStatus_t zclSE_ParseInCmd_PublishPrice( zclCCPublishPrice_t *pCmd, uint8 *buf, uint8 len )
   \                     zclSE_ParseInCmd_PublishPrice:
   7773          {
   \   000000   74F1         MOV     A,#-0xf
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 15
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV     ?V0 + 0,R2
   \   000007   8B..         MOV     ?V0 + 1,R3
   \   000009   EC           MOV     A,R4
   \   00000A   FE           MOV     R6,A
   \   00000B   ED           MOV     A,R5
   \   00000C   FF           MOV     R7,A
   \   00000D   89..         MOV     ?V0 + 3,R1
   7774            uint8 originalLen; // stores octet string original length
   7775          
   7776            // Parse the command buffer
   7777            pCmd->providerId = osal_build_uint32( buf, 4 );
   \   00000F                ; Setup parameters for call to function osal_build_uint32
   \   00000F   12....       LCALL   ??Subroutine196_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_573:
   \   000012   12....       LCALL   ?XSTORE_R2345
   7778            buf += 4;
   \   000015   12....       LCALL   ?Subroutine85 & 0xFFFF
   7779          
   7780            // Notice that rate label is a variable length UTF-8 string
   7781            pCmd->rateLabel.strLen = *buf++;
   \                     ??CrossCallReturnLabel_475:
   \   000018   F8           MOV     R0,A
   \   000019   E5..         MOV     A,?V0 + 0
   \   00001B   2404         ADD     A,#0x4
   \   00001D   12....       LCALL   ??Subroutine192_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_523:
   \   000020   E8           MOV     A,R0
   \   000021   12....       LCALL   ?Subroutine73 & 0xFFFF
   7782            if ( pCmd->rateLabel.strLen == SE_OPTIONAL_FIELD_UINT8 )
   \                     ??CrossCallReturnLabel_112:
   \   000024   74FF         MOV     A,#-0x1
   \   000026   68           XRL     A,R0
   \   000027   85..82       MOV     DPL,?V0 + 0
   \   00002A   85..83       MOV     DPH,?V0 + 1
   \   00002D   A3           INC     DPTR
   \   00002E   A3           INC     DPTR
   \   00002F   A3           INC     DPTR
   \   000030   A3           INC     DPTR
   \   000031   6003         JZ      $+5
   \   000033   02....       LJMP    ??zclSE_ParseInCmd_PublishPrice_0 & 0xFFFF
   7783            {
   7784              // If character count is 0xFF, set string length to 0
   7785              pCmd->rateLabel.strLen = 0;
   \   000036   E4           CLR     A
   \   000037   F0           MOVX    @DPTR,A
   7786            }
   7787          
   7788            if ( pCmd->rateLabel.strLen != 0 )
   7789            {
   7790              originalLen = pCmd->rateLabel.strLen; //save original length
   7791          
   7792              // truncate rate label to maximum size
   7793              if ( pCmd->rateLabel.strLen > (SE_RATE_LABEL_LEN-1) )
   7794              {
   7795                pCmd->rateLabel.strLen = (SE_RATE_LABEL_LEN-1);
   7796              }
   7797          
   7798              pCmd->rateLabel.pStr = osal_mem_alloc( pCmd->rateLabel.strLen );
   7799              if ( pCmd->rateLabel.pStr == NULL )
   7800              {
   7801                return ZMemError;
   7802              }
   7803              osal_memcpy( pCmd->rateLabel.pStr, buf, pCmd->rateLabel.strLen );
   7804              buf += originalLen; // move pointer original length of received string
   7805            }
   7806            else
   7807            {
   7808              pCmd->rateLabel.pStr = NULL;
   \                     ??zclSE_ParseInCmd_PublishPrice_1:
   \   000038   85..82       MOV     DPL,?V0 + 0
   \   00003B   85..83       MOV     DPH,?V0 + 1
   \   00003E   A3           INC     DPTR
   \   00003F   A3           INC     DPTR
   \   000040   A3           INC     DPTR
   \   000041   A3           INC     DPTR
   \   000042   A3           INC     DPTR
   \   000043   E4           CLR     A
   \   000044   F0           MOVX    @DPTR,A
   \   000045   A3           INC     DPTR
   \   000046   F0           MOVX    @DPTR,A
   7809            }
   7810          
   7811            pCmd->issuerEventId = osal_build_uint32( buf, 4 );
   \                     ??zclSE_ParseInCmd_PublishPrice_2:
   \   000047                ; Setup parameters for call to function osal_build_uint32
   \   000047   7904         MOV     R1,#0x4
   \   000049   EE           MOV     A,R6
   \   00004A   FA           MOV     R2,A
   \   00004B   EF           MOV     A,R7
   \   00004C   FB           MOV     R3,A
   \   00004D   12....       LCALL   ?Subroutine97 & 0xFFFF
   \                     ??CrossCallReturnLabel_155:
   \   000050   12....       LCALL   ?XSTORE_R2345
   7812            buf += 4;
   \   000053   EE           MOV     A,R6
   \   000054   2404         ADD     A,#0x4
   \   000056   FE           MOV     R6,A
   \   000057   12....       LCALL   ?Subroutine89 & 0xFFFF
   7813          
   7814            pCmd->currentTime = osal_build_uint32( buf, 4 );
   \                     ??CrossCallReturnLabel_141:
   \   00005A   240B         ADD     A,#0xb
   \   00005C   12....       LCALL   ??Subroutine192_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_524:
   \   00005F   12....       LCALL   ?XSTORE_R2345
   7815            buf += 4;
   \   000062   12....       LCALL   ?Subroutine85 & 0xFFFF
   7816          
   7817            pCmd->unitOfMeasure = *buf++;
   \                     ??CrossCallReturnLabel_476:
   \   000065   C0E0         PUSH    A
   \   000067   E5..         MOV     A,?V0 + 0
   \   000069   240F         ADD     A,#0xf
   \   00006B   12....       LCALL   ??Subroutine192_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_525:
   \   00006E   D0E0         POP     A
   \   000070   12....       LCALL   ?Subroutine73 & 0xFFFF
   7818            pCmd->currency = BUILD_UINT16( buf[0], buf[1] );
   \                     ??CrossCallReturnLabel_113:
   \   000073   12....       LCALL   ??Subroutine197_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_576:
   \   000076   2410         ADD     A,#0x10
   \   000078   12....       LCALL   ?Subroutine72 & 0xFFFF
   7819            buf += 2;
   7820          
   7821            pCmd->priceTrailingDigit = *buf++;
   \                     ??CrossCallReturnLabel_110:
   \   00007B   C0E0         PUSH    A
   \   00007D   E5..         MOV     A,?V0 + 0
   \   00007F   2412         ADD     A,#0x12
   \   000081   12....       LCALL   ??Subroutine192_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_526:
   \   000084   D0E0         POP     A
   \   000086   12....       LCALL   ?Subroutine69 & 0xFFFF
   7822            pCmd->numberOfPriceTiers = *buf++;
   \                     ??CrossCallReturnLabel_97:
   \   000089   C0E0         PUSH    A
   \   00008B   E5..         MOV     A,?V0 + 0
   \   00008D   2413         ADD     A,#0x13
   \   00008F   12....       LCALL   ??Subroutine192_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_527:
   \   000092   D0E0         POP     A
   \   000094   12....       LCALL   ?Subroutine70 & 0xFFFF
   7823            pCmd->startTime = osal_build_uint32( buf, 4 );
   \                     ??CrossCallReturnLabel_106:
   \   000097   2414         ADD     A,#0x14
   \   000099   12....       LCALL   ??Subroutine192_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_528:
   \   00009C   12....       LCALL   ?XSTORE_R2345
   7824            buf += 4;
   \   00009F   EE           MOV     A,R6
   \   0000A0   2404         ADD     A,#0x4
   \   0000A2   FE           MOV     R6,A
   \   0000A3   12....       LCALL   ?Subroutine32 & 0xFFFF
   7825          
   7826            pCmd->durationInMinutes = BUILD_UINT16( buf[0], buf[1] );
   \                     ??CrossCallReturnLabel_574:
   \   0000A6   2418         ADD     A,#0x18
   \   0000A8   12....       LCALL   ?Subroutine74 & 0xFFFF
   7827            buf += 2;
   \                     ??CrossCallReturnLabel_489:
   \   0000AB   12....       LCALL   ?Subroutine89 & 0xFFFF
   7828          
   7829            pCmd->price = osal_build_uint32( buf, 4 );
   \                     ??CrossCallReturnLabel_142:
   \   0000AE   241A         ADD     A,#0x1a
   \   0000B0   12....       LCALL   ??Subroutine192_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_529:
   \   0000B3   12....       LCALL   ?XSTORE_R2345
   7830            buf += 4;
   \   0000B6   12....       LCALL   ?Subroutine85 & 0xFFFF
   7831          
   7832            pCmd->priceRatio = *buf++;
   \                     ??CrossCallReturnLabel_477:
   \   0000B9   C0E0         PUSH    A
   \   0000BB   E5..         MOV     A,?V0 + 0
   \   0000BD   241E         ADD     A,#0x1e
   \   0000BF   12....       LCALL   ??Subroutine192_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_530:
   \   0000C2   D0E0         POP     A
   \   0000C4   12....       LCALL   ?Subroutine70 & 0xFFFF
   7833            pCmd->generationPrice = osal_build_uint32( buf, 4 );
   \                     ??CrossCallReturnLabel_107:
   \   0000C7   241F         ADD     A,#0x1f
   \   0000C9   12....       LCALL   ??Subroutine192_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_531:
   \   0000CC   12....       LCALL   ?XSTORE_R2345
   7834            buf += 4;
   \   0000CF   12....       LCALL   ?Subroutine85 & 0xFFFF
   7835          
   7836            pCmd->generationPriceRatio = *buf++;
   \                     ??CrossCallReturnLabel_478:
   \   0000D2   C0E0         PUSH    A
   \   0000D4   E5..         MOV     A,?V0 + 0
   \   0000D6   2423         ADD     A,#0x23
   \   0000D8   12....       LCALL   ??Subroutine192_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_532:
   \   0000DB   D0E0         POP     A
   \   0000DD   12....       LCALL   ?Subroutine75 & 0xFFFF
   7837          
   7838            // SE 1.1 fields
   7839            if ((len - pCmd->rateLabel.strLen) > PACKET_LEN_SE_PUBLISH_PRICE_SE_1_0)
   \                     ??CrossCallReturnLabel_115:
   \   0000E0   85....       MOV     ?V0 + 2,?V0 + 3
   \   0000E3   85....       MOV     ?V0 + 4,?V0 + 2
   \   0000E6   85..82       MOV     DPL,?V0 + 0
   \   0000E9   85..83       MOV     DPH,?V0 + 1
   \   0000EC   A3           INC     DPTR
   \   0000ED   A3           INC     DPTR
   \   0000EE   A3           INC     DPTR
   \   0000EF   A3           INC     DPTR
   \   0000F0   E0           MOVX    A,@DPTR
   \   0000F1   F8           MOV     R0,A
   \   0000F2   E5..         MOV     A,?V0 + 4
   \   0000F4   C3           CLR     C
   \   0000F5   98           SUBB    A,R0
   \   0000F6   F8           MOV     R0,A
   \   0000F7   95E0         SUBB    A,0xE0 /* A   */
   \   0000F9   F9           MOV     R1,A
   \   0000FA   C3           CLR     C
   \   0000FB   E8           MOV     A,R0
   \   0000FC   9423         SUBB    A,#0x23
   \   0000FE   E9           MOV     A,R1
   \   0000FF   9400         SUBB    A,#0x0
   \   000101   A2D2         MOV     C,0xD0 /* PSW */.2
   \   000103   65D0         XRL     A,PSW
   \   000105   33           RLC     A
   \   000106   5003         JNC     $+5
   \   000108   02....       LJMP    ??zclSE_ParseInCmd_PublishPrice_3 & 0xFFFF
   7840            {
   7841              pCmd->alternateCostDelivered = osal_build_uint32( buf, 4 );
   \   00010B                ; Setup parameters for call to function osal_build_uint32
   \   00010B   7904         MOV     R1,#0x4
   \   00010D   EE           MOV     A,R6
   \   00010E   FA           MOV     R2,A
   \   00010F   EF           MOV     A,R7
   \   000110   FB           MOV     R3,A
   \   000111   12....       LCALL   ??osal_build_uint32?relay
   \   000114   E5..         MOV     A,?V0 + 0
   \   000116   2424         ADD     A,#0x24
   \   000118   12....       LCALL   ??Subroutine192_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_533:
   \   00011B   12....       LCALL   ?XSTORE_R2345
   7842              buf += 4;
   \   00011E   12....       LCALL   ?Subroutine85 & 0xFFFF
   7843          
   7844              pCmd->alternateCostUnit = *buf++;
   7845          
   7846              pCmd->alternateCostTrailingDigit = *buf++;
   7847          
   7848              pCmd->numberOfBlockThresholds = *buf++;
   7849          
   7850              pCmd->priceControl = *buf;
   7851            }
   \                     ??CrossCallReturnLabel_479:
   \   000121   C0E0         PUSH    A
   \   000123   E5..         MOV     A,?V0 + 0
   \   000125   2428         ADD     A,#0x28
   \   000127   12....       LCALL   ??Subroutine192_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_534:
   \   00012A   D0E0         POP     A
   \   00012C   12....       LCALL   ?Subroutine69 & 0xFFFF
   \                     ??CrossCallReturnLabel_98:
   \   00012F   C0E0         PUSH    A
   \   000131   E5..         MOV     A,?V0 + 0
   \   000133   2429         ADD     A,#0x29
   \   000135   12....       LCALL   ??Subroutine192_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_535:
   \   000138   D0E0         POP     A
   \   00013A   12....       LCALL   ?Subroutine69 & 0xFFFF
   \                     ??CrossCallReturnLabel_99:
   \   00013D   C0E0         PUSH    A
   \   00013F   E5..         MOV     A,?V0 + 0
   \   000141   242A         ADD     A,#0x2a
   \   000143   12....       LCALL   ??Subroutine192_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_536:
   \   000146   D0E0         POP     A
   \   000148   12....       LCALL   ?Subroutine78 & 0xFFFF
   \                     ??CrossCallReturnLabel_122:
   \   00014B   C0E0         PUSH    A
   \   00014D   E5..         MOV     A,?V0 + 0
   \   00014F   242B         ADD     A,#0x2b
   \   000151   12....       LCALL   ??Subroutine192_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_537:
   \   000154   D0E0         POP     A
   \   000156   02....       LJMP    ??zclSE_ParseInCmd_PublishPrice_4 & 0xFFFF
   \                     ??zclSE_ParseInCmd_PublishPrice_0:
   \   000159   E0           MOVX    A,@DPTR
   \   00015A   7003         JNZ     $+5
   \   00015C   02....       LJMP    ??zclSE_ParseInCmd_PublishPrice_1 & 0xFFFF
   \   00015F   E5..         MOV     A,?V0 + 0
   \   000161   2404         ADD     A,#0x4
   \   000163   12....       LCALL   ?Subroutine92 & 0xFFFF
   \                     ??CrossCallReturnLabel_365:
   \   000166   88..         MOV     ?V0 + 2,R0
   \   000168   C3           CLR     C
   \   000169   940D         SUBB    A,#0xd
   \   00016B   400D         JC      ??zclSE_ParseInCmd_PublishPrice_5
   \   00016D   85..82       MOV     DPL,?V0 + 0
   \   000170   85..83       MOV     DPH,?V0 + 1
   \   000173   A3           INC     DPTR
   \   000174   A3           INC     DPTR
   \   000175   A3           INC     DPTR
   \   000176   A3           INC     DPTR
   \   000177   740C         MOV     A,#0xc
   \   000179   F0           MOVX    @DPTR,A
   \                     ??zclSE_ParseInCmd_PublishPrice_5:
   \   00017A   E5..         MOV     A,?V0 + 0
   \   00017C   2405         ADD     A,#0x5
   \   00017E   F8           MOV     R0,A
   \   00017F   E5..         MOV     A,?V0 + 1
   \   000181   3400         ADDC    A,#0x0
   \   000183   F9           MOV     R1,A
   \   000184   88..         MOV     ?V0 + 4,R0
   \   000186   89..         MOV     ?V0 + 5,R1
   \   000188                ; Setup parameters for call to function osal_mem_alloc
   \   000188   85..82       MOV     DPL,?V0 + 0
   \   00018B   85..83       MOV     DPH,?V0 + 1
   \   00018E   A3           INC     DPTR
   \   00018F   A3           INC     DPTR
   \   000190   A3           INC     DPTR
   \   000191   A3           INC     DPTR
   \   000192   12....       LCALL   ?Subroutine67 & 0xFFFF
   \                     ??CrossCallReturnLabel_95:
   \   000195   85..82       MOV     DPL,?V0 + 4
   \   000198   85..83       MOV     DPH,?V0 + 5
   \   00019B   EA           MOV     A,R2
   \   00019C   F0           MOVX    @DPTR,A
   \   00019D   A3           INC     DPTR
   \   00019E   EB           MOV     A,R3
   \   00019F   F0           MOVX    @DPTR,A
   \   0001A0   85..82       MOV     DPL,?V0 + 4
   \   0001A3   85..83       MOV     DPH,?V0 + 5
   \   0001A6   12....       LCALL   ??Subroutine186_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_445:
   \   0001A9   7004         JNZ     ??zclSE_ParseInCmd_PublishPrice_6
   \   0001AB   7910         MOV     R1,#0x10
   \   0001AD   8064         SJMP    ??zclSE_ParseInCmd_PublishPrice_7
   \                     ??zclSE_ParseInCmd_PublishPrice_6:
   \   0001AF                ; Setup parameters for call to function osal_memcpy
   \   0001AF   8E..         MOV     ?V0 + 4,R6
   \   0001B1   8F..         MOV     ?V0 + 5,R7
   \   0001B3   75..00       MOV     ?V0 + 6,#0x0
   \   0001B6   78..         MOV     R0,#?V0 + 4
   \   0001B8   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   0001BB   85..82       MOV     DPL,?V0 + 0
   \   0001BE   85..83       MOV     DPH,?V0 + 1
   \   0001C1   A3           INC     DPTR
   \   0001C2   A3           INC     DPTR
   \   0001C3   A3           INC     DPTR
   \   0001C4   A3           INC     DPTR
   \   0001C5   E0           MOVX    A,@DPTR
   \   0001C6   FC           MOV     R4,A
   \   0001C7   7D00         MOV     R5,#0x0
   \   0001C9   85..82       MOV     DPL,?V0 + 0
   \   0001CC   85..83       MOV     DPH,?V0 + 1
   \   0001CF   A3           INC     DPTR
   \   0001D0   A3           INC     DPTR
   \   0001D1   A3           INC     DPTR
   \   0001D2   A3           INC     DPTR
   \   0001D3   A3           INC     DPTR
   \   0001D4   12....       LCALL   ?Subroutine54 & 0xFFFF
   \                     ??CrossCallReturnLabel_68:
   \   0001D7   12....       LCALL   ?DEALLOC_XSTACK8
   \   0001DA   85....       MOV     ?V0 + 4,?V0 + 2
   \   0001DD   EE           MOV     A,R6
   \   0001DE   25..         ADD     A,?V0 + 4
   \   0001E0   FE           MOV     R6,A
   \   0001E1   EF           MOV     A,R7
   \   0001E2   3400         ADDC    A,#0x0
   \   0001E4   FF           MOV     R7,A
   \   0001E5   02....       LJMP    ??zclSE_ParseInCmd_PublishPrice_2 & 0xFFFF
   7852            else
   7853            {
   7854              // for backwards compatibility with SE 1.0
   7855              pCmd->alternateCostDelivered = SE_OPTIONAL_FIELD_UINT32;
   \                     ??zclSE_ParseInCmd_PublishPrice_3:
   \   0001E8   90....       MOV     DPTR,#__Constant_ffffffff
   \   0001EB   12....       LCALL   ?XLOAD_R2345
   \   0001EE   E5..         MOV     A,?V0 + 0
   \   0001F0   2424         ADD     A,#0x24
   \   0001F2   12....       LCALL   ??Subroutine192_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_538:
   \   0001F5   12....       LCALL   ?XSTORE_R2345
   7856              pCmd->alternateCostUnit = SE_OPTIONAL_FIELD_UINT8;
   \   0001F8   E5..         MOV     A,?V0 + 0
   \   0001FA   2428         ADD     A,#0x28
   \   0001FC   12....       LCALL   ?Subroutine88 & 0xFFFF
   7857              pCmd->alternateCostTrailingDigit = SE_OPTIONAL_FIELD_UINT8;
   7858              pCmd->numberOfBlockThresholds = SE_OPTIONAL_FIELD_UINT8;
   7859              pCmd->priceControl = SE_OPTIONAL_FIELD_UINT8;
   7860            }
   \                     ??CrossCallReturnLabel_138:
   \   0001FF   2429         ADD     A,#0x29
   \   000201   12....       LCALL   ?Subroutine88 & 0xFFFF
   \                     ??CrossCallReturnLabel_139:
   \   000204   242A         ADD     A,#0x2a
   \   000206   12....       LCALL   ?Subroutine88 & 0xFFFF
   \                     ??CrossCallReturnLabel_140:
   \   000209   242B         ADD     A,#0x2b
   \   00020B   12....       LCALL   ??Subroutine192_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_539:
   \   00020E   74FF         MOV     A,#-0x1
   \                     ??zclSE_ParseInCmd_PublishPrice_4:
   \   000210   F0           MOVX    @DPTR,A
   7861          
   7862            return ZSuccess;
   \   000211   7900         MOV     R1,#0x0
   \                     ??zclSE_ParseInCmd_PublishPrice_7:
   \   000213                REQUIRE ?Subroutine7
   \   000213                ; // Fall through to label ?Subroutine7
   7863          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine7:
   \   000000   7F07         MOV     R7,#0x7
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine89:
   \   000000   12....       LCALL   ?Subroutine127 & 0xFFFF
   \                     ??CrossCallReturnLabel_190:
   \   000003   E5..         MOV     A,?V0 + 0
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine88:
   \   000000   12....       LCALL   ?Subroutine130 & 0xFFFF
   \                     ??CrossCallReturnLabel_556:
   \   000003   74FF         MOV     A,#-0x1
   \   000005   F0           MOVX    @DPTR,A
   \   000006   E5..         MOV     A,?V0 + 0
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine85:
   \   000000   EE           MOV     A,R6
   \   000001   2404         ADD     A,#0x4
   \   000003   FE           MOV     R6,A
   \   000004                REQUIRE ??Subroutine188_0
   \   000004                ; // Fall through to label ??Subroutine188_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine188_0:
   \   000000   12....       LCALL   ?Subroutine132 & 0xFFFF
   \                     ??CrossCallReturnLabel_482:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine132:
   \   000000   12....       LCALL   ?Subroutine143 & 0xFFFF
   \                     ??CrossCallReturnLabel_484:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine74:
   \   000000   12....       LCALL   ?Subroutine130 & 0xFFFF
   \                     ??CrossCallReturnLabel_555:
   \   000003   E8           MOV     A,R0
   \   000004                REQUIRE ??Subroutine189_0
   \   000004                ; // Fall through to label ??Subroutine189_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine189_0:
   \   000000   12....       LCALL   ??Subroutine163_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_498:
   \   000003   EE           MOV     A,R6
   \   000004   2402         ADD     A,#0x2
   \   000006   0E           INC     R6
   \   000007   0E           INC     R6
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine70:
   \   000000   12....       LCALL   ?Subroutine119 & 0xFFFF
   \                     ??CrossCallReturnLabel_175:
   \   000003                ; Setup parameters for call to function osal_build_uint32
   \   000003                ; Setup parameters for call to function osal_build_uint32
   \   000003   7904         MOV     R1,#0x4
   \   000005   EE           MOV     A,R6
   \   000006   FA           MOV     R2,A
   \   000007   EF           MOV     A,R7
   \   000008   FB           MOV     R3,A
   \   000009   12....       LCALL   ??osal_build_uint32?relay
   \   00000C   E5..         MOV     A,?V0 + 0
   \   00000E   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine78:
   \   000000   12....       LCALL   ?Subroutine125 & 0xFFFF
   \                     ??CrossCallReturnLabel_186:
   \   000003   E0           MOVX    A,@DPTR
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine67:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   FA           MOV     R2,A
   \   000002   7B00         MOV     R3,#0x0
   \   000004   12....       LCALL   ??osal_mem_alloc?relay
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine54:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   FA           MOV     R2,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   12....       LCALL   ?Subroutine134 & 0xFFFF
   \                     ??CrossCallReturnLabel_561:
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine134:
   \   000000   FB           MOV     R3,A
   \   000001                REQUIRE ??Subroutine194_0
   \   000001                ; // Fall through to label ??Subroutine194_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine196_0:
   \   000000   7904         MOV     R1,#0x4
   \   000002   EE           MOV     A,R6
   \   000003   FA           MOV     R2,A
   \   000004   EF           MOV     A,R7
   \   000005   FB           MOV     R3,A
   \   000006   12....       LCALL   ?Subroutine145 & 0xFFFF
   \                     ??CrossCallReturnLabel_583:
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine145:
   \   000000   12....       LCALL   ??osal_build_uint32?relay
   \   000003   85..82       MOV     DPL,?V0 + 0
   \   000006   85..83       MOV     DPH,?V0 + 1
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine127:
   \   000000   EF           MOV     A,R7
   \   000001   3400         ADDC    A,#0x0
   \   000003   FF           MOV     R7,A
   \   000004                ; Setup parameters for call to function osal_build_uint32
   \   000004                ; Setup parameters for call to function osal_build_uint32
   \   000004                ; Setup parameters for call to function osal_build_uint32
   \   000004                ; Setup parameters for call to function osal_build_uint32
   \   000004   7904         MOV     R1,#0x4
   \   000006   EE           MOV     A,R6
   \   000007   FA           MOV     R2,A
   \   000008   EF           MOV     A,R7
   \   000009   FB           MOV     R3,A
   \   00000A   12....       LCALL   ??osal_build_uint32?relay
   \   00000D   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine75:
   \   000000   12....       LCALL   ?Subroutine119 & 0xFFFF
   \                     ??CrossCallReturnLabel_176:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine119:
   \   000000   12....       LCALL   ?Subroutine141 & 0xFFFF
   \                     ??CrossCallReturnLabel_206:
   \   000003   0E           INC     R6
   \   000004   AF83         MOV     R7,DPH
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine73:
   \   000000   12....       LCALL   ?Subroutine125 & 0xFFFF
   \                     ??CrossCallReturnLabel_185:
   \   000003   AE82         MOV     R6,DPL
   \   000005   AF83         MOV     R7,DPH
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine72:
   \   000000   12....       LCALL   ?Subroutine118 & 0xFFFF
   \                     ??CrossCallReturnLabel_172:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine69:
   \   000000   12....       LCALL   ?Subroutine119 & 0xFFFF
   \                     ??CrossCallReturnLabel_174:
   \   000003   E0           MOVX    A,@DPTR
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine32:
   \   000000   12....       LCALL   ?Subroutine147 & 0xFFFF
   \                     ??CrossCallReturnLabel_486:
   \   000003                REQUIRE ??Subroutine197_0
   \   000003                ; // Fall through to label ??Subroutine197_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine197_0:
   \   000000   12....       LCALL   ?Subroutine115 & 0xFFFF
   \                     ??CrossCallReturnLabel_579:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine115:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   FA           MOV     R2,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   F9           MOV     R1,A
   \   000005   EA           MOV     A,R2
   \   000006   F8           MOV     R0,A
   \   000007   E5..         MOV     A,?V0 + 0
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine97:
   \   000000   12....       LCALL   ??Subroutine198_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_582:
   \   000003   A3           INC     DPTR
   \   000004   A3           INC     DPTR
   \   000005   A3           INC     DPTR
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine198_0:
   \   000000   12....       LCALL   ?Subroutine145 & 0xFFFF
   \                     ??CrossCallReturnLabel_584:
   \   000003   A3           INC     DPTR
   \   000004   A3           INC     DPTR
   \   000005   A3           INC     DPTR
   \   000006   A3           INC     DPTR
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine125:
   \   000000   12....       LCALL   ?Subroutine141 & 0xFFFF
   \                     ??CrossCallReturnLabel_207:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine147:
   \   000000   EF           MOV     A,R7
   \   000001   3400         ADDC    A,#0x0
   \   000003   FF           MOV     R7,A
   \   000004   8E82         MOV     DPL,R6
   \   000006   8F83         MOV     DPH,R7
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine118:
   \   000000   F582         MOV     DPL,A
   \   000002   E5..         MOV     A,?V0 + 1
   \   000004   3400         ADDC    A,#0x0
   \   000006   F583         MOV     DPH,A
   \   000008   E8           MOV     A,R0
   \   000009   F0           MOVX    @DPTR,A
   \   00000A   A3           INC     DPTR
   \   00000B   E9           MOV     A,R1
   \   00000C   F0           MOVX    @DPTR,A
   \   00000D   EE           MOV     A,R6
   \   00000E   2402         ADD     A,#0x2
   \   000010   0E           INC     R6
   \   000011   0E           INC     R6
   \   000012   12....       LCALL   ?Subroutine143 & 0xFFFF
   \                     ??CrossCallReturnLabel_485:
   \   000015   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine143:
   \   000000   12....       LCALL   ?Subroutine147 & 0xFFFF
   \                     ??CrossCallReturnLabel_488:
   \   000003   E0           MOVX    A,@DPTR
   \   000004   22           RET
   7864          
   7865          /*********************************************************************
   7866           * @fn      zclSE_ParseInCmd_PublishBlockPeriod
   7867           *
   7868           * @brief   Parse received Publish Block Period Command.
   7869           *
   7870           * @param   pCmd - pointer to the output data struct
   7871           * @param   buf - pointer to the input data buffer
   7872           * @param   len - length of the input buffer
   7873           *
   7874           * @return  none
   7875           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   7876          void zclSE_ParseInCmd_PublishBlockPeriod( zclCCPublishBlockPeriod_t *pCmd,
   \                     zclSE_ParseInCmd_PublishBlockPeriod:
   7877                                                    uint8 *buf, uint8 len )
   7878          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   12....       LCALL   ?Subroutine99 & 0xFFFF
   7879            (void)len;  // Intentionally unreferenced parameter
   7880          
   7881            // Parse the command buffer
   7882            pCmd->providerId = osal_build_uint32( buf, 4 );
   \                     ??CrossCallReturnLabel_568:
   \   000008   12....       LCALL   ?XSTORE_R2345
   7883            buf += 4;
   \   00000B   12....       LCALL   ?Subroutine95 & 0xFFFF
   7884          
   7885            pCmd->issuerEventId = osal_build_uint32( buf, 4 );
   \                     ??CrossCallReturnLabel_149:
   \   00000E                ; Setup parameters for call to function osal_build_uint32
   \   00000E   12....       LCALL   ?Subroutine98 & 0xFFFF
   \                     ??CrossCallReturnLabel_499:
   \   000011   12....       LCALL   ?XSTORE_R2345
   7886            buf += 4;
   \   000014   EE           MOV     A,R6
   \   000015   2404         ADD     A,#0x4
   \   000017   FE           MOV     R6,A
   \   000018   12....       LCALL   ?Subroutine86 & 0xFFFF
   7887          
   7888            pCmd->blockPeriodStartTime = osal_build_uint32( buf, 4 );
   \                     ??CrossCallReturnLabel_134:
   \   00001B   12....       LCALL   ?XSTORE_R2345
   7889            buf += 4;
   \   00001E   12....       LCALL   ?Subroutine95 & 0xFFFF
   7890          
   7891            pCmd->blockPeriodDurInMins = osal_build_uint32( buf, 3 );
   \                     ??CrossCallReturnLabel_150:
   \   000021                ; Setup parameters for call to function osal_build_uint32
   \   000021   7903         MOV     R1,#0x3
   \   000023   EE           MOV     A,R6
   \   000024   FA           MOV     R2,A
   \   000025   EF           MOV     A,R7
   \   000026   FB           MOV     R3,A
   \   000027   12....       LCALL   ??osal_build_uint32?relay
   \   00002A   E5..         MOV     A,?V0 + 0
   \   00002C   240C         ADD     A,#0xc
   \   00002E   12....       LCALL   ??Subroutine192_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_540:
   \   000031   12....       LCALL   ?XSTORE_R2345
   7892            buf += 3;
   \   000034   EE           MOV     A,R6
   \   000035   2403         ADD     A,#0x3
   \   000037   0E           INC     R6
   \   000038   0E           INC     R6
   \   000039   0E           INC     R6
   \   00003A   12....       LCALL   ??Subroutine188_0 & 0xFFFF
   7893          
   7894            pCmd->numPriceTiersAndBlock = *buf++;
   \                     ??CrossCallReturnLabel_481:
   \   00003D   C0E0         PUSH    A
   \   00003F   12....       LCALL   ?Subroutine93 & 0xFFFF
   \                     ??CrossCallReturnLabel_550:
   \   000042   D0E0         POP     A
   \   000044   12....       LCALL   ?Subroutine78 & 0xFFFF
   7895          
   7896          #ifdef SE_UK_EXT
   7897            pCmd->tariffType = *buf++;
   7898          #endif
   7899          
   7900            pCmd->blockPeriodControl = *buf;
   \                     ??CrossCallReturnLabel_123:
   \   000047   C0E0         PUSH    A
   \   000049   E5..         MOV     A,?V0 + 0
   \   00004B   2412         ADD     A,#0x12
   \   00004D                REQUIRE ?Subroutine9
   \   00004D                ; // Fall through to label ?Subroutine9
   7901          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine9:
   \   000000   12....       LCALL   ??Subroutine192_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_548:
   \   000003   D0E0         POP     A
   \   000005                REQUIRE ??Subroutine190_0
   \   000005                ; // Fall through to label ??Subroutine190_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine190_0:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   02....       LJMP    ??Subroutine183_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine98:
   \   000000   7904         MOV     R1,#0x4
   \   000002   EE           MOV     A,R6
   \   000003   FA           MOV     R2,A
   \   000004   EF           MOV     A,R7
   \   000005                REQUIRE ??Subroutine191_0
   \   000005                ; // Fall through to label ??Subroutine191_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine191_0:
   \   000000   12....       LCALL   ?Subroutine133 & 0xFFFF
   \                     ??CrossCallReturnLabel_580:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine99:
   \   000000   8A..         MOV     ?V0 + 0,R2
   \   000002   8B..         MOV     ?V0 + 1,R3
   \   000004   EC           MOV     A,R4
   \   000005   FE           MOV     R6,A
   \   000006   ED           MOV     A,R5
   \   000007   FF           MOV     R7,A
   \   000008                ; Setup parameters for call to function osal_build_uint32
   \   000008                ; Setup parameters for call to function osal_build_uint32
   \   000008                ; Setup parameters for call to function osal_build_uint32
   \   000008                ; Setup parameters for call to function osal_build_uint32
   \   000008                ; Setup parameters for call to function osal_build_uint32
   \   000008                REQUIRE ??Subroutine196_0
   \   000008                ; // Fall through to label ??Subroutine196_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine86:
   \   000000   12....       LCALL   ?Subroutine127 & 0xFFFF
   \                     ??CrossCallReturnLabel_191:
   \   000003   85..82       MOV     DPL,?V0 + 0
   \   000006   85..83       MOV     DPH,?V0 + 1
   \   000009   A3           INC     DPTR
   \   00000A   A3           INC     DPTR
   \   00000B   A3           INC     DPTR
   \   00000C   A3           INC     DPTR
   \   00000D   A3           INC     DPTR
   \   00000E   A3           INC     DPTR
   \   00000F   A3           INC     DPTR
   \   000010   A3           INC     DPTR
   \   000011   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine133:
   \   000000   FB           MOV     R3,A
   \   000001                REQUIRE ??Subroutine198_0
   \   000001                ; // Fall through to label ??Subroutine198_0
   7902          
   7903          #ifdef SE_UK_EXT
   7904          /*********************************************************************
   7905           * @fn      zclSE_ParseInCmd_PublishTariffInfomation
   7906           *
   7907           * @brief   Parse received Publish Tariff Info.
   7908           *
   7909           * @param   pCmd - pointer to the output data struct
   7910           * @param   buf - pointer to the input data buffer
   7911           * @param   len - length of the input buffer
   7912           *
   7913           * @return  none
   7914           */
   7915          void zclSE_ParseInCmd_PublishTariffInformation( zclCCPublishTariffInformation_t *pCmd,
   7916                                                          uint8 *buf, uint8 len )
   7917          {
   7918            uint8 fieldLen;
   7919            (void)len;  // Intentionally unreferenced parameter
   7920          
   7921            // Parse the command buffer
   7922            pCmd->supplierId = osal_build_uint32( buf, 4 );
   7923            buf += 4;
   7924            pCmd->issuerTariffId = osal_build_uint32( buf, 4 );
   7925            buf += 4;
   7926            pCmd->startTime = osal_build_uint32( buf, 4 );
   7927            buf += 4;
   7928            pCmd->tariffType = *buf++;
   7929          
   7930            fieldLen = zclSE_Parse_UTF8String(buf, &pCmd->tarifLabel, SE_TARIFF_LABEL_LEN);
   7931            buf += fieldLen;
   7932          
   7933            pCmd->numPriceTiersInUse = *buf++;
   7934            pCmd->numBlockThresholdsInUse = *buf++;
   7935            pCmd->unitOfMeasure = *buf++;
   7936            pCmd->currency = BUILD_UINT16( buf[0], buf[1] );
   7937            buf += 2;
   7938            pCmd->priceTrailingDigit = *buf++;
   7939            pCmd->standingCharge = osal_build_uint32( buf, 4 );
   7940            buf += 4;
   7941            pCmd->tierBlockMode = *buf++;
   7942            pCmd->blockThresholdMask = BUILD_UINT16( buf[0], buf[1] );
   7943            buf += 2;
   7944            pCmd->BlockThresholdMultiplier = osal_build_uint32( buf, 3 );
   7945            buf += 3;
   7946            pCmd->BlockThresholdDivisor = osal_build_uint32( buf, 3 );
   7947          }
   7948          
   7949          /*********************************************************************
   7950           * @fn      zclSE_ParseInCmd_PublishPriceMatrix
   7951           *
   7952           * @brief   Parse received Publish Price Matrix.
   7953           *
   7954           * @param   pCmd - pointer to the output data struct
   7955           * @param   buf - pointer to the input data buffer
   7956           * @param   len - length of the input buffer
   7957           *
   7958           * @return  ZStatus_t - ZSuccess @ Parse successful
   7959           *                      ZMemError @ Memory allocation failure
   7960           */
   7961          ZStatus_t zclSE_ParseInCmd_PublishPriceMatrix( zclCCPublishPriceMatrix_t *pCmd,
   7962                                                         uint8 *buf, uint8 len )
   7963          {
   7964            // Parse the command buffer
   7965            pCmd->issuerTariffId = osal_build_uint32( buf, 4 );
   7966            buf += 4;
   7967          
   7968            pCmd->commandIndex = *buf++;
   7969            pCmd->numElements = (len - PACKET_LEN_SE_MIN_PUBLISH_PRICE_MATRIX) / sizeof (uint32);
   7970            pCmd->pTierBlockPrice = NULL;
   7971          
   7972            if ( pCmd->numElements )
   7973            {
   7974              pCmd->pTierBlockPrice = osal_mem_alloc(sizeof (uint32) * pCmd->numElements);
   7975          
   7976              if ( pCmd->pTierBlockPrice == NULL )
   7977              {
   7978                return ZMemError;
   7979              }
   7980          
   7981              uint8 i;
   7982          
   7983              for ( i = 0; i < pCmd->numElements; i++ )
   7984              {
   7985                pCmd->pTierBlockPrice[i] = osal_build_uint32( buf, 4 );
   7986                buf += 4;
   7987              }
   7988            }
   7989          
   7990            return ZSuccess;
   7991          }
   7992          
   7993          /*********************************************************************
   7994           * @fn      zclSE_ParseInCmd_PublishBlockThresholds
   7995           *
   7996           * @brief   Parse received Publish Block Thresholds.
   7997           *
   7998           * @param   pCmd - pointer to the output data struct
   7999           * @param   buf - pointer to the input data buffer
   8000           * @param   len - length of the input buffer
   8001           *
   8002           * @return  ZStatus_t - ZSuccess @ Parse successful
   8003           *                      ZMemError @ Memory allocation failure
   8004           */
   8005          ZStatus_t zclSE_ParseInCmd_PublishBlockThresholds( zclCCPublishBlockThresholds_t *pCmd,
   8006                                                             uint8 *buf, uint8 len )
   8007          {
   8008            // Parse the command buffer
   8009            pCmd->issuerTariffId = osal_build_uint32( buf, 4 );
   8010            buf += 4;
   8011          
   8012            pCmd->commandIndex = *buf++;
   8013            pCmd->numElements = (len - PACKET_LEN_SE_MIN_PUBLISH_BLOCK_THRESHOLD) / 6;
   8014            pCmd->pTierBlockThreshold = NULL;
   8015          
   8016            if ( pCmd->numElements )
   8017            {
   8018              pCmd->pTierBlockThreshold = osal_mem_alloc(6 * pCmd->numElements);
   8019          
   8020              if ( pCmd->pTierBlockThreshold == NULL )
   8021              {
   8022                return ZMemError;
   8023              }
   8024          
   8025              uint8 i;
   8026          
   8027              for ( i = 0; i < pCmd->numElements; i++ )
   8028              {
   8029                osal_memcpy( pCmd->pTierBlockThreshold[i], buf, 6 );
   8030                buf += 6;
   8031              }
   8032            }
   8033          
   8034            return ZSuccess;
   8035          }
   8036          
   8037          /*********************************************************************
   8038           * @fn      zclSE_ParseInCmd_PublishConversionFactor
   8039           *
   8040           * @brief   Parse received Publish Conversion Factor.
   8041           *
   8042           * @param   pCmd - pointer to the output data struct
   8043           * @param   buf - pointer to the input data buffer
   8044           * @param   len - length of the input buffer
   8045           *
   8046           * @return  none
   8047           */
   8048          void zclSE_ParseInCmd_PublishConversionFactor( zclCCPublishConversionFactor_t *pCmd,
   8049                                                         uint8 *buf, uint8 len )
   8050          {
   8051            (void)len;  // Intentionally unreferenced parameter
   8052          
   8053            // Parse the command buffer
   8054            pCmd->issuerEventId = osal_build_uint32( buf, 4 );
   8055            buf += 4;
   8056            pCmd->startTime = osal_build_uint32( buf, 4 );
   8057            buf += 4;
   8058            pCmd->conversionFactor = osal_build_uint32( buf, 4 );
   8059            buf += 4;
   8060            pCmd->trailingDigit = *buf;
   8061          }
   8062          
   8063          /*********************************************************************
   8064           * @fn      zclSE_ParseInCmd_PublishCalorificValue
   8065           *
   8066           * @brief   Parse received Publish Calorific Value.
   8067           *
   8068           * @param   pCmd - pointer to the output data struct
   8069           * @param   buf - pointer to the input data buffer
   8070           * @param   len - length of the input buffer
   8071           *
   8072           * @return  none
   8073           */
   8074          void zclSE_ParseInCmd_PublishCalorificValue( zclCCPublishCalorificValue_t *pCmd,
   8075                                                       uint8 *buf, uint8 len )
   8076          {
   8077            (void)len;  // Intentionally unreferenced parameter
   8078          
   8079            // Parse the command buffer
   8080            pCmd->issuerEventId = osal_build_uint32( buf, 4 );
   8081            buf += 4;
   8082            pCmd->startTime = osal_build_uint32( buf, 4 );
   8083            buf += 4;
   8084            pCmd->calorificValue = osal_build_uint32( buf, 4 );
   8085            buf += 4;
   8086            pCmd->calorificValueUnit = *buf++;
   8087            pCmd->trailingDigit = *buf;
   8088          }
   8089          
   8090          /*********************************************************************
   8091           * @fn      zclSE_ParseInCmd_PublishCO2Value
   8092           *
   8093           * @brief   Parse received Publish CO2 Value.
   8094           *
   8095           * @param   pCmd - pointer to the output data struct
   8096           * @param   buf - pointer to the input data buffer
   8097           * @param   len - length of the input buffer
   8098           *
   8099           * @return  none
   8100           */
   8101          void zclSE_ParseInCmd_PublishCO2Value( zclCCPublishCO2Value_t *pCmd,
   8102                                                 uint8 *buf, uint8 len )
   8103          {
   8104            (void)len;  // Intentionally unreferenced parameter
   8105          
   8106            // Parse the command buffer
   8107            pCmd->issuerEventId = osal_build_uint32( buf, 4 );
   8108            buf += 4;
   8109            pCmd->startTime = osal_build_uint32( buf, 4 );
   8110            buf += 4;
   8111            pCmd->tariffType = *buf++;
   8112            pCmd->CO2Value = osal_build_uint32( buf, 4 );
   8113            buf += 4;
   8114            pCmd->CO2ValueUnit = *buf++;
   8115            pCmd->trailingDigit = *buf;
   8116          }
   8117          
   8118          /*********************************************************************
   8119           * @fn      zclSE_ParseInCmd_PublishCPPEvent
   8120           *
   8121           * @brief   Parse received Publish CPP Event.
   8122           *
   8123           * @param   pCmd - pointer to the output data struct
   8124           * @param   buf - pointer to the input data buffer
   8125           * @param   len - length of the input buffer
   8126           *
   8127           * @return  none
   8128           */
   8129          void zclSE_ParseInCmd_PublishCPPEvent( zclCCPublishCPPEvent_t *pCmd,
   8130                                                 uint8 *buf, uint8 len )
   8131          {
   8132            (void)len;  // Intentionally unreferenced parameter
   8133          
   8134            // Parse the command buffer
   8135            pCmd->issuerEventId = osal_build_uint32( buf, 4 );
   8136            buf += 4;
   8137            pCmd->startTime = osal_build_uint32( buf, 4 );
   8138            buf += 4;
   8139            pCmd->durationInMinutes = BUILD_UINT16( buf[0], buf[1] );
   8140            buf += 2;
   8141            pCmd->tariffType = *buf++;
   8142            pCmd->CPPPriceTier = *buf++;
   8143            pCmd->CPPAuth = *buf;
   8144          }
   8145          
   8146          /*********************************************************************
   8147           * @fn      zclSE_ParseInCmd_PublishBillingPeriod
   8148           *
   8149           * @brief   Parse received Publish Billing Period.
   8150           *
   8151           * @param   pCmd - pointer to the output data struct
   8152           * @param   buf - pointer to the input data buffer
   8153           * @param   len - length of the input buffer
   8154           *
   8155           * @return  none
   8156           */
   8157          void zclSE_ParseInCmd_PublishBillingPeriod( zclCCPublishBillingPeriod_t *pCmd,
   8158                                                      uint8 *buf, uint8 len )
   8159          {
   8160            (void)len;  // Intentionally unreferenced parameter
   8161          
   8162            // Parse the command buffer
   8163            pCmd->issuerEventId = osal_build_uint32( buf, 4 );
   8164            buf += 4;
   8165            pCmd->startTime = osal_build_uint32( buf, 4 );
   8166            buf += 4;
   8167            pCmd->duration = osal_build_uint32( buf, 3 );
   8168            buf += 3;
   8169            pCmd->tariffType = *buf;
   8170          }
   8171          
   8172          /*********************************************************************
   8173           * @fn      zclSE_ParseInCmd_PublishConsolidatedBill
   8174           *
   8175           * @brief   Parse received Publish Consolidated Bill.
   8176           *
   8177           * @param   pCmd - pointer to the output data struct
   8178           * @param   buf - pointer to the input data buffer
   8179           * @param   len - length of the input buffer
   8180           *
   8181           * @return  none
   8182           */
   8183          void zclSE_ParseInCmd_PublishConsolidatedBill( zclCCPublishConsolidatedBill_t *pCmd,
   8184                                                         uint8 *buf, uint8 len )
   8185          {
   8186            (void)len;  // Intentionally unreferenced parameter
   8187          
   8188            // Parse the command buffer
   8189            pCmd->issuerEventId = osal_build_uint32( buf, 4 );
   8190            buf += 4;
   8191            pCmd->startTime = osal_build_uint32( buf, 4 );
   8192            buf += 4;
   8193            pCmd->duration = osal_build_uint32( buf, 3 );
   8194            buf += 3;
   8195            pCmd->tariffType = *buf++;
   8196            pCmd->consolidatedBill = osal_build_uint32( buf, 4 );
   8197            buf += 4;
   8198            pCmd->currency = BUILD_UINT16( buf[0], buf[1] );
   8199            buf += 2;
   8200            pCmd->trailingDigit = *buf;
   8201          }
   8202          
   8203          /*********************************************************************
   8204           * @fn      zclSE_ParseInCmd_PublishCreditPaymentInfo
   8205           *
   8206           * @brief   Parse received Publish Credit Payment Info.
   8207           *
   8208           * @param   pCmd - pointer to the output data struct
   8209           * @param   buf - pointer to the input data buffer
   8210           * @param   len - length of the input buffer
   8211           *
   8212           * @return  none
   8213           */
   8214          void zclSE_ParseInCmd_PublishCreditPaymentInfo( zclCCPublishCreditPaymentInfo_t *pCmd,
   8215                                                          uint8 *buf, uint8 len )
   8216          {
   8217            // Parse the command buffer
   8218            pCmd->issuerEventId = osal_build_uint32( buf, 4 );
   8219            buf += 4;
   8220            pCmd->paymentDueDate = osal_build_uint32( buf, 4 );
   8221            buf += 4;
   8222            pCmd->creditPaymentOverdueAmt = osal_build_uint32( buf, 4 );
   8223            buf += 4;
   8224            pCmd->creditPaymentStatus = *buf++;
   8225            pCmd->creditPayment = osal_build_uint32( buf, 4 );
   8226            buf += 4;
   8227            pCmd->creditPaymentDate = osal_build_uint32( buf, 4 );
   8228            buf += 4;
   8229            (void)zclSE_Parse_UTF8String(buf, &pCmd->creditPaymentRef, SE_CREDIT_PAYMENT_REF_LEN);
   8230          }
   8231          
   8232          /*********************************************************************
   8233           * @fn      zclSE_ParseInCmd_GetTariffInformation
   8234           *
   8235           * @brief   Parse received Get Tariff Information.
   8236           *
   8237           * @param   pCmd - pointer to the output data struct
   8238           * @param   buf - pointer to the input data buffer
   8239           * @param   len - length of the input buffer
   8240           *
   8241           * @return  none
   8242           */
   8243          void zclSE_ParseInCmd_GetTariffInformation( zclCCGetTariffInformation_t *pCmd,
   8244                                                      uint8 *buf, uint8 len )
   8245          {
   8246            (void)len;  // Intentionally unreferenced parameter
   8247          
   8248            // Parse the command buffer
   8249            pCmd->startTime = osal_build_uint32( buf, 4 );
   8250            buf += 4;
   8251            pCmd->numEvents = *buf++;
   8252            pCmd->tariffType = *buf;
   8253          }
   8254          
   8255          /*********************************************************************
   8256           * @fn      zclSE_ParseInCmd_GetConversionFactor
   8257           *
   8258           * @brief   Parse received Get Conversion Factor.
   8259           *
   8260           * @param   pCmd - pointer to the output data struct
   8261           * @param   buf - pointer to the input data buffer
   8262           * @param   len - length of the input buffer
   8263           *
   8264           * @return  none
   8265           */
   8266          void zclSE_ParseInCmd_GetConversionFactor( zclCCGetConversionFactor_t *pCmd,
   8267                                                     uint8 *buf, uint8 len )
   8268          {
   8269            (void)len;  // Intentionally unreferenced parameter
   8270          
   8271            // Parse the command buffer
   8272            pCmd->startTime = osal_build_uint32( buf, 4 );
   8273            buf += 4;
   8274            pCmd->numEvents = *buf;
   8275          }
   8276          
   8277          /*********************************************************************
   8278           * @fn      zclSE_ParseInCmd_GetCalorificValue
   8279           *
   8280           * @brief   Parse received Get Calorific Value.
   8281           *
   8282           * @param   pCmd - pointer to the output data struct
   8283           * @param   buf - pointer to the input data buffer
   8284           * @param   len - length of the input buffer
   8285           *
   8286           * @return  none
   8287           */
   8288          void zclSE_ParseInCmd_GetCalorificValue( zclCCGetCalorificValue_t *pCmd,
   8289                                                   uint8 *buf, uint8 len )
   8290          {
   8291            (void)len;  // Intentionally unreferenced parameter
   8292          
   8293            // Parse the command buffer
   8294            pCmd->startTime = osal_build_uint32( buf, 4 );
   8295            buf += 4;
   8296            pCmd->numEvents = *buf;
   8297          }
   8298          
   8299          /*********************************************************************
   8300           * @fn      zclSE_ParseInCmd_GetCO2Value
   8301           *
   8302           * @brief   Parse received Get CO2 Value.
   8303           *
   8304           * @param   pCmd - pointer to the output data struct
   8305           * @param   buf - pointer to the input data buffer
   8306           * @param   len - length of the input buffer
   8307           *
   8308           * @return  none
   8309           */
   8310          void zclSE_ParseInCmd_GetCO2Value( zclCCGetCO2Value_t *pCmd, uint8 *buf, uint8 len )
   8311          {
   8312            (void)len;  // Intentionally unreferenced parameter
   8313          
   8314            // Parse the command buffer
   8315            pCmd->startTime = osal_build_uint32( buf, 4 );
   8316            buf += 4;
   8317            pCmd->numEvents = *buf++;
   8318            pCmd->tariffType = *buf;
   8319          }
   8320          
   8321          /*********************************************************************
   8322           * @fn      zclSE_ParseInCmd_GetBillingPeriod
   8323           *
   8324           * @brief   Parse received Get Billing Period.
   8325           *
   8326           * @param   pCmd - pointer to the output data struct
   8327           * @param   buf - pointer to the input data buffer
   8328           * @param   len - length of the input buffer
   8329           *
   8330           * @return  none
   8331           */
   8332          void zclSE_ParseInCmd_GetBillingPeriod( zclCCGetBillingPeriod_t *pCmd,
   8333                                                  uint8 *buf, uint8 len )
   8334          {
   8335            (void)len;  // Intentionally unreferenced parameter
   8336          
   8337            // Parse the command buffer
   8338            pCmd->startTime = osal_build_uint32( buf, 4 );
   8339            buf += 4;
   8340            pCmd->numEvents = *buf++;
   8341            pCmd->tariffType = *buf;
   8342          }
   8343          
   8344          /*********************************************************************
   8345           * @fn      zclSE_ParseInCmd_GetConsolidatedBill
   8346           *
   8347           * @brief   Parse received Get Consolidated Bill.
   8348           *
   8349           * @param   pCmd - pointer to the output data struct
   8350           * @param   buf - pointer to the input data buffer
   8351           * @param   len - length of the input buffer
   8352           *
   8353           * @return  none
   8354           */
   8355          void zclSE_ParseInCmd_GetConsolidatedBill( zclCCGetConsolidatedBill_t *pCmd,
   8356                                                     uint8 *buf, uint8 len )
   8357          {
   8358            (void)len;  // Intentionally unreferenced parameter
   8359          
   8360            // Parse the command buffer
   8361            pCmd->startTime = osal_build_uint32( buf, 4 );
   8362            buf += 4;
   8363            pCmd->numEvents = *buf++;
   8364            pCmd->tariffType = *buf;
   8365          }
   8366          
   8367          /*********************************************************************
   8368           * @fn      zclSE_ParseInCmd_CPPEventResponse
   8369           *
   8370           * @brief   Parse received CPP Event Response.
   8371           *
   8372           * @param   pCmd - pointer to the output data struct
   8373           * @param   buf - pointer to the input data buffer
   8374           * @param   len - length of the input buffer
   8375           *
   8376           * @return  none
   8377           */
   8378          void zclSE_ParseInCmd_CPPEventResponse( zclCCCPPEventResponse_t *pCmd,
   8379                                                  uint8 *buf, uint8 len )
   8380          {
   8381            (void)len;  // Intentionally unreferenced parameter
   8382          
   8383            // Parse the command buffer
   8384            pCmd->issuerEventId = osal_build_uint32( buf, 4 );
   8385            buf += 4;
   8386            pCmd->CPPAuth = *buf;
   8387          }
   8388          #endif  // SE_UK_EXT
   8389          #endif  // ZCL_PRICING
   8390          
   8391          #ifdef ZCL_MESSAGE
   8392          /*********************************************************************
   8393           * @fn      zclSE_ParseInCmd_DisplayMessage
   8394           *
   8395           * @brief   Parse received Display Message Command.
   8396           *
   8397           * @param   pCmd - pointer to the output data struct
   8398           * @param   buf - pointer to the input data buffer
   8399           * @param   len - length of the input buffer
   8400           *
   8401           * @return  ZStatus_t - ZSuccess @ Parse successful
   8402           *                      ZMemError @ Memory allocation failure
   8403           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   8404          ZStatus_t zclSE_ParseInCmd_DisplayMessage( zclCCDisplayMessage_t *pCmd, uint8 *buf, uint8 len )
   \                     zclSE_ParseInCmd_DisplayMessage:
   8405          {
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   12....       LCALL   ?Subroutine100 & 0xFFFF
   8406            (void)len;  // Intentionally unreferenced parameter
   8407          
   8408            pCmd->messageId = osal_build_uint32( buf, 4 );
   \                     ??CrossCallReturnLabel_565:
   \   000008   12....       LCALL   ?XSTORE_R2345
   8409          
   8410            // Message control bitmap
   8411            osal_memset ( &(pCmd->messageCtrl), 0, sizeof( zclMessageCtrl_t ) );
   \   00000B   12....       LCALL   ?Subroutine19 & 0xFFFF
   8412          
   8413            pCmd->messageCtrl.transmissionMode = buf[4] & 0x03;    // bit 0&1
   8414            pCmd->messageCtrl.importance = ( buf[4] >> SE_PROFILE_MSGCTRL_IMPORTANCE ) & 0x03; // bit 2&3
   8415          #if defined ( SE_UK_EXT )
   8416            pCmd->messageCtrl.pinRequired = ( buf[4] >> SE_PROFILE_MSGCTRL_PINREQUIRED ) & 0x01;  // bit 4
   8417            pCmd->messageCtrl.acceptanceRequired = ( buf[4] >> SE_PROFILE_MSGCTRL_ACCEPTREQUIRED ) & 0x01;  // bit 5
   8418          #endif
   8419            pCmd->messageCtrl.confirmationRequired = ( buf[4] >> SE_PROFILE_MSGCTRL_CONFREQUIRED ) & 0x01;  // bit 7
   8420          
   8421            pCmd->startTime = osal_build_uint32( &(buf[5]), 4 );
   \                     ??CrossCallReturnLabel_12:
   \   00000E                ; Setup parameters for call to function osal_build_uint32
   \   00000E   7904         MOV     R1,#0x4
   \   000010   E5..         MOV     A,?V0 + 0
   \   000012   2405         ADD     A,#0x5
   \   000014   FA           MOV     R2,A
   \   000015   E5..         MOV     A,?V0 + 1
   \   000017   3400         ADDC    A,#0x0
   \   000019   FB           MOV     R3,A
   \   00001A   12....       LCALL   ??Subroutine195_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_567:
   \   00001D   A3           INC     DPTR
   \   00001E   A3           INC     DPTR
   \   00001F   A3           INC     DPTR
   \   000020   A3           INC     DPTR
   \   000021   A3           INC     DPTR
   \   000022   A3           INC     DPTR
   \   000023   A3           INC     DPTR
   \   000024   A3           INC     DPTR
   \   000025   A3           INC     DPTR
   \   000026   12....       LCALL   ?XSTORE_R2345
   8422            pCmd->durationInMinutes = BUILD_UINT16( buf[9], buf[10] );
   \   000029   85..82       MOV     DPL,?V0 + 0
   \   00002C   85..83       MOV     DPH,?V0 + 1
   \   00002F   A3           INC     DPTR
   \   000030   A3           INC     DPTR
   \   000031   A3           INC     DPTR
   \   000032   A3           INC     DPTR
   \   000033   A3           INC     DPTR
   \   000034   A3           INC     DPTR
   \   000035   A3           INC     DPTR
   \   000036   A3           INC     DPTR
   \   000037   A3           INC     DPTR
   \   000038   E0           MOVX    A,@DPTR
   \   000039   FA           MOV     R2,A
   \   00003A   85..82       MOV     DPL,?V0 + 0
   \   00003D   85..83       MOV     DPH,?V0 + 1
   \   000040   A3           INC     DPTR
   \   000041   A3           INC     DPTR
   \   000042   A3           INC     DPTR
   \   000043   A3           INC     DPTR
   \   000044   A3           INC     DPTR
   \   000045   A3           INC     DPTR
   \   000046   A3           INC     DPTR
   \   000047   A3           INC     DPTR
   \   000048   A3           INC     DPTR
   \   000049   A3           INC     DPTR
   \   00004A   E0           MOVX    A,@DPTR
   \   00004B   F9           MOV     R1,A
   \   00004C   EA           MOV     A,R2
   \   00004D   F8           MOV     R0,A
   \   00004E   EE           MOV     A,R6
   \   00004F   240D         ADD     A,#0xd
   \   000051   F582         MOV     DPL,A
   \   000053   EF           MOV     A,R7
   \   000054   12....       LCALL   ??Subroutine193_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_518:
   \   000057   12....       LCALL   ?Subroutine123 & 0xFFFF
   8423            pCmd->msgString.strLen = buf[11];
   \                     ??CrossCallReturnLabel_496:
   \   00005A   E5..         MOV     A,?V0 + 0
   \   00005C   240B         ADD     A,#0xb
   \   00005E   12....       LCALL   ?Subroutine92 & 0xFFFF
   \                     ??CrossCallReturnLabel_366:
   \   000061   C0E0         PUSH    A
   \   000063   EE           MOV     A,R6
   \   000064   240F         ADD     A,#0xf
   \   000066   F582         MOV     DPL,A
   \   000068   EF           MOV     A,R7
   \   000069   12....       LCALL   ??Subroutine193_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_519:
   \   00006C   D0E0         POP     A
   \   00006E   F0           MOVX    @DPTR,A
   8424          
   8425            // Copy the message string
   8426            if ( pCmd->msgString.strLen != 0 )
   \   00006F   605A         JZ      ??zclSE_ParseInCmd_DisplayMessage_0
   8427            {
   8428              pCmd->msgString.pStr = osal_mem_alloc( pCmd->msgString.strLen );
   \   000071   EE           MOV     A,R6
   \   000072   2410         ADD     A,#0x10
   \   000074   F8           MOV     R0,A
   \   000075   EF           MOV     A,R7
   \   000076   3400         ADDC    A,#0x0
   \   000078   F9           MOV     R1,A
   \   000079   88..         MOV     ?V0 + 2,R0
   \   00007B   89..         MOV     ?V0 + 3,R1
   \   00007D                ; Setup parameters for call to function osal_mem_alloc
   \   00007D   12....       LCALL   ?Subroutine67 & 0xFFFF
   \                     ??CrossCallReturnLabel_96:
   \   000080   85..82       MOV     DPL,?V0 + 2
   \   000083   85..83       MOV     DPH,?V0 + 3
   \   000086   EA           MOV     A,R2
   \   000087   F0           MOVX    @DPTR,A
   \   000088   A3           INC     DPTR
   \   000089   EB           MOV     A,R3
   \   00008A   F0           MOVX    @DPTR,A
   8429              if ( pCmd->msgString.pStr == NULL )
   \   00008B   85..82       MOV     DPL,?V0 + 2
   \   00008E   85..83       MOV     DPH,?V0 + 3
   \   000091   12....       LCALL   ??Subroutine186_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_446:
   \   000094   7004         JNZ     ??zclSE_ParseInCmd_DisplayMessage_1
   8430              {
   8431                return ZMemError;
   \   000096   7910         MOV     R1,#0x10
   \   000098   8040         SJMP    ??zclSE_ParseInCmd_DisplayMessage_2
   8432              }
   8433              osal_memcpy( pCmd->msgString.pStr, &(buf[12]), pCmd->msgString.strLen );
   \                     ??zclSE_ParseInCmd_DisplayMessage_1:
   \   00009A                ; Setup parameters for call to function osal_memcpy
   \   00009A   E5..         MOV     A,?V0 + 0
   \   00009C   240C         ADD     A,#0xc
   \   00009E   F5..         MOV     ?V0 + 0,A
   \   0000A0   E5..         MOV     A,?V0 + 1
   \   0000A2   3400         ADDC    A,#0x0
   \   0000A4   F5..         MOV     ?V0 + 1,A
   \   0000A6   75..00       MOV     ?V0 + 2,#0x0
   \   0000A9   78..         MOV     R0,#?V0 + 0
   \   0000AB   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   0000AE   EE           MOV     A,R6
   \   0000AF   240F         ADD     A,#0xf
   \   0000B1   F582         MOV     DPL,A
   \   0000B3   EF           MOV     A,R7
   \   0000B4   12....       LCALL   ??Subroutine170_0 & 0xFFFF
   8434            }
   \                     ??CrossCallReturnLabel_363:
   \   0000B7   FC           MOV     R4,A
   \   0000B8   7D00         MOV     R5,#0x0
   \   0000BA   EE           MOV     A,R6
   \   0000BB   2410         ADD     A,#0x10
   \   0000BD   F582         MOV     DPL,A
   \   0000BF   EF           MOV     A,R7
   \   0000C0   12....       LCALL   ??Subroutine193_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_520:
   \   0000C3   12....       LCALL   ?Subroutine54 & 0xFFFF
   \                     ??CrossCallReturnLabel_69:
   \   0000C6   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000C9   800D         SJMP    ??zclSE_ParseInCmd_DisplayMessage_3
   8435            else
   8436            {
   8437              pCmd->msgString.pStr = NULL;
   \                     ??zclSE_ParseInCmd_DisplayMessage_0:
   \   0000CB   EE           MOV     A,R6
   \   0000CC   2410         ADD     A,#0x10
   \   0000CE   F582         MOV     DPL,A
   \   0000D0   EF           MOV     A,R7
   \   0000D1   12....       LCALL   ??Subroutine193_0 & 0xFFFF
   8438            }
   \                     ??CrossCallReturnLabel_521:
   \   0000D4   E4           CLR     A
   \   0000D5   F0           MOVX    @DPTR,A
   \   0000D6   A3           INC     DPTR
   \   0000D7   F0           MOVX    @DPTR,A
   8439          
   8440            return ZSuccess;
   \                     ??zclSE_ParseInCmd_DisplayMessage_3:
   \   0000D8   7900         MOV     R1,#0x0
   \                     ??zclSE_ParseInCmd_DisplayMessage_2:
   \   0000DA   02....       LJMP    ??Subroutine177_0 & 0xFFFF
   8441          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine100:
   \   000000   EA           MOV     A,R2
   \   000001   FE           MOV     R6,A
   \   000002   EB           MOV     A,R3
   \   000003   FF           MOV     R7,A
   \   000004   8C..         MOV     ?V0 + 0,R4
   \   000006   8D..         MOV     ?V0 + 1,R5
   \   000008                ; Setup parameters for call to function osal_build_uint32
   \   000008                ; Setup parameters for call to function osal_build_uint32
   \   000008   7904         MOV     R1,#0x4
   \   00000A   AA..         MOV     R2,?V0 + 0
   \   00000C   AB..         MOV     R3,?V0 + 1
   \   00000E                REQUIRE ??Subroutine195_0
   \   00000E                ; // Fall through to label ??Subroutine195_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine195_0:
   \   000000   12....       LCALL   ??osal_build_uint32?relay
   \   000003   8E82         MOV     DPL,R6
   \   000005   8F83         MOV     DPH,R7
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine19:
   \   000000   EE           MOV     A,R6
   \   000001   2404         ADD     A,#0x4
   \   000003   F5..         MOV     ?V0 + 2,A
   \   000005   EF           MOV     A,R7
   \   000006   3400         ADDC    A,#0x0
   \   000008   F5..         MOV     ?V0 + 3,A
   \   00000A                ; Setup parameters for call to function osal_memset
   \   00000A                ; Setup parameters for call to function osal_memset
   \   00000A   7C05         MOV     R4,#0x5
   \   00000C   7D00         MOV     R5,#0x0
   \   00000E   7900         MOV     R1,#0x0
   \   000010   AA..         MOV     R2,?V0 + 2
   \   000012   FB           MOV     R3,A
   \   000013   12....       LCALL   ??osal_memset?relay
   \   000016   E5..         MOV     A,?V0 + 0
   \   000018   2404         ADD     A,#0x4
   \   00001A   F8           MOV     R0,A
   \   00001B   E5..         MOV     A,?V0 + 1
   \   00001D   12....       LCALL   ?Subroutine126 & 0xFFFF
   \                     ??CrossCallReturnLabel_187:
   \   000020   5403         ANL     A,#0x3
   \   000022   85..82       MOV     DPL,?V0 + 2
   \   000025   85..83       MOV     DPH,?V0 + 3
   \   000028   12....       LCALL   ?Subroutine140 & 0xFFFF
   \                     ??CrossCallReturnLabel_203:
   \   00002B   E0           MOVX    A,@DPTR
   \   00002C   13           RRC     A
   \   00002D   13           RRC     A
   \   00002E   543F         ANL     A,#0x3f
   \   000030   5403         ANL     A,#0x3
   \   000032   8E82         MOV     DPL,R6
   \   000034   8F83         MOV     DPH,R7
   \   000036   A3           INC     DPTR
   \   000037   A3           INC     DPTR
   \   000038   A3           INC     DPTR
   \   000039   A3           INC     DPTR
   \   00003A   A3           INC     DPTR
   \   00003B   12....       LCALL   ?Subroutine140 & 0xFFFF
   \                     ??CrossCallReturnLabel_204:
   \   00003E   E0           MOVX    A,@DPTR
   \   00003F   A2E7         MOV     C,0xE0 /* A   */.7
   \   000041   E4           CLR     A
   \   000042   33           RLC     A
   \   000043   8E82         MOV     DPL,R6
   \   000045   8F83         MOV     DPH,R7
   \   000047   A3           INC     DPTR
   \   000048   A3           INC     DPTR
   \   000049   A3           INC     DPTR
   \   00004A   A3           INC     DPTR
   \   00004B   A3           INC     DPTR
   \   00004C   A3           INC     DPTR
   \   00004D   A3           INC     DPTR
   \   00004E   A3           INC     DPTR
   \   00004F   F0           MOVX    @DPTR,A
   \   000050   22           RET
   8442          
   8443          /*********************************************************************
   8444           * @fn      zclSE_ParseInCmd_CancelMessage
   8445           *
   8446           * @brief   Parse received Cancel Message Command.
   8447           *
   8448           * @param   pCmd - pointer to the output data struct
   8449           * @param   buf - pointer to the input data buffer
   8450           * @param   len - length of the input buffer
   8451           *
   8452           * @return  none
   8453           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   8454          void zclSE_ParseInCmd_CancelMessage( zclCCCancelMessage_t *pCmd, uint8 *buf, uint8 len )
   \                     zclSE_ParseInCmd_CancelMessage:
   8455          {
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   12....       LCALL   ?Subroutine100 & 0xFFFF
   8456            (void)len;  // Intentionally unreferenced parameter
   8457          
   8458            pCmd->messageId = osal_build_uint32( buf, 4 );
   \                     ??CrossCallReturnLabel_566:
   \   000008   12....       LCALL   ?XSTORE_R2345
   8459          
   8460            // Message control bitmap
   8461            osal_memset ( &(pCmd->messageCtrl), 0, sizeof( zclMessageCtrl_t ) );
   \   00000B   12....       LCALL   ?Subroutine19 & 0xFFFF
   8462          
   8463            pCmd->messageCtrl.transmissionMode = buf[4] & 0x03;    // bit 0&1
   8464            pCmd->messageCtrl.importance = ( buf[4] >> SE_PROFILE_MSGCTRL_IMPORTANCE ) & 0x03; // bit 2&3
   8465          #if defined ( SE_UK_EXT )
   8466            pCmd->messageCtrl.pinRequired = ( buf[4] >> SE_PROFILE_MSGCTRL_PINREQUIRED ) & 0x01;  // bit 4
   8467            pCmd->messageCtrl.acceptanceRequired = ( buf[4] >> SE_PROFILE_MSGCTRL_ACCEPTREQUIRED ) & 0x01;  // bit 5
   8468          #endif
   8469            pCmd->messageCtrl.confirmationRequired = ( buf[4] >> SE_PROFILE_MSGCTRL_CONFREQUIRED ) & 0x01;  // bit 7
   8470          }
   \                     ??CrossCallReturnLabel_13:
   \   00000E   02....       LJMP    ??Subroutine177_0 & 0xFFFF
   8471          
   8472          /*********************************************************************
   8473           * @fn      zclSE_ParseInCmd_MessageConfirmation
   8474           *
   8475           * @brief   Parse received Message Confirmation Command.
   8476           *
   8477           * @param   pCmd - pointer to the output data struct
   8478           * @param   buf - pointer to the input data buffer
   8479           * @param   len - length of the input buffer
   8480           *
   8481           * @return  none
   8482           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   8483          void zclSE_ParseInCmd_MessageConfirmation( zclCCMessageConfirmation_t *pCmd,
   \                     zclSE_ParseInCmd_MessageConfirmation:
   8484                                                     uint8 *buf, uint8 len )
   8485          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   12....       LCALL   ?Subroutine99 & 0xFFFF
   8486            pCmd->messageId = osal_build_uint32( buf, 4 );
   \                     ??CrossCallReturnLabel_569:
   \   000008   12....       LCALL   ?XSTORE_R2345
   8487            pCmd->confirmTime = osal_build_uint32( &(buf[4]), 4 );
   \   00000B                ; Setup parameters for call to function osal_build_uint32
   \   00000B   7904         MOV     R1,#0x4
   \   00000D   EE           MOV     A,R6
   \   00000E   2404         ADD     A,#0x4
   \   000010   FA           MOV     R2,A
   \   000011   EF           MOV     A,R7
   \   000012   3400         ADDC    A,#0x0
   \   000014   12....       LCALL   ??Subroutine191_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_501:
   \   000017   12....       LCALL   ?XSTORE_R2345
   8488          
   8489          #if defined ( SE_UK_EXT )
   8490            pCmd->msgString.strLen = buf[8];
   8491          #else
   8492            pCmd->msgString.strLen = 0;
   \   00001A   85..82       MOV     DPL,?V0 + 0
   \   00001D   85..83       MOV     DPH,?V0 + 1
   \   000020   A3           INC     DPTR
   \   000021   A3           INC     DPTR
   \   000022   A3           INC     DPTR
   \   000023   A3           INC     DPTR
   \   000024   A3           INC     DPTR
   \   000025   A3           INC     DPTR
   \   000026   A3           INC     DPTR
   \   000027   A3           INC     DPTR
   \   000028   E4           CLR     A
   \   000029   12....       LCALL   ?Subroutine77 & 0xFFFF
   8493          #endif
   8494          
   8495            // Point to the Message Response string
   8496            if ( pCmd->msgString.strLen != 0 )
   8497            {
   8498              pCmd->msgString.pStr = &(buf[9]);
   8499            }
   8500            else
   8501            {
   8502              pCmd->msgString.pStr = NULL;
   \                     ??CrossCallReturnLabel_121:
   \   00002C   A3           INC     DPTR
   \   00002D   A3           INC     DPTR
   \   00002E   A3           INC     DPTR
   \   00002F   F0           MOVX    @DPTR,A
   \   000030   A3           INC     DPTR
   \   000031   02....       LJMP    ??Subroutine190_0 & 0xFFFF
   8503            }
   8504          }
   8505          #endif  // ZCL_MESSAGE
   8506          
   8507          #ifdef ZCL_LOAD_CONTROL
   8508          /*********************************************************************
   8509           * @fn      zclSE_ParseInCmd_LoadControlEvent
   8510           *
   8511           * @brief   Parse received Load Control Event.
   8512           *
   8513           * @param   pCmd - pointer to the output data struct
   8514           * @param   buf - pointer to the input data buffer
   8515           * @param   len - length of the input buffer
   8516           *
   8517           * @return  none
   8518           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   8519          void zclSE_ParseInCmd_LoadControlEvent( zclCCLoadControlEvent_t *pCmd,
   \                     zclSE_ParseInCmd_LoadControlEvent:
   8520                                                  uint8 *buf, uint8 len )
   8521          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   12....       LCALL   ?Subroutine99 & 0xFFFF
   8522            (void)len;  // Intentionally unreferenced parameter
   8523          
   8524            // Maybe add checking for buffer length later
   8525            // Skipped right now to leave MT input to guarantee
   8526            // proper buffer length
   8527            pCmd->issuerEvent = osal_build_uint32( buf, 4 );
   \                     ??CrossCallReturnLabel_570:
   \   000008   12....       LCALL   ?XSTORE_R2345
   8528            buf += 4;
   \   00000B   12....       LCALL   ?Subroutine87 & 0xFFFF
   8529          
   8530            pCmd->deviceGroupClass = osal_build_uint32( buf, 3 );
   \                     ??CrossCallReturnLabel_136:
   \   00000E   12....       LCALL   ?XSTORE_R2345
   8531            buf += 3;
   \   000011   EE           MOV     A,R6
   \   000012   2403         ADD     A,#0x3
   \   000014   0E           INC     R6
   \   000015   0E           INC     R6
   \   000016   0E           INC     R6
   \   000017   12....       LCALL   ?Subroutine86 & 0xFFFF
   8532          
   8533            pCmd->startTime = osal_build_uint32( buf, 4 );
   \                     ??CrossCallReturnLabel_135:
   \   00001A   12....       LCALL   ?XSTORE_R2345
   8534            buf += 4;
   \   00001D   EE           MOV     A,R6
   \   00001E   2404         ADD     A,#0x4
   \   000020   FE           MOV     R6,A
   \   000021   12....       LCALL   ?Subroutine25 & 0xFFFF
   8535          
   8536            pCmd->durationInMinutes = BUILD_UINT16( buf[0], buf[1] );
   8537            buf += 2;
   8538          
   8539            pCmd->criticalityLevel = *buf++;
   \                     ??CrossCallReturnLabel_16:
   \   000024   C0E0         PUSH    A
   \   000026   E5..         MOV     A,?V0 + 0
   \   000028   240E         ADD     A,#0xe
   \   00002A   12....       LCALL   ??Subroutine192_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_541:
   \   00002D   D0E0         POP     A
   \   00002F   12....       LCALL   ?Subroutine73 & 0xFFFF
   8540            pCmd->coolingTemperatureOffset = *buf++;
   \                     ??CrossCallReturnLabel_114:
   \   000032   E0           MOVX    A,@DPTR
   \   000033   C0E0         PUSH    A
   \   000035   E5..         MOV     A,?V0 + 0
   \   000037   240F         ADD     A,#0xf
   \   000039   12....       LCALL   ??Subroutine192_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_542:
   \   00003C   D0E0         POP     A
   \   00003E   12....       LCALL   ?Subroutine69 & 0xFFFF
   8541            pCmd->heatingTemperatureOffset = *buf++;
   \                     ??CrossCallReturnLabel_100:
   \   000041   C0E0         PUSH    A
   \   000043   12....       LCALL   ?Subroutine93 & 0xFFFF
   \                     ??CrossCallReturnLabel_551:
   \   000046   D0E0         POP     A
   \   000048   12....       LCALL   ?Subroutine75 & 0xFFFF
   8542          
   8543            pCmd->coolingTemperatureSetPoint = BUILD_UINT16( buf[0], buf[1] );
   \                     ??CrossCallReturnLabel_116:
   \   00004B   12....       LCALL   ??Subroutine197_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_577:
   \   00004E   2411         ADD     A,#0x11
   \   000050   12....       LCALL   ?Subroutine74 & 0xFFFF
   8544            buf += 2;
   \                     ??CrossCallReturnLabel_490:
   \   000053   12....       LCALL   ?Subroutine32 & 0xFFFF
   8545          
   8546            pCmd->heatingTemperatureSetPoint = BUILD_UINT16( buf[0], buf[1] );
   \                     ??CrossCallReturnLabel_575:
   \   000056   2413         ADD     A,#0x13
   \   000058   12....       LCALL   ?Subroutine72 & 0xFFFF
   8547            buf += 2;
   8548          
   8549            pCmd->averageLoadAdjustmentPercentage = *buf++;
   \                     ??CrossCallReturnLabel_111:
   \   00005B   C0E0         PUSH    A
   \   00005D   E5..         MOV     A,?V0 + 0
   \   00005F   2415         ADD     A,#0x15
   \   000061   12....       LCALL   ??Subroutine192_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_543:
   \   000064   D0E0         POP     A
   \   000066   12....       LCALL   ?Subroutine69 & 0xFFFF
   8550            pCmd->dutyCycle = *buf++;
   \                     ??CrossCallReturnLabel_101:
   \   000069   C0E0         PUSH    A
   \   00006B   E5..         MOV     A,?V0 + 0
   \   00006D   2416         ADD     A,#0x16
   \   00006F   12....       LCALL   ??Subroutine192_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_544:
   \   000072   D0E0         POP     A
   \   000074   12....       LCALL   ?Subroutine78 & 0xFFFF
   8551            pCmd->eventControl = *buf;
   \                     ??CrossCallReturnLabel_124:
   \   000077   C0E0         PUSH    A
   \   000079   E5..         MOV     A,?V0 + 0
   \   00007B   2417         ADD     A,#0x17
   \   00007D   02....       LJMP    ?Subroutine9 & 0xFFFF
   8552          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine87:
   \   000000   EE           MOV     A,R6
   \   000001   2404         ADD     A,#0x4
   \   000003   FE           MOV     R6,A
   \   000004   EF           MOV     A,R7
   \   000005   3400         ADDC    A,#0x0
   \   000007   FF           MOV     R7,A
   \   000008                ; Setup parameters for call to function osal_build_uint32
   \   000008                ; Setup parameters for call to function osal_build_uint32
   \   000008   7903         MOV     R1,#0x3
   \   00000A   EE           MOV     A,R6
   \   00000B   FA           MOV     R2,A
   \   00000C   EF           MOV     A,R7
   \   00000D   12....       LCALL   ?Subroutine133 & 0xFFFF
   \                     ??CrossCallReturnLabel_581:
   \   000010   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine25:
   \   000000   12....       LCALL   ?Subroutine147 & 0xFFFF
   \                     ??CrossCallReturnLabel_487:
   \   000003   12....       LCALL   ?Subroutine115 & 0xFFFF
   \                     ??CrossCallReturnLabel_578:
   \   000006   240C         ADD     A,#0xc
   \   000008   12....       LCALL   ?Subroutine118 & 0xFFFF
   \                     ??CrossCallReturnLabel_173:
   \   00000B   22           RET
   8553          
   8554          /*********************************************************************
   8555           * @fn      zclSE_ParseInCmd_CancelLoadControlEvent
   8556           *
   8557           * @brief   Parse received Cancel Load Control Event Command.
   8558           *
   8559           * @param   pCmd - pointer to the output data struct
   8560           * @param   buf - pointer to the input data buffer
   8561           * @param   len - length of the input buffer
   8562           *
   8563           * @return  none
   8564           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   8565          void zclSE_ParseInCmd_CancelLoadControlEvent( zclCCCancelLoadControlEvent_t *pCmd,
   \                     zclSE_ParseInCmd_CancelLoadControlEvent:
   8566                                                        uint8 *buf, uint8 len )
   8567          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   12....       LCALL   ?Subroutine99 & 0xFFFF
   8568            (void)len;  // Intentionally unreferenced parameter
   8569          
   8570            // Maybe add checking for buffer length later
   8571            // Skipped right now to leave MT input to guarantee
   8572            // proper buffer length
   8573            pCmd->issuerEventID = osal_build_uint32( buf, 4 );
   \                     ??CrossCallReturnLabel_571:
   \   000008   12....       LCALL   ?XSTORE_R2345
   8574            buf += 4;
   \   00000B   12....       LCALL   ?Subroutine87 & 0xFFFF
   8575          
   8576            pCmd->deviceGroupClass = osal_build_uint32( buf, 3 );
   \                     ??CrossCallReturnLabel_137:
   \   00000E   12....       LCALL   ?XSTORE_R2345
   8577            buf += 3;
   \   000011   EE           MOV     A,R6
   \   000012   2403         ADD     A,#0x3
   \   000014   0E           INC     R6
   \   000015   0E           INC     R6
   \   000016   0E           INC     R6
   \   000017   12....       LCALL   ?Subroutine33 & 0xFFFF
   8578          
   8579            pCmd->cancelControl = *buf++;
   8580            pCmd->effectiveTime = osal_build_uint32( buf, 4 );
   \                     ??CrossCallReturnLabel_35:
   \   00001A                ; Setup parameters for call to function osal_build_uint32
   \   00001A   7904         MOV     R1,#0x4
   \   00001C   AA82         MOV     R2,DPL
   \   00001E   AB83         MOV     R3,DPH
   \   000020   12....       LCALL   ?Subroutine97 & 0xFFFF
   \                     ??CrossCallReturnLabel_156:
   \   000023   A3           INC     DPTR
   \   000024   A3           INC     DPTR
   \   000025   12....       LCALL   ?XSTORE_R2345
   8581          }
   \   000028   02....       LJMP    ??Subroutine183_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine33:
   \   000000   12....       LCALL   ?Subroutine132 & 0xFFFF
   \                     ??CrossCallReturnLabel_483:
   \   000003   85..82       MOV     DPL,?V0 + 0
   \   000006   85..83       MOV     DPH,?V0 + 1
   \   000009   A3           INC     DPTR
   \   00000A   A3           INC     DPTR
   \   00000B   A3           INC     DPTR
   \   00000C   A3           INC     DPTR
   \   00000D   A3           INC     DPTR
   \   00000E   A3           INC     DPTR
   \   00000F   A3           INC     DPTR
   \   000010   A3           INC     DPTR
   \   000011   12....       LCALL   ?Subroutine125 & 0xFFFF
   \                     ??CrossCallReturnLabel_184:
   \   000014   22           RET
   8582          
   8583          /*********************************************************************
   8584           * @fn      zclSE_ParseInCmd_ReportEventStatus
   8585           *
   8586           * @brief   Parse received Report Event Status.
   8587           *
   8588           * @param   pCmd - pointer to the output data struct
   8589           * @param   buf - pointer to the input data buffer
   8590           * @param   len - length of the input buffer
   8591           *
   8592           * @return  none
   8593           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   8594          void zclSE_ParseInCmd_ReportEventStatus( zclCCReportEventStatus_t *pCmd,
   \                     zclSE_ParseInCmd_ReportEventStatus:
   8595                                                   uint8 *buf, uint8 len )
   8596          {
   \   000000   74F1         MOV     A,#-0xf
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 15
   \   000005                ; Auto size: 0
   \   000005   12....       LCALL   ?Subroutine99 & 0xFFFF
   8597            (void)len;  // Intentionally unreferenced parameter
   8598          
   8599            // Maybe add checking for buffer length later
   8600            // Skipped right now to leave MT input to guarantee
   8601            // proper buffer length
   8602            pCmd->issuerEventID = osal_build_uint32( buf, 4 );
   \                     ??CrossCallReturnLabel_572:
   \   000008   12....       LCALL   ?XSTORE_R2345
   8603            buf += 4;
   \   00000B   EE           MOV     A,R6
   \   00000C   2404         ADD     A,#0x4
   \   00000E   FE           MOV     R6,A
   \   00000F   12....       LCALL   ?Subroutine33 & 0xFFFF
   8604          
   8605            pCmd->eventStatus = *buf++;
   \                     ??CrossCallReturnLabel_36:
   \   000012   AE82         MOV     R6,DPL
   \   000014   AF83         MOV     R7,DPH
   8606          
   8607            pCmd->eventStartTime = osal_build_uint32( buf, 4 );
   \   000016                ; Setup parameters for call to function osal_build_uint32
   \   000016   12....       LCALL   ?Subroutine98 & 0xFFFF
   \                     ??CrossCallReturnLabel_500:
   \   000019   12....       LCALL   ?XSTORE_R2345
   8608            buf += 4;
   \   00001C   12....       LCALL   ?Subroutine85 & 0xFFFF
   8609          
   8610            pCmd->criticalityLevelApplied = *buf++;
   \                     ??CrossCallReturnLabel_480:
   \   00001F   85..82       MOV     DPL,?V0 + 0
   \   000022   85..83       MOV     DPH,?V0 + 1
   \   000025   A3           INC     DPTR
   \   000026   A3           INC     DPTR
   \   000027   A3           INC     DPTR
   \   000028   A3           INC     DPTR
   \   000029   A3           INC     DPTR
   \   00002A   A3           INC     DPTR
   \   00002B   A3           INC     DPTR
   \   00002C   A3           INC     DPTR
   \   00002D   A3           INC     DPTR
   \   00002E   12....       LCALL   ?Subroutine69 & 0xFFFF
   8611            pCmd->coolingTemperatureSetPointApplied = BUILD_UINT16( buf[0], buf[1] );
   \                     ??CrossCallReturnLabel_102:
   \   000031   FA           MOV     R2,A
   \   000032   A3           INC     DPTR
   \   000033   E0           MOVX    A,@DPTR
   \   000034   F9           MOV     R1,A
   \   000035   EA           MOV     A,R2
   \   000036   85..82       MOV     DPL,?V0 + 0
   \   000039   85..83       MOV     DPH,?V0 + 1
   \   00003C   A3           INC     DPTR
   \   00003D   A3           INC     DPTR
   \   00003E   A3           INC     DPTR
   \   00003F   A3           INC     DPTR
   \   000040   A3           INC     DPTR
   \   000041   A3           INC     DPTR
   \   000042   A3           INC     DPTR
   \   000043   A3           INC     DPTR
   \   000044   A3           INC     DPTR
   \   000045   A3           INC     DPTR
   \   000046   12....       LCALL   ??Subroutine189_0 & 0xFFFF
   8612            buf += 2;
   \                     ??CrossCallReturnLabel_491:
   \   000049   12....       LCALL   ?Subroutine25 & 0xFFFF
   8613          
   8614            pCmd->heatingTemperatureSetPointApplied = BUILD_UINT16( buf[0], buf[1] );
   8615            buf += 2;
   8616          
   8617            pCmd->averageLoadAdjustment = *buf++;
   \                     ??CrossCallReturnLabel_17:
   \   00004C   C0E0         PUSH    A
   \   00004E   E5..         MOV     A,?V0 + 0
   \   000050   240E         ADD     A,#0xe
   \   000052   12....       LCALL   ??Subroutine192_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_545:
   \   000055   D0E0         POP     A
   \   000057   12....       LCALL   ?Subroutine69 & 0xFFFF
   8618            pCmd->dutyCycleApplied = *buf++;
   \                     ??CrossCallReturnLabel_103:
   \   00005A   C0E0         PUSH    A
   \   00005C   E5..         MOV     A,?V0 + 0
   \   00005E   240F         ADD     A,#0xf
   \   000060   12....       LCALL   ??Subroutine192_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_546:
   \   000063   D0E0         POP     A
   \   000065   12....       LCALL   ?Subroutine69 & 0xFFFF
   8619            pCmd->eventControl = *buf++;
   \                     ??CrossCallReturnLabel_104:
   \   000068   C0E0         PUSH    A
   \   00006A   12....       LCALL   ?Subroutine93 & 0xFFFF
   \                     ??CrossCallReturnLabel_552:
   \   00006D   D0E0         POP     A
   \   00006F   12....       LCALL   ?Subroutine69 & 0xFFFF
   8620            pCmd->signatureType = *buf++;
   \                     ??CrossCallReturnLabel_105:
   \   000072   C0E0         PUSH    A
   \   000074   E5..         MOV     A,?V0 + 0
   \   000076   2411         ADD     A,#0x11
   \   000078   12....       LCALL   ??Subroutine192_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_547:
   \   00007B   D0E0         POP     A
   \   00007D   12....       LCALL   ?Subroutine75 & 0xFFFF
   8621          
   8622            osal_memcpy( pCmd->signature, buf, SE_PROFILE_SIGNATURE_LENGTH );
   \                     ??CrossCallReturnLabel_117:
   \   000080                ; Setup parameters for call to function osal_memcpy
   \   000080   8E..         MOV     ?V0 + 4,R6
   \   000082   8F..         MOV     ?V0 + 5,R7
   \   000084   75..00       MOV     ?V0 + 6,#0x0
   \   000087   78..         MOV     R0,#?V0 + 4
   \   000089   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   00008C   7C2A         MOV     R4,#0x2a
   \   00008E   7D00         MOV     R5,#0x0
   \   000090   E5..         MOV     A,?V0 + 0
   \   000092   2412         ADD     A,#0x12
   \   000094   FA           MOV     R2,A
   \   000095   E5..         MOV     A,?V0 + 1
   \   000097   3400         ADDC    A,#0x0
   \   000099   12....       LCALL   ?Subroutine134 & 0xFFFF
   \                     ??CrossCallReturnLabel_562:
   \   00009C   12....       LCALL   ?DEALLOC_XSTACK8
   8623          }
   \   00009F   02....       LJMP    ?Subroutine7 & 0xFFFF
   8624          #endif  // ZCL_LOAD_CONTROL
   8625          
   8626          #ifdef ZCL_PREPAYMENT
   8627          /*********************************************************************
   8628           * @fn      zclSE_ParseInCmd_SelAvailEmergencyCredit
   8629           *
   8630           * @brief   Parse received Select Available Emergency Credit Command.
   8631           *
   8632           * @param   pCmd - pointer to the output data struct
   8633           * @param   buf - pointer to the input data buffer
   8634           * @param   len - length of the input buffer
   8635           *
   8636           * @return  none
   8637           */
   8638          void zclSE_ParseInCmd_SelAvailEmergencyCredit( zclCCSelAvailEmergencyCredit_t *pCmd,
   8639                                                         uint8 *buf, uint8 len )
   8640          {
   8641            (void)len;  // Intentionally unreferenced parameter
   8642            uint8 originalLen; // stores octet string original length
   8643          
   8644            // Parse the command buffer
   8645            pCmd->commandDateTime = osal_build_uint32( buf, 4 );
   8646            buf += 4;
   8647          
   8648            pCmd->originatingDevice = *buf++;
   8649          
   8650            // Notice that site ID is a variable length UTF-8 string
   8651            pCmd->siteId.strLen = *buf++;
   8652            if ( pCmd->siteId.strLen == SE_OPTIONAL_FIELD_UINT8 )
   8653            {
   8654              // If character count is 0xFF, set string length to 0
   8655              pCmd->siteId.strLen = 0;
   8656            }
   8657          
   8658            if ( pCmd->siteId.strLen != 0 )
   8659            {
   8660              originalLen = pCmd->siteId.strLen; //save original length
   8661          
   8662              // truncate Site ID to maximum size
   8663              if ( pCmd->siteId.strLen > (SE_SITE_ID_LEN-1) )
   8664              {
   8665                pCmd->siteId.strLen = (SE_SITE_ID_LEN-1);
   8666              }
   8667          
   8668              pCmd->siteId.pStr = buf;
   8669          
   8670              buf += originalLen; // move pointer original length of received string
   8671            }
   8672            else
   8673            {
   8674              pCmd->siteId.pStr = NULL;
   8675            }
   8676          
   8677            // Notice that meterSerialNumber is a variable length UTF-8 string
   8678            pCmd->meterSerialNumber.strLen = *buf++;
   8679            if ( pCmd->meterSerialNumber.strLen == SE_OPTIONAL_FIELD_UINT8 )
   8680            {
   8681              // If character count is 0xFF, set string length to 0
   8682              pCmd->meterSerialNumber.strLen = 0;
   8683            }
   8684          
   8685            if ( pCmd->meterSerialNumber.strLen != 0 )
   8686            {
   8687              originalLen = pCmd->meterSerialNumber.strLen; //save original length
   8688          
   8689              // truncate Meter Serial Number to maximum size
   8690              if ( pCmd->meterSerialNumber.strLen > (SE_METER_SERIAL_NUM_LEN-1) )
   8691              {
   8692                pCmd->meterSerialNumber.strLen = (SE_METER_SERIAL_NUM_LEN-1);
   8693              }
   8694          
   8695              pCmd->meterSerialNumber.pStr = buf;
   8696          
   8697              buf += originalLen; // move pointer original length of received string
   8698            }
   8699            else
   8700            {
   8701              pCmd->meterSerialNumber.pStr = NULL;
   8702            }
   8703          }
   8704          
   8705          #ifndef SE_UK_EXT
   8706          /*********************************************************************
   8707           * @fn      zclSE_ParseInCmd_ChangeSupply
   8708           *
   8709           * @brief   Parse received Change Supply Command.
   8710           *
   8711           * @param   pCmd - pointer to the output data struct
   8712           * @param   buf - pointer to the input data buffer
   8713           * @param   len - length of the input buffer
   8714           *
   8715           * @return  none
   8716           */
   8717          void zclSE_ParseInCmd_ChangeSupply( zclCCChangeSupply_t *pCmd, uint8 *buf, uint8 len )
   8718          {
   8719            (void)len;  // Intentionally unreferenced parameter
   8720            uint8 originalLen; // stores octet string original length
   8721          
   8722            // Parse the command buffer
   8723            pCmd->providerId = osal_build_uint32( buf, 4 );
   8724            buf += 4;
   8725          
   8726            pCmd->requestDateTime = osal_build_uint32( buf, 4 );
   8727            buf += 4;
   8728          
   8729            // Notice that site ID is a variable length UTF-8 string
   8730            pCmd->siteId.strLen = *buf++;
   8731            if ( pCmd->siteId.strLen == SE_OPTIONAL_FIELD_UINT8 )
   8732            {
   8733              // If character count is 0xFF, set string length to 0
   8734              pCmd->siteId.strLen = 0;
   8735            }
   8736          
   8737            if ( pCmd->siteId.strLen != 0 )
   8738            {
   8739              originalLen = pCmd->siteId.strLen; //save original length
   8740          
   8741              // truncate Site ID to maximum size
   8742              if ( pCmd->siteId.strLen > (SE_SITE_ID_LEN-1) )
   8743              {
   8744                pCmd->siteId.strLen = (SE_SITE_ID_LEN-1);
   8745              }
   8746          
   8747              pCmd->siteId.pStr = buf;
   8748          
   8749              buf += originalLen; // move pointer original length of received string
   8750            }
   8751            else
   8752            {
   8753              pCmd->siteId.pStr = NULL;
   8754            }
   8755          
   8756            // Notice that meterSerialNumber is a variable length UTF-8 string
   8757            pCmd->meterSerialNumber.strLen = *buf++;
   8758            if ( pCmd->meterSerialNumber.strLen == SE_OPTIONAL_FIELD_UINT8 )
   8759            {
   8760              // If character count is 0xFF, set string length to 0
   8761              pCmd->meterSerialNumber.strLen = 0;
   8762            }
   8763          
   8764            if ( pCmd->meterSerialNumber.strLen != 0 )
   8765            {
   8766              originalLen = pCmd->meterSerialNumber.strLen; //save original length
   8767          
   8768              // truncate Meter Serial Number to maximum size
   8769              if ( pCmd->meterSerialNumber.strLen > (SE_METER_SERIAL_NUM_LEN-1) )
   8770              {
   8771                pCmd->meterSerialNumber.strLen = (SE_METER_SERIAL_NUM_LEN-1);
   8772              }
   8773          
   8774              pCmd->meterSerialNumber.pStr = buf;
   8775          
   8776              buf += originalLen; // move pointer original length of received string
   8777            }
   8778            else
   8779            {
   8780              pCmd->meterSerialNumber.pStr = NULL;
   8781            }
   8782          
   8783            pCmd->implementationDateTime = osal_build_uint32( buf, 4 );
   8784            buf += 4;
   8785          
   8786            pCmd->proposedSupplyStatus = *buf++;
   8787          
   8788            pCmd->origIdSupplyControlBits = *buf;
   8789          }
   8790          #endif  // not defined SE_UK_EXT
   8791          
   8792          #ifdef SE_UK_EXT
   8793          /*********************************************************************
   8794           * @fn      zclSE_ParseInCmd_ChangeDebt
   8795           *
   8796           * @brief   Parse received Change Debt Command.
   8797           *
   8798           * @param   pCmd - pointer to the output data struct
   8799           * @param   buf - pointer to the input data buffer
   8800           * @param   len - length of the input buffer
   8801           *
   8802           * @return  none
   8803           */
   8804          void zclSE_ParseInCmd_ChangeDebt( zclCCChangeDebt_t *pCmd, uint8 *buf, uint8 len )
   8805          {
   8806            (void)len;  // Intentionally unreferenced parameter
   8807            uint8 fieldLen;
   8808          
   8809            // Parse the command buffer
   8810            pCmd->cmdIssueTime = osal_build_uint32( buf, 4 );
   8811            buf += 4;
   8812          
   8813            fieldLen = zclSE_Parse_UTF8String(buf, &pCmd->debtLabel, SE_DEBT_LABEL_LEN);
   8814          
   8815            buf += fieldLen;
   8816          
   8817            pCmd->debtAmount = osal_build_uint32( buf, 4 );
   8818            buf += 4;
   8819          
   8820            pCmd->debtRecoveryMethod = *buf++;
   8821            pCmd->debtType = *buf++;
   8822          
   8823            pCmd->recoveryStartTime = osal_build_uint32( buf, 4 );
   8824            buf += 4;
   8825          
   8826            pCmd->debtRecoveryCollectionTime = BUILD_UINT16( buf[0], buf[1] );
   8827            buf += 2;
   8828          
   8829            pCmd->debtRecoveryFrequency = osal_build_uint32( buf, 4 );
   8830            buf += 4;
   8831          
   8832            pCmd->debtRecoveryAmt = osal_build_uint32( buf, 4 );
   8833            buf += 4;
   8834          
   8835            pCmd->debtRecoveryBalancePct = BUILD_UINT16( buf[0], buf[1] );
   8836            buf += 2;
   8837          
   8838            pCmd->debtRecoveryMaxMissed = *buf++;
   8839          
   8840            (void)zclSE_Parse_UTF8String(buf, &pCmd->signature, SE_SIGNATURE_LEN);
   8841          }
   8842          
   8843          /*********************************************************************
   8844           * @fn      zclSE_ParseInCmd_EmergencyCreditSetup
   8845           *
   8846           * @brief   Parse received Emergency Credit Setup Command.
   8847           *
   8848           * @param   pCmd - pointer to the output data struct
   8849           * @param   buf - pointer to the input data buffer
   8850           * @param   len - length of the input buffer
   8851           *
   8852           * @return  none
   8853           */
   8854          void zclSE_ParseInCmd_EmergencyCreditSetup( zclCCEmergencyCreditSetup_t *pCmd,
   8855                                                      uint8 *buf, uint8 len )
   8856          {
   8857            (void)len;  // Intentionally unreferenced parameter
   8858          
   8859            pCmd->cmdIssueTime = osal_build_uint32( buf, 4 );
   8860            buf += 4;
   8861            pCmd->emergencyCreditLimit = osal_build_uint32( buf, 4 );
   8862            buf += 4;
   8863            pCmd->emergencyCreditThreshold = osal_build_uint32( buf, 4 );
   8864          }
   8865          
   8866          /*********************************************************************
   8867           * @fn      zclSE_ParseInCmd_ConsumerTopup
   8868           *
   8869           * @brief   Parse received Consumer Topup Command.
   8870           *
   8871           * @param   pCmd - pointer to the output data struct
   8872           * @param   buf - pointer to the input data buffer
   8873           * @param   len - length of the input buffer
   8874           *
   8875           * @return  none
   8876           */
   8877          void zclSE_ParseInCmd_ConsumerTopup( zclCCConsumerTopup_t *pCmd, uint8 *buf, uint8 len )
   8878          {
   8879            (void)len;  // Intentionally unreferenced parameter
   8880          
   8881            pCmd->originatingDevice = *buf++;
   8882          
   8883            (void)zclSE_Parse_UTF8String(buf, &pCmd->topupCode, SE_TOPUP_CODE_LEN);
   8884          }
   8885          
   8886          /*********************************************************************
   8887           * @fn      zclSE_ParseInCmd_CreditAdjustment
   8888           *
   8889           * @brief   Parse received Credit Adjustment Command.
   8890           *
   8891           * @param   pCmd - pointer to the output data struct
   8892           * @param   buf - pointer to the input data buffer
   8893           * @param   len - length of the input buffer
   8894           *
   8895           * @return  none
   8896           */
   8897          void zclSE_ParseInCmd_CreditAdjustment( zclCCCreditAdjustment_t *pCmd,
   8898                                                  uint8 *buf, uint8 len )
   8899          {
   8900            (void)len;  // Intentionally unreferenced parameter
   8901          
   8902            pCmd->cmdIssueTime = osal_build_uint32( buf, 4 );
   8903            buf += 4;
   8904          
   8905            pCmd->creditAdjustmentType = *buf++;
   8906          
   8907            osal_memcpy( pCmd->creditAdjustmentValue, buf, 6 );
   8908            buf += 6;
   8909          
   8910            (void)zclSE_Parse_UTF8String(buf, &pCmd->signature, SE_SIGNATURE_LEN);
   8911          }
   8912          
   8913          /*********************************************************************
   8914           * @fn      zclSE_ParseInCmd_ChangePaymentMode
   8915           *
   8916           * @brief   Parse received Change Payment Mode Command.
   8917           *
   8918           * @param   pCmd - pointer to the output data struct
   8919           * @param   buf - pointer to the input data buffer
   8920           * @param   len - length of the input buffer
   8921           *
   8922           * @return  none
   8923           */
   8924          void zclSE_ParseInCmd_ChangePaymentMode( zclCCChangePaymentMode_t *pCmd,
   8925                                                   uint8 *buf, uint8 len )
   8926          {
   8927            (void)len;  // Intentionally unreferenced parameter
   8928          
   8929            pCmd->supplierId = osal_build_uint32( buf, 4 );
   8930            buf += 4;
   8931            pCmd->modeEventId = osal_build_uint32( buf, 4 );
   8932            buf += 4;
   8933            pCmd->implementationDate = osal_build_uint32( buf, 4 );
   8934            buf += 4;
   8935          
   8936            pCmd->proposedPaymentControl = *buf++;
   8937          
   8938            pCmd->cutOffValue = osal_build_uint32( buf, 4 );
   8939            buf += 4;
   8940          
   8941            (void)zclSE_Parse_UTF8String(buf, &pCmd->signature, SE_SIGNATURE_LEN);
   8942          }
   8943          
   8944          /*********************************************************************
   8945           * @fn      zclSE_ParseInCmd_GetPrepaySnapshot
   8946           *
   8947           * @brief   Parse received Get Prepay Snapshot Command.
   8948           *
   8949           * @param   pCmd - pointer to the output data struct
   8950           * @param   buf - pointer to the input data buffer
   8951           * @param   len - length of the input buffer
   8952           *
   8953           * @return  none
   8954           */
   8955          void zclSE_ParseInCmd_GetPrepaySnapshot( zclCCGetPrepaySnapshot_t *pCmd,
   8956                                                   uint8 *buf, uint8 len )
   8957          {
   8958            (void)len;  // Intentionally unreferenced parameter
   8959          
   8960            pCmd->startTime = osal_build_uint32( buf, 4 );
   8961            pCmd->numberOfSnapshots = buf[4];
   8962            pCmd->snapshotCause = BUILD_UINT16( buf[5], buf[6] );
   8963          }
   8964          
   8965          /*********************************************************************
   8966           * @fn      zclSE_ParseInCmd_GetDebtRepaymentLog
   8967           *
   8968           * @brief   Parse received Get Debt Repayment Log Command.
   8969           *
   8970           * @param   pCmd - pointer to the output data struct
   8971           * @param   buf - pointer to the input data buffer
   8972           * @param   len - length of the input buffer
   8973           *
   8974           * @return  none
   8975           */
   8976          void zclSE_ParseInCmd_GetDebtRepaymentLog( zclCCGetDebtRepaymentLog_t *pCmd,
   8977                                                     uint8 *buf, uint8 len )
   8978          {
   8979            (void)len;  // Intentionally unreferenced parameter
   8980          
   8981            pCmd->numberOfDebt = buf[0];
   8982            pCmd->debtType = buf[1];
   8983          }
   8984          
   8985          /*********************************************************************
   8986           * @fn      zclSE_ParseInCmd_GetPrepaySnapshotResponse
   8987           *
   8988           * @brief   Parse received Get Prepay Snapshot Response Command.
   8989           *
   8990           * @param   pCmd - pointer to the output data struct
   8991           * @param   buf - pointer to the input data buffer
   8992           * @param   len - length of the input buffer
   8993           *
   8994           * @return  none
   8995           */
   8996          void zclSE_ParseInCmd_GetPrepaySnapshotResponse( zclCCGetPrepaySnapshotResponse_t *pCmd,
   8997                                                           uint8 *buf, uint8 len )
   8998          {
   8999            (void)len;  // Intentionally unreferenced parameter
   9000          
   9001            pCmd->eventIssuerId = osal_build_uint32( buf, 4 );
   9002            pCmd->snapshotTime = osal_build_uint32( buf+4, 4 );
   9003            pCmd->commandIndex = buf[8];
   9004            pCmd->snapshotCause = BUILD_UINT16( buf[9], buf[10] );
   9005            pCmd->snapshotPayloadType = buf[11];
   9006            buf += 12;
   9007          
   9008            if ( pCmd->snapshotPayloadType == SE_SNAPSHOT_TYPE_DEBIT_CREDIT_ADDITION )
   9009            {
   9010              pCmd->payload.type1DebtRemaining = osal_build_uint32( buf, 4 );
   9011              pCmd->payload.type2DebtRemaining = osal_build_uint32( buf+4, 4 );
   9012              pCmd->payload.type3DebtRemaining = osal_build_uint32( buf+8, 4 );
   9013              pCmd->payload.emergencyCreditRemaining = osal_build_uint32( buf+12, 4 );
   9014              pCmd->payload.creditRemaining = osal_build_uint32( buf+16, 4 );
   9015            }
   9016          }
   9017          
   9018          /*********************************************************************
   9019           * @fn      zclSE_ParseInCmd_ChangePaymentModeResponse
   9020           *
   9021           * @brief   Parse received Change Payment Mode Response Command.
   9022           *
   9023           * @param   pCmd - pointer to the output data struct
   9024           * @param   buf - pointer to the input data buffer
   9025           * @param   len - length of the input buffer
   9026           *
   9027           * @return  none
   9028           */
   9029          void zclSE_ParseInCmd_ChangePaymentModeResponse( zclCCChangePaymentModeResponse_t *pCmd,
   9030                                                           uint8 *buf, uint8 len )
   9031          {
   9032            (void)len;  // Intentionally unreferenced parameter
   9033          
   9034            pCmd->friendlyCredit = *buf++;
   9035            pCmd->friendlyCreditCalendar = osal_build_uint32( buf, 4 );
   9036            pCmd->emergencyCreditLimit = osal_build_uint32( buf+4, 4 );
   9037            pCmd->cmergencyCreditThreshold = osal_build_uint32( buf+8, 4 );
   9038          }
   9039          
   9040          /*********************************************************************
   9041           * @fn      zclSE_ParseInCmd_ConsumerTopupResponse
   9042           *
   9043           * @brief   Parse received ConsumerTopupResponse Command.
   9044           *
   9045           * @param   pCmd - pointer to the output data struct
   9046           * @param   buf - pointer to the input data buffer
   9047           * @param   len - length of the input buffer
   9048           *
   9049           * @return  none
   9050           */
   9051          void zclSE_ParseInCmd_ConsumerTopupResponse( zclCCConsumerTopupResponse_t *pCmd,
   9052                                                           uint8 *buf, uint8 len )
   9053          {
   9054            (void)len;  // Intentionally unreferenced parameter
   9055          
   9056            pCmd->resultType = *buf++;
   9057            pCmd->topupValue = osal_build_uint32( buf, 4 );
   9058            buf += 4;
   9059            pCmd->sourceofTopup = *buf++;
   9060            pCmd->creditRemaining = osal_build_uint32( buf, 4 );
   9061          }
   9062          
   9063          /*********************************************************************
   9064           * @fn      zclSE_ParseInCmd_PublishTopupLog
   9065           *
   9066           * @brief   Parse received Publish Topup Log Command.
   9067           *
   9068           * @param   pCmd - pointer to the output data struct
   9069           * @param   buf - pointer to the input data buffer
   9070           * @param   len - length of the input buffer
   9071           *
   9072           * @return  ZStatus_t - ZSuccess @ Parse successful
   9073           *                      ZMemError @ Memory allocation failure
   9074           */
   9075          ZStatus_t zclSE_ParseInCmd_PublishTopupLog( zclCCPublishTopupLog_t *pCmd,
   9076                                                      uint8 *buf, uint8 len )
   9077          {
   9078            (void)len;  // Intentionally unreferenced parameter
   9079            uint8 i, pos, numCodes = 0;
   9080          
   9081            // Count the number of strings in the message
   9082            pos = 2;
   9083            while ( pos < len )
   9084            {
   9085              if (buf[pos] == 0)
   9086              {
   9087                break;
   9088              }
   9089          
   9090              pos += buf[pos] + 1;
   9091              numCodes++;
   9092            }
   9093          
   9094            pCmd->cmdIndex = *buf++;
   9095            pCmd->totalCmds = *buf++;
   9096            pCmd->numCodes = numCodes;
   9097          
   9098            if ( numCodes )
   9099            {
   9100              pCmd->pPayload = osal_mem_alloc( sizeof(UTF8String_t) * numCodes );
   9101          
   9102              if ( pCmd->pPayload == NULL )
   9103              {
   9104                return ZMemError;
   9105              }
   9106          
   9107              for ( i = 0; i < numCodes; i++ )
   9108              {
   9109                uint8 fieldLen = zclSE_Parse_UTF8String(buf, &pCmd->pPayload[i], SE_TOPUP_CODE_LEN);
   9110          
   9111                buf += fieldLen;
   9112              }
   9113            }
   9114          
   9115            return ZSuccess;
   9116          }
   9117          
   9118          /*********************************************************************
   9119           * @fn      zclSE_ParseInCmd_PublishDebtLog
   9120           *
   9121           * @brief   Parse received Publish Debt Log Command.
   9122           *
   9123           * @param   pCmd - pointer to the output data struct
   9124           * @param   buf - pointer to the input data buffer
   9125           * @param   len - length of the input buffer
   9126           *
   9127           * @return  ZStatus_t - ZSuccess @ Parse successful
   9128           *                      ZMemError @ Memory allocation failure
   9129           */
   9130          ZStatus_t zclSE_ParseInCmd_PublishDebtLog( zclCCPublishDebtLog_t *pCmd,
   9131                                                     uint8 *buf, uint8 len )
   9132          {
   9133            uint8 i;
   9134            uint8 numDebts = (len - 2) / 13;
   9135          
   9136            pCmd->cmdIndex = *buf++;
   9137            pCmd->totalCmds = *buf++;
   9138            pCmd->numDebts = numDebts;
   9139          
   9140            if ( numDebts )
   9141            {
   9142              pCmd->pPayload = osal_mem_alloc( sizeof(zclCCDebtPayload_t) * numDebts );
   9143          
   9144              if ( pCmd->pPayload == NULL )
   9145              {
   9146                return ZMemError;
   9147              }
   9148          
   9149              for ( i = 0; i < numDebts; i++ )
   9150              {
   9151                pCmd->pPayload[i].collectionTime = osal_build_uint32( buf, 4 );
   9152                pCmd->pPayload[i].amountCollected = osal_build_uint32( buf+4, 4 );
   9153                pCmd->pPayload[i].debtType = buf[8];
   9154                pCmd->pPayload[i].outstandingDebt = osal_build_uint32( buf+9, 4 );
   9155                buf += 13;
   9156              }
   9157            }
   9158          
   9159            return ZSuccess;
   9160          }
   9161          #endif  // SE_UK_EXT
   9162          #endif  // ZCL_PREPAYMENT
   9163          
   9164          #ifdef ZCL_TUNNELING
   9165          /*********************************************************************
   9166           * @fn      zclSE_ParseInCmd_TransferData
   9167           *
   9168           * @brief   Parse received Transfer Data Command.
   9169           *
   9170           * @param   pCmd - pointer to the output data struct
   9171           * @param   buf - pointer to the input data buffer
   9172           * @param   len - length of the input buffer
   9173           *
   9174           * @return  none
   9175           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   9176          void zclSE_ParseInCmd_TransferData( zclCCTransferData_t *pCmd, uint8 *buf, uint8 len )
   \                     zclSE_ParseInCmd_TransferData:
   9177          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   9178            pCmd->tunnelId = BUILD_UINT16( buf[0], buf[1] );
   \   000005   8C82         MOV     DPL,R4
   \   000007   8D83         MOV     DPH,R5
   \   000009   E0           MOVX    A,@DPTR
   \   00000A   FE           MOV     R6,A
   \   00000B   A3           INC     DPTR
   \   00000C   E0           MOVX    A,@DPTR
   \   00000D   F9           MOV     R1,A
   \   00000E   EE           MOV     A,R6
   \   00000F   8A82         MOV     DPL,R2
   \   000011   8B83         MOV     DPH,R3
   \   000013   12....       LCALL   ??Subroutine163_0 & 0xFFFF
   9179            buf += 2;
   9180          
   9181            pCmd->data = buf;
   \                     ??CrossCallReturnLabel_492:
   \   000016   EC           MOV     A,R4
   \   000017   2402         ADD     A,#0x2
   \   000019   F8           MOV     R0,A
   \   00001A   ED           MOV     A,R5
   \   00001B   3400         ADDC    A,#0x0
   \   00001D   F9           MOV     R1,A
   \   00001E   8A82         MOV     DPL,R2
   \   000020   8B83         MOV     DPH,R3
   \   000022   A3           INC     DPTR
   \   000023   A3           INC     DPTR
   \   000024   12....       LCALL   ?Subroutine123 & 0xFFFF
   9182          }
   \                     ??CrossCallReturnLabel_497:
   \   000027   02....       LJMP    ?Subroutine6 & 0xFFFF

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_ffffffff:
   \   000000   FFFFFFFF     DD 4294967295

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zclSE_SimpleMetering_Send_GetProfileCmd?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclSE_SimpleMetering_Send_GetProfileCmd

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zclSE_SimpleMetering_Send_GetProfileRsp?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclSE_SimpleMetering_Send_GetProfileRsp

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zclSE_SimpleMetering_Send_ReqMirrorRsp?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclSE_SimpleMetering_Send_ReqMirrorRsp

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zclSE_SimpleMetering_Send_RemMirrorRsp?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclSE_SimpleMetering_Send_RemMirrorRsp

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zclSE_SimpleMetering_Send_ReqFastPollModeCmd?:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclSE_SimpleMetering_Send_ReqFastPollModeCmd

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zclSE_SimpleMetering_Send_ReqFastPollModeRsp?:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclSE_SimpleMetering_Send_ReqFastPollModeRsp

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zclSE_Pricing_Send_GetScheduledPrice?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclSE_Pricing_Send_GetScheduledPrice

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zclSE_Pricing_Send_PublishPrice?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclSE_Pricing_Send_PublishPrice

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zclSE_Pricing_Send_PriceAcknowledgement?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclSE_Pricing_Send_PriceAcknowledgement

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zclSE_Pricing_Send_GetBlockPeriod?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclSE_Pricing_Send_GetBlockPeriod

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zclSE_Pricing_Send_PublishBlockPeriod?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclSE_Pricing_Send_PublishBlockPeriod

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zclSE_Message_Send_DisplayMessage?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclSE_Message_Send_DisplayMessage

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zclSE_Message_Send_CancelMessage?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclSE_Message_Send_CancelMessage

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zclSE_Message_Send_MessageConfirmation?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclSE_Message_Send_MessageConfirmation

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zclSE_LoadControl_Send_LoadControlEvent?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclSE_LoadControl_Send_LoadControlEvent

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zclSE_LoadControl_Send_CancelLoadControlEvent:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclSE_LoadControl_Send_CancelLoadControlEvent

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zclSE_LoadControl_Send_ReportEventStatus?rela:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclSE_LoadControl_Send_ReportEventStatus

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zclSE_LoadControl_Send_GetScheduledEvent?rela:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclSE_LoadControl_Send_GetScheduledEvent

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zclSE_Tunneling_Send_RequestTunnel?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclSE_Tunneling_Send_RequestTunnel

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zclSE_Tunneling_Send_ReqTunnelRsp?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclSE_Tunneling_Send_ReqTunnelRsp

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zclSE_Tunneling_Send_CloseTunnel?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclSE_Tunneling_Send_CloseTunnel

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zclSE_Tunneling_Send_TransferData?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclSE_Tunneling_Send_TransferData

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zclSE_Tunneling_Send_TransferDataError?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclSE_Tunneling_Send_TransferDataError

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zclSE_Tunneling_Send_AckTransferData?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclSE_Tunneling_Send_AckTransferData

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zclSE_Tunneling_Send_ReadyData?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclSE_Tunneling_Send_ReadyData

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zclSE_RegisterCmdCallbacks?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclSE_RegisterCmdCallbacks

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zclSE_HdlIncoming?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclSE_HdlIncoming

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zclSE_HdlInSpecificCommands?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclSE_HdlInSpecificCommands

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zclSE_ProcessInSimpleMeteringCmds?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclSE_ProcessInSimpleMeteringCmds

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zclSE_ProcessInCmd_SimpleMeter_GetProfileRsp?:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclSE_ProcessInCmd_SimpleMeter_GetProfileRsp

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zclSE_ProcessInCmd_SimpleMeter_ReqFastPollMod:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclSE_ProcessInCmd_SimpleMeter_ReqFastPollModeCmd

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zclSE_ProcessInPricingCmds?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclSE_ProcessInPricingCmds

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zclSE_ProcessInCmd_Pricing_PublishPrice?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclSE_ProcessInCmd_Pricing_PublishPrice

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zclSE_ProcessInCmd_Pricing_PublishBlockPeriod:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclSE_ProcessInCmd_Pricing_PublishBlockPeriod

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zclSE_ProcessInMessageCmds?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclSE_ProcessInMessageCmds

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zclSE_ProcessInCmd_Message_DisplayMessage?rel:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclSE_ProcessInCmd_Message_DisplayMessage

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zclSE_ProcessInLoadControlCmds?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclSE_ProcessInLoadControlCmds

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zclSE_ProcessInCmd_LoadControl_LoadControlEve:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclSE_ProcessInCmd_LoadControl_LoadControlEvent

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zclSE_ProcessInCmd_LoadControl_ReportEventSta:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclSE_ProcessInCmd_LoadControl_ReportEventStatus

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zclSE_ProcessInTunnelingCmds?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclSE_ProcessInTunnelingCmds

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zclSE_ProcessInCmd_Tunneling_RequestTunnel?re:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclSE_ProcessInCmd_Tunneling_RequestTunnel

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zclSE_ProcessInCmd_Tunneling_TransferData?rel:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclSE_ProcessInCmd_Tunneling_TransferData

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zclSE_ProcessInCmd_Tunneling_TransferDataErro:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclSE_ProcessInCmd_Tunneling_TransferDataError

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zclSE_ProcessInCmd_Tunneling_AckTransferData?:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclSE_ProcessInCmd_Tunneling_AckTransferData

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zclSE_ProcessInCmd_Tunneling_ReadyData?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclSE_ProcessInCmd_Tunneling_ReadyData

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zclSE_ParseInCmd_PublishPrice?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclSE_ParseInCmd_PublishPrice

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zclSE_ParseInCmd_PublishBlockPeriod?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclSE_ParseInCmd_PublishBlockPeriod

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zclSE_ParseInCmd_DisplayMessage?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclSE_ParseInCmd_DisplayMessage

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zclSE_ParseInCmd_CancelMessage?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclSE_ParseInCmd_CancelMessage

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zclSE_ParseInCmd_MessageConfirmation?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclSE_ParseInCmd_MessageConfirmation

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zclSE_ParseInCmd_LoadControlEvent?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclSE_ParseInCmd_LoadControlEvent

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zclSE_ParseInCmd_CancelLoadControlEvent?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclSE_ParseInCmd_CancelLoadControlEvent

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zclSE_ParseInCmd_ReportEventStatus?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclSE_ParseInCmd_ReportEventStatus

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zclSE_ParseInCmd_TransferData?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclSE_ParseInCmd_TransferData
   9183          #endif //  ZCL_TUNNELING
   9184          
   9185          #ifdef ZCL_TOU
   9186          #ifdef SE_UK_EXT
   9187          /*********************************************************************
   9188           * @fn      zclSE_ParseInCmd_PublishCalendar
   9189           *
   9190           * @brief   Parse received Publish Calendar Command.
   9191           *
   9192           * @param   pCmd - pointer to the output data struct
   9193           * @param   buf - pointer to the input data buffer
   9194           * @param   len - length of the input buffer
   9195           *
   9196           * @return  none
   9197           */
   9198          void zclSE_ParseInCmd_PublishCalendar( zclCCPublishCalendar_t *pCmd,
   9199                                                 uint8 *buf, uint8 len )
   9200          {
   9201            uint8 originalLen; // stores octet string original length
   9202          
   9203            // Parse the command buffer
   9204            pCmd->issuerCalendarId = osal_build_uint32( buf, 4 );
   9205            buf += 4;
   9206          
   9207            pCmd->startTime = osal_build_uint32( buf, 4 );
   9208            buf += 4;
   9209          
   9210            pCmd->calendarType = *buf++;
   9211            pCmd->calendarTimeRef = *buf++;
   9212          
   9213            // Notice that calendarName is a variable length UTF-8 string
   9214            pCmd->calendarName.strLen = *buf++;
   9215            if ( pCmd->calendarName.strLen == SE_OPTIONAL_FIELD_UINT8 )
   9216            {
   9217              // If character count is 0xFF, set string length to 0
   9218              pCmd->calendarName.strLen = 0;
   9219            }
   9220          
   9221            if ( pCmd->calendarName.strLen != 0 )
   9222            {
   9223              originalLen = pCmd->calendarName.strLen; //save original length
   9224          
   9225              // truncate rate label to maximum size
   9226              if ( pCmd->calendarName.strLen > (SE_CALENDAR_NAME_LEN-1) )
   9227              {
   9228                pCmd->calendarName.strLen = (SE_CALENDAR_NAME_LEN-1);
   9229              }
   9230          
   9231              pCmd->calendarName.pStr = buf;
   9232          
   9233              buf += originalLen; // move pointer original length of received string
   9234            }
   9235            else
   9236            {
   9237              pCmd->calendarName.pStr = NULL;
   9238            }
   9239          
   9240            pCmd->numOfSeasons = *buf++;
   9241            pCmd->numOfWeekProfiles = *buf++;
   9242            pCmd->numOfDayProfiles = *buf;
   9243          }
   9244          
   9245          /*********************************************************************
   9246           * @fn      zclSE_ParseInCmd_PublishDayProfile
   9247           *
   9248           * @brief   Parse received Publish Day Profile Command.
   9249           *
   9250           * @param   pCmd - pointer to the output data struct
   9251           * @param   buf - pointer to the input data buffer
   9252           * @param   len - length of the input buffer
   9253           *
   9254           * @return  ZStatus_t - ZSuccess @ Parse successful
   9255           *                      ZMemError @ Memory allocation failure
   9256           */
   9257          ZStatus_t zclSE_ParseInCmd_PublishDayProfile( zclCCPublishDayProfile_t *pCmd,
   9258                                                        uint8 *buf, uint8 len )
   9259          {
   9260            // Parse the command buffer
   9261            pCmd->issuerCalendarId = osal_build_uint32( buf, 4 );
   9262            buf += 4;
   9263          
   9264            pCmd->dayId = *buf++;
   9265            pCmd->totalNumSchedEnt = *buf++;
   9266            pCmd->commandIndex = *buf++;
   9267          
   9268            pCmd->numTransferEntries = (len - PACKET_LEN_SE_PUBLISH_DAY_PROFILE) / SE_DAY_SCHEDULE_ENTRY_LEN;
   9269            if (pCmd->numTransferEntries)
   9270            {
   9271              if ( pCmd->issuerCalendarId <= SE_CALENDAR_TYPE_IMPORT_EXPORT_CALENDAR )
   9272              {
   9273                pCmd->pScheduleEntries = osal_mem_alloc( pCmd->numTransferEntries * sizeof( zclCCRateEntry_t ) );
   9274          
   9275                if ( pCmd->pScheduleEntries != NULL )
   9276                {
   9277                  zclCCRateEntry_t *pRateEntry = (zclCCRateEntry_t *)pCmd->pScheduleEntries;
   9278                  uint8 i;
   9279          
   9280                  for ( i = 0; i < pCmd->numTransferEntries; i++ )
   9281                  {
   9282                    pRateEntry->startTime = BUILD_UINT16( buf[0], buf[1] );
   9283                    buf += 2;
   9284          
   9285                    pRateEntry->activePriceTier = *buf++;
   9286          
   9287                    pRateEntry++;
   9288                  }
   9289                }
   9290                else
   9291                {
   9292                  return ZMemError;
   9293                }
   9294              }
   9295              else
   9296              {
   9297                pCmd->pScheduleEntries = osal_mem_alloc( pCmd->numTransferEntries * sizeof( zclCCFriendlyCreditEntry_t ) );
   9298          
   9299                if ( pCmd->pScheduleEntries != NULL )
   9300                {
   9301                  zclCCFriendlyCreditEntry_t *pFriendlyEntry = (zclCCFriendlyCreditEntry_t *)pCmd->pScheduleEntries;
   9302                  uint8 i;
   9303          
   9304                  for ( i = 0; i < pCmd->numTransferEntries; i++ )
   9305                  {
   9306                    pFriendlyEntry->startTime = BUILD_UINT16( buf[0], buf[1] );
   9307                    buf += 2;
   9308          
   9309                    pFriendlyEntry->friendCreditEnable = *buf++;
   9310          
   9311                    pFriendlyEntry++;
   9312                  }
   9313                }
   9314                else
   9315                {
   9316                  return ZMemError;
   9317                }
   9318              }
   9319            }
   9320          
   9321            return ZSuccess;
   9322          }
   9323          
   9324          /*********************************************************************
   9325           * @fn      zclSE_ParseInCmd_PublishSeasons
   9326           *
   9327           * @brief   Parse received Publish Seasons Command.
   9328           *
   9329           * @param   pCmd - pointer to the output data struct
   9330           * @param   buf - pointer to the input data buffer
   9331           * @param   len - length of the input buffer
   9332           *
   9333           * @return  ZStatus_t - ZSuccess @ Parse successful
   9334           *                      ZMemError @ Memory allocation failure
   9335           */
   9336          ZStatus_t zclSE_ParseInCmd_PublishSeasons( zclCCPublishSeasons_t *pCmd, uint8 *buf, uint8 len )
   9337          {
   9338            // Parse the command buffer
   9339            pCmd->issuerCalendarId = osal_build_uint32( buf, 4 );
   9340            buf += 4;
   9341          
   9342            pCmd->commandIndex = *buf++;
   9343          
   9344            pCmd->numTransferEntries = ( len - PACKET_LEN_SE_PUBLISH_SEASONS ) / SE_SEASON_ENTRY_LEN;
   9345          
   9346            if ( pCmd->numTransferEntries )
   9347            {
   9348              pCmd->pSeasonEntry = (zclCCSeasonEntry_t *)osal_mem_alloc( pCmd->numTransferEntries *
   9349                                                                         sizeof( zclCCSeasonEntry_t ) );
   9350          
   9351              if ( pCmd->pSeasonEntry != NULL )
   9352              {
   9353                uint8 i;
   9354          
   9355                for ( i = 0; i < pCmd->numTransferEntries; i++ )
   9356                {
   9357                  pCmd->pSeasonEntry[i].seasonStartDate = osal_build_uint32( buf, 4 );
   9358                  buf += 4;
   9359          
   9360                  pCmd->pSeasonEntry[i].weekIdRef = *buf++;
   9361                }
   9362              }
   9363              else
   9364              {
   9365                return ZMemError;
   9366              }
   9367            }
   9368          
   9369            return ZSuccess;
   9370          }
   9371          
   9372          /*********************************************************************
   9373           * @fn      zclSE_ParseInCmd_PublishSpecialDays
   9374           *
   9375           * @brief   Parse received Publish Special Days Command.
   9376           *
   9377           * @param   pCmd - pointer to the output data struct
   9378           * @param   buf - pointer to the input data buffer
   9379           * @param   len - length of the input buffer
   9380           *
   9381           * @return  ZStatus_t - ZSuccess @ Parse successful
   9382           *                      ZMemError @ Memory allocation failure
   9383           */
   9384          ZStatus_t zclSE_ParseInCmd_PublishSpecialDays( zclCCPublishSpecialDays_t *pCmd,
   9385                                                         uint8 *buf, uint8 len )
   9386          {
   9387            // Parse the command buffer
   9388            pCmd->issuerEventId = osal_build_uint32( buf, 4 );
   9389            buf += 4;
   9390          
   9391            pCmd->startTime = osal_build_uint32( buf, 4 );
   9392            buf += 4;
   9393          
   9394            pCmd->calendarType = *buf++;
   9395            pCmd->totalNumSpecialDays = *buf++;
   9396            pCmd->commandIndex = *buf++;
   9397          
   9398            pCmd->numTransferEntries = ( len - PACKET_LEN_SE_PUBLISH_SPECIAL_DAYS ) / SE_SPECIAL_DAY_ENTRY_LEN;
   9399          
   9400            if ( pCmd->numTransferEntries )
   9401            {
   9402              pCmd->pSpecialDayEntry = (zclCCSpecialDayEntry_t *)osal_mem_alloc( pCmd->numTransferEntries *
   9403                                                                                 sizeof( zclCCSpecialDayEntry_t ) );
   9404          
   9405              if ( pCmd->pSpecialDayEntry != NULL )
   9406              {
   9407                uint8 i;
   9408          
   9409                for ( i = 0; i < pCmd->numTransferEntries; i++ )
   9410                {
   9411                  pCmd->pSpecialDayEntry[i].specialDayDate = osal_build_uint32( buf, 4 );
   9412                  buf += 4;
   9413          
   9414                  pCmd->pSpecialDayEntry[i].dayIdRef = *buf++;
   9415                }
   9416              }
   9417              else
   9418              {
   9419                return ZMemError;
   9420              }
   9421            }
   9422          
   9423            return ZSuccess;
   9424          }
   9425          #endif  // SE_UK_EXT
   9426          #endif  // ZCL_TOU
   9427          
   9428          #ifdef ZCL_DEVICE_MGMT
   9429          #ifdef SE_UK_EXT
   9430          /*********************************************************************
   9431           * @fn      zclSE_ParseInCmd_PublishChangeTenancy
   9432           *
   9433           * @brief   Parse received Publish Change of Tenancy Command.
   9434           *
   9435           * @param   pCmd - pointer to the output data struct
   9436           * @param   buf - pointer to the input data buffer
   9437           * @param   len - length of the input buffer
   9438           *
   9439           * @return  none
   9440           */
   9441          void zclSE_ParseInCmd_PublishChangeTenancy( zclCCPublishChangeTenancy_t *pCmd,
   9442                                                      uint8 *buf, uint8 len )
   9443          {
   9444            (void)len;  // Intentionally unreferenced parameter
   9445          
   9446            // Parse the command buffer
   9447            pCmd->supplierId = osal_build_uint32( buf, 4 );
   9448            buf += 4;
   9449          
   9450            pCmd->eventId = osal_build_uint32( buf, 4 );
   9451            buf += 4;
   9452          
   9453            pCmd->tariffType = *buf++;
   9454          
   9455            pCmd->implementationDateTime = osal_build_uint32( buf, 4 );
   9456            buf += 4;
   9457          
   9458            pCmd->propTenencyChangeCtrl = osal_build_uint32( buf, 4 );
   9459            buf += 4;
   9460          
   9461            pCmd->signature.strLen = *buf++;;
   9462          
   9463            // Point to the Signature string
   9464            if ( pCmd->signature.strLen != 0 )
   9465            {
   9466              pCmd->signature.pStr = buf;
   9467            }
   9468            else
   9469            {
   9470              pCmd->signature.pStr = NULL;
   9471            }
   9472          }
   9473          
   9474          /*********************************************************************
   9475           * @fn      zclSE_ParseInCmd_PublishChangeSupplier
   9476           *
   9477           * @brief   Parse received Publish Change of Supplier Command.
   9478           *
   9479           * @param   pCmd - pointer to the output data struct
   9480           * @param   buf - pointer to the input data buffer
   9481           * @param   len - length of the input buffer
   9482           *
   9483           * @return  none
   9484           */
   9485          void zclSE_ParseInCmd_PublishChangeSupplier( zclCCPublishChangeSupplier_t *pCmd,
   9486                                                       uint8 *buf, uint8 len )
   9487          {
   9488            (void)len;  // Intentionally unreferenced parameter
   9489          
   9490            // Parse the command buffer
   9491            pCmd->supplierId = osal_build_uint32( buf, 4 );
   9492            buf += 4;
   9493          
   9494            pCmd->eventId = osal_build_uint32( buf, 4 );
   9495            buf += 4;
   9496          
   9497            pCmd->tariffType = *buf++;
   9498          
   9499            pCmd->propSupplierId = osal_build_uint32( buf, 4 );
   9500            buf += 4;
   9501          
   9502            pCmd->suppIdImplemDateTime = osal_build_uint32( buf, 4 );
   9503            buf += 4;
   9504          
   9505            pCmd->supplierChangeCtrl = osal_build_uint32( buf, 4 );
   9506            buf += 4;
   9507          
   9508            pCmd->supplierIdName.strLen = *buf++;;
   9509          
   9510            // Point to the Supplier ID Name string
   9511            if ( pCmd->supplierIdName.strLen != 0 )
   9512            {
   9513              uint8 originalLen; // stores octet string original length
   9514          
   9515              originalLen = pCmd->supplierIdName.strLen; //save original length
   9516          
   9517              // truncate SupplierIdName to maximum size
   9518              if ( pCmd->supplierIdName.strLen > (SE_SUPPLIER_ID_NAME_LEN-1) )
   9519              {
   9520                pCmd->supplierIdName.strLen = (SE_SUPPLIER_ID_NAME_LEN-1);
   9521              }
   9522          
   9523              pCmd->supplierIdName.pStr = buf;
   9524              buf += originalLen; // move pointer original length of received string
   9525            }
   9526            else
   9527            {
   9528              pCmd->supplierIdName.pStr = NULL;
   9529            }
   9530          
   9531            pCmd->signature.strLen = *buf++;;
   9532          
   9533            // Point to the Signature string
   9534            if ( pCmd->signature.strLen != 0 )
   9535            {
   9536              pCmd->signature.pStr = buf;
   9537            }
   9538            else
   9539            {
   9540              pCmd->signature.pStr = NULL;
   9541            }
   9542          }
   9543          
   9544          /*********************************************************************
   9545           * @fn      zclSE_ParseInCmd_ChangeSupply
   9546           *
   9547           * @brief   Parse received Change Supply Command.
   9548           *
   9549           * @param   pCmd - pointer to the output data struct
   9550           * @param   buf - pointer to the input data buffer
   9551           * @param   len - length of the input buffer
   9552           *
   9553           * @return  none
   9554           */
   9555          void zclSE_ParseInCmd_ChangeSupply( zclCCChangeSupply_t *pCmd, uint8 *buf, uint8 len )
   9556          {
   9557            (void)len;  // Intentionally unreferenced parameter
   9558          
   9559            // Parse the command buffer
   9560            pCmd->supplierId = osal_build_uint32( buf, 4 );
   9561            buf += 4;
   9562          
   9563            pCmd->eventId = osal_build_uint32( buf, 4 );
   9564            buf += 4;
   9565          
   9566            pCmd->requestDateTime = osal_build_uint32( buf, 4 );
   9567            buf += 4;
   9568          
   9569            pCmd->implementationDateTime = osal_build_uint32( buf, 4 );
   9570            buf += 4;
   9571          
   9572            pCmd->proposedSupplyStatus = *buf++;
   9573          
   9574            pCmd->origIdSupplyControlBits = *buf++;
   9575          
   9576            pCmd->signature.strLen = *buf++;;
   9577          
   9578            // Point to the Signature string
   9579            if ( pCmd->signature.strLen != 0 )
   9580            {
   9581              pCmd->signature.pStr = buf;
   9582            }
   9583            else
   9584            {
   9585              pCmd->signature.pStr = NULL;
   9586            }
   9587          }
   9588          
   9589          /*********************************************************************
   9590           * @fn      zclSE_ParseInCmd_ChangePassword
   9591           *
   9592           * @brief   Parse received Change Password Command.
   9593           *
   9594           * @param   pCmd - pointer to the output data struct
   9595           * @param   buf - pointer to the input data buffer
   9596           * @param   len - length of the input buffer
   9597           *
   9598           * @return  none
   9599           */
   9600          void zclSE_ParseInCmd_ChangePassword( zclCCChangePassword_t *pCmd, uint8 *buf, uint8 len )
   9601          {
   9602            pCmd->passwordLevel = *buf++;
   9603          
   9604            pCmd->password.strLen = *buf++;;
   9605          
   9606            // Point to the Signature string
   9607            if ( pCmd->password.strLen != 0 )
   9608            {
   9609              // truncate password to maximum size
   9610              if ( pCmd->password.strLen > (SE_PASSWORD_LEN-1) )
   9611              {
   9612                pCmd->password.strLen = (SE_PASSWORD_LEN-1);
   9613              }
   9614          
   9615              pCmd->password.pStr = buf;
   9616            }
   9617            else
   9618            {
   9619              pCmd->password.pStr = NULL;
   9620            }
   9621          }
   9622          #endif  // SE_UK_EXT
   9623          #endif  // ZCL_DEVICE_MGMT
   9624          
   9625          #ifdef SE_UK_EXT
   9626          /*********************************************************************
   9627           * @fn      zclSE_Parse_UTF8String
   9628           *
   9629           * @brief   Called to parse a UTF8String from a message
   9630           *
   9631           * @param   pBuf - pointer to the incoming message
   9632           * @param   pString - pointer to the UTF8String_t
   9633           * @param   maxLen - max length of the string field in pBuf
   9634           *
   9635           * @return  uint8 - number of bytes parsed from pBuf
   9636           */
   9637          static uint8 zclSE_Parse_UTF8String( uint8 *pBuf, UTF8String_t *pString, uint8 maxLen )
   9638          {
   9639            uint8 originalLen = 0;
   9640          
   9641            pString->strLen = *pBuf++;
   9642            if ( pString->strLen == SE_OPTIONAL_FIELD_UINT8 )
   9643            {
   9644              // If character count is 0xFF, set string length to 0
   9645              pString->strLen = 0;
   9646            }
   9647          
   9648            if ( pString->strLen != 0 )
   9649            {
   9650              originalLen = pString->strLen; //save original length
   9651          
   9652              // truncate to maximum size
   9653              if ( pString->strLen > (maxLen-1) )
   9654              {
   9655                pString->strLen = (maxLen-1);
   9656              }
   9657          
   9658              pString->pStr = pBuf;
   9659            }
   9660            else
   9661            {
   9662              pString->pStr = NULL;
   9663            }
   9664          
   9665            return originalLen + 1;
   9666          }
   9667          #endif  // SE_UK_EXT
   9668          /********************************************************************************************
   9669          *********************************************************************************************/

   Maximum stack usage in bytes:

     Function                       ISTACK PSTACK XSTACK
     --------                       ------ ------ ------
     zclSE_HdlInSpecificCommands        0      0     19
       -> zclSE_ProcessInSimpleMeteringCmds
                                        0      0     20
       -> zclSE_ProcessInPricingCmds
                                        0      0     20
       -> zclSE_ProcessInMessageCmds
                                        0      0     20
       -> zclSE_ProcessInLoadControlCmds
                                        0      0     20
       -> zclSE_ProcessInTunnelingCmds
                                        0      0     20
     zclSE_HdlIncoming                  0      0      9
       -> StubAPS_InterPan              0      0     18
       -> zclSE_HdlInSpecificCommands
                                        0      0     18
     zclSE_LoadControl_Send_CancelLoadControlEvent
                                        1      0     41
       -> osal_buffer_uint32            0      0     64
       -> osal_buffer_uint24            0      0     64
       -> osal_buffer_uint32            0      0     64
       -> zcl_SendCommand               0      0     78
     zclSE_LoadControl_Send_GetScheduledEvent
                                        1      0     31
       -> osal_buffer_uint32            0      0     44
       -> zcl_SendCommand               0      0     58
     zclSE_LoadControl_Send_LoadControlEvent
                                        1      0     31
       -> osal_mem_alloc                0      0     36
       -> osal_buffer_uint32            0      0     44
       -> osal_buffer_uint24            0      0     44
       -> osal_buffer_uint32            0      0     44
       -> zcl_SendCommand               0      0     58
       -> osal_mem_free                 0      0     36
     zclSE_LoadControl_Send_ReportEventStatus
                                        1      0     31
       -> osal_mem_alloc                0      0     36
       -> osal_buffer_uint32            0      0     44
       -> osal_buffer_uint32            0      0     44
       -> zclGeneral_KeyEstablishment_ECDSASign
                                        0      0     36
       -> zcl_SendCommand               0      0     58
       -> osal_mem_free                 0      0     36
     zclSE_Message_Send_CancelMessage
                                        1      0     31
       -> osal_buffer_uint32            0      0     44
       -> zcl_SendCommand               0      0     58
     zclSE_Message_Send_DisplayMessage
                                        1      0     35
       -> osal_mem_alloc                0      0     44
       -> osal_buffer_uint32            0      0     52
       -> osal_buffer_uint32            0      0     52
       -> osal_memcpy                   0      0     50
       -> zcl_SendCommand               0      0     66
       -> osal_mem_free                 0      0     44
     zclSE_Message_Send_MessageConfirmation
                                        0      0     31
       -> osal_mem_alloc                0      0     36
       -> osal_buffer_uint32            0      0     52
       -> osal_buffer_uint32            0      0     44
       -> zcl_SendCommand               0      0     58
       -> osal_mem_free                 0      0     36
     zclSE_ParseInCmd_CancelLoadControlEvent
                                        1      0     41
       -> osal_build_uint32             0      0     20
       -> osal_build_uint32             0      0     20
       -> osal_build_uint32             0      0     20
     zclSE_ParseInCmd_CancelMessage     1      0     42
       -> osal_build_uint32             0      0     24
       -> osal_memset                   0      0     24
     zclSE_ParseInCmd_DisplayMessage
                                        1      0     43
       -> osal_build_uint32             0      0     24
       -> osal_memset                   0      0     24
       -> osal_build_uint32             0      0     24
       -> osal_mem_alloc                0      0     24
       -> osal_memcpy                   0      0     30
     zclSE_ParseInCmd_LoadControlEvent
                                        1      0     46
       -> osal_build_uint32             0      0     20
       -> osal_build_uint32             0      0     20
       -> osal_build_uint32             0      0     20
     zclSE_ParseInCmd_MessageConfirmation
                                        0      0     40
       -> osal_build_uint32             0      0     20
       -> osal_build_uint32             0      0     20
     zclSE_ParseInCmd_PublishBlockPeriod
                                        1      0     39
       -> osal_build_uint32             0      0     20
       -> osal_build_uint32             0      0     20
       -> osal_build_uint32             0      0     20
       -> osal_build_uint32             0      0     20
     zclSE_ParseInCmd_PublishPrice      1      0     72
       -> osal_build_uint32             0      0     30
       -> osal_build_uint32             0      0     30
       -> osal_build_uint32             0      0     30
       -> osal_build_uint32             0      0     30
       -> osal_build_uint32             0      0     30
       -> osal_build_uint32             0      0     30
       -> osal_build_uint32             0      0     30
       -> osal_mem_alloc                0      0     30
       -> osal_memcpy                   0      0     36
     zclSE_ParseInCmd_ReportEventStatus
                                        1      0     88
       -> osal_build_uint32             0      0     30
       -> osal_build_uint32             0      0     30
       -> osal_memcpy                   0      0     36
     zclSE_ParseInCmd_TransferData      0      0     26
     zclSE_Pricing_Send_GetBlockPeriod
                                        1      0     31
       -> osal_buffer_uint32            0      0     44
       -> zcl_SendCommand               0      0     58
     zclSE_Pricing_Send_GetScheduledPrice
                                        1      0     31
       -> osal_buffer_uint32            0      0     44
       -> zcl_SendCommand               0      0     58
     zclSE_Pricing_Send_PriceAcknowledgement
                                        1      0     32
       -> osal_mem_alloc                0      0     36
       -> osal_buffer_uint32            2      0     60
       -> osal_buffer_uint32            2      0     52
       -> osal_buffer_uint32            2      0     44
       -> zcl_SendCommand               0      0     58
       -> osal_mem_free                 0      0     36
     zclSE_Pricing_Send_PublishBlockPeriod
                                        1      0     31
       -> osal_mem_alloc                0      0     36
       -> osal_buffer_uint32            0      0     44
       -> osal_buffer_uint32            0      0     44
       -> osal_buffer_uint32            0      0     44
       -> osal_buffer_uint24            0      0     44
       -> zcl_SendCommand               0      0     58
       -> osal_mem_free                 0      0     36
     zclSE_Pricing_Send_PublishPrice
                                        1      0     33
       -> osal_mem_alloc                0      0     40
       -> osal_buffer_uint32            0      0     48
       -> osal_memcpy                   0      0     46
       -> osal_buffer_uint32            0      0     48
       -> osal_buffer_uint32            0      0     48
       -> osal_buffer_uint32            0      0     48
       -> osal_buffer_uint32            0      0     48
       -> osal_buffer_uint32            0      0     48
       -> osal_buffer_uint32            0      0     48
       -> zcl_SendCommand               0      0     62
       -> osal_mem_free                 0      0     40
     zclSE_ProcessInCmd_LoadControl_LoadControlEvent
                                        0      0     68
       -> zclSE_ParseInCmd_LoadControlEvent
                                        0      0     72
     zclSE_ProcessInCmd_LoadControl_ReportEventStatus
                                        0      0    101
       -> zclSE_ParseInCmd_ReportEventStatus
                                        0      0    140
     zclSE_ProcessInCmd_Message_DisplayMessage
                                        0      0     58
       -> zclSE_ParseInCmd_DisplayMessage
                                        0      0     56
       -> osal_mem_free                 0      0     56
     zclSE_ProcessInCmd_Pricing_PublishBlockPeriod
                                        0      0     60
       -> zclSE_ParseInCmd_PublishBlockPeriod
                                        0      0     58
     zclSE_ProcessInCmd_Pricing_PublishPrice
                                        2      0     85
       -> zclSE_ParseInCmd_PublishPrice
                                        0      0    108
       -> osal_mem_free                 0      0    108
     zclSE_ProcessInCmd_SimpleMeter_GetProfileRsp
                                        1      0     50
       -> osal_build_uint32             0      0     50
       -> osal_mem_alloc                0      0     50
       -> osal_build_uint32             0      0     50
       -> osal_mem_free                 0      0     50
     zclSE_ProcessInCmd_SimpleMeter_ReqFastPollModeCmd
                                        1      0     52
       -> zclFindAttrRec                0      0     54
       -> zclReadAttrData               0      0     54
     zclSE_ProcessInCmd_Tunneling_AckTransferData
                                        0      0     34
     zclSE_ProcessInCmd_Tunneling_ReadyData
                                        0      0     34
     zclSE_ProcessInCmd_Tunneling_RequestTunnel
                                        1      0     37
     zclSE_ProcessInCmd_Tunneling_TransferData
                                        0      0     39
       -> zclSE_ParseInCmd_TransferData
                                        0      0     34
     zclSE_ProcessInCmd_Tunneling_TransferDataError
                                        1      0     32
     zclSE_ProcessInLoadControlCmds     1      0     41
       -> zclSE_ProcessInCmd_LoadControl_ReportEventStatus
                                        0      0     62
       -> osal_build_uint32             0      0     62
       -> zclSE_ProcessInCmd_LoadControl_LoadControlEvent
                                        0      0     62
       -> zclSE_ParseInCmd_CancelLoadControlEvent
                                        0      0     62
     zclSE_ProcessInMessageCmds         0      0     40
       -> zclSE_ParseInCmd_MessageConfirmation
                                        0      0     60
       -> zclSE_ProcessInCmd_Message_DisplayMessage
                                        0      0     60
       -> zclSE_ParseInCmd_CancelMessage
                                        0      0     60
     zclSE_ProcessInPricingCmds         1      0     41
       -> osal_build_uint32             0      0     62
       -> osal_build_uint32             0      0     62
       -> osal_build_uint32             0      0     62
       -> osal_build_uint32             0      0     62
       -> osal_build_uint32             0      0     62
       -> zclSE_ProcessInCmd_Pricing_PublishPrice
                                        0      0     62
       -> zclSE_ProcessInCmd_Pricing_PublishBlockPeriod
                                        0      0     62
     zclSE_ProcessInSimpleMeteringCmds
                                        1      0     35
       -> osal_build_uint32             0      0     50
       -> zclSE_ProcessInCmd_SimpleMeter_ReqFastPollModeCmd
                                        0      0     50
       -> zclSE_ProcessInCmd_SimpleMeter_GetProfileRsp
                                        0      0     50
       -> osal_build_uint32             0      0     50
     zclSE_ProcessInTunnelingCmds       1      0     29
       -> zclSE_ProcessInCmd_Tunneling_RequestTunnel
                                        0      0     38
       -> zclSE_ProcessInCmd_Tunneling_TransferData
                                        0      0     38
       -> zclSE_ProcessInCmd_Tunneling_TransferDataError
                                        0      0     38
       -> zclSE_ProcessInCmd_Tunneling_AckTransferData
                                        0      0     38
       -> zclSE_ProcessInCmd_Tunneling_ReadyData
                                        0      0     38
     zclSE_RegisterCmdCallbacks         1      0     14
       -> zcl_registerPlugin            0      0     28
       -> osal_mem_alloc                0      0     24
     zclSE_SimpleMetering_Send_GetProfileCmd
                                        1      0     40
       -> osal_buffer_uint32            0      0     54
       -> zcl_SendCommand               0      0     68
     zclSE_SimpleMetering_Send_GetProfileRsp
                                        1      0     45
       -> osal_mem_alloc                0      0     50
       -> osal_buffer_uint32            0      0     58
       -> osal_buffer_uint24            0      0     58
       -> zcl_SendCommand               0      0     72
       -> osal_mem_free                 0      0     50
     zclSE_SimpleMetering_Send_RemMirrorRsp
                                        1      0     25
       -> zcl_SendCommand               0      0     46
     zclSE_SimpleMetering_Send_ReqFastPollModeCmd
                                        1      0     25
       -> zcl_SendCommand               0      0     46
     zclSE_SimpleMetering_Send_ReqFastPollModeRsp
                                        1      0     31
       -> osal_buffer_uint32            0      0     44
       -> zcl_SendCommand               0      0     58
     zclSE_SimpleMetering_Send_ReqMirrorRsp
                                        1      0     25
       -> zcl_SendCommand               0      0     46
     zclSE_Tunneling_Send_AckTransferData
                                        1      0     30
       -> zcl_SendCommand               0      0     54
     zclSE_Tunneling_Send_CloseTunnel
                                        1      0     26
       -> zcl_SendCommand               0      0     48
     zclSE_Tunneling_Send_ReadyData     1      0     30
       -> zcl_SendCommand               0      0     54
     zclSE_Tunneling_Send_ReqTunnelRsp
                                        1      0     30
       -> osal_mem_alloc                0      0     34
       -> zcl_SendCommand               0      0     56
       -> osal_mem_free                 0      0     34
     zclSE_Tunneling_Send_RequestTunnel
                                        1      0     31
       -> osal_mem_alloc                0      0     36
       -> zcl_SendCommand               0      0     58
       -> osal_mem_free                 0      0     36
     zclSE_Tunneling_Send_TransferData
                                        1      0     40
       -> osal_mem_alloc                0      0     48
       -> osal_memcpy                   0      0     54
       -> zcl_SendCommand               0      0     70
       -> osal_mem_free                 0      0     48
     zclSE_Tunneling_Send_TransferDataError
                                        1      0     29
       -> zcl_SendCommand               0      0     52


   Segment part sizes:

     Function/Label                                  Bytes
     --------------                                  -----
     zclSECBs                                           2
     zclSEPluginRegisted                                1
     zclSE_SimpleMetering_Send_GetProfileCmd
                                                      164
     ?Subroutine0                                       5
     ??Subroutine151_0                                 16
     ?Subroutine81                                      4
     ??Subroutine156_0                                  6
     ??Subroutine160_0                                  6
     zclSE_SimpleMetering_Send_GetProfileRsp
                                                      255
     ?Subroutine94                                      6
     ??Subroutine148_0                                  6
     ?Subroutine96                                      6
     ??Subroutine161_0                                 11
     ?Subroutine57                                      6
     ?Subroutine95                                      9
     ?Subroutine77                                      5
     ?Subroutine120                                    13
     zclSE_SimpleMetering_Send_ReqMirrorRsp
                                                       90
     ?Subroutine52                                     13
     ?Subroutine68                                      1
     ?Subroutine1                                      19
     ??Subroutine182_0                                  3
     ??Subroutine183_0                                  5
     zclSE_SimpleMetering_Send_RemMirrorRsp
                                                       93
     zclSE_SimpleMetering_Send_ReqFastPollModeCmd
                                                      101
     ??Subroutine162_0                                 14
     ?Subroutine117                                     9
     zclSE_SimpleMetering_Send_ReqFastPollModeRsp
                                                      132
     ?Subroutine39                                      6
     ?Subroutine31                                      8
     ??Subroutine152_0                                  8
     ??Subroutine153_0                                  8
     ??Subroutine159_0                                  8
     ??Subroutine174_0                                  4
     zclSE_Pricing_Send_GetScheduledPrice
                                                      130
     ?Subroutine2                                       7
     zclSE_Pricing_Send_PublishPrice
                                                      392
     ?Subroutine28                                     11
     ?Subroutine59                                     12
     ?Subroutine16                                     10
     ??Subroutine149_0                                  7
     ??Subroutine150_0                                  5
     ?Subroutine90                                      4
     ?Subroutine128                                     4
     ?Subroutine142                                     8
     ?Subroutine65                                      6
     ??Subroutine154_0                                  4
     ?Subroutine105                                     9
     ?Subroutine108                                     4
     ?Subroutine135                                    11
     ?Subroutine129                                     8
     ?Subroutine137                                     7
     ?Subroutine112                                     5
     ?Subroutine82                                     10
     ?Subroutine64                                      5
     ??Subroutine187_0                                  5
     ??Subroutine193_0                                  4
     ??Subroutine194_0                                  6
     zclSE_Pricing_Send_PriceAcknowledgement
                                                      198
     ?Subroutine84                                     13
     ?Subroutine3                                       5
     ?Subroutine83                                      2
     ?Subroutine92                                      4
     ??Subroutine170_0                                  5
     zclSE_Pricing_Send_GetBlockPeriod
                                                      133
     zclSE_Pricing_Send_PublishBlockPeriod
                                                      209
     ?Subroutine91                                      4
     ?Subroutine93                                      4
     ??Subroutine192_0                                  4
     zclSE_Message_Send_DisplayMessage
                                                      253
     ?Subroutine66                                     17
     ?Subroutine51                                     13
     zclSE_Message_Send_CancelMessage
                                                      161
     zclSE_Message_Send_MessageConfirmation
                                                      157
     zclSE_LoadControl_Send_LoadControlEvent
                                                      252
     ?Subroutine46                                      6
     ?Subroutine107                                    12
     ?Subroutine14                                      7
     ??Subroutine155_0                                  6
     ?Subroutine38                                      8
     zclSE_LoadControl_Send_CancelLoadControlEvent
                                                      184
     ?Subroutine4                                       8
     zclSE_LoadControl_Send_ReportEventStatus
                                                      257
     ?Subroutine24                                      5
     ??Subroutine157_0                                  6
     ?Subroutine37                                     11
     zclSE_LoadControl_Send_GetScheduledEvent
                                                      137
     zclSE_Tunneling_Send_RequestTunnel
                                                      177
     ?Subroutine43                                      8
     ?Subroutine102                                    11
     ?Subroutine34                                     23
     ?Subroutine17                                      6
     ??Subroutine158_0                                 12
     ?Subroutine138                                     9
     zclSE_Tunneling_Send_ReqTunnelRsp
                                                      162
     zclSE_Tunneling_Send_CloseTunnel
                                                      120
     zclSE_Tunneling_Send_TransferData
                                                      211
     zclSE_Tunneling_Send_TransferDataError
                                                      168
     ?Subroutine23                                      3
     ??Subroutine176_0                                  3
     ??Subroutine177_0                                  5
     zclSE_Tunneling_Send_AckTransferData
                                                       84
     ?Subroutine80                                      4
     ?Subroutine124                                     5
     ?Subroutine76                                     10
     ?Subroutine126                                     5
     ?Subroutine5                                      92
     ?Subroutine140                                     6
     zclSE_Tunneling_Send_ReadyData                    84
     zclSE_RegisterCmdCallbacks                       139
     ?Subroutine123                                     1
     ??Subroutine163_0                                  5
     ??Subroutine164_0                                  6
     zclSE_HdlIncoming                                120
     ?Subroutine6                                       5
     ?Subroutine61                                      7
     ??Subroutine175_0                                  5
     ?Subroutine110                                     8
     ?Subroutine139                                     9
     zclSE_HdlInSpecificCommands                      108
     ?Subroutine62                                      7
     zclSE_ProcessInSimpleMeteringCmds
                                                      285
     ?Subroutine47                                      8
     ??Subroutine165_0                                  5
     ?Subroutine45                                     12
     ??Subroutine166_0                                 10
     ?Subroutine42                                      4
     ??Subroutine167_0                                  4
     ?Subroutine103                                     3
     ??Subroutine168_0                                 10
     ?Subroutine26                                      8
     ??Subroutine169_0                                 21
     ?Subroutine15                                     36
     ?Subroutine49                                     12
     ?Subroutine144                                    11
     ?Subroutine101                                    20
     ?Subroutine29                                     11
     ?Subroutine136                                    11
     ?Subroutine146                                    13
     ?Subroutine106                                    11
     ?Subroutine116                                     6
     ??Subroutine180_0                                  3
     ??Subroutine181_0                                  4
     ?Subroutine111                                     4
     ?Subroutine11                                      3
     ??Subroutine185_0                                  3
     ??Subroutine186_0                                  6
     zclSE_ProcessInCmd_SimpleMeter_GetProfileRsp
                                                      271
     ?Subroutine63                                      9
     ?Subroutine56                                      7
     ?Subroutine114                                    11
     ?Subroutine131                                     9
     ?Subroutine30                                      4
     ?Subroutine48                                      9
     ?Subroutine18                                      6
     zclSE_ProcessInCmd_SimpleMeter_ReqFastPollModeCmd
                                                      279
     ?Subroutine20                                      5
     ??Subroutine171_0                                  4
     ??Subroutine172_0                                  6
     ?Subroutine122                                     9
     ?Subroutine50                                      4
     ?Subroutine141                                     7
     zclSE_ProcessInPricingCmds                       352
     ?Subroutine8                                       5
     ?Subroutine40                                      3
     ??Subroutine173_0                                  6
     ?Subroutine36                                     15
     ?Subroutine41                                     10
     zclSE_ProcessInCmd_Pricing_PublishPrice
                                                      129
     ?Subroutine27                                     10
     ?Subroutine12                                     14
     ?Subroutine104                                    25
     zclSE_ProcessInCmd_Pricing_PublishBlockPeriod
                                                       57
     zclSE_ProcessInMessageCmds                       150
     ?Subroutine35                                      4
     ?Subroutine13                                      6
     zclSE_ProcessInCmd_Message_DisplayMessage
                                                       79
     zclSE_ProcessInLoadControlCmds                   189
     zclSE_ProcessInCmd_LoadControl_LoadControlEvent
                                                      304
     zclSE_ProcessInCmd_LoadControl_ReportEventStatus
                                                      175
     zclSE_ProcessInTunnelingCmds                     250
     ?Subroutine44                                      5
     ??Subroutine178_0                                  4
     ?Subroutine21                                      3
     ??Subroutine179_0                                 23
     ?Subroutine55                                      5
     ?Subroutine53                                     11
     ?Subroutine79                                      6
     ??Subroutine184_0                                 13
     ?Subroutine121                                    13
     ?Subroutine113                                    10
     zclSE_ProcessInCmd_Tunneling_RequestTunnel
                                                      147
     ?Subroutine60                                      3
     zclSE_ProcessInCmd_Tunneling_TransferData
                                                      146
     zclSE_ProcessInCmd_Tunneling_TransferDataError
                                                       79
     ?Subroutine109                                    17
     zclSE_ProcessInCmd_Tunneling_AckTransferData
                                                       73
     ?Subroutine10                                      4
     ?Subroutine58                                      5
     ?Subroutine71                                     12
     ?Subroutine22                                     32
     zclSE_ProcessInCmd_Tunneling_ReadyData
                                                       75
     ?Subroutine130                                     4
     zclSE_ParseInCmd_PublishPrice                    531
     ?Subroutine7                                       5
     ?Subroutine89                                      6
     ?Subroutine88                                      9
     ?Subroutine85                                      4
     ??Subroutine188_0                                  4
     ?Subroutine132                                     4
     ?Subroutine74                                      4
     ??Subroutine189_0                                  9
     ?Subroutine70                                     15
     ?Subroutine78                                      5
     ?Subroutine67                                      8
     ?Subroutine54                                      8
     ?Subroutine134                                     1
     ??Subroutine196_0                                 10
     ?Subroutine145                                    10
     ?Subroutine127                                    14
     ?Subroutine75                                      4
     ?Subroutine119                                     7
     ?Subroutine73                                      8
     ?Subroutine72                                      4
     ?Subroutine69                                      5
     ?Subroutine32                                      3
     ??Subroutine197_0                                  4
     ?Subroutine115                                    10
     ?Subroutine97                                      7
     ??Subroutine198_0                                  8
     ?Subroutine125                                     4
     ?Subroutine147                                     9
     ?Subroutine118                                    22
     ?Subroutine143                                     5
     zclSE_ParseInCmd_PublishBlockPeriod
                                                       77
     ?Subroutine9                                       5
     ??Subroutine190_0                                  4
     ?Subroutine98                                      5
     ??Subroutine191_0                                  4
     ?Subroutine99                                      8
     ?Subroutine86                                     18
     ?Subroutine133                                     1
     zclSE_ParseInCmd_DisplayMessage
                                                      221
     ?Subroutine100                                    14
     ??Subroutine195_0                                  8
     ?Subroutine19                                     81
     zclSE_ParseInCmd_CancelMessage                    17
     zclSE_ParseInCmd_MessageConfirmation
                                                       52
     zclSE_ParseInCmd_LoadControlEvent
                                                      128
     ?Subroutine87                                     17
     ?Subroutine25                                     12
     zclSE_ParseInCmd_CancelLoadControlEvent
                                                       43
     ?Subroutine33                                     21
     zclSE_ParseInCmd_ReportEventStatus
                                                      162
     zclSE_ParseInCmd_TransferData                     42
     __Constant_ffffffff                                4
     ??zclSE_SimpleMetering_Send_GetProfileCmd?relay    6
     ??zclSE_SimpleMetering_Send_GetProfileRsp?relay    6
     ??zclSE_SimpleMetering_Send_ReqMirrorRsp?relay     6
     ??zclSE_SimpleMetering_Send_RemMirrorRsp?relay     6
     ??zclSE_SimpleMetering_Send_ReqFastPollModeCmd?    6
     ??zclSE_SimpleMetering_Send_ReqFastPollModeRsp?    6
     ??zclSE_Pricing_Send_GetScheduledPrice?relay       6
     ??zclSE_Pricing_Send_PublishPrice?relay            6
     ??zclSE_Pricing_Send_PriceAcknowledgement?relay    6
     ??zclSE_Pricing_Send_GetBlockPeriod?relay          6
     ??zclSE_Pricing_Send_PublishBlockPeriod?relay      6
     ??zclSE_Message_Send_DisplayMessage?relay          6
     ??zclSE_Message_Send_CancelMessage?relay           6
     ??zclSE_Message_Send_MessageConfirmation?relay     6
     ??zclSE_LoadControl_Send_LoadControlEvent?relay    6
     ??zclSE_LoadControl_Send_CancelLoadControlEvent    6
     ??zclSE_LoadControl_Send_ReportEventStatus?rela    6
     ??zclSE_LoadControl_Send_GetScheduledEvent?rela    6
     ??zclSE_Tunneling_Send_RequestTunnel?relay         6
     ??zclSE_Tunneling_Send_ReqTunnelRsp?relay          6
     ??zclSE_Tunneling_Send_CloseTunnel?relay           6
     ??zclSE_Tunneling_Send_TransferData?relay          6
     ??zclSE_Tunneling_Send_TransferDataError?relay     6
     ??zclSE_Tunneling_Send_AckTransferData?relay       6
     ??zclSE_Tunneling_Send_ReadyData?relay             6
     ??zclSE_RegisterCmdCallbacks?relay                 6
     ??zclSE_HdlIncoming?relay                          6
     ??zclSE_HdlInSpecificCommands?relay                6
     ??zclSE_ProcessInSimpleMeteringCmds?relay          6
     ??zclSE_ProcessInCmd_SimpleMeter_GetProfileRsp?    6
     ??zclSE_ProcessInCmd_SimpleMeter_ReqFastPollMod    6
     ??zclSE_ProcessInPricingCmds?relay                 6
     ??zclSE_ProcessInCmd_Pricing_PublishPrice?relay    6
     ??zclSE_ProcessInCmd_Pricing_PublishBlockPeriod    6
     ??zclSE_ProcessInMessageCmds?relay                 6
     ??zclSE_ProcessInCmd_Message_DisplayMessage?rel    6
     ??zclSE_ProcessInLoadControlCmds?relay             6
     ??zclSE_ProcessInCmd_LoadControl_LoadControlEve    6
     ??zclSE_ProcessInCmd_LoadControl_ReportEventSta    6
     ??zclSE_ProcessInTunnelingCmds?relay               6
     ??zclSE_ProcessInCmd_Tunneling_RequestTunnel?re    6
     ??zclSE_ProcessInCmd_Tunneling_TransferData?rel    6
     ??zclSE_ProcessInCmd_Tunneling_TransferDataErro    6
     ??zclSE_ProcessInCmd_Tunneling_AckTransferData?    6
     ??zclSE_ProcessInCmd_Tunneling_ReadyData?relay     6
     ??zclSE_ParseInCmd_PublishPrice?relay              6
     ??zclSE_ParseInCmd_PublishBlockPeriod?relay        6
     ??zclSE_ParseInCmd_DisplayMessage?relay            6
     ??zclSE_ParseInCmd_CancelMessage?relay             6
     ??zclSE_ParseInCmd_MessageConfirmation?relay       6
     ??zclSE_ParseInCmd_LoadControlEvent?relay          6
     ??zclSE_ParseInCmd_CancelLoadControlEvent?relay    6
     ??zclSE_ParseInCmd_ReportEventStatus?relay         6
     ??zclSE_ParseInCmd_TransferData?relay              6

 
 10 747 bytes in segment BANKED_CODE
    324 bytes in segment BANK_RELAYS
      4 bytes in segment XDATA_ROM_C
      3 bytes in segment XDATA_Z
 
 11 071 bytes of CODE  memory
      0 bytes of CONST memory (+ 4 bytes shared)
      3 bytes of XDATA memory

Errors: none
Warnings: none
